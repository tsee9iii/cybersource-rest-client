"use strict";
/**
 * CyberSource Merged Spec
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.CardProcessingConfigFeaturesCardNotPresentProcessors = exports.CardProcessingConfigFeaturesCardNotPresentPayoutsCurrencies = exports.CardProcessingConfigFeaturesCardNotPresentPayouts = exports.CardProcessingConfigFeaturesCardNotPresentInstallment = exports.CardProcessingConfigFeaturesCardNotPresent = exports.CardProcessingConfigFeatures = exports.CardProcessingConfigCommonProcessors = exports.CardProcessingConfigCommonPaymentTypes = exports.CardProcessingConfigCommonMerchantDescriptorInformation = exports.CardProcessingConfigCommonCurrencies1 = exports.CardProcessingConfigCommonCurrencies = exports.CardProcessingConfigCommonAcquirer = exports.CardProcessingConfigCommon = exports.CardProcessingConfig = exports.CapturePaymentRequest = exports.CancelSubscriptionResponseSubscriptionInformation = exports.CancelSubscriptionResponse = exports.Body3 = exports.Body2 = exports.Body1 = exports.Body = exports.Boardingv1registrationsRegistrationInformation = exports.Boardingv1registrationsProductInformationSelectedProducts = exports.Boardingv1registrationsProductInformation = exports.Boardingv1registrationsOrganizationInformationOwners = exports.Boardingv1registrationsOrganizationInformationKYCDepositBankAccount = exports.Boardingv1registrationsOrganizationInformationKYC = exports.Boardingv1registrationsOrganizationInformationBusinessInformationBusinessContact = exports.Boardingv1registrationsOrganizationInformationBusinessInformationAddress = exports.Boardingv1registrationsOrganizationInformationBusinessInformation = exports.Boardingv1registrationsOrganizationInformation = exports.Boardingv1registrationsIntegrationInformationTenantInformation = exports.Boardingv1registrationsIntegrationInformationTenantConfigurations = exports.Boardingv1registrationsIntegrationInformationOauth2 = exports.Boardingv1registrationsIntegrationInformation = exports.Boardingv1registrationsDocumentInformationSignedDocuments = exports.Boardingv1registrationsDocumentInformation = exports.Binv1binlookupTokenInformation = exports.Binv1binlookupProcessingInformationPayoutOptions = exports.Binv1binlookupProcessingInformation = exports.Binv1binlookupPaymentInformationCard = exports.Binv1binlookupPaymentInformation = exports.Binv1binlookupClientReferenceInformation = exports.AuthReversalRequest = exports.AddNegativeListRequest = exports.ActivateSubscriptionResponseSubscriptionInformation = exports.ActivateSubscriptionResponse = exports.ActivateDeactivatePlanResponse = exports.Accountupdaterv1batchesIncludedTokens = exports.Accountupdaterv1batchesIncluded = void 0;
exports.DmConfigThirdpartyProvider = exports.DmConfigThirdparty = exports.DmConfigProcessingOptions = exports.DmConfigPortfolioControls = exports.DmConfigOrganization = exports.DmConfig = exports.DeviceTransferRequest = exports.DeviceDeAssociateV3Request = exports.DeletePlanResponse = exports.CreateWebhook = exports.CreateSubscriptionResponseSubscriptionInformation = exports.CreateSubscriptionResponseLinks = exports.CreateSubscriptionResponse = exports.CreateSubscriptionRequest1 = exports.CreateSubscriptionRequest = exports.CreateSessionRequest = exports.CreateSessionReq = exports.CreateSearchRequest = exports.CreateReportSubscriptionRequest = exports.CreatePlanResponsePlanInformation = exports.CreatePlanResponse = exports.CreatePlanRequest = exports.CreatePaymentRequest = exports.CreatePaymentLinkRequest = exports.CreateOrderRequest = exports.CreateInvoiceRequest = exports.CreateCreditRequest = exports.CreateBundledDecisionManagerCaseRequest = exports.CreateBinLookupRequest = exports.CreateBillingAgreement = exports.CreateAdhocReportRequest = exports.CommerceSolutionsProductsTokenManagementConfigurationInformationConfigurationsVault = exports.CommerceSolutionsProductsTokenManagementConfigurationInformationConfigurations = exports.CommerceSolutionsProductsTokenManagementConfigurationInformation = exports.CommerceSolutionsProductsTokenManagement = exports.CommerceSolutionsProductsBinLookupConfigurationInformationConfigurations = exports.CommerceSolutionsProductsBinLookupConfigurationInformation = exports.CommerceSolutionsProductsBinLookup = exports.CommerceSolutionsProductsAccountUpdaterConfigurationInformationConfigurationsVisa = exports.CommerceSolutionsProductsAccountUpdaterConfigurationInformationConfigurationsMasterCard = exports.CommerceSolutionsProductsAccountUpdaterConfigurationInformationConfigurationsAmex = exports.CommerceSolutionsProductsAccountUpdaterConfigurationInformationConfigurations = exports.CommerceSolutionsProductsAccountUpdaterConfigurationInformation = exports.CommerceSolutionsProductsAccountUpdater = exports.CommerceSolutionsProducts = exports.CheckPayerAuthEnrollmentRequest = exports.CaseManagementCommentsRequest = exports.CaseManagementActionsRequest = exports.CardProcessingConfigFeaturesCardPresentProcessors = exports.CardProcessingConfigFeaturesCardPresent = void 0;
exports.GetPlanResponse = exports.GetPlanCodeResponse = exports.GetAllSubscriptionsResponseSubscriptions = exports.GetAllSubscriptionsResponseSubscriptionInformation = exports.GetAllSubscriptionsResponsePlanInformationBillingCycles = exports.GetAllSubscriptionsResponsePlanInformation = exports.GetAllSubscriptionsResponsePaymentInformationCustomer = exports.GetAllSubscriptionsResponsePaymentInformation = exports.GetAllSubscriptionsResponseOrderInformationBillTo = exports.GetAllSubscriptionsResponseOrderInformation = exports.GetAllSubscriptionsResponseLinks = exports.GetAllSubscriptionsResponse = exports.GetAllPlansResponsePlans = exports.GetAllPlansResponsePlanInformationBillingPeriod = exports.GetAllPlansResponsePlanInformationBillingCycles = exports.GetAllPlansResponsePlanInformation = exports.GetAllPlansResponseOrderInformationAmountDetails = exports.GetAllPlansResponseOrderInformation = exports.GetAllPlansResponseLinks = exports.GetAllPlansResponse = exports.GenerateUnifiedCheckoutCaptureContextRequest = exports.GenerateCaptureContextRequest = exports.FraudMarkingActionRequest = exports.ECheckConfigUnderwriting = exports.ECheckConfigFeaturesAccountValidationServiceProcessors = exports.ECheckConfigFeaturesAccountValidationServiceInternalOnlyProcessors = exports.ECheckConfigFeaturesAccountValidationServiceInternalOnly = exports.ECheckConfigFeaturesAccountValidationService = exports.ECheckConfigFeatures = exports.ECheckConfigCommonProcessors = exports.ECheckConfigCommonInternalOnlyProcessors = exports.ECheckConfigCommonInternalOnly = exports.ECheckConfigCommon = exports.ECheckConfig = exports.Dmsv3devicesdeassociateDevices = exports.Dmsv2devicetransferDetails1 = exports.Dmsv2devicetransferDetails = exports.Dmsv2devicesPaymentProcessor = exports.DmConfigThirdpartyProviderTargusCredentials = exports.DmConfigThirdpartyProviderTargus = exports.DmConfigThirdpartyProviderSignifydCredentials = exports.DmConfigThirdpartyProviderSignifyd = exports.DmConfigThirdpartyProviderPerseuss = exports.DmConfigThirdpartyProviderEmailage = exports.DmConfigThirdpartyProviderEkataCredentials = exports.DmConfigThirdpartyProviderEkata = exports.DmConfigThirdpartyProviderCredilinkCredentials = exports.DmConfigThirdpartyProviderCredilink = exports.DmConfigThirdpartyProviderAccurintCredentials = exports.DmConfigThirdpartyProviderAccurint = void 0;
exports.InlineResponse2008 = exports.InlineResponse2007 = exports.InlineResponse2006 = exports.InlineResponse2005 = exports.InlineResponse2004 = exports.InlineResponse2003 = exports.InlineResponse2002IntegrationInformationTenantConfigurations = exports.InlineResponse2002IntegrationInformation = exports.InlineResponse2002 = exports.InlineResponse2001EmbeddedReversalLinksSelf = exports.InlineResponse2001EmbeddedReversalLinks = exports.InlineResponse2001EmbeddedReversal = exports.InlineResponse2001EmbeddedCaptureLinksSelf = exports.InlineResponse2001EmbeddedCaptureLinks = exports.InlineResponse2001EmbeddedCapture = exports.InlineResponse2001Embedded = exports.InlineResponse20014SourceRecord = exports.InlineResponse20014ResponseRecordAdditionalUpdates = exports.InlineResponse20014ResponseRecord = exports.InlineResponse20014Records = exports.InlineResponse20014 = exports.InlineResponse20013LinksReport = exports.InlineResponse20013Links = exports.InlineResponse20013Billing = exports.InlineResponse20013 = exports.InlineResponse20012Links = exports.InlineResponse20012EmbeddedTotals = exports.InlineResponse20012EmbeddedLinksReports = exports.InlineResponse20012EmbeddedLinks = exports.InlineResponse20012EmbeddedBatches = exports.InlineResponse20012Embedded = exports.InlineResponse20012 = exports.InlineResponse20011CustomizationMetadata = exports.InlineResponse20011 = exports.InlineResponse20010Expirations = exports.InlineResponse20010 = exports.InlineResponse2001 = exports.InlineResponse200 = exports.IncrementAuthRequest = exports.GetSubscriptionResponseReactivationInformation = exports.GetSubscriptionResponse1ShippingAddress = exports.GetSubscriptionResponse1PaymentInstrumentCard = exports.GetSubscriptionResponse1PaymentInstrumentBuyerInformation = exports.GetSubscriptionResponse1PaymentInstrumentBankAccount = exports.GetSubscriptionResponse1PaymentInstrument = exports.GetSubscriptionResponse1Links = exports.GetSubscriptionResponse1BuyerInformation = exports.GetSubscriptionResponse1 = exports.GetSubscriptionResponse = exports.GetSubscriptionCodeResponse = void 0;
exports.InlineResponse2061 = exports.InlineResponse206 = exports.InlineResponse202LinksStatus = exports.InlineResponse202Links = exports.InlineResponse202 = exports.InlineResponse201PaymentInformationTokenizedPaymentMethod = exports.InlineResponse201PaymentInformationEWallet = exports.InlineResponse201PaymentInformation = exports.InlineResponse201OrderInformationShipTo = exports.InlineResponse201OrderInformation = exports.InlineResponse2019Tokens = exports.InlineResponse2019 = exports.InlineResponse2018 = exports.InlineResponse2017 = exports.InlineResponse2016PayloadsTestPayload = exports.InlineResponse2016Payloads = exports.InlineResponse2016 = exports.InlineResponse2015 = exports.InlineResponse2014KeyInformationErrorInformationDetails = exports.InlineResponse2014KeyInformationErrorInformation = exports.InlineResponse2014KeyInformation = exports.InlineResponse2014 = exports.InlineResponse2013SetupsValueAddedServices = exports.InlineResponse2013SetupsRisk = exports.InlineResponse2013SetupsPaymentsDigitalPayments = exports.InlineResponse2013SetupsPaymentsCardProcessingSubscriptionStatus = exports.InlineResponse2013SetupsPaymentsCardProcessingConfigurationStatus = exports.InlineResponse2013SetupsPaymentsCardProcessing = exports.InlineResponse2013SetupsPaymentsAlternativePaymentMethodsConfigurationStatus = exports.InlineResponse2013SetupsPaymentsAlternativePaymentMethods = exports.InlineResponse2013SetupsPayments = exports.InlineResponse2013SetupsCommerceSolutions = exports.InlineResponse2013Setups = exports.InlineResponse2013RegistrationInformation = exports.InlineResponse2013ProductInformationSetups = exports.InlineResponse2013OrganizationInformation = exports.InlineResponse2013IntegrationInformationTenantConfigurations = exports.InlineResponse2013IntegrationInformation = exports.InlineResponse2013 = exports.InlineResponse2012PayoutInformationPushFunds = exports.InlineResponse2012PayoutInformationPullFunds = exports.InlineResponse2012PayoutInformation = exports.InlineResponse2012 = exports.InlineResponse20110 = exports.InlineResponse2011 = exports.InlineResponse201 = exports.InlineResponse200Content = exports.InlineResponse2009 = exports.InlineResponse2008PaymentProcessorToTerminalMap = exports.InlineResponse2008Devices = void 0;
exports.InlineResponseDefaultResponseStatus = exports.InlineResponseDefaultLinksNext = exports.InlineResponseDefaultLinks = exports.InlineResponseDefault = exports.InlineResponse503 = exports.InlineResponse502 = exports.InlineResponse500Errors = exports.InlineResponse5003 = exports.InlineResponse5002 = exports.InlineResponse5001 = exports.InlineResponse500 = exports.InlineResponse424Errors = exports.InlineResponse424 = exports.InlineResponse4221 = exports.InlineResponse422 = exports.InlineResponse412Errors = exports.InlineResponse412 = exports.InlineResponse410Errors = exports.InlineResponse410 = exports.InlineResponse409Errors = exports.InlineResponse409 = exports.InlineResponse4043 = exports.InlineResponse4042Details = exports.InlineResponse4042 = exports.InlineResponse4041 = exports.InlineResponse404 = exports.InlineResponse403Errors = exports.InlineResponse4032 = exports.InlineResponse4031 = exports.InlineResponse403 = exports.InlineResponse4011LinksSelf = exports.InlineResponse4011Links = exports.InlineResponse4011Fields = exports.InlineResponse4011 = exports.InlineResponse401 = exports.InlineResponse400Errors = exports.InlineResponse400Details = exports.InlineResponse4008Details = exports.InlineResponse4008 = exports.InlineResponse4007Details = exports.InlineResponse4007 = exports.InlineResponse4006Details = exports.InlineResponse4006 = exports.InlineResponse4005Fields = exports.InlineResponse4005 = exports.InlineResponse4004 = exports.InlineResponse4003 = exports.InlineResponse4002 = exports.InlineResponse4001 = exports.InlineResponse400 = void 0;
exports.Iplv2paymentlinksidPurchaseInformation = exports.Iplv2paymentlinksidProcessingInformation = exports.Iplv2paymentlinksidOrderInformation = exports.Iplv2paymentlinksPurchaseInformation = exports.Iplv2paymentlinksProcessingInformation = exports.Iplv2paymentlinksOrderInformationLineItems = exports.Iplv2paymentlinksOrderInformationAmountDetails = exports.Iplv2paymentlinksOrderInformation = exports.Invoicingv2invoicesidInvoiceInformation = exports.Invoicingv2invoicesProcessingInformation = exports.Invoicingv2invoicesOrderInformationLineItems = exports.Invoicingv2invoicesOrderInformationAmountDetailsTaxDetails = exports.Invoicingv2invoicesOrderInformationAmountDetailsFreight = exports.Invoicingv2invoicesOrderInformationAmountDetails = exports.Invoicingv2invoicesOrderInformation = exports.Invoicingv2invoicesInvoiceInformation = exports.Invoicingv2invoicesCustomerInformationCompany = exports.Invoicingv2invoicesCustomerInformation = exports.Invoicingv2invoicesClientReferenceInformationPartner = exports.Invoicingv2invoicesClientReferenceInformation = exports.Invoicingv2invoiceSettingsInvoiceSettingsInformation = exports.InvoicingV2InvoicesSend200Response = exports.InvoicingV2InvoicesPut200Response = exports.InvoicingV2InvoicesPublish200Response = exports.InvoicingV2InvoicesPost202Response = exports.InvoicingV2InvoicesPost201ResponseOrderInformationAmountDetails = exports.InvoicingV2InvoicesPost201ResponseOrderInformation = exports.InvoicingV2InvoicesPost201ResponseInvoiceInformationCustomLabels = exports.InvoicingV2InvoicesPost201ResponseInvoiceInformation = exports.InvoicingV2InvoicesPost201Response = exports.InvoicingV2InvoicesGet200ResponseTransactionDetails = exports.InvoicingV2InvoicesGet200ResponseInvoiceHistory = exports.InvoicingV2InvoicesGet200Response = exports.InvoicingV2InvoicesCancel200Response = exports.InvoicingV2InvoicesAllGet502Response = exports.InvoicingV2InvoicesAllGet404Response = exports.InvoicingV2InvoicesAllGet400Response = exports.InvoicingV2InvoicesAllGet200ResponseOrderInformationAmountDetails = exports.InvoicingV2InvoicesAllGet200ResponseOrderInformation = exports.InvoicingV2InvoicesAllGet200ResponseLinks = exports.InvoicingV2InvoicesAllGet200ResponseInvoices = exports.InvoicingV2InvoicesAllGet200ResponseInvoiceInformation = exports.InvoicingV2InvoicesAllGet200ResponseCustomerInformation = exports.InvoicingV2InvoicesAllGet200Response = exports.InvoicingV2InvoiceSettingsGet200ResponseInvoiceSettingsInformationHeaderStyle = exports.InvoicingV2InvoiceSettingsGet200ResponseInvoiceSettingsInformation = exports.InvoicingV2InvoiceSettingsGet200Response = exports.InvoiceSettingsRequest = exports.IntimateBillingAgreement = exports.InlineResponseDefaultResponseStatusDetails = void 0;
exports.PaymentsProductsAlternativePaymentMethodsConfigurationInformationConfigurations = exports.PaymentsProductsAlternativePaymentMethodsConfigurationInformation = exports.PaymentsProductsAlternativePaymentMethods = exports.PaymentsProducts = exports.PaymentInstrumentListLinksSelf = exports.PaymentInstrumentListLinksPrev = exports.PaymentInstrumentListLinksNext = exports.PaymentInstrumentListLinksLast = exports.PaymentInstrumentListLinksFirst = exports.PaymentInstrumentListLinks = exports.PaymentInstrumentListEmbedded = exports.PaymentInstrumentList1EmbeddedPaymentInstruments = exports.PaymentInstrumentList1EmbeddedEmbedded = exports.PaymentInstrumentList1Embedded = exports.PaymentInstrumentList1 = exports.PaymentInstrumentList = exports.PayerAuthSetupRequest = exports.PayerAuthConfigCardTypesVerifiedByVisaCurrencies = exports.PayerAuthConfigCardTypesVerifiedByVisa = exports.PayerAuthConfigCardTypesJCBJSecure = exports.PayerAuthConfigCardTypesCB = exports.PayerAuthConfigCardTypes = exports.PayerAuthConfig = exports.PatchPaymentInstrumentRequest = exports.PatchInstrumentIdentifierRequest = exports.PatchCustomerShippingAddressRequest = exports.PatchCustomerRequest = exports.PatchCustomerPaymentInstrumentRequest = exports.OrderPaymentRequest = exports.OctCreatePaymentRequest = exports.Notificationsubscriptionsv2webhooksSecurityPolicyConfigAdditionalConfig = exports.Notificationsubscriptionsv2webhooksSecurityPolicyConfig = exports.Notificationsubscriptionsv2webhooksSecurityPolicy = exports.Notificationsubscriptionsv2webhooksRetryPolicy = exports.Notificationsubscriptionsv2webhooksProducts1 = exports.Notificationsubscriptionsv2webhooksProducts = exports.Notificationsubscriptionsv2productsorganizationIdEventTypes = exports.NetworkTokenServicesEnablementVisaTokenService = exports.NetworkTokenServicesEnablementMastercardDigitalEnablementService = exports.NetworkTokenServicesEnablement = exports.NetworkTokenEnrollment = exports.ModifyBillingAgreement = exports.MitVoidRequest = exports.MitReversalRequest = exports.Microformv2sessionsTransientTokenResponseOptions = exports.MerchantInitiatedTransactionObject = exports.Kmsegressv2keyssymKeyInformation = exports.Kmsegressv2keyssymClientReferenceInformation = exports.Kmsegressv2keysasymKeyInformation = exports.Kmsegressv2keysasymClientReferenceInformation = void 0;
exports.PaymentsProductsUnifiedCheckoutSubscriptionInformation = exports.PaymentsProductsUnifiedCheckoutConfigurationInformationConfigurationsFeaturesPaze = exports.PaymentsProductsUnifiedCheckoutConfigurationInformationConfigurationsFeatures = exports.PaymentsProductsUnifiedCheckoutConfigurationInformationConfigurations = exports.PaymentsProductsUnifiedCheckoutConfigurationInformation = exports.PaymentsProductsUnifiedCheckout = exports.PaymentsProductsTax = exports.PaymentsProductsServiceFeeConfigurationInformationConfigurationsProducts = exports.PaymentsProductsServiceFeeConfigurationInformationConfigurationsPaymentInformation = exports.PaymentsProductsServiceFeeConfigurationInformationConfigurationsMerchantInformation = exports.PaymentsProductsServiceFeeConfigurationInformationConfigurations = exports.PaymentsProductsServiceFeeConfigurationInformation = exports.PaymentsProductsServiceFee = exports.PaymentsProductsSecureAcceptanceConfigurationInformation = exports.PaymentsProductsSecureAcceptance = exports.PaymentsProductsPayoutsConfigurationInformationConfigurationsPushfunds = exports.PaymentsProductsPayoutsConfigurationInformationConfigurationsPullfunds = exports.PaymentsProductsPayoutsConfigurationInformationConfigurationsProcessorAccount = exports.PaymentsProductsPayoutsConfigurationInformationConfigurations = exports.PaymentsProductsPayoutsConfigurationInformation = exports.PaymentsProductsPayouts = exports.PaymentsProductsPayerAuthenticationConfigurationInformation = exports.PaymentsProductsPayerAuthentication = exports.PaymentsProductsECheckSubscriptionInformation = exports.PaymentsProductsECheckConfigurationInformation = exports.PaymentsProductsECheck = exports.PaymentsProductsDigitalPaymentsSubscriptionInformationFeatures = exports.PaymentsProductsDigitalPaymentsSubscriptionInformation = exports.PaymentsProductsDigitalPayments = exports.PaymentsProductsDifferentialFeeSubscriptionInformationFeaturesSurcharge = exports.PaymentsProductsDifferentialFeeSubscriptionInformationFeatures = exports.PaymentsProductsDifferentialFeeSubscriptionInformation = exports.PaymentsProductsDifferentialFee = exports.PaymentsProductsCybsReadyTerminal = exports.PaymentsProductsCurrencyConversionConfigurationInformationConfigurationsProcessors = exports.PaymentsProductsCurrencyConversionConfigurationInformationConfigurations = exports.PaymentsProductsCurrencyConversionConfigurationInformation = exports.PaymentsProductsCurrencyConversion = exports.PaymentsProductsCardProcessingSubscriptionInformationFeatures = exports.PaymentsProductsCardProcessingSubscriptionInformation = exports.PaymentsProductsCardProcessingConfigurationInformation = exports.PaymentsProductsCardProcessing = exports.PaymentsProductsCardPresentConnectSubscriptionInformation = exports.PaymentsProductsCardPresentConnectConfigurationInformationConfigurations = exports.PaymentsProductsCardPresentConnectConfigurationInformation = exports.PaymentsProductsCardPresentConnect = exports.PaymentsProductsAlternativePaymentMethodsSubscriptionInformation = exports.PaymentsProductsAlternativePaymentMethodsConfigurationInformationConfigurationsProcessors = exports.PaymentsProductsAlternativePaymentMethodsConfigurationInformationConfigurationsPaymentMethods = exports.PaymentsProductsAlternativePaymentMethodsConfigurationInformationConfigurationsAdditionalConfigurations = void 0;
exports.PtsV2CreateBillingAgreementPost400Response = exports.PtsV2CreateBillingAgreementPost201ResponseRiskInformationProcessorResults = exports.PtsV2CreateBillingAgreementPost201ResponseRiskInformation = exports.PtsV2CreateBillingAgreementPost201ResponseProcessorInformation = exports.PtsV2CreateBillingAgreementPost201ResponseLinks = exports.PtsV2CreateBillingAgreementPost201ResponseInstallmentInformation = exports.PtsV2CreateBillingAgreementPost201ResponseClientReferenceInformation = exports.PtsV2CreateBillingAgreementPost201ResponseAgreementInformation = exports.PtsV2CreateBillingAgreementPost201Response = exports.PtsV1TransactionBatchesIdGet200ResponseLinksTransactions = exports.PtsV1TransactionBatchesIdGet200ResponseLinks = exports.PtsV1TransactionBatchesIdGet200Response = exports.PtsV1TransactionBatchesGet500ResponseErrorInformation = exports.PtsV1TransactionBatchesGet500Response = exports.PtsV1TransactionBatchesGet400ResponseErrorInformationDetails = exports.PtsV1TransactionBatchesGet400ResponseErrorInformation = exports.PtsV1TransactionBatchesGet400Response = exports.PtsV1TransactionBatchesGet200ResponseTransactionBatches = exports.PtsV1TransactionBatchesGet200ResponseLinksSelf = exports.PtsV1TransactionBatchesGet200ResponseLinks = exports.PtsV1TransactionBatchesGet200Response = exports.PredefinedSubscriptionRequestBean = exports.PostRegistrationBody = exports.PostPaymentInstrumentRequest = exports.PostPaymentCredentialsRequest = exports.PostInstrumentIdentifierRequest = exports.PostInstrumentIdentifierEnrollmentRequest = exports.PostDeviceSearchRequestV3 = exports.PostCustomerShippingAddressRequest = exports.PostCustomerRequest = exports.PostCustomerPaymentInstrumentRequest = exports.PblPaymentLinksPost201ResponsePurchaseInformation = exports.PblPaymentLinksPost201ResponseOrderInformation = exports.PblPaymentLinksPost201ResponseLinks = exports.PblPaymentLinksPost201Response = exports.PblPaymentLinksGet200Response = exports.PblPaymentLinksAllGet404Response = exports.PblPaymentLinksAllGet400Response = exports.PblPaymentLinksAllGet200ResponsePurchaseInformation = exports.PblPaymentLinksAllGet200ResponseProcessingInformation = exports.PblPaymentLinksAllGet200ResponseOrderInformationLineItems = exports.PblPaymentLinksAllGet200ResponseOrderInformationAmountDetails = exports.PblPaymentLinksAllGet200ResponseOrderInformation = exports.PblPaymentLinksAllGet200ResponseLinks = exports.PblPaymentLinksAllGet200Response = exports.PaymentsStrongAuthIssuerInformation = exports.PaymentsProductsVirtualTerminalConfigurationInformation = exports.PaymentsProductsVirtualTerminal = exports.PaymentsProductsUnifiedCheckoutSubscriptionInformationFeaturesPazeForUnifiedCheckout = exports.PaymentsProductsUnifiedCheckoutSubscriptionInformationFeatures = void 0;
exports.PtsV2PaymentsOrderPost201ResponseOrderInformationShippingDetails = exports.PtsV2PaymentsOrderPost201ResponseOrderInformationShipTo = exports.PtsV2PaymentsOrderPost201ResponseOrderInformationBillTo = exports.PtsV2PaymentsOrderPost201ResponseOrderInformationAmountDetails = exports.PtsV2PaymentsOrderPost201ResponseOrderInformation = exports.PtsV2PaymentsOrderPost201ResponseBuyerInformationPersonalIdentification = exports.PtsV2PaymentsOrderPost201ResponseBuyerInformation = exports.PtsV2PaymentsOrderPost201Response = exports.PtsV2PaymentsCapturesPost400Response = exports.PtsV2PaymentsCapturesPost201ResponseProcessorInformation = exports.PtsV2PaymentsCapturesPost201ResponseProcessingInformation = exports.PtsV2PaymentsCapturesPost201ResponsePointOfSaleInformation = exports.PtsV2PaymentsCapturesPost201ResponseOrderInformationInvoiceDetails = exports.PtsV2PaymentsCapturesPost201ResponseOrderInformationAmountDetails = exports.PtsV2PaymentsCapturesPost201ResponseOrderInformation = exports.PtsV2PaymentsCapturesPost201ResponseLinks = exports.PtsV2PaymentsCapturesPost201ResponseEmbeddedActionsApCapture = exports.PtsV2PaymentsCapturesPost201ResponseEmbeddedActions = exports.PtsV2PaymentsCapturesPost201Response = exports.PtsV2ModifyBillingAgreementPost201ResponsePaymentInformationEWallet = exports.PtsV2ModifyBillingAgreementPost201ResponsePaymentInformationBank = exports.PtsV2ModifyBillingAgreementPost201ResponsePaymentInformation = exports.PtsV2ModifyBillingAgreementPost201ResponseOrderInformationShipTo = exports.PtsV2ModifyBillingAgreementPost201ResponseOrderInformationBillTo = exports.PtsV2ModifyBillingAgreementPost201ResponseOrderInformation = exports.PtsV2ModifyBillingAgreementPost201ResponseLinks = exports.PtsV2ModifyBillingAgreementPost201ResponseAgreementInformation = exports.PtsV2ModifyBillingAgreementPost201Response = exports.PtsV2IncrementalAuthorizationPatch400Response = exports.PtsV2IncrementalAuthorizationPatch201ResponseProcessorInformation = exports.PtsV2IncrementalAuthorizationPatch201ResponsePaymentInformationAccountFeatures = exports.PtsV2IncrementalAuthorizationPatch201ResponsePaymentInformation = exports.PtsV2IncrementalAuthorizationPatch201ResponseOrderInformationInvoiceDetails = exports.PtsV2IncrementalAuthorizationPatch201ResponseOrderInformation = exports.PtsV2IncrementalAuthorizationPatch201ResponseLinks = exports.PtsV2IncrementalAuthorizationPatch201ResponseErrorInformation = exports.PtsV2IncrementalAuthorizationPatch201ResponseClientReferenceInformation = exports.PtsV2IncrementalAuthorizationPatch201Response = exports.PtsV2CreditsPost201ResponseProcessingInformationBankTransferOptions = exports.PtsV2CreditsPost201ResponseProcessingInformation = exports.PtsV2CreditsPost201ResponsePaymentInformation = exports.PtsV2CreditsPost201ResponseCreditAmountDetails = exports.PtsV2CreditsPost201Response1ProcessorInformation = exports.PtsV2CreditsPost201Response1 = exports.PtsV2CreditsPost201Response = exports.PtsV2CreateOrderPost400Response = exports.PtsV2CreateOrderPost201ResponseProcessorInformation = exports.PtsV2CreateOrderPost201ResponseBuyerInformation = exports.PtsV2CreateOrderPost201Response = exports.PtsV2CreateBillingAgreementPost502Response = void 0;
exports.PtsV2PaymentsPost201ResponseOrderInformationAmountDetails = exports.PtsV2PaymentsPost201ResponseOrderInformation = exports.PtsV2PaymentsPost201ResponseMerchantInformationMerchantDescriptor = exports.PtsV2PaymentsPost201ResponseMerchantInformation = exports.PtsV2PaymentsPost201ResponseLinksSelf = exports.PtsV2PaymentsPost201ResponseLinks = exports.PtsV2PaymentsPost201ResponseIssuerInformation = exports.PtsV2PaymentsPost201ResponseInstallmentInformation = exports.PtsV2PaymentsPost201ResponseErrorInformationDetails = exports.PtsV2PaymentsPost201ResponseErrorInformation = exports.PtsV2PaymentsPost201ResponseEmbeddedActionsWATCHLISTSCREENING = exports.PtsV2PaymentsPost201ResponseEmbeddedActionsTOKENUPDATE = exports.PtsV2PaymentsPost201ResponseEmbeddedActionsTOKENCREATE = exports.PtsV2PaymentsPost201ResponseEmbeddedActionsDECISION = exports.PtsV2PaymentsPost201ResponseEmbeddedActionsCONSUMERAUTHENTICATION = exports.PtsV2PaymentsPost201ResponseEmbeddedActionsCAPTURE = exports.PtsV2PaymentsPost201ResponseEmbeddedActions = exports.PtsV2PaymentsPost201ResponseConsumerAuthenticationInformationStrongAuthentication = exports.PtsV2PaymentsPost201ResponseConsumerAuthenticationInformationIvr = exports.PtsV2PaymentsPost201ResponseConsumerAuthenticationInformation = exports.PtsV2PaymentsPost201ResponseClientReferenceInformation = exports.PtsV2PaymentsPost201ResponseBuyerInformation = exports.PtsV2PaymentsPost201Response2ProcessorInformation = exports.PtsV2PaymentsPost201Response2PaymentInformationEWallet = exports.PtsV2PaymentsPost201Response2PaymentInformation = exports.PtsV2PaymentsPost201Response2OrderInformationAmountDetails = exports.PtsV2PaymentsPost201Response2OrderInformation = exports.PtsV2PaymentsPost201Response2 = exports.PtsV2PaymentsPost201Response1ProcessorInformationAvs = exports.PtsV2PaymentsPost201Response1ProcessorInformation = exports.PtsV2PaymentsPost201Response1PaymentInformationPaymentTypeMethod = exports.PtsV2PaymentsPost201Response1PaymentInformationPaymentType = exports.PtsV2PaymentsPost201Response1PaymentInformationEWallet = exports.PtsV2PaymentsPost201Response1PaymentInformationBankAccount = exports.PtsV2PaymentsPost201Response1PaymentInformationBank = exports.PtsV2PaymentsPost201Response1PaymentInformation = exports.PtsV2PaymentsPost201Response1OrderInformationShipTo = exports.PtsV2PaymentsPost201Response1OrderInformationBillTo = exports.PtsV2PaymentsPost201Response1OrderInformationAmountDetails = exports.PtsV2PaymentsPost201Response1OrderInformation = exports.PtsV2PaymentsPost201Response1IssuerInformation = exports.PtsV2PaymentsPost201Response1ErrorInformationDetails = exports.PtsV2PaymentsPost201Response1ErrorInformation = exports.PtsV2PaymentsPost201Response1 = exports.PtsV2PaymentsPost201Response = exports.PtsV2PaymentsOrderPost201ResponseProcessorInformationSellerProtection = exports.PtsV2PaymentsOrderPost201ResponseProcessorInformation = exports.PtsV2PaymentsOrderPost201ResponseProcessingInformation = exports.PtsV2PaymentsOrderPost201ResponsePaymentInformationEWallet = exports.PtsV2PaymentsOrderPost201ResponsePaymentInformation = void 0;
exports.PtsV2PaymentsPost201ResponseTokenInformation = exports.PtsV2PaymentsPost201ResponseRiskInformationVelocityMorphing = exports.PtsV2PaymentsPost201ResponseRiskInformationVelocity = exports.PtsV2PaymentsPost201ResponseRiskInformationTravelLastDestination = exports.PtsV2PaymentsPost201ResponseRiskInformationTravelFirstDestination = exports.PtsV2PaymentsPost201ResponseRiskInformationTravelFirstDeparture = exports.PtsV2PaymentsPost201ResponseRiskInformationTravelActualFinalDestination = exports.PtsV2PaymentsPost201ResponseRiskInformationTravel = exports.PtsV2PaymentsPost201ResponseRiskInformationScore = exports.PtsV2PaymentsPost201ResponseRiskInformationRules = exports.PtsV2PaymentsPost201ResponseRiskInformationProfile = exports.PtsV2PaymentsPost201ResponseRiskInformationProcessorResults = exports.PtsV2PaymentsPost201ResponseRiskInformationIpAddress = exports.PtsV2PaymentsPost201ResponseRiskInformationInfoCodes = exports.PtsV2PaymentsPost201ResponseRiskInformation = exports.PtsV2PaymentsPost201ResponseProcessorInformationSellerProtection = exports.PtsV2PaymentsPost201ResponseProcessorInformationRouting = exports.PtsV2PaymentsPost201ResponseProcessorInformationMerchantAdvice = exports.PtsV2PaymentsPost201ResponseProcessorInformationElectronicVerificationResults = exports.PtsV2PaymentsPost201ResponseProcessorInformationCustomer = exports.PtsV2PaymentsPost201ResponseProcessorInformationConsumerAuthenticationResponse = exports.PtsV2PaymentsPost201ResponseProcessorInformationCardVerification = exports.PtsV2PaymentsPost201ResponseProcessorInformationAvs = exports.PtsV2PaymentsPost201ResponseProcessorInformationAchVerification = exports.PtsV2PaymentsPost201ResponseProcessorInformation = exports.PtsV2PaymentsPost201ResponseProcessingInformationPurchaseOptions = exports.PtsV2PaymentsPost201ResponseProcessingInformationCaptureOptions = exports.PtsV2PaymentsPost201ResponseProcessingInformationBankTransferOptions = exports.PtsV2PaymentsPost201ResponseProcessingInformationAuthorizationOptions = exports.PtsV2PaymentsPost201ResponseProcessingInformation = exports.PtsV2PaymentsPost201ResponsePointOfSaleInformationEmv = exports.PtsV2PaymentsPost201ResponsePointOfSaleInformation = exports.PtsV2PaymentsPost201ResponsePaymentInsightsInformationResponseInsights = exports.PtsV2PaymentsPost201ResponsePaymentInsightsInformationOrchestration = exports.PtsV2PaymentsPost201ResponsePaymentInsightsInformation = exports.PtsV2PaymentsPost201ResponsePaymentInformationTokenizedPaymentMethod = exports.PtsV2PaymentsPost201ResponsePaymentInformationTokenizedCard = exports.PtsV2PaymentsPost201ResponsePaymentInformationInstrumentIdentifier = exports.PtsV2PaymentsPost201ResponsePaymentInformationEWallet = exports.PtsV2PaymentsPost201ResponsePaymentInformationBankAccount = exports.PtsV2PaymentsPost201ResponsePaymentInformationBank = exports.PtsV2PaymentsPost201ResponsePaymentInformationAccountFeaturesBalances = exports.PtsV2PaymentsPost201ResponsePaymentInformationAccountFeatures = exports.PtsV2PaymentsPost201ResponsePaymentInformation = exports.PtsV2PaymentsPost201ResponsePaymentAccountInformationCard = exports.PtsV2PaymentsPost201ResponsePaymentAccountInformation = exports.PtsV2PaymentsPost201ResponseOrderInformationShipTo = exports.PtsV2PaymentsPost201ResponseOrderInformationRewardPointsDetails = exports.PtsV2PaymentsPost201ResponseOrderInformationInvoiceDetails = exports.PtsV2PaymentsPost201ResponseOrderInformationBillTo = void 0;
exports.Ptsv2billingagreementsMerchantInformation = exports.Ptsv2billingagreementsInstallmentInformation = exports.Ptsv2billingagreementsDeviceInformation = exports.Ptsv2billingagreementsConsumerAuthenticationInformation = exports.Ptsv2billingagreementsClientReferenceInformation = exports.Ptsv2billingagreementsBuyerInformation = exports.Ptsv2billingagreementsAgreementInformation = exports.Ptsv2billingagreementsAggregatorInformation = exports.PtsV2UpdateOrderPatch201Response = exports.PtsV2RetrievePaymentTokenGet502Response = exports.PtsV2RetrievePaymentTokenGet400Response = exports.PtsV2PayoutsPost400Response = exports.PtsV2PayoutsPost201ResponseRecipientInformationCard = exports.PtsV2PayoutsPost201ResponseRecipientInformation = exports.PtsV2PayoutsPost201ResponseProcessorInformation = exports.PtsV2PayoutsPost201ResponseProcessingInformation = exports.PtsV2PayoutsPost201ResponseOrderInformationAmountDetails = exports.PtsV2PayoutsPost201ResponseOrderInformation = exports.PtsV2PayoutsPost201ResponseMerchantInformationMerchantDescriptor = exports.PtsV2PayoutsPost201ResponseMerchantInformation = exports.PtsV2PayoutsPost201ResponseIssuerInformation = exports.PtsV2PayoutsPost201ResponseErrorInformation = exports.PtsV2PayoutsPost201Response = exports.PtsV2PaymentsVoidsPost400Response = exports.PtsV2PaymentsVoidsPost201ResponseVoidAmountDetails = exports.PtsV2PaymentsVoidsPost201ResponseProcessorInformation = exports.PtsV2PaymentsVoidsPost201Response = exports.PtsV2PaymentsReversalsPost400Response = exports.PtsV2PaymentsReversalsPost201ResponseReversalAmountDetails = exports.PtsV2PaymentsReversalsPost201ResponseProcessorInformation = exports.PtsV2PaymentsReversalsPost201ResponseIssuerInformation = exports.PtsV2PaymentsReversalsPost201ResponseAuthorizationInformation = exports.PtsV2PaymentsReversalsPost201Response = exports.PtsV2PaymentsRefundPost400Response = exports.PtsV2PaymentsRefundPost201ResponseRefundAmountDetails = exports.PtsV2PaymentsRefundPost201ResponseProcessorInformation = exports.PtsV2PaymentsRefundPost201ResponseOrderInformationAmountDetails = exports.PtsV2PaymentsRefundPost201ResponseOrderInformation = exports.PtsV2PaymentsRefundPost201ResponseLinks = exports.PtsV2PaymentsRefundPost201ResponseClientReferenceInformation = exports.PtsV2PaymentsRefundPost201Response = exports.PtsV2PaymentsPost502Response = exports.PtsV2PaymentsPost400Response = exports.PtsV2PaymentsPost201ResponseWatchlistScreeningInformationWatchListMatches = exports.PtsV2PaymentsPost201ResponseWatchlistScreeningInformationWatchList = exports.PtsV2PaymentsPost201ResponseWatchlistScreeningInformation = exports.PtsV2PaymentsPost201ResponseTokenInformationShippingAddress = exports.PtsV2PaymentsPost201ResponseTokenInformationPaymentInstrument = exports.PtsV2PaymentsPost201ResponseTokenInformationInstrumentIdentifier = exports.PtsV2PaymentsPost201ResponseTokenInformationCustomer = void 0;
exports.Ptsv2intentsidProcessingInformation = exports.Ptsv2intentsidPaymentInformation = exports.Ptsv2intentsidOrderInformation = exports.Ptsv2intentsidMerchantInformation = exports.Ptsv2intentsTravelInformationAgency = exports.Ptsv2intentsTravelInformation = exports.Ptsv2intentsSenderInformationAccount = exports.Ptsv2intentsSenderInformation = exports.Ptsv2intentsRecipientInformation = exports.Ptsv2intentsProcessingInformationAuthorizationOptions = exports.Ptsv2intentsProcessingInformation = exports.Ptsv2intentsPaymentInformationTokenizedPaymentMethod = exports.Ptsv2intentsPaymentInformationPaymentTypeMethod = exports.Ptsv2intentsPaymentInformationPaymentType = exports.Ptsv2intentsPaymentInformationEWallet = exports.Ptsv2intentsPaymentInformation = exports.Ptsv2intentsOrderInformationShipTo = exports.Ptsv2intentsOrderInformationLineItems = exports.Ptsv2intentsOrderInformationInvoiceDetails = exports.Ptsv2intentsOrderInformationBillTo = exports.Ptsv2intentsOrderInformationAmountDetails = exports.Ptsv2intentsOrderInformation = exports.Ptsv2intentsMerchantInformationMerchantDescriptor = exports.Ptsv2intentsMerchantInformation = exports.Ptsv2intentsEventInformation = exports.Ptsv2intentsClientReferenceInformation = exports.Ptsv2creditsSenderInformationAccount = exports.Ptsv2creditsSenderInformation = exports.Ptsv2creditsRecipientInformation = exports.Ptsv2creditsProcessingInformationRefundOptions = exports.Ptsv2creditsProcessingInformationPurchaseOptions = exports.Ptsv2creditsProcessingInformationJapanPaymentOptions = exports.Ptsv2creditsProcessingInformationElectronicBenefitsTransfer = exports.Ptsv2creditsProcessingInformationBankTransferOptions = exports.Ptsv2creditsProcessingInformation = exports.Ptsv2creditsInstallmentInformation = exports.Ptsv2billingagreementsidProcessingInformation = exports.Ptsv2billingagreementsidBuyerInformation = exports.Ptsv2billingagreementsidAgreementInformation = exports.Ptsv2billingagreementsProcessingInformation = exports.Ptsv2billingagreementsPaymentInformationTokenizedCard = exports.Ptsv2billingagreementsPaymentInformationPaymentTypeMethod = exports.Ptsv2billingagreementsPaymentInformationPaymentType = exports.Ptsv2billingagreementsPaymentInformationCard = exports.Ptsv2billingagreementsPaymentInformationBankAccount = exports.Ptsv2billingagreementsPaymentInformationBank = exports.Ptsv2billingagreementsPaymentInformation = exports.Ptsv2billingagreementsOrderInformationBillTo = exports.Ptsv2billingagreementsOrderInformation = exports.Ptsv2billingagreementsMerchantInformationMerchantDescriptor = void 0;
exports.Ptsv2paymentsMerchantInformationServiceFeeDescriptor = exports.Ptsv2paymentsMerchantInformationMerchantDescriptor = exports.Ptsv2paymentsMerchantInformation = exports.Ptsv2paymentsMerchantDefinedSecureInformation = exports.Ptsv2paymentsMerchantDefinedInformation = exports.Ptsv2paymentsIssuerInformation = exports.Ptsv2paymentsInvoiceDetails = exports.Ptsv2paymentsInstallmentInformation = exports.Ptsv2paymentsHostedPaymentInformationUserAgent = exports.Ptsv2paymentsHostedPaymentInformation = exports.Ptsv2paymentsHealthCareInformationAmountDetails = exports.Ptsv2paymentsHealthCareInformation = exports.Ptsv2paymentsDeviceInformationRawData = exports.Ptsv2paymentsDeviceInformation = exports.Ptsv2paymentsConsumerAuthenticationInformationStrongAuthenticationIssuerInformation = exports.Ptsv2paymentsConsumerAuthenticationInformationStrongAuthentication = exports.Ptsv2paymentsConsumerAuthenticationInformation = exports.Ptsv2paymentsClientReferenceInformationPartner = exports.Ptsv2paymentsClientReferenceInformation = exports.Ptsv2paymentsBuyerInformationPersonalIdentification = exports.Ptsv2paymentsBuyerInformation = exports.Ptsv2paymentsAgreementInformation = exports.Ptsv2paymentsAggregatorInformationSubMerchant = exports.Ptsv2paymentsAggregatorInformation = exports.Ptsv2paymentsAcquirerInformation = exports.Ptsv2paymentreferencesidintentsProcessingInformation = exports.Ptsv2paymentreferencesidintentsPaymentInformationEWallet = exports.Ptsv2paymentreferencesidintentsPaymentInformation = exports.Ptsv2paymentreferencesidintentsOrderInformation = exports.Ptsv2paymentreferencesUserInterfaceColor = exports.Ptsv2paymentreferencesUserInterface = exports.Ptsv2paymentreferencesTravelInformationAutoRental = exports.Ptsv2paymentreferencesTravelInformation = exports.Ptsv2paymentreferencesProcessingInformation = exports.Ptsv2paymentreferencesPaymentInformationOptions = exports.Ptsv2paymentreferencesPaymentInformationEWallet = exports.Ptsv2paymentreferencesPaymentInformationCard = exports.Ptsv2paymentreferencesPaymentInformationBankAccount = exports.Ptsv2paymentreferencesPaymentInformationBank = exports.Ptsv2paymentreferencesPaymentInformation = exports.Ptsv2paymentreferencesOrderInformationShipTo = exports.Ptsv2paymentreferencesOrderInformationLineItems = exports.Ptsv2paymentreferencesOrderInformationInvoiceDetails = exports.Ptsv2paymentreferencesOrderInformationBillTo = exports.Ptsv2paymentreferencesOrderInformationAmountDetails = exports.Ptsv2paymentreferencesOrderInformation = exports.Ptsv2paymentreferencesMerchantInformation = exports.Ptsv2paymentreferencesDeviceInformation = exports.Ptsv2paymentreferencesBuyerInformation = exports.Ptsv2paymentreferencesAgreementInformation = void 0;
exports.Ptsv2paymentsProcessingInformationLoanOptions = exports.Ptsv2paymentsProcessingInformationJapanPaymentOptionsBonuses = exports.Ptsv2paymentsProcessingInformationJapanPaymentOptions = exports.Ptsv2paymentsProcessingInformationElectronicBenefitsTransfer = exports.Ptsv2paymentsProcessingInformationCaptureOptions = exports.Ptsv2paymentsProcessingInformationBankTransferOptions = exports.Ptsv2paymentsProcessingInformationAuthorizationOptionsInitiatorMerchantInitiatedTransaction = exports.Ptsv2paymentsProcessingInformationAuthorizationOptionsInitiator = exports.Ptsv2paymentsProcessingInformationAuthorizationOptions = exports.Ptsv2paymentsProcessingInformation = exports.Ptsv2paymentsPointOfSaleInformationEmv = exports.Ptsv2paymentsPointOfSaleInformation = exports.Ptsv2paymentsPaymentInformationTokenizedPaymentMethod = exports.Ptsv2paymentsPaymentInformationTokenizedCard = exports.Ptsv2paymentsPaymentInformationShippingAddress = exports.Ptsv2paymentsPaymentInformationSepaDirectDebit = exports.Ptsv2paymentsPaymentInformationSepa = exports.Ptsv2paymentsPaymentInformationPaymentTypeMethod = exports.Ptsv2paymentsPaymentInformationPaymentType = exports.Ptsv2paymentsPaymentInformationPaymentInstrument = exports.Ptsv2paymentsPaymentInformationPaymentAccountReference = exports.Ptsv2paymentsPaymentInformationOptions = exports.Ptsv2paymentsPaymentInformationLegacyToken = exports.Ptsv2paymentsPaymentInformationInstrumentIdentifier = exports.Ptsv2paymentsPaymentInformationFluidData = exports.Ptsv2paymentsPaymentInformationEWallet = exports.Ptsv2paymentsPaymentInformationDirectDebitMandate = exports.Ptsv2paymentsPaymentInformationDirectDebit = exports.Ptsv2paymentsPaymentInformationCustomer = exports.Ptsv2paymentsPaymentInformationCard = exports.Ptsv2paymentsPaymentInformationBankAccount = exports.Ptsv2paymentsPaymentInformationBank = exports.Ptsv2paymentsPaymentInformation = exports.Ptsv2paymentsOrderInformationShippingDetails = exports.Ptsv2paymentsOrderInformationShipTo = exports.Ptsv2paymentsOrderInformationPassenger = exports.Ptsv2paymentsOrderInformationLineItems = exports.Ptsv2paymentsOrderInformationInvoiceDetailsTransactionAdviceAddendum = exports.Ptsv2paymentsOrderInformationInvoiceDetails = exports.Ptsv2paymentsOrderInformationBillToCompany = exports.Ptsv2paymentsOrderInformationBillTo = exports.Ptsv2paymentsOrderInformationAmountDetailsTaxDetails = exports.Ptsv2paymentsOrderInformationAmountDetailsSurcharge = exports.Ptsv2paymentsOrderInformationAmountDetailsOrder = exports.Ptsv2paymentsOrderInformationAmountDetailsOctsurcharge = exports.Ptsv2paymentsOrderInformationAmountDetailsCurrencyConversion = exports.Ptsv2paymentsOrderInformationAmountDetailsAmexAdditionalAmounts = exports.Ptsv2paymentsOrderInformationAmountDetails = exports.Ptsv2paymentsOrderInformation = exports.Ptsv2paymentsMerchantInformationServiceLocation = void 0;
exports.Ptsv2paymentsidcapturesBuyerInformation = exports.Ptsv2paymentsidcapturesAggregatorInformationSubMerchant = exports.Ptsv2paymentsidcapturesAggregatorInformation = exports.Ptsv2paymentsidTravelInformation = exports.Ptsv2paymentsidProcessingInformationAuthorizationOptionsInitiator = exports.Ptsv2paymentsidProcessingInformationAuthorizationOptions = exports.Ptsv2paymentsidProcessingInformation = exports.Ptsv2paymentsidOrderInformationAmountDetails = exports.Ptsv2paymentsidOrderInformation = exports.Ptsv2paymentsidMerchantInformation = exports.Ptsv2paymentsidClientReferenceInformationPartner = exports.Ptsv2paymentsidClientReferenceInformation = exports.Ptsv2paymentsWatchlistScreeningInformationWeights = exports.Ptsv2paymentsWatchlistScreeningInformation = exports.Ptsv2paymentsUnscheduledPaymentInformation = exports.Ptsv2paymentsTravelInformationVehicleData = exports.Ptsv2paymentsTravelInformationTransitAirlineTicketIssuer = exports.Ptsv2paymentsTravelInformationTransitAirlineLegs = exports.Ptsv2paymentsTravelInformationTransitAirlineAncillaryInformationService = exports.Ptsv2paymentsTravelInformationTransitAirlineAncillaryInformation = exports.Ptsv2paymentsTravelInformationTransitAirline = exports.Ptsv2paymentsTravelInformationTransit = exports.Ptsv2paymentsTravelInformationLodgingRoom = exports.Ptsv2paymentsTravelInformationLodging = exports.Ptsv2paymentsTravelInformationAutoRentalTaxDetails = exports.Ptsv2paymentsTravelInformationAutoRentalReturnAddress = exports.Ptsv2paymentsTravelInformationAutoRentalRentalAddress = exports.Ptsv2paymentsTravelInformationAutoRental = exports.Ptsv2paymentsTravelInformationAgency = exports.Ptsv2paymentsTravelInformation = exports.Ptsv2paymentsTokenInformationTokenProvisioningInformation = exports.Ptsv2paymentsTokenInformationShippingAddress = exports.Ptsv2paymentsTokenInformationPaymentInstrument = exports.Ptsv2paymentsTokenInformation = exports.Ptsv2paymentsSenderInformationAccount = exports.Ptsv2paymentsSenderInformation = exports.Ptsv2paymentsRiskInformationProfile = exports.Ptsv2paymentsRiskInformationBuyerHistoryCustomerAccount = exports.Ptsv2paymentsRiskInformationBuyerHistoryAccountHistory = exports.Ptsv2paymentsRiskInformationBuyerHistory = exports.Ptsv2paymentsRiskInformationAuxiliaryData = exports.Ptsv2paymentsRiskInformation = exports.Ptsv2paymentsRecurringPaymentInformation = exports.Ptsv2paymentsRecipientInformation = exports.Ptsv2paymentsPromotionInformation = exports.Ptsv2paymentsProcessorInformationReversal = exports.Ptsv2paymentsProcessorInformationAuthorizationOptions = exports.Ptsv2paymentsProcessorInformation = exports.Ptsv2paymentsProcessingInformationRecurringOptions = exports.Ptsv2paymentsProcessingInformationPurchaseOptions = void 0;
exports.Ptsv2paymentsidvoidsPaymentInformation = exports.Ptsv2paymentsidvoidsOrderInformation = exports.Ptsv2paymentsidvoidsMerchantInformation = exports.Ptsv2paymentsidvoidsAgreementInformation = exports.Ptsv2paymentsidreversalsReversalInformationAmountDetails = exports.Ptsv2paymentsidreversalsReversalInformation = exports.Ptsv2paymentsidreversalsProcessingInformation = exports.Ptsv2paymentsidreversalsPointOfSaleInformationEmv = exports.Ptsv2paymentsidreversalsPointOfSaleInformation = exports.Ptsv2paymentsidreversalsPaymentInformationPaymentTypeMethod = exports.Ptsv2paymentsidreversalsPaymentInformationPaymentType = exports.Ptsv2paymentsidreversalsPaymentInformation = exports.Ptsv2paymentsidreversalsOrderInformationLineItems = exports.Ptsv2paymentsidreversalsOrderInformationAmountDetails = exports.Ptsv2paymentsidreversalsOrderInformation = exports.Ptsv2paymentsidreversalsClientReferenceInformationPartner = exports.Ptsv2paymentsidreversalsClientReferenceInformation = exports.Ptsv2paymentsidrefundsProcessingInformationRefundOptions = exports.Ptsv2paymentsidrefundsProcessingInformationRecurringOptions = exports.Ptsv2paymentsidrefundsProcessingInformation = exports.Ptsv2paymentsidrefundsPointOfSaleInformation = exports.Ptsv2paymentsidrefundsPaymentInformationPaymentType = exports.Ptsv2paymentsidrefundsPaymentInformationEWallet = exports.Ptsv2paymentsidrefundsPaymentInformationCard = exports.Ptsv2paymentsidrefundsPaymentInformationBankAccount = exports.Ptsv2paymentsidrefundsPaymentInformationBank = exports.Ptsv2paymentsidrefundsPaymentInformation = exports.Ptsv2paymentsidrefundsOrderInformationLineItems = exports.Ptsv2paymentsidrefundsOrderInformation = exports.Ptsv2paymentsidrefundsMerchantInformation = exports.Ptsv2paymentsidrefundsClientReferenceInformation = exports.Ptsv2paymentsidcapturesProcessingInformationCaptureOptions = exports.Ptsv2paymentsidcapturesProcessingInformationAuthorizationOptions = exports.Ptsv2paymentsidcapturesProcessingInformation = exports.Ptsv2paymentsidcapturesPointOfSaleInformationEmv = exports.Ptsv2paymentsidcapturesPointOfSaleInformation = exports.Ptsv2paymentsidcapturesPaymentInformationPaymentTypeMethod = exports.Ptsv2paymentsidcapturesPaymentInformationPaymentType = exports.Ptsv2paymentsidcapturesPaymentInformationCard = exports.Ptsv2paymentsidcapturesPaymentInformation = exports.Ptsv2paymentsidcapturesOrderInformationShippingDetails = exports.Ptsv2paymentsidcapturesOrderInformationShipTo = exports.Ptsv2paymentsidcapturesOrderInformationInvoiceDetails = exports.Ptsv2paymentsidcapturesOrderInformationBillTo = exports.Ptsv2paymentsidcapturesOrderInformationAmountDetails = exports.Ptsv2paymentsidcapturesOrderInformation = exports.Ptsv2paymentsidcapturesMerchantInformation = exports.Ptsv2paymentsidcapturesInstallmentInformation = exports.Ptsv2paymentsidcapturesDeviceInformation = exports.Ptsv2paymentsidcapturesBuyerInformationPersonalIdentification = void 0;
exports.Rbsv1subscriptionsidSubscriptionInformation = exports.Rbsv1subscriptionsidPlanInformation = exports.Rbsv1subscriptionsidOrderInformationAmountDetails = exports.Rbsv1subscriptionsidOrderInformation = exports.Rbsv1subscriptionsSubscriptionInformation = exports.Rbsv1subscriptionsProcessingInformationAuthorizationOptionsInitiator = exports.Rbsv1subscriptionsProcessingInformationAuthorizationOptions = exports.Rbsv1subscriptionsProcessingInformation = exports.Rbsv1subscriptionsPlanInformation = exports.Rbsv1subscriptionsPaymentInformationCustomer = exports.Rbsv1subscriptionsPaymentInformation = exports.Rbsv1subscriptionsClientReferenceInformationPartner = exports.Rbsv1subscriptionsClientReferenceInformation = exports.Rbsv1plansidProcessingInformationSubscriptionBillingOptions = exports.Rbsv1plansidProcessingInformation = exports.Rbsv1plansidPlanInformation = exports.Rbsv1plansPlanInformationBillingCycles = exports.Rbsv1plansPlanInformation = exports.Rbsv1plansOrderInformationAmountDetails = exports.Rbsv1plansOrderInformation = exports.Rbsv1plansClientReferenceInformation = exports.Ptsv2voidsProcessingInformation = exports.Ptsv2refreshpaymentstatusidProcessingInformation = exports.Ptsv2refreshpaymentstatusidPaymentInformationPaymentType = exports.Ptsv2refreshpaymentstatusidPaymentInformationCustomer = exports.Ptsv2refreshpaymentstatusidPaymentInformation = exports.Ptsv2refreshpaymentstatusidClientReferenceInformation = exports.Ptsv2refreshpaymentstatusidAgreementInformation = exports.Ptsv2payoutsSenderInformationAccount = exports.Ptsv2payoutsSenderInformation = exports.Ptsv2payoutsRecipientInformation = exports.Ptsv2payoutsProcessingInformationPurchaseOptions = exports.Ptsv2payoutsProcessingInformationPayoutsOptions = exports.Ptsv2payoutsProcessingInformationFundingOptionsInitiator = exports.Ptsv2payoutsProcessingInformationFundingOptions = exports.Ptsv2payoutsProcessingInformation = exports.Ptsv2payoutsPaymentInformationCard = exports.Ptsv2payoutsPaymentInformation = exports.Ptsv2payoutsOrderInformationBillTo = exports.Ptsv2payoutsOrderInformationAmountDetailsSurcharge = exports.Ptsv2payoutsOrderInformationAmountDetails = exports.Ptsv2payoutsOrderInformation = exports.Ptsv2payoutsMerchantInformationMerchantDescriptor = exports.Ptsv2payoutsMerchantInformation = exports.Ptsv2payoutsClientReferenceInformation = exports.Ptsv2payoutsAggregatorInformationSubMerchant = exports.Ptsv2payoutsAggregatorInformation = exports.Ptsv2paymenttokensProcessingInformation = exports.Ptsv2paymenttokensPaymentInformation = exports.Ptsv2paymentsidvoidsProcessingInformation = void 0;
exports.RiskProductsDecisionManagerConfigurationInformation = exports.RiskProductsDecisionManager = exports.RiskProducts = exports.RevokeCertificateRequest = exports.Request = exports.Reportingv3reportsReportPreferences = exports.Reportingv3reportsReportFilters = exports.Reportingv3ReportDownloadsGet400ResponseDetails = exports.Reportingv3ReportDownloadsGet400Response = exports.ReportingV3RetrievalSummariesGet200Response = exports.ReportingV3RetrievalDetailsGet200ResponseRetrievalDetails = exports.ReportingV3RetrievalDetailsGet200Response = exports.ReportingV3ReportsIdGet200Response = exports.ReportingV3ReportsGet200ResponseReportSearchResults = exports.ReportingV3ReportsGet200ResponseLinkReportDownload = exports.ReportingV3ReportsGet200ResponseLink = exports.ReportingV3ReportsGet200Response = exports.ReportingV3ReportSubscriptionsGet200ResponseSubscriptions = exports.ReportingV3ReportSubscriptionsGet200Response = exports.ReportingV3ReportDefinitionsNameGet200ResponseDefaultSettings = exports.ReportingV3ReportDefinitionsNameGet200ResponseAttributes = exports.ReportingV3ReportDefinitionsNameGet200Response = exports.ReportingV3ReportDefinitionsGet200ResponseReportDefinitions = exports.ReportingV3ReportDefinitionsGet200Response = exports.ReportingV3PurchaseRefundDetailsGet200ResponseSettlements = exports.ReportingV3PurchaseRefundDetailsGet200ResponseSettlementStatuses = exports.ReportingV3PurchaseRefundDetailsGet200ResponseRequestDetails = exports.ReportingV3PurchaseRefundDetailsGet200ResponseOthers = exports.ReportingV3PurchaseRefundDetailsGet200ResponseFeeAndFundingDetails = exports.ReportingV3PurchaseRefundDetailsGet200ResponseAuthorizations = exports.ReportingV3PurchaseRefundDetailsGet200Response = exports.ReportingV3PaymentBatchSummariesGet200ResponsePaymentBatchSummaries = exports.ReportingV3PaymentBatchSummariesGet200Response = exports.ReportingV3NotificationofChangesGet200ResponseNotificationOfChanges = exports.ReportingV3NotificationofChangesGet200Response = exports.ReportingV3NetFundingsGet200ResponseTotalPurchases = exports.ReportingV3NetFundingsGet200ResponseNetFundingSummaries = exports.ReportingV3NetFundingsGet200Response = exports.ReportingV3InterchangeClearingLevelDetailsGet200ResponseInterchangeClearingLevelDetails = exports.ReportingV3InterchangeClearingLevelDetailsGet200Response = exports.ReportingV3ConversionDetailsGet200ResponseNotes = exports.ReportingV3ConversionDetailsGet200ResponseConversionDetails = exports.ReportingV3ConversionDetailsGet200Response = exports.ReportingV3ChargebackSummariesGet200ResponseChargebackSummaries = exports.ReportingV3ChargebackSummariesGet200Response = exports.ReportingV3ChargebackDetailsGet200ResponseChargebackDetails = exports.ReportingV3ChargebackDetailsGet200Response = exports.RefundPaymentRequest = exports.RefundCaptureRequest = exports.RefreshPaymentStatusRequest = void 0;
exports.Riskv1authenticationsOrderInformationBillTo = exports.Riskv1authenticationsOrderInformationAmountDetails = exports.Riskv1authenticationsOrderInformation = exports.Riskv1authenticationsDeviceInformation = exports.Riskv1authenticationsBuyerInformation = exports.Riskv1authenticationresultsPaymentInformationTokenizedCard = exports.Riskv1authenticationresultsPaymentInformationFluidData = exports.Riskv1authenticationresultsPaymentInformationCard = exports.Riskv1authenticationresultsPaymentInformation = exports.Riskv1authenticationresultsOrderInformationAmountDetails = exports.Riskv1authenticationresultsOrderInformation = exports.Riskv1authenticationresultsDeviceInformation = exports.Riskv1authenticationresultsConsumerAuthenticationInformation = exports.Riskv1addressverificationsOrderInformationShipTo = exports.Riskv1addressverificationsOrderInformationLineItems = exports.Riskv1addressverificationsOrderInformationBillTo = exports.Riskv1addressverificationsOrderInformation = exports.Riskv1addressverificationsBuyerInformation = exports.RiskV1UpdatePost201Response = exports.RiskV1ExportComplianceInquiriesPost201ResponseErrorInformation = exports.RiskV1ExportComplianceInquiriesPost201Response = exports.RiskV1DecisionsPost400Response1 = exports.RiskV1DecisionsPost400Response = exports.RiskV1DecisionsPost201ResponsePaymentInformation = exports.RiskV1DecisionsPost201ResponseOrderInformationAmountDetails = exports.RiskV1DecisionsPost201ResponseOrderInformation = exports.RiskV1DecisionsPost201ResponseErrorInformation = exports.RiskV1DecisionsPost201ResponseConsumerAuthenticationInformation = exports.RiskV1DecisionsPost201ResponseClientReferenceInformation = exports.RiskV1DecisionsPost201Response = exports.RiskV1AuthenticationsPost400Response1 = exports.RiskV1AuthenticationsPost400Response = exports.RiskV1AuthenticationsPost201ResponseErrorInformation = exports.RiskV1AuthenticationsPost201Response = exports.RiskV1AuthenticationSetupsPost201ResponseErrorInformation = exports.RiskV1AuthenticationSetupsPost201ResponseConsumerAuthenticationInformation = exports.RiskV1AuthenticationSetupsPost201Response = exports.RiskV1AuthenticationResultsPost201ResponseConsumerAuthenticationInformation = exports.RiskV1AuthenticationResultsPost201Response = exports.RiskV1AddressVerificationsPost201ResponseErrorInformation = exports.RiskV1AddressVerificationsPost201ResponseAddressVerificationInformationStandardAddressAddress1 = exports.RiskV1AddressVerificationsPost201ResponseAddressVerificationInformationStandardAddress = exports.RiskV1AddressVerificationsPost201ResponseAddressVerificationInformationBarCode = exports.RiskV1AddressVerificationsPost201ResponseAddressVerificationInformation = exports.RiskV1AddressVerificationsPost201Response = exports.RiskProductsPortfolioRiskControlsConfigurationInformationConfigurations = exports.RiskProductsPortfolioRiskControlsConfigurationInformation = exports.RiskProductsPortfolioRiskControls = exports.RiskProductsFraudManagementEssentialsConfigurationInformation = exports.RiskProductsFraudManagementEssentials = void 0;
exports.Riskv1exportcomplianceinquiriesOrderInformationBillTo = exports.Riskv1exportcomplianceinquiriesOrderInformation = exports.Riskv1exportcomplianceinquiriesExportComplianceInformation = exports.Riskv1exportcomplianceinquiriesDeviceInformation = exports.Riskv1decisionsidmarkingRiskInformationMarkingDetails = exports.Riskv1decisionsidmarkingRiskInformation = exports.Riskv1decisionsidactionsProcessingInformation = exports.Riskv1decisionsidactionsDecisionInformation = exports.Riskv1decisionsTravelInformationPassengers = exports.Riskv1decisionsTravelInformationLegs = exports.Riskv1decisionsTravelInformation = exports.Riskv1decisionsTokenInformation = exports.Riskv1decisionsRiskInformation = exports.Riskv1decisionsProcessorInformationCardVerification = exports.Riskv1decisionsProcessorInformationAvs = exports.Riskv1decisionsProcessorInformation = exports.Riskv1decisionsProcessingInformation = exports.Riskv1decisionsPaymentInformationTokenizedCard = exports.Riskv1decisionsPaymentInformationCard = exports.Riskv1decisionsPaymentInformation = exports.Riskv1decisionsOrderInformationShippingDetails = exports.Riskv1decisionsOrderInformationShipTo = exports.Riskv1decisionsOrderInformationLineItems = exports.Riskv1decisionsOrderInformationBillTo = exports.Riskv1decisionsOrderInformationAmountDetails = exports.Riskv1decisionsOrderInformation = exports.Riskv1decisionsMerchantInformationMerchantDescriptor = exports.Riskv1decisionsMerchantInformation = exports.Riskv1decisionsMerchantDefinedInformation = exports.Riskv1decisionsDeviceInformation = exports.Riskv1decisionsConsumerAuthenticationInformationStrongAuthentication = exports.Riskv1decisionsConsumerAuthenticationInformation = exports.Riskv1decisionsClientReferenceInformationPartner = exports.Riskv1decisionsClientReferenceInformation = exports.Riskv1decisionsBuyerInformation = exports.Riskv1decisionsAcquirerInformation = exports.Riskv1authenticationsetupsTokenInformation = exports.Riskv1authenticationsetupsProcessingInformation = exports.Riskv1authenticationsetupsPaymentInformationTokenizedCard = exports.Riskv1authenticationsetupsPaymentInformationFluidData = exports.Riskv1authenticationsetupsPaymentInformationCustomer = exports.Riskv1authenticationsetupsPaymentInformationCard = exports.Riskv1authenticationsetupsPaymentInformation = exports.Riskv1authenticationsetupsClientReferenceInformation = exports.Riskv1authenticationsTravelInformation = exports.Riskv1authenticationsRiskInformation = exports.Riskv1authenticationsPaymentInformationTokenizedCard = exports.Riskv1authenticationsPaymentInformationCustomer = exports.Riskv1authenticationsPaymentInformation = exports.Riskv1authenticationsOrderInformationLineItems = void 0;
exports.TmsBinLookupPaymentAccountInformationFeatures = exports.TmsBinLookupPaymentAccountInformationCardBrands = exports.TmsBinLookupPaymentAccountInformationCard = exports.TmsBinLookupPaymentAccountInformation = exports.TmsBinLookupIssuerInformation = exports.TmsBinLookup = exports.TmsAuthorizationOptionsInitiatorMerchantInitiatedTransaction = exports.TmsAuthorizationOptionsInitiator = exports.TmsAuthorizationOptions = exports.TaxRequest = exports.SuspendSubscriptionResponseSubscriptionInformation = exports.SuspendSubscriptionResponse = exports.ShippingAddressListForCustomerLinksSelf = exports.ShippingAddressListForCustomerLinksPrev = exports.ShippingAddressListForCustomerLinksNext = exports.ShippingAddressListForCustomerLinksLast = exports.ShippingAddressListForCustomerLinksFirst = exports.ShippingAddressListForCustomerLinks = exports.ShippingAddressListForCustomerEmbedded = exports.ShippingAddressListForCustomer = exports.SearchRequest = exports.SaveSymEgressKey = exports.SaveAsymEgressKey = exports.SAConfigService = exports.SAConfigPaymentTypesCardTypesDiscover = exports.SAConfigPaymentTypesCardTypes = exports.SAConfigPaymentTypes = exports.SAConfigPaymentMethods = exports.SAConfigNotificationsMerchantNotifications = exports.SAConfigNotificationsCustomerNotifications = exports.SAConfigNotifications = exports.SAConfigContactInformation = exports.SAConfigCheckout = exports.SAConfig = exports.Riskv1liststypeentriesRiskInformationMarkingDetails = exports.Riskv1liststypeentriesRiskInformation = exports.Riskv1liststypeentriesPaymentInformationCard = exports.Riskv1liststypeentriesPaymentInformationBank = exports.Riskv1liststypeentriesPaymentInformation = exports.Riskv1liststypeentriesOrderInformationShipTo = exports.Riskv1liststypeentriesOrderInformationLineItems = exports.Riskv1liststypeentriesOrderInformationBillTo = exports.Riskv1liststypeentriesOrderInformationAddress = exports.Riskv1liststypeentriesOrderInformation = exports.Riskv1liststypeentriesDeviceInformation = exports.Riskv1liststypeentriesClientReferenceInformation = exports.Riskv1liststypeentriesBuyerInformation = exports.Riskv1exportcomplianceinquiriesOrderInformationShipTo = exports.Riskv1exportcomplianceinquiriesOrderInformationLineItems = exports.Riskv1exportcomplianceinquiriesOrderInformationBillToCompany = void 0;
exports.Tmsv2customersDefaultPaymentInstrument = exports.Tmsv2customersClientReferenceInformation = exports.Tmsv2customersBuyerInformation = exports.Tmsv2TokenizedCardPasscode = exports.Tmsv2TokenizedCardMetadataIssuer = exports.Tmsv2TokenizedCardMetadata = exports.Tmsv2TokenizedCardLinksSelf = exports.Tmsv2TokenizedCardLinks = exports.Tmsv2TokenizedCardCard = exports.Tmsv2TokenizedCard = exports.TmsTokenFormats = exports.TmsSensitivePrivileges = exports.TmsPaymentInstrumentProcessingInfoBankTransferOptions = exports.TmsPaymentInstrumentProcessingInfo = exports.TmsNullify = exports.TmsNetworkTokenServicesVisaTokenService = exports.TmsNetworkTokenServicesSynchronousProvisioning = exports.TmsNetworkTokenServicesPaymentCredentials = exports.TmsNetworkTokenServicesNotifications = exports.TmsNetworkTokenServicesMastercardDigitalEnablementService = exports.TmsNetworkTokenServicesAmericanExpressTokenService = exports.TmsNetworkTokenServices = exports.TmsEmbeddedInstrumentIdentifierProcessingInformation = exports.TmsEmbeddedInstrumentIdentifierMetadata = exports.TmsEmbeddedInstrumentIdentifierLinksSelf = exports.TmsEmbeddedInstrumentIdentifierLinksPaymentInstruments = exports.TmsEmbeddedInstrumentIdentifierLinks = exports.TmsEmbeddedInstrumentIdentifierIssuer = exports.TmsEmbeddedInstrumentIdentifierEmbedded = exports.TmsEmbeddedInstrumentIdentifierCard = exports.TmsEmbeddedInstrumentIdentifierBillTo = exports.TmsEmbeddedInstrumentIdentifierBankAccount = exports.TmsEmbeddedInstrumentIdentifier = exports.TmsCardArtIssuerLogoAssetLinksSelf = exports.TmsCardArtIssuerLogoAssetLinks = exports.TmsCardArtIssuerLogoAsset = exports.TmsCardArtIconAssetLinksSelf = exports.TmsCardArtIconAssetLinks = exports.TmsCardArtIconAsset = exports.TmsCardArtCombinedAssetLinksSelf = exports.TmsCardArtCombinedAssetLinks = exports.TmsCardArtCombinedAsset = exports.TmsCardArtBrandLogoAssetLinksSelf = exports.TmsCardArtBrandLogoAssetLinks = exports.TmsCardArtBrandLogoAsset = exports.TmsCardArt = exports.TmsBusinessInformationAddress = exports.TmsBusinessInformationAcquirer = exports.TmsBusinessInformation = exports.TmsBinLookupPaymentAccountInformationNetwork = void 0;
exports.TssV2TransactionsGet200ResponseOrderInformationAmountDetails = exports.TssV2TransactionsGet200ResponseOrderInformation = exports.TssV2TransactionsGet200ResponseMerchantInformationMerchantDescriptor = exports.TssV2TransactionsGet200ResponseMerchantInformation = exports.TssV2TransactionsGet200ResponseLinks = exports.TssV2TransactionsGet200ResponseInstallmentInformation = exports.TssV2TransactionsGet200ResponseFraudMarkingInformation = exports.TssV2TransactionsGet200ResponseErrorInformation = exports.TssV2TransactionsGet200ResponseDeviceInformation = exports.TssV2TransactionsGet200ResponseConsumerAuthenticationInformationStrongAuthentication = exports.TssV2TransactionsGet200ResponseConsumerAuthenticationInformation = exports.TssV2TransactionsGet200ResponseClientReferenceInformationPartner = exports.TssV2TransactionsGet200ResponseClientReferenceInformation = exports.TssV2TransactionsGet200ResponseBuyerInformation = exports.TssV2TransactionsGet200ResponseBankAccountValidation = exports.TssV2TransactionsGet200ResponseApplicationInformationApplications = exports.TssV2TransactionsGet200ResponseApplicationInformation = exports.TssV2TransactionsGet200Response = exports.TokenizedcardRequest = exports.TokenPermissions = exports.Tmsv2customersObjectInformation = exports.Tmsv2customersMetadata = exports.Tmsv2customersMerchantDefinedInformation = exports.Tmsv2customersLinksShippingAddress = exports.Tmsv2customersLinksSelf = exports.Tmsv2customersLinksPaymentInstruments = exports.Tmsv2customersLinks = exports.Tmsv2customersEmbeddedDefaultShippingAddressShipTo = exports.Tmsv2customersEmbeddedDefaultShippingAddressMetadata = exports.Tmsv2customersEmbeddedDefaultShippingAddressLinksSelf = exports.Tmsv2customersEmbeddedDefaultShippingAddressLinksCustomer = exports.Tmsv2customersEmbeddedDefaultShippingAddressLinks = exports.Tmsv2customersEmbeddedDefaultShippingAddress = exports.Tmsv2customersEmbeddedDefaultPaymentInstrumentMetadata = exports.Tmsv2customersEmbeddedDefaultPaymentInstrumentMerchantInformationMerchantDescriptor = exports.Tmsv2customersEmbeddedDefaultPaymentInstrumentMerchantInformation = exports.Tmsv2customersEmbeddedDefaultPaymentInstrumentLinksSelf = exports.Tmsv2customersEmbeddedDefaultPaymentInstrumentLinks = exports.Tmsv2customersEmbeddedDefaultPaymentInstrumentInstrumentIdentifier = exports.Tmsv2customersEmbeddedDefaultPaymentInstrumentEmbedded = exports.Tmsv2customersEmbeddedDefaultPaymentInstrumentCardTokenizedInformation = exports.Tmsv2customersEmbeddedDefaultPaymentInstrumentCard = exports.Tmsv2customersEmbeddedDefaultPaymentInstrumentBuyerInformationPersonalIdentification = exports.Tmsv2customersEmbeddedDefaultPaymentInstrumentBuyerInformationIssuedBy = exports.Tmsv2customersEmbeddedDefaultPaymentInstrumentBuyerInformation = exports.Tmsv2customersEmbeddedDefaultPaymentInstrumentBillTo = exports.Tmsv2customersEmbeddedDefaultPaymentInstrumentBankAccount = exports.Tmsv2customersEmbeddedDefaultPaymentInstrument = exports.Tmsv2customersEmbedded = exports.Tmsv2customersDefaultShippingAddress = void 0;
exports.TssV2TransactionsPost201ResponseEmbeddedOrderInformation = exports.TssV2TransactionsPost201ResponseEmbeddedMerchantInformation = exports.TssV2TransactionsPost201ResponseEmbeddedLinks = exports.TssV2TransactionsPost201ResponseEmbeddedErrorInformation = exports.TssV2TransactionsPost201ResponseEmbeddedConsumerAuthenticationInformation = exports.TssV2TransactionsPost201ResponseEmbeddedClientReferenceInformationPartner = exports.TssV2TransactionsPost201ResponseEmbeddedClientReferenceInformation = exports.TssV2TransactionsPost201ResponseEmbeddedApplicationInformationApplications = exports.TssV2TransactionsPost201ResponseEmbeddedApplicationInformation = exports.TssV2TransactionsPost201ResponseEmbedded = exports.TssV2TransactionsPost201Response = exports.TssV2TransactionsGet200ResponseTokenInformation = exports.TssV2TransactionsGet200ResponseSenderInformation = exports.TssV2TransactionsGet200ResponseRiskInformationScore = exports.TssV2TransactionsGet200ResponseRiskInformationRules = exports.TssV2TransactionsGet200ResponseRiskInformationProfile = exports.TssV2TransactionsGet200ResponseRiskInformation = exports.TssV2TransactionsGet200ResponseRecurringPaymentInformation = exports.TssV2TransactionsGet200ResponseProcessorInformationProcessor = exports.TssV2TransactionsGet200ResponseProcessorInformationMultiProcessorRouting = exports.TssV2TransactionsGet200ResponseProcessorInformationElectronicVerificationResults = exports.TssV2TransactionsGet200ResponseProcessorInformation = exports.TssV2TransactionsGet200ResponseProcessingInformationJapanPaymentOptions = exports.TssV2TransactionsGet200ResponseProcessingInformationCaptureOptions = exports.TssV2TransactionsGet200ResponseProcessingInformationBankTransferOptions = exports.TssV2TransactionsGet200ResponseProcessingInformationAuthorizationOptionsInitiator = exports.TssV2TransactionsGet200ResponseProcessingInformationAuthorizationOptions = exports.TssV2TransactionsGet200ResponseProcessingInformation = exports.TssV2TransactionsGet200ResponsePointOfSaleInformation = exports.TssV2TransactionsGet200ResponsePayoutOptions = exports.TssV2TransactionsGet200ResponsePaymentInformationPaymentType = exports.TssV2TransactionsGet200ResponsePaymentInformationNetwork = exports.TssV2TransactionsGet200ResponsePaymentInformationIssuerInformation = exports.TssV2TransactionsGet200ResponsePaymentInformationInvoice = exports.TssV2TransactionsGet200ResponsePaymentInformationInstrumentIdentifier = exports.TssV2TransactionsGet200ResponsePaymentInformationFluidData = exports.TssV2TransactionsGet200ResponsePaymentInformationFeatures = exports.TssV2TransactionsGet200ResponsePaymentInformationCustomer = exports.TssV2TransactionsGet200ResponsePaymentInformationCard = exports.TssV2TransactionsGet200ResponsePaymentInformationBrands = exports.TssV2TransactionsGet200ResponsePaymentInformationBankMandate = exports.TssV2TransactionsGet200ResponsePaymentInformationBankAccount = exports.TssV2TransactionsGet200ResponsePaymentInformationBank = exports.TssV2TransactionsGet200ResponsePaymentInformationAccountFeatures = exports.TssV2TransactionsGet200ResponsePaymentInformation = exports.TssV2TransactionsGet200ResponseOrderInformationShippingDetails = exports.TssV2TransactionsGet200ResponseOrderInformationShipTo = exports.TssV2TransactionsGet200ResponseOrderInformationLineItems = exports.TssV2TransactionsGet200ResponseOrderInformationInvoiceDetails = exports.TssV2TransactionsGet200ResponseOrderInformationBillTo = void 0;
exports.VTConfigCardNotPresentReceiptInformationEmailReceipt = exports.VTConfigCardNotPresentReceiptInformation = exports.VTConfigCardNotPresentGlobalPaymentInformationPaymentInformation = exports.VTConfigCardNotPresentGlobalPaymentInformationMerchantDefinedDataFields = exports.VTConfigCardNotPresentGlobalPaymentInformationBasicInformation = exports.VTConfigCardNotPresentGlobalPaymentInformation = exports.VTConfigCardNotPresent = exports.VTConfig = exports.V1FileDetailsGet200ResponseLinksSelf = exports.V1FileDetailsGet200ResponseLinksFiles = exports.V1FileDetailsGet200ResponseLinks = exports.V1FileDetailsGet200ResponseFileDetails = exports.V1FileDetailsGet200Response = exports.Upv1capturecontextsOrderInformationShipTo = exports.Upv1capturecontextsOrderInformationBillToCompany = exports.Upv1capturecontextsOrderInformationBillTo = exports.Upv1capturecontextsOrderInformationAmountDetails = exports.Upv1capturecontextsOrderInformation = exports.Upv1capturecontextsCompleteMandate = exports.Upv1capturecontextsCaptureMandate = exports.UpdateWebhook = exports.UpdateSubscriptionResponse = exports.UpdateSubscription = exports.UpdateStatus = exports.UpdatePlanResponsePlanInformation = exports.UpdatePlanResponse = exports.UpdatePlanRequest = exports.UpdatePaymentLinkRequest = exports.UpdateOrderRequest = exports.UpdateInvoiceRequest = exports.UmsV1UsersGet200ResponseUsers = exports.UmsV1UsersGet200ResponseOrganizationInformation = exports.UmsV1UsersGet200ResponseContactInformation = exports.UmsV1UsersGet200ResponseAccountInformation = exports.UmsV1UsersGet200Response = exports.TssV2TransactionsPost201ResponseEmbeddedTransactionSummaries = exports.TssV2TransactionsPost201ResponseEmbeddedRiskInformationProvidersFingerprint = exports.TssV2TransactionsPost201ResponseEmbeddedRiskInformationProviders = exports.TssV2TransactionsPost201ResponseEmbeddedRiskInformation = exports.TssV2TransactionsPost201ResponseEmbeddedProcessorInformation = exports.TssV2TransactionsPost201ResponseEmbeddedProcessingInformation = exports.TssV2TransactionsPost201ResponseEmbeddedPointOfSaleInformationPartner = exports.TssV2TransactionsPost201ResponseEmbeddedPointOfSaleInformation = exports.TssV2TransactionsPost201ResponseEmbeddedPaymentInformationPaymentType = exports.TssV2TransactionsPost201ResponseEmbeddedPaymentInformationCard = exports.TssV2TransactionsPost201ResponseEmbeddedPaymentInformationBankAccount = exports.TssV2TransactionsPost201ResponseEmbeddedPaymentInformationBank = exports.TssV2TransactionsPost201ResponseEmbeddedPaymentInformation = exports.TssV2TransactionsPost201ResponseEmbeddedOrderInformationShipTo = exports.TssV2TransactionsPost201ResponseEmbeddedOrderInformationBillTo = void 0;
exports.CaptureApi = exports.CaptureApiApiKeys = exports.BinLookupApi = exports.BinLookupApiApiKeys = exports.BillingAgreementsApi = exports.BillingAgreementsApiApiKeys = exports.BatchesApi = exports.BatchesApiApiKeys = exports.ActivationCodesAndCertificatesApi = exports.ActivationCodesAndCertificatesApiApiKeys = exports.VoidAuth = exports.OAuth = exports.ApiKeyAuth = exports.HttpBasicAuth = exports.VoidTaxRequest = exports.VoidRefundRequest = exports.VoidPaymentRequest = exports.VoidCreditRequest = exports.VoidCaptureRequest = exports.VerifyCustomerAddressRequest = exports.Vasv2taxidClientReferenceInformationPartner = exports.Vasv2taxidClientReferenceInformation = exports.Vasv2taxTaxInformation = exports.Vasv2taxOrderInformationShippingDetails = exports.Vasv2taxOrderInformationShipTo = exports.Vasv2taxOrderInformationOrderOrigin = exports.Vasv2taxOrderInformationOrderAcceptance = exports.Vasv2taxOrderInformationLineItems = exports.Vasv2taxOrderInformationInvoiceDetails = exports.Vasv2taxOrderInformationBillTo = exports.Vasv2taxOrderInformation = exports.Vasv2taxMerchantInformation = exports.Vasv2taxClientReferenceInformation = exports.Vasv2taxBuyerInformation = exports.VasV2TaxVoidsPost400Response = exports.VasV2TaxVoid200ResponseVoidAmountDetails = exports.VasV2TaxVoid200Response = exports.VasV2PaymentsPost400Response = exports.VasV2PaymentsPost201ResponseTaxInformation = exports.VasV2PaymentsPost201ResponseOrderInformationTaxDetails = exports.VasV2PaymentsPost201ResponseOrderInformationLineItems = exports.VasV2PaymentsPost201ResponseOrderInformationJurisdiction = exports.VasV2PaymentsPost201ResponseOrderInformation = exports.VasV2PaymentsPost201ResponseLinks = exports.VasV2PaymentsPost201Response = exports.ValueAddedServicesProducts = exports.ValidateRequest = exports.ValidateExportComplianceRequest = exports.VTConfigCardNotPresentReceiptInformationOrderInformation = exports.VTConfigCardNotPresentReceiptInformationHeader = void 0;
exports.NotificationOfChangesApi = exports.NotificationOfChangesApiApiKeys = exports.NetFundingsApi = exports.NetFundingsApiApiKeys = exports.MicroformIntegrationApi = exports.MicroformIntegrationApiApiKeys = exports.MerchantBoardingApi = exports.MerchantBoardingApiApiKeys = exports.ManageWebhooksApi = exports.ManageWebhooksApiApiKeys = exports.InvoicesApi = exports.InvoicesApiApiKeys = exports.InvoiceSettingsApi = exports.InvoiceSettingsApiApiKeys = exports.InterchangeClearingLevelDetailsApi = exports.InterchangeClearingLevelDetailsApiApiKeys = exports.InstrumentIdentifierApi = exports.InstrumentIdentifierApiApiKeys = exports.DownloadXSDApi = exports.DownloadXSDApiApiKeys = exports.DownloadDTDApi = exports.DownloadDTDApiApiKeys = exports.DeviceSearchApi = exports.DeviceSearchApiApiKeys = exports.DeviceOperationsApi = exports.DeviceOperationsApiApiKeys = exports.DeviceDeAssociationApi = exports.DeviceDeAssociationApiApiKeys = exports.DecisionManagerApi = exports.DecisionManagerApiApiKeys = exports.CustomizationsApi = exports.CustomizationsApiApiKeys = exports.CustomerShippingAddressApi = exports.CustomerShippingAddressApiApiKeys = exports.CustomerPaymentInstrumentApi = exports.CustomerPaymentInstrumentApiApiKeys = exports.CustomerApi = exports.CustomerApiApiKeys = exports.CreditApi = exports.CreditApiApiKeys = exports.CreateNewWebhooksApi = exports.CreateNewWebhooksApiApiKeys = exports.CreateAndUpdateDevicesApi = exports.CreateAndUpdateDevicesApiApiKeys = exports.ConversionDetailsApi = exports.ConversionDetailsApiApiKeys = exports.ChargebackSummariesApi = exports.ChargebackSummariesApiApiKeys = exports.ChargebackDetailsApi = exports.ChargebackDetailsApiApiKeys = void 0;
exports.TokenizedCardApi = exports.TokenizedCardApiApiKeys = exports.TokenApi = exports.TokenApiApiKeys = exports.TaxesApi = exports.TaxesApiApiKeys = exports.SubscriptionsFollowOnsApi = exports.SubscriptionsFollowOnsApiApiKeys = exports.SubscriptionsApi = exports.SubscriptionsApiApiKeys = exports.SecureFileShareApi = exports.SecureFileShareApiApiKeys = exports.SearchTransactionsApi = exports.SearchTransactionsApiApiKeys = exports.ReversalApi = exports.ReversalApiApiKeys = exports.RetrievalSummariesApi = exports.RetrievalSummariesApiApiKeys = exports.RetrievalDetailsApi = exports.RetrievalDetailsApiApiKeys = exports.ReportsApi = exports.ReportsApiApiKeys = exports.ReportSubscriptionsApi = exports.ReportSubscriptionsApiApiKeys = exports.ReportDownloadsApi = exports.ReportDownloadsApiApiKeys = exports.ReportDefinitionsApi = exports.ReportDefinitionsApiApiKeys = exports.RefundApi = exports.RefundApiApiKeys = exports.PurchaseAndRefundDetailsApi = exports.PurchaseAndRefundDetailsApiApiKeys = exports.PlansApi = exports.PlansApiApiKeys = exports.PayoutsApi = exports.PayoutsApiApiKeys = exports.PaymentsApi = exports.PaymentsApiApiKeys = exports.PaymentTokensApi = exports.PaymentTokensApiApiKeys = exports.PaymentLinksApi = exports.PaymentLinksApiApiKeys = exports.PaymentInstrumentApi = exports.PaymentInstrumentApiApiKeys = exports.PaymentBatchSummariesApi = exports.PaymentBatchSummariesApiApiKeys = exports.PayerAuthenticationApi = exports.PayerAuthenticationApiApiKeys = exports.OrdersApi = exports.OrdersApiApiKeys = void 0;
exports.VoidApi = exports.VoidApiApiKeys = exports.VerificationApi = exports.VerificationApiApiKeys = exports.UserManagementSearchApi = exports.UserManagementSearchApiApiKeys = exports.UserManagementApi = exports.UserManagementApiApiKeys = exports.UnifiedCheckoutCaptureContextApi = exports.UnifiedCheckoutCaptureContextApiApiKeys = exports.TransientTokenDataApi = exports.TransientTokenDataApiApiKeys = exports.TransactionDetailsApi = exports.TransactionDetailsApiApiKeys = exports.TransactionBatchesApi = exports.TransactionBatchesApiApiKeys = void 0;
const localVarRequest = require("request");
const Promise = require("bluebird");
let defaultBasePath = 'https://apitest.cybersource.com';
// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================
/* tslint:disable:no-unused-variable */
let primitives = [
    "string",
    "boolean",
    "double",
    "integer",
    "long",
    "float",
    "number",
    "any"
];
class ObjectSerializer {
    static findCorrectType(data, expectedType) {
        if (data == undefined) {
            return expectedType;
        }
        else if (primitives.indexOf(expectedType.toLowerCase()) !== -1) {
            return expectedType;
        }
        else if (expectedType === "Date") {
            return expectedType;
        }
        else {
            if (enumsMap[expectedType]) {
                return expectedType;
            }
            if (!typeMap[expectedType]) {
                return expectedType; // w/e we don't know the type
            }
            // Check the discriminator
            let discriminatorProperty = typeMap[expectedType].discriminator;
            if (discriminatorProperty == null) {
                return expectedType; // the type does not have a discriminator. use it.
            }
            else {
                if (data[discriminatorProperty]) {
                    return data[discriminatorProperty]; // use the type given in the discriminator
                }
                else {
                    return expectedType; // discriminator was not present (or an empty string)
                }
            }
        }
    }
    static serialize(data, type) {
        if (data == undefined) {
            return data;
        }
        else if (primitives.indexOf(type.toLowerCase()) !== -1) {
            return data;
        }
        else if (type.lastIndexOf("Array<", 0) === 0) { // string.startsWith pre es6
            let subType = type.replace("Array<", ""); // Array<Type> => Type>
            subType = subType.substring(0, subType.length - 1); // Type> => Type
            let transformedData = [];
            for (let index in data) {
                let date = data[index];
                transformedData.push(ObjectSerializer.serialize(date, subType));
            }
            return transformedData;
        }
        else if (type === "Date") {
            return data.toString();
        }
        else {
            if (enumsMap[type]) {
                return data;
            }
            if (!typeMap[type]) { // in case we dont know the type
                return data;
            }
            // get the map for the correct type.
            let attributeTypes = typeMap[type].getAttributeTypeMap();
            let instance = {};
            for (let index in attributeTypes) {
                let attributeType = attributeTypes[index];
                instance[attributeType.baseName] = ObjectSerializer.serialize(data[attributeType.name], attributeType.type);
            }
            return instance;
        }
    }
    static deserialize(data, type) {
        // polymorphism may change the actual type.
        type = ObjectSerializer.findCorrectType(data, type);
        if (data == undefined) {
            return data;
        }
        else if (primitives.indexOf(type.toLowerCase()) !== -1) {
            return data;
        }
        else if (type.lastIndexOf("Array<", 0) === 0) { // string.startsWith pre es6
            let subType = type.replace("Array<", ""); // Array<Type> => Type>
            subType = subType.substring(0, subType.length - 1); // Type> => Type
            let transformedData = [];
            for (let index in data) {
                let date = data[index];
                transformedData.push(ObjectSerializer.deserialize(date, subType));
            }
            return transformedData;
        }
        else if (type === "Date") {
            return new Date(data);
        }
        else {
            if (enumsMap[type]) { // is Enum
                return data;
            }
            if (!typeMap[type]) { // dont know the type
                return data;
            }
            let instance = new typeMap[type]();
            let attributeTypes = typeMap[type].getAttributeTypeMap();
            for (let index in attributeTypes) {
                let attributeType = attributeTypes[index];
                instance[attributeType.name] = ObjectSerializer.deserialize(data[attributeType.baseName], attributeType.type);
            }
            return instance;
        }
    }
}
class Accountupdaterv1batchesIncluded {
    static getAttributeTypeMap() {
        return Accountupdaterv1batchesIncluded.attributeTypeMap;
    }
}
exports.Accountupdaterv1batchesIncluded = Accountupdaterv1batchesIncluded;
Accountupdaterv1batchesIncluded.discriminator = undefined;
Accountupdaterv1batchesIncluded.attributeTypeMap = [
    {
        "name": "tokens",
        "baseName": "tokens",
        "type": "Array<Accountupdaterv1batchesIncludedTokens>"
    }
];
class Accountupdaterv1batchesIncludedTokens {
    static getAttributeTypeMap() {
        return Accountupdaterv1batchesIncludedTokens.attributeTypeMap;
    }
}
exports.Accountupdaterv1batchesIncludedTokens = Accountupdaterv1batchesIncludedTokens;
Accountupdaterv1batchesIncludedTokens.discriminator = undefined;
Accountupdaterv1batchesIncludedTokens.attributeTypeMap = [
    {
        "name": "id",
        "baseName": "id",
        "type": "string"
    },
    {
        "name": "expirationMonth",
        "baseName": "expirationMonth",
        "type": "string"
    },
    {
        "name": "expirationYear",
        "baseName": "expirationYear",
        "type": "string"
    }
];
class ActivateDeactivatePlanResponse {
    static getAttributeTypeMap() {
        return ActivateDeactivatePlanResponse.attributeTypeMap;
    }
}
exports.ActivateDeactivatePlanResponse = ActivateDeactivatePlanResponse;
ActivateDeactivatePlanResponse.discriminator = undefined;
ActivateDeactivatePlanResponse.attributeTypeMap = [
    {
        "name": "links",
        "baseName": "_links",
        "type": "PtsV2IncrementalAuthorizationPatch201ResponseLinks"
    },
    {
        "name": "id",
        "baseName": "id",
        "type": "string"
    },
    {
        "name": "submitTimeUtc",
        "baseName": "submitTimeUtc",
        "type": "string"
    },
    {
        "name": "status",
        "baseName": "status",
        "type": "string"
    },
    {
        "name": "planInformation",
        "baseName": "planInformation",
        "type": "UpdatePlanResponsePlanInformation"
    }
];
class ActivateSubscriptionResponse {
    static getAttributeTypeMap() {
        return ActivateSubscriptionResponse.attributeTypeMap;
    }
}
exports.ActivateSubscriptionResponse = ActivateSubscriptionResponse;
ActivateSubscriptionResponse.discriminator = undefined;
ActivateSubscriptionResponse.attributeTypeMap = [
    {
        "name": "links",
        "baseName": "_links",
        "type": "PtsV2IncrementalAuthorizationPatch201ResponseLinks"
    },
    {
        "name": "id",
        "baseName": "id",
        "type": "string"
    },
    {
        "name": "submitTimeUtc",
        "baseName": "submitTimeUtc",
        "type": "string"
    },
    {
        "name": "status",
        "baseName": "status",
        "type": "string"
    },
    {
        "name": "subscriptionInformation",
        "baseName": "subscriptionInformation",
        "type": "ActivateSubscriptionResponseSubscriptionInformation"
    }
];
class ActivateSubscriptionResponseSubscriptionInformation {
    static getAttributeTypeMap() {
        return ActivateSubscriptionResponseSubscriptionInformation.attributeTypeMap;
    }
}
exports.ActivateSubscriptionResponseSubscriptionInformation = ActivateSubscriptionResponseSubscriptionInformation;
ActivateSubscriptionResponseSubscriptionInformation.discriminator = undefined;
ActivateSubscriptionResponseSubscriptionInformation.attributeTypeMap = [
    {
        "name": "code",
        "baseName": "code",
        "type": "string"
    },
    {
        "name": "status",
        "baseName": "status",
        "type": "string"
    }
];
class AddNegativeListRequest {
    static getAttributeTypeMap() {
        return AddNegativeListRequest.attributeTypeMap;
    }
}
exports.AddNegativeListRequest = AddNegativeListRequest;
AddNegativeListRequest.discriminator = undefined;
AddNegativeListRequest.attributeTypeMap = [
    {
        "name": "orderInformation",
        "baseName": "orderInformation",
        "type": "Riskv1liststypeentriesOrderInformation"
    },
    {
        "name": "paymentInformation",
        "baseName": "paymentInformation",
        "type": "Riskv1liststypeentriesPaymentInformation"
    },
    {
        "name": "clientReferenceInformation",
        "baseName": "clientReferenceInformation",
        "type": "Riskv1liststypeentriesClientReferenceInformation"
    },
    {
        "name": "deviceInformation",
        "baseName": "deviceInformation",
        "type": "Riskv1liststypeentriesDeviceInformation"
    },
    {
        "name": "riskInformation",
        "baseName": "riskInformation",
        "type": "Riskv1liststypeentriesRiskInformation"
    },
    {
        "name": "buyerInformation",
        "baseName": "buyerInformation",
        "type": "Riskv1liststypeentriesBuyerInformation"
    }
];
class AuthReversalRequest {
    static getAttributeTypeMap() {
        return AuthReversalRequest.attributeTypeMap;
    }
}
exports.AuthReversalRequest = AuthReversalRequest;
AuthReversalRequest.discriminator = undefined;
AuthReversalRequest.attributeTypeMap = [
    {
        "name": "clientReferenceInformation",
        "baseName": "clientReferenceInformation",
        "type": "Ptsv2paymentsidreversalsClientReferenceInformation"
    },
    {
        "name": "reversalInformation",
        "baseName": "reversalInformation",
        "type": "Ptsv2paymentsidreversalsReversalInformation"
    },
    {
        "name": "processingInformation",
        "baseName": "processingInformation",
        "type": "Ptsv2paymentsidreversalsProcessingInformation"
    },
    {
        "name": "orderInformation",
        "baseName": "orderInformation",
        "type": "Ptsv2paymentsidreversalsOrderInformation"
    },
    {
        "name": "pointOfSaleInformation",
        "baseName": "pointOfSaleInformation",
        "type": "Ptsv2paymentsidreversalsPointOfSaleInformation"
    },
    {
        "name": "paymentInformation",
        "baseName": "paymentInformation",
        "type": "Ptsv2paymentsidreversalsPaymentInformation"
    },
    {
        "name": "processorInformation",
        "baseName": "processorInformation",
        "type": "Ptsv2paymentsProcessorInformationReversal"
    }
];
class Binv1binlookupClientReferenceInformation {
    static getAttributeTypeMap() {
        return Binv1binlookupClientReferenceInformation.attributeTypeMap;
    }
}
exports.Binv1binlookupClientReferenceInformation = Binv1binlookupClientReferenceInformation;
Binv1binlookupClientReferenceInformation.discriminator = undefined;
Binv1binlookupClientReferenceInformation.attributeTypeMap = [
    {
        "name": "partner",
        "baseName": "partner",
        "type": "Riskv1decisionsClientReferenceInformationPartner"
    },
    {
        "name": "applicationName",
        "baseName": "applicationName",
        "type": "string"
    },
    {
        "name": "applicationVersion",
        "baseName": "applicationVersion",
        "type": "string"
    },
    {
        "name": "applicationUser",
        "baseName": "applicationUser",
        "type": "string"
    }
];
class Binv1binlookupPaymentInformation {
    static getAttributeTypeMap() {
        return Binv1binlookupPaymentInformation.attributeTypeMap;
    }
}
exports.Binv1binlookupPaymentInformation = Binv1binlookupPaymentInformation;
Binv1binlookupPaymentInformation.discriminator = undefined;
Binv1binlookupPaymentInformation.attributeTypeMap = [
    {
        "name": "card",
        "baseName": "card",
        "type": "Binv1binlookupPaymentInformationCard"
    },
    {
        "name": "customer",
        "baseName": "customer",
        "type": "GetAllSubscriptionsResponsePaymentInformationCustomer"
    },
    {
        "name": "paymentInstrument",
        "baseName": "paymentInstrument",
        "type": "Ptsv2paymentsPaymentInformationPaymentInstrument"
    },
    {
        "name": "instrumentIdentifier",
        "baseName": "instrumentIdentifier",
        "type": "Ptsv2paymentsPaymentInformationInstrumentIdentifier"
    }
];
class Binv1binlookupPaymentInformationCard {
    static getAttributeTypeMap() {
        return Binv1binlookupPaymentInformationCard.attributeTypeMap;
    }
}
exports.Binv1binlookupPaymentInformationCard = Binv1binlookupPaymentInformationCard;
Binv1binlookupPaymentInformationCard.discriminator = undefined;
Binv1binlookupPaymentInformationCard.attributeTypeMap = [
    {
        "name": "number",
        "baseName": "number",
        "type": "string"
    }
];
class Binv1binlookupProcessingInformation {
    static getAttributeTypeMap() {
        return Binv1binlookupProcessingInformation.attributeTypeMap;
    }
}
exports.Binv1binlookupProcessingInformation = Binv1binlookupProcessingInformation;
Binv1binlookupProcessingInformation.discriminator = undefined;
Binv1binlookupProcessingInformation.attributeTypeMap = [
    {
        "name": "binSource",
        "baseName": "binSource",
        "type": "string"
    },
    {
        "name": "payoutOptions",
        "baseName": "payoutOptions",
        "type": "Binv1binlookupProcessingInformationPayoutOptions"
    }
];
/**
* Payout fields request parameters
*/
class Binv1binlookupProcessingInformationPayoutOptions {
    static getAttributeTypeMap() {
        return Binv1binlookupProcessingInformationPayoutOptions.attributeTypeMap;
    }
}
exports.Binv1binlookupProcessingInformationPayoutOptions = Binv1binlookupProcessingInformationPayoutOptions;
Binv1binlookupProcessingInformationPayoutOptions.discriminator = undefined;
Binv1binlookupProcessingInformationPayoutOptions.attributeTypeMap = [
    {
        "name": "payoutInquiry",
        "baseName": "payoutInquiry",
        "type": "boolean"
    },
    {
        "name": "networkId",
        "baseName": "networkId",
        "type": "string"
    },
    {
        "name": "acquirerBin",
        "baseName": "acquirerBin",
        "type": "string"
    }
];
class Binv1binlookupTokenInformation {
    static getAttributeTypeMap() {
        return Binv1binlookupTokenInformation.attributeTypeMap;
    }
}
exports.Binv1binlookupTokenInformation = Binv1binlookupTokenInformation;
Binv1binlookupTokenInformation.discriminator = undefined;
Binv1binlookupTokenInformation.attributeTypeMap = [
    {
        "name": "jti",
        "baseName": "jti",
        "type": "string"
    },
    {
        "name": "transientTokenJwt",
        "baseName": "transientTokenJwt",
        "type": "string"
    }
];
class Boardingv1registrationsDocumentInformation {
    static getAttributeTypeMap() {
        return Boardingv1registrationsDocumentInformation.attributeTypeMap;
    }
}
exports.Boardingv1registrationsDocumentInformation = Boardingv1registrationsDocumentInformation;
Boardingv1registrationsDocumentInformation.discriminator = undefined;
Boardingv1registrationsDocumentInformation.attributeTypeMap = [
    {
        "name": "signedDocuments",
        "baseName": "signedDocuments",
        "type": "Array<Boardingv1registrationsDocumentInformationSignedDocuments>"
    }
];
class Boardingv1registrationsDocumentInformationSignedDocuments {
    static getAttributeTypeMap() {
        return Boardingv1registrationsDocumentInformationSignedDocuments.attributeTypeMap;
    }
}
exports.Boardingv1registrationsDocumentInformationSignedDocuments = Boardingv1registrationsDocumentInformationSignedDocuments;
Boardingv1registrationsDocumentInformationSignedDocuments.discriminator = undefined;
Boardingv1registrationsDocumentInformationSignedDocuments.attributeTypeMap = [
    {
        "name": "documentId",
        "baseName": "documentId",
        "type": "string"
    }
];
class Boardingv1registrationsIntegrationInformation {
    static getAttributeTypeMap() {
        return Boardingv1registrationsIntegrationInformation.attributeTypeMap;
    }
}
exports.Boardingv1registrationsIntegrationInformation = Boardingv1registrationsIntegrationInformation;
Boardingv1registrationsIntegrationInformation.discriminator = undefined;
Boardingv1registrationsIntegrationInformation.attributeTypeMap = [
    {
        "name": "oauth2",
        "baseName": "oauth2",
        "type": "Array<Boardingv1registrationsIntegrationInformationOauth2>"
    },
    {
        "name": "tenantConfigurations",
        "baseName": "tenantConfigurations",
        "type": "Array<Boardingv1registrationsIntegrationInformationTenantConfigurations>"
    }
];
class Boardingv1registrationsIntegrationInformationOauth2 {
    static getAttributeTypeMap() {
        return Boardingv1registrationsIntegrationInformationOauth2.attributeTypeMap;
    }
}
exports.Boardingv1registrationsIntegrationInformationOauth2 = Boardingv1registrationsIntegrationInformationOauth2;
Boardingv1registrationsIntegrationInformationOauth2.discriminator = undefined;
Boardingv1registrationsIntegrationInformationOauth2.attributeTypeMap = [
    {
        "name": "clientId",
        "baseName": "client_id",
        "type": "string"
    },
    {
        "name": "state",
        "baseName": "state",
        "type": "string"
    }
];
class Boardingv1registrationsIntegrationInformationTenantConfigurations {
    static getAttributeTypeMap() {
        return Boardingv1registrationsIntegrationInformationTenantConfigurations.attributeTypeMap;
    }
}
exports.Boardingv1registrationsIntegrationInformationTenantConfigurations = Boardingv1registrationsIntegrationInformationTenantConfigurations;
Boardingv1registrationsIntegrationInformationTenantConfigurations.discriminator = undefined;
Boardingv1registrationsIntegrationInformationTenantConfigurations.attributeTypeMap = [
    {
        "name": "solutionId",
        "baseName": "solutionId",
        "type": "string"
    },
    {
        "name": "tenantInformation",
        "baseName": "tenantInformation",
        "type": "Boardingv1registrationsIntegrationInformationTenantInformation"
    }
];
class Boardingv1registrationsIntegrationInformationTenantInformation {
    static getAttributeTypeMap() {
        return Boardingv1registrationsIntegrationInformationTenantInformation.attributeTypeMap;
    }
}
exports.Boardingv1registrationsIntegrationInformationTenantInformation = Boardingv1registrationsIntegrationInformationTenantInformation;
Boardingv1registrationsIntegrationInformationTenantInformation.discriminator = undefined;
Boardingv1registrationsIntegrationInformationTenantInformation.attributeTypeMap = [
    {
        "name": "tenantId",
        "baseName": "tenantId",
        "type": "string"
    }
];
class Boardingv1registrationsOrganizationInformation {
    static getAttributeTypeMap() {
        return Boardingv1registrationsOrganizationInformation.attributeTypeMap;
    }
}
exports.Boardingv1registrationsOrganizationInformation = Boardingv1registrationsOrganizationInformation;
Boardingv1registrationsOrganizationInformation.discriminator = undefined;
Boardingv1registrationsOrganizationInformation.attributeTypeMap = [
    {
        "name": "organizationId",
        "baseName": "organizationId",
        "type": "string"
    },
    {
        "name": "parentOrganizationId",
        "baseName": "parentOrganizationId",
        "type": "string"
    },
    {
        "name": "childOrganizations",
        "baseName": "childOrganizations",
        "type": "Array<string>"
    },
    {
        "name": "type",
        "baseName": "type",
        "type": "Boardingv1registrationsOrganizationInformation.TypeEnum"
    },
    {
        "name": "status",
        "baseName": "status",
        "type": "Boardingv1registrationsOrganizationInformation.StatusEnum"
    },
    {
        "name": "configurable",
        "baseName": "configurable",
        "type": "boolean"
    },
    {
        "name": "businessInformation",
        "baseName": "businessInformation",
        "type": "Boardingv1registrationsOrganizationInformationBusinessInformation"
    },
    {
        "name": "KYC",
        "baseName": "KYC",
        "type": "Boardingv1registrationsOrganizationInformationKYC"
    },
    {
        "name": "owners",
        "baseName": "owners",
        "type": "Array<Boardingv1registrationsOrganizationInformationOwners>"
    }
];
(function (Boardingv1registrationsOrganizationInformation) {
    let TypeEnum;
    (function (TypeEnum) {
        TypeEnum[TypeEnum["TRANSACTING"] = 'TRANSACTING'] = "TRANSACTING";
        TypeEnum[TypeEnum["STRUCTURAL"] = 'STRUCTURAL'] = "STRUCTURAL";
        TypeEnum[TypeEnum["MERCHANT"] = 'MERCHANT'] = "MERCHANT";
    })(TypeEnum = Boardingv1registrationsOrganizationInformation.TypeEnum || (Boardingv1registrationsOrganizationInformation.TypeEnum = {}));
    let StatusEnum;
    (function (StatusEnum) {
        StatusEnum[StatusEnum["LIVE"] = 'LIVE'] = "LIVE";
        StatusEnum[StatusEnum["TEST"] = 'TEST'] = "TEST";
        StatusEnum[StatusEnum["DRAFT"] = 'DRAFT'] = "DRAFT";
    })(StatusEnum = Boardingv1registrationsOrganizationInformation.StatusEnum || (Boardingv1registrationsOrganizationInformation.StatusEnum = {}));
})(Boardingv1registrationsOrganizationInformation = exports.Boardingv1registrationsOrganizationInformation || (exports.Boardingv1registrationsOrganizationInformation = {}));
class Boardingv1registrationsOrganizationInformationBusinessInformation {
    static getAttributeTypeMap() {
        return Boardingv1registrationsOrganizationInformationBusinessInformation.attributeTypeMap;
    }
}
exports.Boardingv1registrationsOrganizationInformationBusinessInformation = Boardingv1registrationsOrganizationInformationBusinessInformation;
Boardingv1registrationsOrganizationInformationBusinessInformation.discriminator = undefined;
Boardingv1registrationsOrganizationInformationBusinessInformation.attributeTypeMap = [
    {
        "name": "name",
        "baseName": "name",
        "type": "string"
    },
    {
        "name": "doingBusinessAs",
        "baseName": "doingBusinessAs",
        "type": "string"
    },
    {
        "name": "description",
        "baseName": "description",
        "type": "string"
    },
    {
        "name": "startDate",
        "baseName": "startDate",
        "type": "string"
    },
    {
        "name": "address",
        "baseName": "address",
        "type": "Boardingv1registrationsOrganizationInformationBusinessInformationAddress"
    },
    {
        "name": "timeZone",
        "baseName": "timeZone",
        "type": "Boardingv1registrationsOrganizationInformationBusinessInformation.TimeZoneEnum"
    },
    {
        "name": "websiteUrl",
        "baseName": "websiteUrl",
        "type": "string"
    },
    {
        "name": "type",
        "baseName": "type",
        "type": "Boardingv1registrationsOrganizationInformationBusinessInformation.TypeEnum"
    },
    {
        "name": "taxId",
        "baseName": "taxId",
        "type": "string"
    },
    {
        "name": "phoneNumber",
        "baseName": "phoneNumber",
        "type": "string"
    },
    {
        "name": "businessContact",
        "baseName": "businessContact",
        "type": "Boardingv1registrationsOrganizationInformationBusinessInformationBusinessContact"
    },
    {
        "name": "technicalContact",
        "baseName": "technicalContact",
        "type": "Boardingv1registrationsOrganizationInformationBusinessInformationBusinessContact"
    },
    {
        "name": "emergencyContact",
        "baseName": "emergencyContact",
        "type": "Boardingv1registrationsOrganizationInformationBusinessInformationBusinessContact"
    },
    {
        "name": "merchantCategoryCode",
        "baseName": "merchantCategoryCode",
        "type": "string"
    }
];
(function (Boardingv1registrationsOrganizationInformationBusinessInformation) {
    let TimeZoneEnum;
    (function (TimeZoneEnum) {
        TimeZoneEnum[TimeZoneEnum["PacificPagoPago"] = 'Pacific/Pago_Pago'] = "PacificPagoPago";
        TimeZoneEnum[TimeZoneEnum["PacificHonolulu"] = 'Pacific/Honolulu'] = "PacificHonolulu";
        TimeZoneEnum[TimeZoneEnum["AmericaAnchorage"] = 'America/Anchorage'] = "AmericaAnchorage";
        TimeZoneEnum[TimeZoneEnum["AmericaVancouver"] = 'America/Vancouver'] = "AmericaVancouver";
        TimeZoneEnum[TimeZoneEnum["AmericaLosAngeles"] = 'America/Los_Angeles'] = "AmericaLosAngeles";
        TimeZoneEnum[TimeZoneEnum["AmericaPhoenix"] = 'America/Phoenix'] = "AmericaPhoenix";
        TimeZoneEnum[TimeZoneEnum["AmericaEdmonton"] = 'America/Edmonton'] = "AmericaEdmonton";
        TimeZoneEnum[TimeZoneEnum["AmericaDenver"] = 'America/Denver'] = "AmericaDenver";
        TimeZoneEnum[TimeZoneEnum["AmericaWinnipeg"] = 'America/Winnipeg'] = "AmericaWinnipeg";
        TimeZoneEnum[TimeZoneEnum["AmericaMexicoCity"] = 'America/Mexico_City'] = "AmericaMexicoCity";
        TimeZoneEnum[TimeZoneEnum["AmericaChicago"] = 'America/Chicago'] = "AmericaChicago";
        TimeZoneEnum[TimeZoneEnum["AmericaBogota"] = 'America/Bogota'] = "AmericaBogota";
        TimeZoneEnum[TimeZoneEnum["AmericaIndianapolis"] = 'America/Indianapolis'] = "AmericaIndianapolis";
        TimeZoneEnum[TimeZoneEnum["AmericaNewYork"] = 'America/New_York'] = "AmericaNewYork";
        TimeZoneEnum[TimeZoneEnum["AmericaLaPaz"] = 'America/La_Paz'] = "AmericaLaPaz";
        TimeZoneEnum[TimeZoneEnum["AmericaHalifax"] = 'America/Halifax'] = "AmericaHalifax";
        TimeZoneEnum[TimeZoneEnum["AmericaStJohns"] = 'America/St_Johns'] = "AmericaStJohns";
        TimeZoneEnum[TimeZoneEnum["AmericaBuenosAires"] = 'America/Buenos_Aires'] = "AmericaBuenosAires";
        TimeZoneEnum[TimeZoneEnum["AmericaGodthab"] = 'America/Godthab'] = "AmericaGodthab";
        TimeZoneEnum[TimeZoneEnum["AmericaSaoPaulo"] = 'America/Sao_Paulo'] = "AmericaSaoPaulo";
        TimeZoneEnum[TimeZoneEnum["AmericaNoronha"] = 'America/Noronha'] = "AmericaNoronha";
        TimeZoneEnum[TimeZoneEnum["AtlanticCapeVerde"] = 'Atlantic/Cape_Verde'] = "AtlanticCapeVerde";
        TimeZoneEnum[TimeZoneEnum["GMT"] = 'GMT'] = "GMT";
        TimeZoneEnum[TimeZoneEnum["EuropeDublin"] = 'Europe/Dublin'] = "EuropeDublin";
        TimeZoneEnum[TimeZoneEnum["EuropeLisbon"] = 'Europe/Lisbon'] = "EuropeLisbon";
        TimeZoneEnum[TimeZoneEnum["EuropeLondon"] = 'Europe/London'] = "EuropeLondon";
        TimeZoneEnum[TimeZoneEnum["AfricaTunis"] = 'Africa/Tunis'] = "AfricaTunis";
        TimeZoneEnum[TimeZoneEnum["EuropeVienna"] = 'Europe/Vienna'] = "EuropeVienna";
        TimeZoneEnum[TimeZoneEnum["EuropeBrussels"] = 'Europe/Brussels'] = "EuropeBrussels";
        TimeZoneEnum[TimeZoneEnum["EuropeZurich"] = 'Europe/Zurich'] = "EuropeZurich";
        TimeZoneEnum[TimeZoneEnum["EuropePrague"] = 'Europe/Prague'] = "EuropePrague";
        TimeZoneEnum[TimeZoneEnum["EuropeBerlin"] = 'Europe/Berlin'] = "EuropeBerlin";
        TimeZoneEnum[TimeZoneEnum["EuropeCopenhagen"] = 'Europe/Copenhagen'] = "EuropeCopenhagen";
        TimeZoneEnum[TimeZoneEnum["EuropeMadrid"] = 'Europe/Madrid'] = "EuropeMadrid";
        TimeZoneEnum[TimeZoneEnum["EuropeBudapest"] = 'Europe/Budapest'] = "EuropeBudapest";
        TimeZoneEnum[TimeZoneEnum["EuropeRome"] = 'Europe/Rome'] = "EuropeRome";
        TimeZoneEnum[TimeZoneEnum["AfricaTripoli"] = 'Africa/Tripoli'] = "AfricaTripoli";
        TimeZoneEnum[TimeZoneEnum["EuropeMonaco"] = 'Europe/Monaco'] = "EuropeMonaco";
        TimeZoneEnum[TimeZoneEnum["EuropeMalta"] = 'Europe/Malta'] = "EuropeMalta";
        TimeZoneEnum[TimeZoneEnum["EuropeAmsterdam"] = 'Europe/Amsterdam'] = "EuropeAmsterdam";
        TimeZoneEnum[TimeZoneEnum["EuropeOslo"] = 'Europe/Oslo'] = "EuropeOslo";
        TimeZoneEnum[TimeZoneEnum["EuropeWarsaw"] = 'Europe/Warsaw'] = "EuropeWarsaw";
        TimeZoneEnum[TimeZoneEnum["EuropeStockholm"] = 'Europe/Stockholm'] = "EuropeStockholm";
        TimeZoneEnum[TimeZoneEnum["EuropeBelgrade"] = 'Europe/Belgrade'] = "EuropeBelgrade";
        TimeZoneEnum[TimeZoneEnum["EuropeParis"] = 'Europe/Paris'] = "EuropeParis";
        TimeZoneEnum[TimeZoneEnum["AfricaJohannesburg"] = 'Africa/Johannesburg'] = "AfricaJohannesburg";
        TimeZoneEnum[TimeZoneEnum["EuropeMinsk"] = 'Europe/Minsk'] = "EuropeMinsk";
        TimeZoneEnum[TimeZoneEnum["AfricaCairo"] = 'Africa/Cairo'] = "AfricaCairo";
        TimeZoneEnum[TimeZoneEnum["EuropeHelsinki"] = 'Europe/Helsinki'] = "EuropeHelsinki";
        TimeZoneEnum[TimeZoneEnum["EuropeAthens"] = 'Europe/Athens'] = "EuropeAthens";
        TimeZoneEnum[TimeZoneEnum["AsiaJerusalem"] = 'Asia/Jerusalem'] = "AsiaJerusalem";
        TimeZoneEnum[TimeZoneEnum["EuropeRiga"] = 'Europe/Riga'] = "EuropeRiga";
        TimeZoneEnum[TimeZoneEnum["EuropeBucharest"] = 'Europe/Bucharest'] = "EuropeBucharest";
        TimeZoneEnum[TimeZoneEnum["EuropeIstanbul"] = 'Europe/Istanbul'] = "EuropeIstanbul";
        TimeZoneEnum[TimeZoneEnum["AsiaRiyadh"] = 'Asia/Riyadh'] = "AsiaRiyadh";
        TimeZoneEnum[TimeZoneEnum["EuropeMoscow"] = 'Europe/Moscow'] = "EuropeMoscow";
        TimeZoneEnum[TimeZoneEnum["AsiaDubai"] = 'Asia/Dubai'] = "AsiaDubai";
        TimeZoneEnum[TimeZoneEnum["AsiaBaku"] = 'Asia/Baku'] = "AsiaBaku";
        TimeZoneEnum[TimeZoneEnum["AsiaTbilisi"] = 'Asia/Tbilisi'] = "AsiaTbilisi";
        TimeZoneEnum[TimeZoneEnum["AsiaCalcutta"] = 'Asia/Calcutta'] = "AsiaCalcutta";
        TimeZoneEnum[TimeZoneEnum["AsiaKatmandu"] = 'Asia/Katmandu'] = "AsiaKatmandu";
        TimeZoneEnum[TimeZoneEnum["AsiaDacca"] = 'Asia/Dacca'] = "AsiaDacca";
        TimeZoneEnum[TimeZoneEnum["AsiaRangoon"] = 'Asia/Rangoon'] = "AsiaRangoon";
        TimeZoneEnum[TimeZoneEnum["AsiaJakarta"] = 'Asia/Jakarta'] = "AsiaJakarta";
        TimeZoneEnum[TimeZoneEnum["AsiaSaigon"] = 'Asia/Saigon'] = "AsiaSaigon";
        TimeZoneEnum[TimeZoneEnum["AsiaBangkok"] = 'Asia/Bangkok'] = "AsiaBangkok";
        TimeZoneEnum[TimeZoneEnum["AustraliaPerth"] = 'Australia/Perth'] = "AustraliaPerth";
        TimeZoneEnum[TimeZoneEnum["AsiaHongKong"] = 'Asia/Hong_Kong'] = "AsiaHongKong";
        TimeZoneEnum[TimeZoneEnum["AsiaMacao"] = 'Asia/Macao'] = "AsiaMacao";
        TimeZoneEnum[TimeZoneEnum["AsiaKualaLumpur"] = 'Asia/Kuala_Lumpur'] = "AsiaKualaLumpur";
        TimeZoneEnum[TimeZoneEnum["AsiaManila"] = 'Asia/Manila'] = "AsiaManila";
        TimeZoneEnum[TimeZoneEnum["AsiaSingapore"] = 'Asia/Singapore'] = "AsiaSingapore";
        TimeZoneEnum[TimeZoneEnum["AsiaTaipei"] = 'Asia/Taipei'] = "AsiaTaipei";
        TimeZoneEnum[TimeZoneEnum["AsiaShanghai"] = 'Asia/Shanghai'] = "AsiaShanghai";
        TimeZoneEnum[TimeZoneEnum["AsiaSeoul"] = 'Asia/Seoul'] = "AsiaSeoul";
        TimeZoneEnum[TimeZoneEnum["AsiaTokyo"] = 'Asia/Tokyo'] = "AsiaTokyo";
        TimeZoneEnum[TimeZoneEnum["AsiaYakutsk"] = 'Asia/Yakutsk'] = "AsiaYakutsk";
        TimeZoneEnum[TimeZoneEnum["AustraliaAdelaide"] = 'Australia/Adelaide'] = "AustraliaAdelaide";
        TimeZoneEnum[TimeZoneEnum["AustraliaBrisbane"] = 'Australia/Brisbane'] = "AustraliaBrisbane";
        TimeZoneEnum[TimeZoneEnum["AustraliaBrokenHill"] = 'Australia/Broken_Hill'] = "AustraliaBrokenHill";
        TimeZoneEnum[TimeZoneEnum["AustraliaDarwin"] = 'Australia/Darwin'] = "AustraliaDarwin";
        TimeZoneEnum[TimeZoneEnum["AustraliaEucla"] = 'Australia/Eucla'] = "AustraliaEucla";
        TimeZoneEnum[TimeZoneEnum["AustraliaHobart"] = 'Australia/Hobart'] = "AustraliaHobart";
        TimeZoneEnum[TimeZoneEnum["AustraliaLindeman"] = 'Australia/Lindeman'] = "AustraliaLindeman";
        TimeZoneEnum[TimeZoneEnum["AustraliaSydney"] = 'Australia/Sydney'] = "AustraliaSydney";
        TimeZoneEnum[TimeZoneEnum["AustraliaLordHowe"] = 'Australia/Lord_Howe'] = "AustraliaLordHowe";
        TimeZoneEnum[TimeZoneEnum["AustraliaMelbourne"] = 'Australia/Melbourne'] = "AustraliaMelbourne";
        TimeZoneEnum[TimeZoneEnum["AsiaMagadan"] = 'Asia/Magadan'] = "AsiaMagadan";
        TimeZoneEnum[TimeZoneEnum["PacificNorfolk"] = 'Pacific/Norfolk'] = "PacificNorfolk";
        TimeZoneEnum[TimeZoneEnum["PacificAuckland"] = 'Pacific/Auckland'] = "PacificAuckland";
    })(TimeZoneEnum = Boardingv1registrationsOrganizationInformationBusinessInformation.TimeZoneEnum || (Boardingv1registrationsOrganizationInformationBusinessInformation.TimeZoneEnum = {}));
    let TypeEnum;
    (function (TypeEnum) {
        TypeEnum[TypeEnum["PARTNERSHIP"] = 'PARTNERSHIP'] = "PARTNERSHIP";
        TypeEnum[TypeEnum["SOLEPROPRIETORSHIP"] = 'SOLE_PROPRIETORSHIP'] = "SOLEPROPRIETORSHIP";
        TypeEnum[TypeEnum["CORPORATION"] = 'CORPORATION'] = "CORPORATION";
        TypeEnum[TypeEnum["LLC"] = 'LLC'] = "LLC";
        TypeEnum[TypeEnum["NONPROFIT"] = 'NON_PROFIT'] = "NONPROFIT";
        TypeEnum[TypeEnum["TRUST"] = 'TRUST'] = "TRUST";
    })(TypeEnum = Boardingv1registrationsOrganizationInformationBusinessInformation.TypeEnum || (Boardingv1registrationsOrganizationInformationBusinessInformation.TypeEnum = {}));
})(Boardingv1registrationsOrganizationInformationBusinessInformation = exports.Boardingv1registrationsOrganizationInformationBusinessInformation || (exports.Boardingv1registrationsOrganizationInformationBusinessInformation = {}));
class Boardingv1registrationsOrganizationInformationBusinessInformationAddress {
    static getAttributeTypeMap() {
        return Boardingv1registrationsOrganizationInformationBusinessInformationAddress.attributeTypeMap;
    }
}
exports.Boardingv1registrationsOrganizationInformationBusinessInformationAddress = Boardingv1registrationsOrganizationInformationBusinessInformationAddress;
Boardingv1registrationsOrganizationInformationBusinessInformationAddress.discriminator = undefined;
Boardingv1registrationsOrganizationInformationBusinessInformationAddress.attributeTypeMap = [
    {
        "name": "country",
        "baseName": "country",
        "type": "string"
    },
    {
        "name": "address1",
        "baseName": "address1",
        "type": "string"
    },
    {
        "name": "address2",
        "baseName": "address2",
        "type": "string"
    },
    {
        "name": "locality",
        "baseName": "locality",
        "type": "string"
    },
    {
        "name": "administrativeArea",
        "baseName": "administrativeArea",
        "type": "string"
    },
    {
        "name": "postalCode",
        "baseName": "postalCode",
        "type": "string"
    }
];
class Boardingv1registrationsOrganizationInformationBusinessInformationBusinessContact {
    static getAttributeTypeMap() {
        return Boardingv1registrationsOrganizationInformationBusinessInformationBusinessContact.attributeTypeMap;
    }
}
exports.Boardingv1registrationsOrganizationInformationBusinessInformationBusinessContact = Boardingv1registrationsOrganizationInformationBusinessInformationBusinessContact;
Boardingv1registrationsOrganizationInformationBusinessInformationBusinessContact.discriminator = undefined;
Boardingv1registrationsOrganizationInformationBusinessInformationBusinessContact.attributeTypeMap = [
    {
        "name": "firstName",
        "baseName": "firstName",
        "type": "string"
    },
    {
        "name": "middleName",
        "baseName": "middleName",
        "type": "string"
    },
    {
        "name": "lastName",
        "baseName": "lastName",
        "type": "string"
    },
    {
        "name": "phoneNumber",
        "baseName": "phoneNumber",
        "type": "string"
    },
    {
        "name": "email",
        "baseName": "email",
        "type": "string"
    }
];
class Boardingv1registrationsOrganizationInformationKYC {
    static getAttributeTypeMap() {
        return Boardingv1registrationsOrganizationInformationKYC.attributeTypeMap;
    }
}
exports.Boardingv1registrationsOrganizationInformationKYC = Boardingv1registrationsOrganizationInformationKYC;
Boardingv1registrationsOrganizationInformationKYC.discriminator = undefined;
Boardingv1registrationsOrganizationInformationKYC.attributeTypeMap = [
    {
        "name": "whenIsCustomerCharged",
        "baseName": "whenIsCustomerCharged",
        "type": "Boardingv1registrationsOrganizationInformationKYC.WhenIsCustomerChargedEnum"
    },
    {
        "name": "whenIsCustomerChargedDescription",
        "baseName": "whenIsCustomerChargedDescription",
        "type": "string"
    },
    {
        "name": "offerSubscriptions",
        "baseName": "offerSubscriptions",
        "type": "boolean"
    },
    {
        "name": "monthlySubscriptionPercent",
        "baseName": "monthlySubscriptionPercent",
        "type": "number"
    },
    {
        "name": "quarterlySubscriptionPercent",
        "baseName": "quarterlySubscriptionPercent",
        "type": "number"
    },
    {
        "name": "semiAnnualSubscriptionPercent",
        "baseName": "semiAnnualSubscriptionPercent",
        "type": "number"
    },
    {
        "name": "annualSubscriptionPercent",
        "baseName": "annualSubscriptionPercent",
        "type": "number"
    },
    {
        "name": "timeToProductDelivery",
        "baseName": "timeToProductDelivery",
        "type": "Boardingv1registrationsOrganizationInformationKYC.TimeToProductDeliveryEnum"
    },
    {
        "name": "estimatedMonthlySales",
        "baseName": "estimatedMonthlySales",
        "type": "number"
    },
    {
        "name": "averageOrderAmount",
        "baseName": "averageOrderAmount",
        "type": "number"
    },
    {
        "name": "largestExpectedOrderAmount",
        "baseName": "largestExpectedOrderAmount",
        "type": "number"
    },
    {
        "name": "depositBankAccount",
        "baseName": "depositBankAccount",
        "type": "Boardingv1registrationsOrganizationInformationKYCDepositBankAccount"
    }
];
(function (Boardingv1registrationsOrganizationInformationKYC) {
    let WhenIsCustomerChargedEnum;
    (function (WhenIsCustomerChargedEnum) {
        WhenIsCustomerChargedEnum[WhenIsCustomerChargedEnum["ONETIMEBEFORE"] = 'ONETIMEBEFORE'] = "ONETIMEBEFORE";
        WhenIsCustomerChargedEnum[WhenIsCustomerChargedEnum["ONETIMEAFTER"] = 'ONETIMEAFTER'] = "ONETIMEAFTER";
        WhenIsCustomerChargedEnum[WhenIsCustomerChargedEnum["OTHER"] = 'OTHER'] = "OTHER";
    })(WhenIsCustomerChargedEnum = Boardingv1registrationsOrganizationInformationKYC.WhenIsCustomerChargedEnum || (Boardingv1registrationsOrganizationInformationKYC.WhenIsCustomerChargedEnum = {}));
    let TimeToProductDeliveryEnum;
    (function (TimeToProductDeliveryEnum) {
        TimeToProductDeliveryEnum[TimeToProductDeliveryEnum["INSTANT"] = 'INSTANT'] = "INSTANT";
        TimeToProductDeliveryEnum[TimeToProductDeliveryEnum["UPTO2"] = 'UPTO2'] = "UPTO2";
        TimeToProductDeliveryEnum[TimeToProductDeliveryEnum["UPTO5"] = 'UPTO5'] = "UPTO5";
        TimeToProductDeliveryEnum[TimeToProductDeliveryEnum["UPTO10"] = 'UPTO10'] = "UPTO10";
        TimeToProductDeliveryEnum[TimeToProductDeliveryEnum["GREATERTHAN10"] = 'GREATERTHAN10'] = "GREATERTHAN10";
    })(TimeToProductDeliveryEnum = Boardingv1registrationsOrganizationInformationKYC.TimeToProductDeliveryEnum || (Boardingv1registrationsOrganizationInformationKYC.TimeToProductDeliveryEnum = {}));
})(Boardingv1registrationsOrganizationInformationKYC = exports.Boardingv1registrationsOrganizationInformationKYC || (exports.Boardingv1registrationsOrganizationInformationKYC = {}));
class Boardingv1registrationsOrganizationInformationKYCDepositBankAccount {
    static getAttributeTypeMap() {
        return Boardingv1registrationsOrganizationInformationKYCDepositBankAccount.attributeTypeMap;
    }
}
exports.Boardingv1registrationsOrganizationInformationKYCDepositBankAccount = Boardingv1registrationsOrganizationInformationKYCDepositBankAccount;
Boardingv1registrationsOrganizationInformationKYCDepositBankAccount.discriminator = undefined;
Boardingv1registrationsOrganizationInformationKYCDepositBankAccount.attributeTypeMap = [
    {
        "name": "accountHolderName",
        "baseName": "accountHolderName",
        "type": "string"
    },
    {
        "name": "accountType",
        "baseName": "accountType",
        "type": "Boardingv1registrationsOrganizationInformationKYCDepositBankAccount.AccountTypeEnum"
    },
    {
        "name": "accountRoutingNumber",
        "baseName": "accountRoutingNumber",
        "type": "string"
    },
    {
        "name": "accountNumber",
        "baseName": "accountNumber",
        "type": "string"
    }
];
(function (Boardingv1registrationsOrganizationInformationKYCDepositBankAccount) {
    let AccountTypeEnum;
    (function (AccountTypeEnum) {
        AccountTypeEnum[AccountTypeEnum["Checking"] = 'checking'] = "Checking";
        AccountTypeEnum[AccountTypeEnum["Savings"] = 'savings'] = "Savings";
        AccountTypeEnum[AccountTypeEnum["Corporatechecking"] = 'corporatechecking'] = "Corporatechecking";
        AccountTypeEnum[AccountTypeEnum["Corporatesavings"] = 'corporatesavings'] = "Corporatesavings";
    })(AccountTypeEnum = Boardingv1registrationsOrganizationInformationKYCDepositBankAccount.AccountTypeEnum || (Boardingv1registrationsOrganizationInformationKYCDepositBankAccount.AccountTypeEnum = {}));
})(Boardingv1registrationsOrganizationInformationKYCDepositBankAccount = exports.Boardingv1registrationsOrganizationInformationKYCDepositBankAccount || (exports.Boardingv1registrationsOrganizationInformationKYCDepositBankAccount = {}));
class Boardingv1registrationsOrganizationInformationOwners {
    static getAttributeTypeMap() {
        return Boardingv1registrationsOrganizationInformationOwners.attributeTypeMap;
    }
}
exports.Boardingv1registrationsOrganizationInformationOwners = Boardingv1registrationsOrganizationInformationOwners;
Boardingv1registrationsOrganizationInformationOwners.discriminator = undefined;
Boardingv1registrationsOrganizationInformationOwners.attributeTypeMap = [
    {
        "name": "firstName",
        "baseName": "firstName",
        "type": "string"
    },
    {
        "name": "middleName",
        "baseName": "middleName",
        "type": "string"
    },
    {
        "name": "lastName",
        "baseName": "lastName",
        "type": "string"
    },
    {
        "name": "birthDate",
        "baseName": "birthDate",
        "type": "string"
    },
    {
        "name": "isPrimary",
        "baseName": "isPrimary",
        "type": "boolean"
    },
    {
        "name": "ssn",
        "baseName": "ssn",
        "type": "string"
    },
    {
        "name": "passportNumber",
        "baseName": "passportNumber",
        "type": "string"
    },
    {
        "name": "passportCountry",
        "baseName": "passportCountry",
        "type": "string"
    },
    {
        "name": "jobTitle",
        "baseName": "jobTitle",
        "type": "string"
    },
    {
        "name": "hasSignificantResponsability",
        "baseName": "hasSignificantResponsability",
        "type": "boolean"
    },
    {
        "name": "ownershipPercentage",
        "baseName": "ownershipPercentage",
        "type": "number"
    },
    {
        "name": "phoneNumber",
        "baseName": "phoneNumber",
        "type": "string"
    },
    {
        "name": "email",
        "baseName": "email",
        "type": "string"
    },
    {
        "name": "address",
        "baseName": "address",
        "type": "Boardingv1registrationsOrganizationInformationBusinessInformationAddress"
    }
];
class Boardingv1registrationsProductInformation {
    static getAttributeTypeMap() {
        return Boardingv1registrationsProductInformation.attributeTypeMap;
    }
}
exports.Boardingv1registrationsProductInformation = Boardingv1registrationsProductInformation;
Boardingv1registrationsProductInformation.discriminator = undefined;
Boardingv1registrationsProductInformation.attributeTypeMap = [
    {
        "name": "selectedProducts",
        "baseName": "selectedProducts",
        "type": "Boardingv1registrationsProductInformationSelectedProducts"
    }
];
class Boardingv1registrationsProductInformationSelectedProducts {
    static getAttributeTypeMap() {
        return Boardingv1registrationsProductInformationSelectedProducts.attributeTypeMap;
    }
}
exports.Boardingv1registrationsProductInformationSelectedProducts = Boardingv1registrationsProductInformationSelectedProducts;
Boardingv1registrationsProductInformationSelectedProducts.discriminator = undefined;
Boardingv1registrationsProductInformationSelectedProducts.attributeTypeMap = [
    {
        "name": "payments",
        "baseName": "payments",
        "type": "PaymentsProducts"
    },
    {
        "name": "risk",
        "baseName": "risk",
        "type": "RiskProducts"
    },
    {
        "name": "commerceSolutions",
        "baseName": "commerceSolutions",
        "type": "CommerceSolutionsProducts"
    },
    {
        "name": "valueAddedServices",
        "baseName": "valueAddedServices",
        "type": "ValueAddedServicesProducts"
    }
];
class Boardingv1registrationsRegistrationInformation {
    static getAttributeTypeMap() {
        return Boardingv1registrationsRegistrationInformation.attributeTypeMap;
    }
}
exports.Boardingv1registrationsRegistrationInformation = Boardingv1registrationsRegistrationInformation;
Boardingv1registrationsRegistrationInformation.discriminator = undefined;
Boardingv1registrationsRegistrationInformation.attributeTypeMap = [
    {
        "name": "boardingRegistrationId",
        "baseName": "boardingRegistrationId",
        "type": "string"
    },
    {
        "name": "submitTimeUtc",
        "baseName": "submitTimeUtc",
        "type": "Date"
    },
    {
        "name": "status",
        "baseName": "status",
        "type": "Boardingv1registrationsRegistrationInformation.StatusEnum"
    },
    {
        "name": "boardingPackageId",
        "baseName": "boardingPackageId",
        "type": "string"
    },
    {
        "name": "boardingFlow",
        "baseName": "boardingFlow",
        "type": "Boardingv1registrationsRegistrationInformation.BoardingFlowEnum"
    },
    {
        "name": "mode",
        "baseName": "mode",
        "type": "Boardingv1registrationsRegistrationInformation.ModeEnum"
    },
    {
        "name": "salesRepId",
        "baseName": "salesRepId",
        "type": "string"
    }
];
(function (Boardingv1registrationsRegistrationInformation) {
    let StatusEnum;
    (function (StatusEnum) {
        StatusEnum[StatusEnum["PROCESSING"] = 'PROCESSING'] = "PROCESSING";
        StatusEnum[StatusEnum["SUCCESS"] = 'SUCCESS'] = "SUCCESS";
        StatusEnum[StatusEnum["FAILURE"] = 'FAILURE'] = "FAILURE";
        StatusEnum[StatusEnum["PARTIAL"] = 'PARTIAL'] = "PARTIAL";
    })(StatusEnum = Boardingv1registrationsRegistrationInformation.StatusEnum || (Boardingv1registrationsRegistrationInformation.StatusEnum = {}));
    let BoardingFlowEnum;
    (function (BoardingFlowEnum) {
        BoardingFlowEnum[BoardingFlowEnum["ENTERPRISE"] = 'ENTERPRISE'] = "ENTERPRISE";
        BoardingFlowEnum[BoardingFlowEnum["SMB"] = 'SMB'] = "SMB";
        BoardingFlowEnum[BoardingFlowEnum["ADDPRODUCT"] = 'ADDPRODUCT'] = "ADDPRODUCT";
    })(BoardingFlowEnum = Boardingv1registrationsRegistrationInformation.BoardingFlowEnum || (Boardingv1registrationsRegistrationInformation.BoardingFlowEnum = {}));
    let ModeEnum;
    (function (ModeEnum) {
        ModeEnum[ModeEnum["COMPLETE"] = 'COMPLETE'] = "COMPLETE";
        ModeEnum[ModeEnum["PARTIAL"] = 'PARTIAL'] = "PARTIAL";
    })(ModeEnum = Boardingv1registrationsRegistrationInformation.ModeEnum || (Boardingv1registrationsRegistrationInformation.ModeEnum = {}));
})(Boardingv1registrationsRegistrationInformation = exports.Boardingv1registrationsRegistrationInformation || (exports.Boardingv1registrationsRegistrationInformation = {}));
class Body {
    static getAttributeTypeMap() {
        return Body.attributeTypeMap;
    }
}
exports.Body = Body;
Body.discriminator = undefined;
Body.attributeTypeMap = [
    {
        "name": "type",
        "baseName": "type",
        "type": "string"
    },
    {
        "name": "included",
        "baseName": "included",
        "type": "Accountupdaterv1batchesIncluded"
    },
    {
        "name": "merchantReference",
        "baseName": "merchantReference",
        "type": "string"
    },
    {
        "name": "notificationEmail",
        "baseName": "notificationEmail",
        "type": "string"
    }
];
class Body1 {
    static getAttributeTypeMap() {
        return Body1.attributeTypeMap;
    }
}
exports.Body1 = Body1;
Body1.discriminator = undefined;
Body1.attributeTypeMap = [
    {
        "name": "merchantId",
        "baseName": "merchantId",
        "type": "string"
    },
    {
        "name": "description",
        "baseName": "description",
        "type": "string"
    },
    {
        "name": "deviceExternalId",
        "baseName": "deviceExternalId",
        "type": "string"
    },
    {
        "name": "paymentProcessor",
        "baseName": "paymentProcessor",
        "type": "Array<Dmsv2devicesPaymentProcessor>"
    },
    {
        "name": "serialNumber",
        "baseName": "serialNumber",
        "type": "string"
    },
    {
        "name": "cardEncryptionKsi",
        "baseName": "cardEncryptionKsi",
        "type": "string"
    },
    {
        "name": "cardEncryptionKeyName",
        "baseName": "cardEncryptionKeyName",
        "type": "string"
    },
    {
        "name": "pinEncryptionKsi",
        "baseName": "pinEncryptionKsi",
        "type": "string"
    },
    {
        "name": "pinEncryptionKeyName",
        "baseName": "pinEncryptionKeyName",
        "type": "string"
    },
    {
        "name": "hardwareRevision",
        "baseName": "hardwareRevision",
        "type": "string"
    },
    {
        "name": "firmwareVersion",
        "baseName": "firmwareVersion",
        "type": "string"
    },
    {
        "name": "paymentSoftwareVersion",
        "baseName": "paymentSoftwareVersion",
        "type": "string"
    },
    {
        "name": "configVersion",
        "baseName": "configVersion",
        "type": "string"
    },
    {
        "name": "teBagSerialNumber",
        "baseName": "teBagSerialNumber",
        "type": "string"
    },
    {
        "name": "shippedDateInUTC",
        "baseName": "shippedDateInUTC",
        "type": "Date"
    },
    {
        "name": "shippingTrackingNumber",
        "baseName": "shippingTrackingNumber",
        "type": "string"
    },
    {
        "name": "status",
        "baseName": "status",
        "type": "Body1.StatusEnum"
    },
    {
        "name": "statusChangeReason",
        "baseName": "statusChangeReason",
        "type": "Body1.StatusChangeReasonEnum"
    },
    {
        "name": "replacementReason",
        "baseName": "replacementReason",
        "type": "Body1.ReplacementReasonEnum"
    },
    {
        "name": "replacementSerialNumber",
        "baseName": "replacementSerialNumber",
        "type": "string"
    },
    {
        "name": "ticketNumber",
        "baseName": "ticketNumber",
        "type": "string"
    },
    {
        "name": "comment",
        "baseName": "comment",
        "type": "string"
    },
    {
        "name": "p2peStatus",
        "baseName": "p2peStatus",
        "type": "Body1.P2peStatusEnum"
    },
    {
        "name": "p2peConfirmation",
        "baseName": "p2peConfirmation",
        "type": "Body1.P2peConfirmationEnum"
    },
    {
        "name": "p2peConfirmationDateInUTC",
        "baseName": "p2peConfirmationDateInUTC",
        "type": "Date"
    }
];
(function (Body1) {
    let StatusEnum;
    (function (StatusEnum) {
        StatusEnum[StatusEnum["Active"] = 'Active'] = "Active";
        StatusEnum[StatusEnum["Inactive"] = 'Inactive'] = "Inactive";
    })(StatusEnum = Body1.StatusEnum || (Body1.StatusEnum = {}));
    let StatusChangeReasonEnum;
    (function (StatusChangeReasonEnum) {
        StatusChangeReasonEnum[StatusChangeReasonEnum["InProduction"] = 'In Production'] = "InProduction";
        StatusChangeReasonEnum[StatusChangeReasonEnum["PendingSetup"] = 'Pending Setup'] = "PendingSetup";
        StatusChangeReasonEnum[StatusChangeReasonEnum["Returned"] = 'Returned'] = "Returned";
        StatusChangeReasonEnum[StatusChangeReasonEnum["Replaced"] = 'Replaced'] = "Replaced";
        StatusChangeReasonEnum[StatusChangeReasonEnum["LostStolen"] = 'Lost/Stolen'] = "LostStolen";
        StatusChangeReasonEnum[StatusChangeReasonEnum["BrokenDamaged"] = 'Broken/Damaged'] = "BrokenDamaged";
        StatusChangeReasonEnum[StatusChangeReasonEnum["EndOfLife"] = 'End of Life'] = "EndOfLife";
        StatusChangeReasonEnum[StatusChangeReasonEnum["Other"] = 'Other'] = "Other";
    })(StatusChangeReasonEnum = Body1.StatusChangeReasonEnum || (Body1.StatusChangeReasonEnum = {}));
    let ReplacementReasonEnum;
    (function (ReplacementReasonEnum) {
        ReplacementReasonEnum[ReplacementReasonEnum["ChipReadError"] = 'Chip Read Error'] = "ChipReadError";
        ReplacementReasonEnum[ReplacementReasonEnum["Compromised"] = 'Compromised'] = "Compromised";
        ReplacementReasonEnum[ReplacementReasonEnum["IncorrectKeyInjection"] = 'Incorrect Key Injection'] = "IncorrectKeyInjection";
        ReplacementReasonEnum[ReplacementReasonEnum["IncorrectPassword"] = 'Incorrect Password'] = "IncorrectPassword";
        ReplacementReasonEnum[ReplacementReasonEnum["PowerIssue"] = 'Power Issue'] = "PowerIssue";
        ReplacementReasonEnum[ReplacementReasonEnum["SuspectedTampering"] = 'Suspected Tampering'] = "SuspectedTampering";
        ReplacementReasonEnum[ReplacementReasonEnum["Tampered"] = 'Tampered'] = "Tampered";
        ReplacementReasonEnum[ReplacementReasonEnum["TerminalError"] = 'Terminal Error'] = "TerminalError";
        ReplacementReasonEnum[ReplacementReasonEnum["Other"] = 'Other'] = "Other";
    })(ReplacementReasonEnum = Body1.ReplacementReasonEnum || (Body1.ReplacementReasonEnum = {}));
    let P2peStatusEnum;
    (function (P2peStatusEnum) {
        P2peStatusEnum[P2peStatusEnum["Enabled"] = 'Enabled'] = "Enabled";
        P2peStatusEnum[P2peStatusEnum["Disabled"] = 'Disabled'] = "Disabled";
    })(P2peStatusEnum = Body1.P2peStatusEnum || (Body1.P2peStatusEnum = {}));
    let P2peConfirmationEnum;
    (function (P2peConfirmationEnum) {
        P2peConfirmationEnum[P2peConfirmationEnum["Pending"] = 'Pending'] = "Pending";
        P2peConfirmationEnum[P2peConfirmationEnum["Confirmed"] = 'Confirmed'] = "Confirmed";
        P2peConfirmationEnum[P2peConfirmationEnum["Rejected"] = 'Rejected'] = "Rejected";
    })(P2peConfirmationEnum = Body1.P2peConfirmationEnum || (Body1.P2peConfirmationEnum = {}));
})(Body1 = exports.Body1 || (exports.Body1 = {}));
class Body2 {
    static getAttributeTypeMap() {
        return Body2.attributeTypeMap;
    }
}
exports.Body2 = Body2;
Body2.discriminator = undefined;
Body2.attributeTypeMap = [
    {
        "name": "id",
        "baseName": "id",
        "type": "string"
    },
    {
        "name": "type",
        "baseName": "type",
        "type": "string"
    },
    {
        "name": "customizations",
        "baseName": "customizations",
        "type": "{ [key: string]: string; }"
    }
];
class Body3 {
    static getAttributeTypeMap() {
        return Body3.attributeTypeMap;
    }
}
exports.Body3 = Body3;
Body3.discriminator = undefined;
Body3.attributeTypeMap = [
    {
        "name": "id",
        "baseName": "id",
        "type": "string"
    },
    {
        "name": "type",
        "baseName": "type",
        "type": "string"
    },
    {
        "name": "customizations",
        "baseName": "customizations",
        "type": "{ [key: string]: string; }"
    }
];
class CancelSubscriptionResponse {
    static getAttributeTypeMap() {
        return CancelSubscriptionResponse.attributeTypeMap;
    }
}
exports.CancelSubscriptionResponse = CancelSubscriptionResponse;
CancelSubscriptionResponse.discriminator = undefined;
CancelSubscriptionResponse.attributeTypeMap = [
    {
        "name": "links",
        "baseName": "_links",
        "type": "PtsV2IncrementalAuthorizationPatch201ResponseLinks"
    },
    {
        "name": "id",
        "baseName": "id",
        "type": "string"
    },
    {
        "name": "submitTimeUtc",
        "baseName": "submitTimeUtc",
        "type": "string"
    },
    {
        "name": "status",
        "baseName": "status",
        "type": "string"
    },
    {
        "name": "subscriptionInformation",
        "baseName": "subscriptionInformation",
        "type": "CancelSubscriptionResponseSubscriptionInformation"
    }
];
class CancelSubscriptionResponseSubscriptionInformation {
    static getAttributeTypeMap() {
        return CancelSubscriptionResponseSubscriptionInformation.attributeTypeMap;
    }
}
exports.CancelSubscriptionResponseSubscriptionInformation = CancelSubscriptionResponseSubscriptionInformation;
CancelSubscriptionResponseSubscriptionInformation.discriminator = undefined;
CancelSubscriptionResponseSubscriptionInformation.attributeTypeMap = [
    {
        "name": "code",
        "baseName": "code",
        "type": "string"
    },
    {
        "name": "status",
        "baseName": "status",
        "type": "string"
    }
];
class CapturePaymentRequest {
    static getAttributeTypeMap() {
        return CapturePaymentRequest.attributeTypeMap;
    }
}
exports.CapturePaymentRequest = CapturePaymentRequest;
CapturePaymentRequest.discriminator = undefined;
CapturePaymentRequest.attributeTypeMap = [
    {
        "name": "clientReferenceInformation",
        "baseName": "clientReferenceInformation",
        "type": "Ptsv2paymentsClientReferenceInformation"
    },
    {
        "name": "processingInformation",
        "baseName": "processingInformation",
        "type": "Ptsv2paymentsidcapturesProcessingInformation"
    },
    {
        "name": "paymentInformation",
        "baseName": "paymentInformation",
        "type": "Ptsv2paymentsidcapturesPaymentInformation"
    },
    {
        "name": "orderInformation",
        "baseName": "orderInformation",
        "type": "Ptsv2paymentsidcapturesOrderInformation"
    },
    {
        "name": "buyerInformation",
        "baseName": "buyerInformation",
        "type": "Ptsv2paymentsidcapturesBuyerInformation"
    },
    {
        "name": "deviceInformation",
        "baseName": "deviceInformation",
        "type": "Ptsv2paymentsidcapturesDeviceInformation"
    },
    {
        "name": "merchantInformation",
        "baseName": "merchantInformation",
        "type": "Ptsv2paymentsidcapturesMerchantInformation"
    },
    {
        "name": "aggregatorInformation",
        "baseName": "aggregatorInformation",
        "type": "Ptsv2paymentsidcapturesAggregatorInformation"
    },
    {
        "name": "pointOfSaleInformation",
        "baseName": "pointOfSaleInformation",
        "type": "Ptsv2paymentsidcapturesPointOfSaleInformation"
    },
    {
        "name": "merchantDefinedInformation",
        "baseName": "merchantDefinedInformation",
        "type": "Array<Ptsv2paymentsMerchantDefinedInformation>"
    },
    {
        "name": "merchantDefinedSecureInformation",
        "baseName": "merchantDefinedSecureInformation",
        "type": "Ptsv2paymentsMerchantDefinedSecureInformation"
    },
    {
        "name": "installmentInformation",
        "baseName": "installmentInformation",
        "type": "Ptsv2paymentsidcapturesInstallmentInformation"
    },
    {
        "name": "travelInformation",
        "baseName": "travelInformation",
        "type": "Ptsv2paymentsTravelInformation"
    },
    {
        "name": "promotionInformation",
        "baseName": "promotionInformation",
        "type": "Ptsv2paymentsPromotionInformation"
    }
];
class CardProcessingConfig {
    static getAttributeTypeMap() {
        return CardProcessingConfig.attributeTypeMap;
    }
}
exports.CardProcessingConfig = CardProcessingConfig;
CardProcessingConfig.discriminator = undefined;
CardProcessingConfig.attributeTypeMap = [
    {
        "name": "common",
        "baseName": "common",
        "type": "CardProcessingConfigCommon"
    },
    {
        "name": "features",
        "baseName": "features",
        "type": "CardProcessingConfigFeatures"
    }
];
class CardProcessingConfigCommon {
    static getAttributeTypeMap() {
        return CardProcessingConfigCommon.attributeTypeMap;
    }
}
exports.CardProcessingConfigCommon = CardProcessingConfigCommon;
CardProcessingConfigCommon.discriminator = undefined;
CardProcessingConfigCommon.attributeTypeMap = [
    {
        "name": "processors",
        "baseName": "processors",
        "type": "{ [key: string]: CardProcessingConfigCommonProcessors; }"
    },
    {
        "name": "amexVendorCode",
        "baseName": "amexVendorCode",
        "type": "string"
    },
    {
        "name": "defaultAuthTypeCode",
        "baseName": "defaultAuthTypeCode",
        "type": "CardProcessingConfigCommon.DefaultAuthTypeCodeEnum"
    },
    {
        "name": "masterCardAssignedId",
        "baseName": "masterCardAssignedId",
        "type": "string"
    },
    {
        "name": "enablePartialAuth",
        "baseName": "enablePartialAuth",
        "type": "boolean"
    },
    {
        "name": "merchantCategoryCode",
        "baseName": "merchantCategoryCode",
        "type": "string"
    },
    {
        "name": "sicCode",
        "baseName": "sicCode",
        "type": "string"
    },
    {
        "name": "foodAndConsumerServiceId",
        "baseName": "foodAndConsumerServiceId",
        "type": "string"
    },
    {
        "name": "enableSplitShipment",
        "baseName": "enableSplitShipment",
        "type": "boolean"
    },
    {
        "name": "enableInterchangeOptimization",
        "baseName": "enableInterchangeOptimization",
        "type": "boolean"
    },
    {
        "name": "visaDelegatedAuthenticationId",
        "baseName": "visaDelegatedAuthenticationId",
        "type": "string"
    },
    {
        "name": "creditCardRefundLimitPercent",
        "baseName": "creditCardRefundLimitPercent",
        "type": "string"
    },
    {
        "name": "businessCenterCreditCardRefundLimitPercent",
        "baseName": "businessCenterCreditCardRefundLimitPercent",
        "type": "string"
    },
    {
        "name": "allowCapturesGreaterThanAuthorizations",
        "baseName": "allowCapturesGreaterThanAuthorizations",
        "type": "boolean"
    },
    {
        "name": "enableDuplicateMerchantReferenceNumberBlocking",
        "baseName": "enableDuplicateMerchantReferenceNumberBlocking",
        "type": "boolean"
    },
    {
        "name": "domesticMerchantId",
        "baseName": "domesticMerchantId",
        "type": "boolean"
    },
    {
        "name": "processLevel3Data",
        "baseName": "processLevel3Data",
        "type": "string"
    },
    {
        "name": "subMerchantId",
        "baseName": "subMerchantId",
        "type": "string"
    },
    {
        "name": "subMerchantBusinessName",
        "baseName": "subMerchantBusinessName",
        "type": "string"
    },
    {
        "name": "preferCobadgedSecondaryBrand",
        "baseName": "preferCobadgedSecondaryBrand",
        "type": "boolean"
    },
    {
        "name": "merchantDescriptorInformation",
        "baseName": "merchantDescriptorInformation",
        "type": "CardProcessingConfigCommonMerchantDescriptorInformation"
    },
    {
        "name": "governmentControlled",
        "baseName": "governmentControlled",
        "type": "boolean"
    },
    {
        "name": "dropBillingInfo",
        "baseName": "dropBillingInfo",
        "type": "boolean"
    }
];
(function (CardProcessingConfigCommon) {
    let DefaultAuthTypeCodeEnum;
    (function (DefaultAuthTypeCodeEnum) {
        DefaultAuthTypeCodeEnum[DefaultAuthTypeCodeEnum["PRE"] = 'PRE'] = "PRE";
        DefaultAuthTypeCodeEnum[DefaultAuthTypeCodeEnum["FINAL"] = 'FINAL'] = "FINAL";
        DefaultAuthTypeCodeEnum[DefaultAuthTypeCodeEnum["UNDEFINED"] = 'UNDEFINED'] = "UNDEFINED";
    })(DefaultAuthTypeCodeEnum = CardProcessingConfigCommon.DefaultAuthTypeCodeEnum || (CardProcessingConfigCommon.DefaultAuthTypeCodeEnum = {}));
})(CardProcessingConfigCommon = exports.CardProcessingConfigCommon || (exports.CardProcessingConfigCommon = {}));
/**
* Identifies the financial institution acting as the acquirer of this customer transaction. The acquirer is the member or system user that signed the merchant.
*/
class CardProcessingConfigCommonAcquirer {
    static getAttributeTypeMap() {
        return CardProcessingConfigCommonAcquirer.attributeTypeMap;
    }
}
exports.CardProcessingConfigCommonAcquirer = CardProcessingConfigCommonAcquirer;
CardProcessingConfigCommonAcquirer.discriminator = undefined;
CardProcessingConfigCommonAcquirer.attributeTypeMap = [
    {
        "name": "institutionId",
        "baseName": "institutionId",
        "type": "string"
    },
    {
        "name": "interbankCardAssociationId",
        "baseName": "interbankCardAssociationId",
        "type": "string"
    },
    {
        "name": "discoverInstitutionId",
        "baseName": "discoverInstitutionId",
        "type": "string"
    },
    {
        "name": "unionPayInstitutionId",
        "baseName": "unionPayInstitutionId",
        "type": "string"
    },
    {
        "name": "dinersClubInstitutionId",
        "baseName": "dinersClubInstitutionId",
        "type": "string"
    },
    {
        "name": "countryCode",
        "baseName": "countryCode",
        "type": "string"
    },
    {
        "name": "fileDestinationBin",
        "baseName": "fileDestinationBin",
        "type": "string"
    }
];
class CardProcessingConfigCommonCurrencies {
    static getAttributeTypeMap() {
        return CardProcessingConfigCommonCurrencies.attributeTypeMap;
    }
}
exports.CardProcessingConfigCommonCurrencies = CardProcessingConfigCommonCurrencies;
CardProcessingConfigCommonCurrencies.discriminator = undefined;
CardProcessingConfigCommonCurrencies.attributeTypeMap = [
    {
        "name": "enabled",
        "baseName": "enabled",
        "type": "boolean"
    },
    {
        "name": "enabledCardPresent",
        "baseName": "enabledCardPresent",
        "type": "boolean"
    },
    {
        "name": "enabledCardNotPresent",
        "baseName": "enabledCardNotPresent",
        "type": "boolean"
    },
    {
        "name": "merchantId",
        "baseName": "merchantId",
        "type": "string"
    },
    {
        "name": "terminalId",
        "baseName": "terminalId",
        "type": "string"
    },
    {
        "name": "terminalIds",
        "baseName": "terminalIds",
        "type": "Array<string>"
    },
    {
        "name": "serviceEnablementNumber",
        "baseName": "serviceEnablementNumber",
        "type": "string"
    }
];
class CardProcessingConfigCommonCurrencies1 {
    static getAttributeTypeMap() {
        return CardProcessingConfigCommonCurrencies1.attributeTypeMap;
    }
}
exports.CardProcessingConfigCommonCurrencies1 = CardProcessingConfigCommonCurrencies1;
CardProcessingConfigCommonCurrencies1.discriminator = undefined;
CardProcessingConfigCommonCurrencies1.attributeTypeMap = [
    {
        "name": "enabled",
        "baseName": "enabled",
        "type": "boolean"
    },
    {
        "name": "enabledCardPresent",
        "baseName": "enabledCardPresent",
        "type": "boolean"
    },
    {
        "name": "enabledCardNotPresent",
        "baseName": "enabledCardNotPresent",
        "type": "boolean"
    },
    {
        "name": "merchantId",
        "baseName": "merchantId",
        "type": "any"
    },
    {
        "name": "terminalId",
        "baseName": "terminalId",
        "type": "any"
    },
    {
        "name": "terminalIds",
        "baseName": "terminalIds",
        "type": "Array<string>"
    },
    {
        "name": "serviceEnablementNumber",
        "baseName": "serviceEnablementNumber",
        "type": "any"
    }
];
/**
* A merchant descriptor is the line of copy that identifies transactions on a cardholder’s account activity and statement. If this information is not populated, the data will be retrieved from OMS.
*/
class CardProcessingConfigCommonMerchantDescriptorInformation {
    static getAttributeTypeMap() {
        return CardProcessingConfigCommonMerchantDescriptorInformation.attributeTypeMap;
    }
}
exports.CardProcessingConfigCommonMerchantDescriptorInformation = CardProcessingConfigCommonMerchantDescriptorInformation;
CardProcessingConfigCommonMerchantDescriptorInformation.discriminator = undefined;
CardProcessingConfigCommonMerchantDescriptorInformation.attributeTypeMap = [
    {
        "name": "name",
        "baseName": "name",
        "type": "string"
    },
    {
        "name": "city",
        "baseName": "city",
        "type": "string"
    },
    {
        "name": "country",
        "baseName": "country",
        "type": "string"
    },
    {
        "name": "phone",
        "baseName": "phone",
        "type": "string"
    },
    {
        "name": "state",
        "baseName": "state",
        "type": "string"
    },
    {
        "name": "street",
        "baseName": "street",
        "type": "string"
    },
    {
        "name": "zip",
        "baseName": "zip",
        "type": "string"
    },
    {
        "name": "url",
        "baseName": "url",
        "type": "string"
    },
    {
        "name": "countryOfOrigin",
        "baseName": "countryOfOrigin",
        "type": "string"
    }
];
class CardProcessingConfigCommonPaymentTypes {
    static getAttributeTypeMap() {
        return CardProcessingConfigCommonPaymentTypes.attributeTypeMap;
    }
}
exports.CardProcessingConfigCommonPaymentTypes = CardProcessingConfigCommonPaymentTypes;
CardProcessingConfigCommonPaymentTypes.discriminator = undefined;
CardProcessingConfigCommonPaymentTypes.attributeTypeMap = [
    {
        "name": "enabled",
        "baseName": "enabled",
        "type": "boolean"
    },
    {
        "name": "currencies",
        "baseName": "currencies",
        "type": "{ [key: string]: CardProcessingConfigCommonCurrencies; }"
    }
];
class CardProcessingConfigCommonProcessors {
    static getAttributeTypeMap() {
        return CardProcessingConfigCommonProcessors.attributeTypeMap;
    }
}
exports.CardProcessingConfigCommonProcessors = CardProcessingConfigCommonProcessors;
CardProcessingConfigCommonProcessors.discriminator = undefined;
CardProcessingConfigCommonProcessors.attributeTypeMap = [
    {
        "name": "batchGroup",
        "baseName": "batchGroup",
        "type": "string"
    },
    {
        "name": "businessApplicationId",
        "baseName": "businessApplicationId",
        "type": "string"
    },
    {
        "name": "merchantVerificationValue",
        "baseName": "merchantVerificationValue",
        "type": "string"
    },
    {
        "name": "abaNumber",
        "baseName": "abaNumber",
        "type": "string"
    },
    {
        "name": "acquirer",
        "baseName": "acquirer",
        "type": "CardProcessingConfigCommonAcquirer"
    },
    {
        "name": "merchantId",
        "baseName": "merchantId",
        "type": "string"
    },
    {
        "name": "terminalId",
        "baseName": "terminalId",
        "type": "string"
    },
    {
        "name": "paymentTypes",
        "baseName": "paymentTypes",
        "type": "{ [key: string]: CardProcessingConfigCommonPaymentTypes; }"
    },
    {
        "name": "currencies",
        "baseName": "currencies",
        "type": "{ [key: string]: CardProcessingConfigCommonCurrencies1; }"
    },
    {
        "name": "visaAggregatorId",
        "baseName": "visaAggregatorId",
        "type": "string"
    },
    {
        "name": "amexAggregatorId",
        "baseName": "amexAggregatorId",
        "type": "string"
    },
    {
        "name": "masterCardAggregatorId",
        "baseName": "masterCardAggregatorId",
        "type": "string"
    },
    {
        "name": "sicCode",
        "baseName": "sicCode",
        "type": "string"
    },
    {
        "name": "allowMultipleBills",
        "baseName": "allowMultipleBills",
        "type": "boolean"
    },
    {
        "name": "allowMerchantDescriptorOverride",
        "baseName": "allowMerchantDescriptorOverride",
        "type": "boolean"
    },
    {
        "name": "enhancedData",
        "baseName": "enhancedData",
        "type": "string"
    },
    {
        "name": "fireSafetyIndicator",
        "baseName": "fireSafetyIndicator",
        "type": "boolean"
    },
    {
        "name": "quasiCash",
        "baseName": "quasiCash",
        "type": "boolean"
    },
    {
        "name": "acquirerMerchantId",
        "baseName": "acquirerMerchantId",
        "type": "string"
    },
    {
        "name": "avsFormat",
        "baseName": "avsFormat",
        "type": "string"
    },
    {
        "name": "enableLongTransRefNo",
        "baseName": "enableLongTransRefNo",
        "type": "boolean"
    },
    {
        "name": "enableLevel2",
        "baseName": "enableLevel2",
        "type": "boolean"
    },
    {
        "name": "enableMultipleTransactionAdviceAddendum",
        "baseName": "enableMultipleTransactionAdviceAddendum",
        "type": "boolean"
    },
    {
        "name": "amexTransactionAdviceAddendum1",
        "baseName": "amexTransactionAdviceAddendum1",
        "type": "string"
    },
    {
        "name": "enableMultiLineItems",
        "baseName": "enableMultiLineItems",
        "type": "boolean"
    },
    {
        "name": "enableTransactionReferenceNumber",
        "baseName": "enableTransactionReferenceNumber",
        "type": "boolean"
    },
    {
        "name": "enableAutoAuthReversalAfterVoid",
        "baseName": "enableAutoAuthReversalAfterVoid",
        "type": "boolean"
    },
    {
        "name": "enableExpresspayPanTranslation",
        "baseName": "enableExpresspayPanTranslation",
        "type": "boolean"
    },
    {
        "name": "enableCreditAuth",
        "baseName": "enableCreditAuth",
        "type": "boolean"
    },
    {
        "name": "industryCode",
        "baseName": "industryCode",
        "type": "CardProcessingConfigCommonProcessors.IndustryCodeEnum"
    },
    {
        "name": "sendAmexLevel2Data",
        "baseName": "sendAmexLevel2Data",
        "type": "boolean"
    },
    {
        "name": "softDescriptorType",
        "baseName": "softDescriptorType",
        "type": "string"
    },
    {
        "name": "vitalNumber",
        "baseName": "vitalNumber",
        "type": "string"
    },
    {
        "name": "bankNumber",
        "baseName": "bankNumber",
        "type": "string"
    },
    {
        "name": "chainNumber",
        "baseName": "chainNumber",
        "type": "string"
    },
    {
        "name": "merchantBinNumber",
        "baseName": "merchantBinNumber",
        "type": "string"
    },
    {
        "name": "merchantLocationNumber",
        "baseName": "merchantLocationNumber",
        "type": "string"
    },
    {
        "name": "storeID",
        "baseName": "storeID",
        "type": "string"
    },
    {
        "name": "travelAgencyCode",
        "baseName": "travelAgencyCode",
        "type": "string"
    },
    {
        "name": "travelAgencyName",
        "baseName": "travelAgencyName",
        "type": "string"
    },
    {
        "name": "settlementCurrency",
        "baseName": "settlementCurrency",
        "type": "string"
    },
    {
        "name": "enableLeastCostRouting",
        "baseName": "enableLeastCostRouting",
        "type": "boolean"
    },
    {
        "name": "enableCVVResponseIndicator",
        "baseName": "enableCVVResponseIndicator",
        "type": "boolean"
    },
    {
        "name": "enableMultiCurrencyProcessing",
        "baseName": "enableMultiCurrencyProcessing",
        "type": "string"
    },
    {
        "name": "enablePosNetworkSwitching",
        "baseName": "enablePosNetworkSwitching",
        "type": "boolean"
    },
    {
        "name": "enableDynamicCurrencyConversion",
        "baseName": "enableDynamicCurrencyConversion",
        "type": "boolean"
    },
    {
        "name": "merchantTier",
        "baseName": "merchantTier",
        "type": "string"
    }
];
(function (CardProcessingConfigCommonProcessors) {
    let IndustryCodeEnum;
    (function (IndustryCodeEnum) {
        IndustryCodeEnum[IndustryCodeEnum["_0"] = '0'] = "_0";
        IndustryCodeEnum[IndustryCodeEnum["A"] = 'A'] = "A";
        IndustryCodeEnum[IndustryCodeEnum["B"] = 'B'] = "B";
        IndustryCodeEnum[IndustryCodeEnum["D"] = 'D'] = "D";
        IndustryCodeEnum[IndustryCodeEnum["F"] = 'F'] = "F";
        IndustryCodeEnum[IndustryCodeEnum["G"] = 'G'] = "G";
        IndustryCodeEnum[IndustryCodeEnum["H"] = 'H'] = "H";
        IndustryCodeEnum[IndustryCodeEnum["L"] = 'L'] = "L";
        IndustryCodeEnum[IndustryCodeEnum["O"] = 'O'] = "O";
        IndustryCodeEnum[IndustryCodeEnum["P"] = 'P'] = "P";
        IndustryCodeEnum[IndustryCodeEnum["R"] = 'R'] = "R";
    })(IndustryCodeEnum = CardProcessingConfigCommonProcessors.IndustryCodeEnum || (CardProcessingConfigCommonProcessors.IndustryCodeEnum = {}));
})(CardProcessingConfigCommonProcessors = exports.CardProcessingConfigCommonProcessors || (exports.CardProcessingConfigCommonProcessors = {}));
class CardProcessingConfigFeatures {
    static getAttributeTypeMap() {
        return CardProcessingConfigFeatures.attributeTypeMap;
    }
}
exports.CardProcessingConfigFeatures = CardProcessingConfigFeatures;
CardProcessingConfigFeatures.discriminator = undefined;
CardProcessingConfigFeatures.attributeTypeMap = [
    {
        "name": "cardNotPresent",
        "baseName": "cardNotPresent",
        "type": "CardProcessingConfigFeaturesCardNotPresent"
    },
    {
        "name": "cardPresent",
        "baseName": "cardPresent",
        "type": "CardProcessingConfigFeaturesCardPresent"
    }
];
class CardProcessingConfigFeaturesCardNotPresent {
    static getAttributeTypeMap() {
        return CardProcessingConfigFeaturesCardNotPresent.attributeTypeMap;
    }
}
exports.CardProcessingConfigFeaturesCardNotPresent = CardProcessingConfigFeaturesCardNotPresent;
CardProcessingConfigFeaturesCardNotPresent.discriminator = undefined;
CardProcessingConfigFeaturesCardNotPresent.attributeTypeMap = [
    {
        "name": "processors",
        "baseName": "processors",
        "type": "{ [key: string]: CardProcessingConfigFeaturesCardNotPresentProcessors; }"
    },
    {
        "name": "ignoreAddressVerificationSystem",
        "baseName": "ignoreAddressVerificationSystem",
        "type": "boolean"
    },
    {
        "name": "visaStraightThroughProcessingOnly",
        "baseName": "visaStraightThroughProcessingOnly",
        "type": "boolean"
    },
    {
        "name": "amexTransactionAdviceAddendum1",
        "baseName": "amexTransactionAdviceAddendum1",
        "type": "string"
    },
    {
        "name": "installment",
        "baseName": "installment",
        "type": "CardProcessingConfigFeaturesCardNotPresentInstallment"
    }
];
class CardProcessingConfigFeaturesCardNotPresentInstallment {
    static getAttributeTypeMap() {
        return CardProcessingConfigFeaturesCardNotPresentInstallment.attributeTypeMap;
    }
}
exports.CardProcessingConfigFeaturesCardNotPresentInstallment = CardProcessingConfigFeaturesCardNotPresentInstallment;
CardProcessingConfigFeaturesCardNotPresentInstallment.discriminator = undefined;
CardProcessingConfigFeaturesCardNotPresentInstallment.attributeTypeMap = [
    {
        "name": "enableInstallment",
        "baseName": "enableInstallment",
        "type": "boolean"
    },
    {
        "name": "installmentPlan",
        "baseName": "installmentPlan",
        "type": "string"
    }
];
class CardProcessingConfigFeaturesCardNotPresentPayouts {
    static getAttributeTypeMap() {
        return CardProcessingConfigFeaturesCardNotPresentPayouts.attributeTypeMap;
    }
}
exports.CardProcessingConfigFeaturesCardNotPresentPayouts = CardProcessingConfigFeaturesCardNotPresentPayouts;
CardProcessingConfigFeaturesCardNotPresentPayouts.discriminator = undefined;
CardProcessingConfigFeaturesCardNotPresentPayouts.attributeTypeMap = [
    {
        "name": "reimbursementCode",
        "baseName": "reimbursementCode",
        "type": "string"
    },
    {
        "name": "acquiringInstitutionId",
        "baseName": "acquiringInstitutionId",
        "type": "string"
    },
    {
        "name": "businessApplicationId",
        "baseName": "businessApplicationId",
        "type": "string"
    },
    {
        "name": "financialInstitutionId",
        "baseName": "financialInstitutionId",
        "type": "string"
    },
    {
        "name": "merchantAbaNumber",
        "baseName": "merchantAbaNumber",
        "type": "string"
    },
    {
        "name": "networkOrder",
        "baseName": "networkOrder",
        "type": "string"
    },
    {
        "name": "currencies",
        "baseName": "currencies",
        "type": "{ [key: string]: CardProcessingConfigFeaturesCardNotPresentPayoutsCurrencies; }"
    },
    {
        "name": "merchantId",
        "baseName": "merchantId",
        "type": "string"
    },
    {
        "name": "terminalId",
        "baseName": "terminalId",
        "type": "string"
    }
];
class CardProcessingConfigFeaturesCardNotPresentPayoutsCurrencies {
    static getAttributeTypeMap() {
        return CardProcessingConfigFeaturesCardNotPresentPayoutsCurrencies.attributeTypeMap;
    }
}
exports.CardProcessingConfigFeaturesCardNotPresentPayoutsCurrencies = CardProcessingConfigFeaturesCardNotPresentPayoutsCurrencies;
CardProcessingConfigFeaturesCardNotPresentPayoutsCurrencies.discriminator = undefined;
CardProcessingConfigFeaturesCardNotPresentPayoutsCurrencies.attributeTypeMap = [
    {
        "name": "enabled",
        "baseName": "enabled",
        "type": "boolean"
    },
    {
        "name": "enabledCardPresent",
        "baseName": "enabledCardPresent",
        "type": "boolean"
    },
    {
        "name": "enabledCardNotPresent",
        "baseName": "enabledCardNotPresent",
        "type": "boolean"
    },
    {
        "name": "merchantId",
        "baseName": "merchantId",
        "type": "string"
    },
    {
        "name": "terminalId",
        "baseName": "terminalId",
        "type": "string"
    },
    {
        "name": "terminalIds",
        "baseName": "terminalIds",
        "type": "Array<string>"
    },
    {
        "name": "serviceEnablementNumber",
        "baseName": "serviceEnablementNumber",
        "type": "string"
    }
];
class CardProcessingConfigFeaturesCardNotPresentProcessors {
    static getAttributeTypeMap() {
        return CardProcessingConfigFeaturesCardNotPresentProcessors.attributeTypeMap;
    }
}
exports.CardProcessingConfigFeaturesCardNotPresentProcessors = CardProcessingConfigFeaturesCardNotPresentProcessors;
CardProcessingConfigFeaturesCardNotPresentProcessors.discriminator = undefined;
CardProcessingConfigFeaturesCardNotPresentProcessors.attributeTypeMap = [
    {
        "name": "relaxAddressVerificationSystem",
        "baseName": "relaxAddressVerificationSystem",
        "type": "boolean"
    },
    {
        "name": "relaxAddressVerificationSystemAllowZipWithoutCountry",
        "baseName": "relaxAddressVerificationSystemAllowZipWithoutCountry",
        "type": "boolean"
    },
    {
        "name": "relaxAddressVerificationSystemAllowExpiredCard",
        "baseName": "relaxAddressVerificationSystemAllowExpiredCard",
        "type": "boolean"
    },
    {
        "name": "enableEmsTransactionRiskScore",
        "baseName": "enableEmsTransactionRiskScore",
        "type": "boolean"
    },
    {
        "name": "prestigiousPropertyIndicator",
        "baseName": "prestigiousPropertyIndicator",
        "type": "string"
    },
    {
        "name": "payouts",
        "baseName": "payouts",
        "type": "CardProcessingConfigFeaturesCardNotPresentPayouts"
    }
];
class CardProcessingConfigFeaturesCardPresent {
    static getAttributeTypeMap() {
        return CardProcessingConfigFeaturesCardPresent.attributeTypeMap;
    }
}
exports.CardProcessingConfigFeaturesCardPresent = CardProcessingConfigFeaturesCardPresent;
CardProcessingConfigFeaturesCardPresent.discriminator = undefined;
CardProcessingConfigFeaturesCardPresent.attributeTypeMap = [
    {
        "name": "processors",
        "baseName": "processors",
        "type": "{ [key: string]: CardProcessingConfigFeaturesCardPresentProcessors; }"
    },
    {
        "name": "enableTerminalIdLookup",
        "baseName": "enableTerminalIdLookup",
        "type": "boolean"
    }
];
class CardProcessingConfigFeaturesCardPresentProcessors {
    static getAttributeTypeMap() {
        return CardProcessingConfigFeaturesCardPresentProcessors.attributeTypeMap;
    }
}
exports.CardProcessingConfigFeaturesCardPresentProcessors = CardProcessingConfigFeaturesCardPresentProcessors;
CardProcessingConfigFeaturesCardPresentProcessors.discriminator = undefined;
CardProcessingConfigFeaturesCardPresentProcessors.attributeTypeMap = [
    {
        "name": "defaultPointOfSaleTerminalId",
        "baseName": "defaultPointOfSaleTerminalId",
        "type": "string"
    },
    {
        "name": "pointOfSaleTerminalIds",
        "baseName": "pointOfSaleTerminalIds",
        "type": "Array<string>"
    },
    {
        "name": "disablePointOfSaleTerminalIdValidation",
        "baseName": "disablePointOfSaleTerminalIdValidation",
        "type": "boolean"
    },
    {
        "name": "pinDebitNetworkOrder",
        "baseName": "pinDebitNetworkOrder",
        "type": "string"
    },
    {
        "name": "pinDebitReimbursementCode",
        "baseName": "pinDebitReimbursementCode",
        "type": "string"
    },
    {
        "name": "financialInstitutionId",
        "baseName": "financialInstitutionId",
        "type": "string"
    },
    {
        "name": "enablePinTranslation",
        "baseName": "enablePinTranslation",
        "type": "boolean"
    }
];
class CaseManagementActionsRequest {
    static getAttributeTypeMap() {
        return CaseManagementActionsRequest.attributeTypeMap;
    }
}
exports.CaseManagementActionsRequest = CaseManagementActionsRequest;
CaseManagementActionsRequest.discriminator = undefined;
CaseManagementActionsRequest.attributeTypeMap = [
    {
        "name": "decisionInformation",
        "baseName": "decisionInformation",
        "type": "Riskv1decisionsidactionsDecisionInformation"
    },
    {
        "name": "processingInformation",
        "baseName": "processingInformation",
        "type": "Riskv1decisionsidactionsProcessingInformation"
    }
];
class CaseManagementCommentsRequest {
    static getAttributeTypeMap() {
        return CaseManagementCommentsRequest.attributeTypeMap;
    }
}
exports.CaseManagementCommentsRequest = CaseManagementCommentsRequest;
CaseManagementCommentsRequest.discriminator = undefined;
CaseManagementCommentsRequest.attributeTypeMap = [
    {
        "name": "comments",
        "baseName": "comments",
        "type": "string"
    }
];
class CheckPayerAuthEnrollmentRequest {
    static getAttributeTypeMap() {
        return CheckPayerAuthEnrollmentRequest.attributeTypeMap;
    }
}
exports.CheckPayerAuthEnrollmentRequest = CheckPayerAuthEnrollmentRequest;
CheckPayerAuthEnrollmentRequest.discriminator = undefined;
CheckPayerAuthEnrollmentRequest.attributeTypeMap = [
    {
        "name": "clientReferenceInformation",
        "baseName": "clientReferenceInformation",
        "type": "Riskv1authenticationsetupsClientReferenceInformation"
    },
    {
        "name": "orderInformation",
        "baseName": "orderInformation",
        "type": "Riskv1authenticationsOrderInformation"
    },
    {
        "name": "paymentInformation",
        "baseName": "paymentInformation",
        "type": "Riskv1authenticationsPaymentInformation"
    },
    {
        "name": "processingInformation",
        "baseName": "processingInformation",
        "type": "Riskv1authenticationsetupsProcessingInformation"
    },
    {
        "name": "tokenInformation",
        "baseName": "tokenInformation",
        "type": "Riskv1authenticationsetupsTokenInformation"
    },
    {
        "name": "buyerInformation",
        "baseName": "buyerInformation",
        "type": "Riskv1authenticationsBuyerInformation"
    },
    {
        "name": "deviceInformation",
        "baseName": "deviceInformation",
        "type": "Riskv1authenticationsDeviceInformation"
    },
    {
        "name": "merchantInformation",
        "baseName": "merchantInformation",
        "type": "Riskv1decisionsMerchantInformation"
    },
    {
        "name": "acquirerInformation",
        "baseName": "acquirerInformation",
        "type": "Riskv1decisionsAcquirerInformation"
    },
    {
        "name": "recurringPaymentInformation",
        "baseName": "recurringPaymentInformation",
        "type": "Ptsv2paymentsRecurringPaymentInformation"
    },
    {
        "name": "consumerAuthenticationInformation",
        "baseName": "consumerAuthenticationInformation",
        "type": "Riskv1decisionsConsumerAuthenticationInformation"
    },
    {
        "name": "riskInformation",
        "baseName": "riskInformation",
        "type": "Riskv1authenticationsRiskInformation"
    },
    {
        "name": "travelInformation",
        "baseName": "travelInformation",
        "type": "Riskv1authenticationsTravelInformation"
    },
    {
        "name": "merchantDefinedInformation",
        "baseName": "merchantDefinedInformation",
        "type": "Array<Riskv1decisionsMerchantDefinedInformation>"
    }
];
class CommerceSolutionsProducts {
    static getAttributeTypeMap() {
        return CommerceSolutionsProducts.attributeTypeMap;
    }
}
exports.CommerceSolutionsProducts = CommerceSolutionsProducts;
CommerceSolutionsProducts.discriminator = undefined;
CommerceSolutionsProducts.attributeTypeMap = [
    {
        "name": "tokenManagement",
        "baseName": "tokenManagement",
        "type": "CommerceSolutionsProductsTokenManagement"
    },
    {
        "name": "accountUpdater",
        "baseName": "accountUpdater",
        "type": "CommerceSolutionsProductsAccountUpdater"
    },
    {
        "name": "binLookup",
        "baseName": "binLookup",
        "type": "CommerceSolutionsProductsBinLookup"
    }
];
class CommerceSolutionsProductsAccountUpdater {
    static getAttributeTypeMap() {
        return CommerceSolutionsProductsAccountUpdater.attributeTypeMap;
    }
}
exports.CommerceSolutionsProductsAccountUpdater = CommerceSolutionsProductsAccountUpdater;
CommerceSolutionsProductsAccountUpdater.discriminator = undefined;
CommerceSolutionsProductsAccountUpdater.attributeTypeMap = [
    {
        "name": "subscriptionInformation",
        "baseName": "subscriptionInformation",
        "type": "PaymentsProductsAlternativePaymentMethodsSubscriptionInformation"
    },
    {
        "name": "configurationInformation",
        "baseName": "configurationInformation",
        "type": "CommerceSolutionsProductsAccountUpdaterConfigurationInformation"
    }
];
class CommerceSolutionsProductsAccountUpdaterConfigurationInformation {
    static getAttributeTypeMap() {
        return CommerceSolutionsProductsAccountUpdaterConfigurationInformation.attributeTypeMap;
    }
}
exports.CommerceSolutionsProductsAccountUpdaterConfigurationInformation = CommerceSolutionsProductsAccountUpdaterConfigurationInformation;
CommerceSolutionsProductsAccountUpdaterConfigurationInformation.discriminator = undefined;
CommerceSolutionsProductsAccountUpdaterConfigurationInformation.attributeTypeMap = [
    {
        "name": "templateId",
        "baseName": "templateId",
        "type": "string"
    },
    {
        "name": "configurations",
        "baseName": "configurations",
        "type": "CommerceSolutionsProductsAccountUpdaterConfigurationInformationConfigurations"
    }
];
class CommerceSolutionsProductsAccountUpdaterConfigurationInformationConfigurations {
    static getAttributeTypeMap() {
        return CommerceSolutionsProductsAccountUpdaterConfigurationInformationConfigurations.attributeTypeMap;
    }
}
exports.CommerceSolutionsProductsAccountUpdaterConfigurationInformationConfigurations = CommerceSolutionsProductsAccountUpdaterConfigurationInformationConfigurations;
CommerceSolutionsProductsAccountUpdaterConfigurationInformationConfigurations.discriminator = undefined;
CommerceSolutionsProductsAccountUpdaterConfigurationInformationConfigurations.attributeTypeMap = [
    {
        "name": "masterCard",
        "baseName": "masterCard",
        "type": "CommerceSolutionsProductsAccountUpdaterConfigurationInformationConfigurationsMasterCard"
    },
    {
        "name": "visa",
        "baseName": "visa",
        "type": "CommerceSolutionsProductsAccountUpdaterConfigurationInformationConfigurationsVisa"
    },
    {
        "name": "amex",
        "baseName": "amex",
        "type": "CommerceSolutionsProductsAccountUpdaterConfigurationInformationConfigurationsAmex"
    },
    {
        "name": "preferredDay",
        "baseName": "preferredDay",
        "type": "number"
    },
    {
        "name": "daysWindow",
        "baseName": "daysWindow",
        "type": "number"
    }
];
class CommerceSolutionsProductsAccountUpdaterConfigurationInformationConfigurationsAmex {
    static getAttributeTypeMap() {
        return CommerceSolutionsProductsAccountUpdaterConfigurationInformationConfigurationsAmex.attributeTypeMap;
    }
}
exports.CommerceSolutionsProductsAccountUpdaterConfigurationInformationConfigurationsAmex = CommerceSolutionsProductsAccountUpdaterConfigurationInformationConfigurationsAmex;
CommerceSolutionsProductsAccountUpdaterConfigurationInformationConfigurationsAmex.discriminator = undefined;
CommerceSolutionsProductsAccountUpdaterConfigurationInformationConfigurationsAmex.attributeTypeMap = [
    {
        "name": "mode",
        "baseName": "mode",
        "type": "string"
    },
    {
        "name": "seNumber",
        "baseName": "seNumber",
        "type": "string"
    },
    {
        "name": "subscriberId",
        "baseName": "subscriberId",
        "type": "string"
    },
    {
        "name": "active",
        "baseName": "active",
        "type": "boolean"
    }
];
class CommerceSolutionsProductsAccountUpdaterConfigurationInformationConfigurationsMasterCard {
    static getAttributeTypeMap() {
        return CommerceSolutionsProductsAccountUpdaterConfigurationInformationConfigurationsMasterCard.attributeTypeMap;
    }
}
exports.CommerceSolutionsProductsAccountUpdaterConfigurationInformationConfigurationsMasterCard = CommerceSolutionsProductsAccountUpdaterConfigurationInformationConfigurationsMasterCard;
CommerceSolutionsProductsAccountUpdaterConfigurationInformationConfigurationsMasterCard.discriminator = undefined;
CommerceSolutionsProductsAccountUpdaterConfigurationInformationConfigurationsMasterCard.attributeTypeMap = [
    {
        "name": "merchantId",
        "baseName": "merchantId",
        "type": "string"
    },
    {
        "name": "interbankCardAssociationNumber",
        "baseName": "interbankCardAssociationNumber",
        "type": "string"
    },
    {
        "name": "active",
        "baseName": "active",
        "type": "boolean"
    }
];
class CommerceSolutionsProductsAccountUpdaterConfigurationInformationConfigurationsVisa {
    static getAttributeTypeMap() {
        return CommerceSolutionsProductsAccountUpdaterConfigurationInformationConfigurationsVisa.attributeTypeMap;
    }
}
exports.CommerceSolutionsProductsAccountUpdaterConfigurationInformationConfigurationsVisa = CommerceSolutionsProductsAccountUpdaterConfigurationInformationConfigurationsVisa;
CommerceSolutionsProductsAccountUpdaterConfigurationInformationConfigurationsVisa.discriminator = undefined;
CommerceSolutionsProductsAccountUpdaterConfigurationInformationConfigurationsVisa.attributeTypeMap = [
    {
        "name": "merchantId",
        "baseName": "merchantId",
        "type": "string"
    },
    {
        "name": "segmentId",
        "baseName": "segmentId",
        "type": "string"
    },
    {
        "name": "active",
        "baseName": "active",
        "type": "boolean"
    }
];
class CommerceSolutionsProductsBinLookup {
    static getAttributeTypeMap() {
        return CommerceSolutionsProductsBinLookup.attributeTypeMap;
    }
}
exports.CommerceSolutionsProductsBinLookup = CommerceSolutionsProductsBinLookup;
CommerceSolutionsProductsBinLookup.discriminator = undefined;
CommerceSolutionsProductsBinLookup.attributeTypeMap = [
    {
        "name": "subscriptionInformation",
        "baseName": "subscriptionInformation",
        "type": "PaymentsProductsAlternativePaymentMethodsSubscriptionInformation"
    },
    {
        "name": "configurationInformation",
        "baseName": "configurationInformation",
        "type": "CommerceSolutionsProductsBinLookupConfigurationInformation"
    }
];
class CommerceSolutionsProductsBinLookupConfigurationInformation {
    static getAttributeTypeMap() {
        return CommerceSolutionsProductsBinLookupConfigurationInformation.attributeTypeMap;
    }
}
exports.CommerceSolutionsProductsBinLookupConfigurationInformation = CommerceSolutionsProductsBinLookupConfigurationInformation;
CommerceSolutionsProductsBinLookupConfigurationInformation.discriminator = undefined;
CommerceSolutionsProductsBinLookupConfigurationInformation.attributeTypeMap = [
    {
        "name": "configurations",
        "baseName": "configurations",
        "type": "CommerceSolutionsProductsBinLookupConfigurationInformationConfigurations"
    }
];
class CommerceSolutionsProductsBinLookupConfigurationInformationConfigurations {
    static getAttributeTypeMap() {
        return CommerceSolutionsProductsBinLookupConfigurationInformationConfigurations.attributeTypeMap;
    }
}
exports.CommerceSolutionsProductsBinLookupConfigurationInformationConfigurations = CommerceSolutionsProductsBinLookupConfigurationInformationConfigurations;
CommerceSolutionsProductsBinLookupConfigurationInformationConfigurations.discriminator = undefined;
CommerceSolutionsProductsBinLookupConfigurationInformationConfigurations.attributeTypeMap = [
    {
        "name": "isPayoutOptionsEnabled",
        "baseName": "isPayoutOptionsEnabled",
        "type": "boolean"
    },
    {
        "name": "isAccountPrefixEnabled",
        "baseName": "isAccountPrefixEnabled",
        "type": "boolean"
    }
];
class CommerceSolutionsProductsTokenManagement {
    static getAttributeTypeMap() {
        return CommerceSolutionsProductsTokenManagement.attributeTypeMap;
    }
}
exports.CommerceSolutionsProductsTokenManagement = CommerceSolutionsProductsTokenManagement;
CommerceSolutionsProductsTokenManagement.discriminator = undefined;
CommerceSolutionsProductsTokenManagement.attributeTypeMap = [
    {
        "name": "subscriptionInformation",
        "baseName": "subscriptionInformation",
        "type": "PaymentsProductsAlternativePaymentMethodsSubscriptionInformation"
    },
    {
        "name": "configurationInformation",
        "baseName": "configurationInformation",
        "type": "CommerceSolutionsProductsTokenManagementConfigurationInformation"
    }
];
class CommerceSolutionsProductsTokenManagementConfigurationInformation {
    static getAttributeTypeMap() {
        return CommerceSolutionsProductsTokenManagementConfigurationInformation.attributeTypeMap;
    }
}
exports.CommerceSolutionsProductsTokenManagementConfigurationInformation = CommerceSolutionsProductsTokenManagementConfigurationInformation;
CommerceSolutionsProductsTokenManagementConfigurationInformation.discriminator = undefined;
CommerceSolutionsProductsTokenManagementConfigurationInformation.attributeTypeMap = [
    {
        "name": "templateId",
        "baseName": "templateId",
        "type": "string"
    },
    {
        "name": "configurations",
        "baseName": "configurations",
        "type": "CommerceSolutionsProductsTokenManagementConfigurationInformationConfigurations"
    }
];
class CommerceSolutionsProductsTokenManagementConfigurationInformationConfigurations {
    static getAttributeTypeMap() {
        return CommerceSolutionsProductsTokenManagementConfigurationInformationConfigurations.attributeTypeMap;
    }
}
exports.CommerceSolutionsProductsTokenManagementConfigurationInformationConfigurations = CommerceSolutionsProductsTokenManagementConfigurationInformationConfigurations;
CommerceSolutionsProductsTokenManagementConfigurationInformationConfigurations.discriminator = undefined;
CommerceSolutionsProductsTokenManagementConfigurationInformationConfigurations.attributeTypeMap = [
    {
        "name": "parentProfileId",
        "baseName": "parentProfileId",
        "type": "string"
    },
    {
        "name": "vault",
        "baseName": "vault",
        "type": "CommerceSolutionsProductsTokenManagementConfigurationInformationConfigurationsVault"
    },
    {
        "name": "networkTokenEnrollment",
        "baseName": "networkTokenEnrollment",
        "type": "NetworkTokenEnrollment"
    }
];
class CommerceSolutionsProductsTokenManagementConfigurationInformationConfigurationsVault {
    static getAttributeTypeMap() {
        return CommerceSolutionsProductsTokenManagementConfigurationInformationConfigurationsVault.attributeTypeMap;
    }
}
exports.CommerceSolutionsProductsTokenManagementConfigurationInformationConfigurationsVault = CommerceSolutionsProductsTokenManagementConfigurationInformationConfigurationsVault;
CommerceSolutionsProductsTokenManagementConfigurationInformationConfigurationsVault.discriminator = undefined;
CommerceSolutionsProductsTokenManagementConfigurationInformationConfigurationsVault.attributeTypeMap = [
    {
        "name": "defaultTokenType",
        "baseName": "defaultTokenType",
        "type": "CommerceSolutionsProductsTokenManagementConfigurationInformationConfigurationsVault.DefaultTokenTypeEnum"
    },
    {
        "name": "location",
        "baseName": "location",
        "type": "CommerceSolutionsProductsTokenManagementConfigurationInformationConfigurationsVault.LocationEnum"
    },
    {
        "name": "tokenFormats",
        "baseName": "tokenFormats",
        "type": "TmsTokenFormats"
    },
    {
        "name": "tokenPermissions",
        "baseName": "tokenPermissions",
        "type": "TokenPermissions"
    },
    {
        "name": "sensitivePrivileges",
        "baseName": "sensitivePrivileges",
        "type": "TmsSensitivePrivileges"
    },
    {
        "name": "nullify",
        "baseName": "nullify",
        "type": "TmsNullify"
    },
    {
        "name": "networkTokenServices",
        "baseName": "networkTokenServices",
        "type": "TmsNetworkTokenServices"
    }
];
(function (CommerceSolutionsProductsTokenManagementConfigurationInformationConfigurationsVault) {
    let DefaultTokenTypeEnum;
    (function (DefaultTokenTypeEnum) {
        DefaultTokenTypeEnum[DefaultTokenTypeEnum["CUSTOMER"] = 'CUSTOMER'] = "CUSTOMER";
        DefaultTokenTypeEnum[DefaultTokenTypeEnum["PAYMENTINSTRUMENT"] = 'PAYMENT_INSTRUMENT'] = "PAYMENTINSTRUMENT";
        DefaultTokenTypeEnum[DefaultTokenTypeEnum["INSTRUMENTIDENTIFIER"] = 'INSTRUMENT_IDENTIFIER'] = "INSTRUMENTIDENTIFIER";
    })(DefaultTokenTypeEnum = CommerceSolutionsProductsTokenManagementConfigurationInformationConfigurationsVault.DefaultTokenTypeEnum || (CommerceSolutionsProductsTokenManagementConfigurationInformationConfigurationsVault.DefaultTokenTypeEnum = {}));
    let LocationEnum;
    (function (LocationEnum) {
        LocationEnum[LocationEnum["IDC"] = 'IDC'] = "IDC";
        LocationEnum[LocationEnum["GDC"] = 'GDC'] = "GDC";
    })(LocationEnum = CommerceSolutionsProductsTokenManagementConfigurationInformationConfigurationsVault.LocationEnum || (CommerceSolutionsProductsTokenManagementConfigurationInformationConfigurationsVault.LocationEnum = {}));
})(CommerceSolutionsProductsTokenManagementConfigurationInformationConfigurationsVault = exports.CommerceSolutionsProductsTokenManagementConfigurationInformationConfigurationsVault || (exports.CommerceSolutionsProductsTokenManagementConfigurationInformationConfigurationsVault = {}));
class CreateAdhocReportRequest {
    static getAttributeTypeMap() {
        return CreateAdhocReportRequest.attributeTypeMap;
    }
}
exports.CreateAdhocReportRequest = CreateAdhocReportRequest;
CreateAdhocReportRequest.discriminator = undefined;
CreateAdhocReportRequest.attributeTypeMap = [
    {
        "name": "organizationId",
        "baseName": "organizationId",
        "type": "string"
    },
    {
        "name": "reportDefinitionName",
        "baseName": "reportDefinitionName",
        "type": "string"
    },
    {
        "name": "reportFields",
        "baseName": "reportFields",
        "type": "Array<string>"
    },
    {
        "name": "reportMimeType",
        "baseName": "reportMimeType",
        "type": "string"
    },
    {
        "name": "reportName",
        "baseName": "reportName",
        "type": "string"
    },
    {
        "name": "timezone",
        "baseName": "timezone",
        "type": "string"
    },
    {
        "name": "reportStartTime",
        "baseName": "reportStartTime",
        "type": "Date"
    },
    {
        "name": "reportEndTime",
        "baseName": "reportEndTime",
        "type": "Date"
    },
    {
        "name": "reportFilters",
        "baseName": "reportFilters",
        "type": "Reportingv3reportsReportFilters"
    },
    {
        "name": "reportPreferences",
        "baseName": "reportPreferences",
        "type": "Reportingv3reportsReportPreferences"
    },
    {
        "name": "groupName",
        "baseName": "groupName",
        "type": "string"
    }
];
class CreateBillingAgreement {
    static getAttributeTypeMap() {
        return CreateBillingAgreement.attributeTypeMap;
    }
}
exports.CreateBillingAgreement = CreateBillingAgreement;
CreateBillingAgreement.discriminator = undefined;
CreateBillingAgreement.attributeTypeMap = [
    {
        "name": "agreementInformation",
        "baseName": "agreementInformation",
        "type": "Ptsv2billingagreementsAgreementInformation"
    },
    {
        "name": "clientReferenceInformation",
        "baseName": "clientReferenceInformation",
        "type": "Ptsv2billingagreementsClientReferenceInformation"
    },
    {
        "name": "aggregatorInformation",
        "baseName": "aggregatorInformation",
        "type": "Ptsv2billingagreementsAggregatorInformation"
    },
    {
        "name": "consumerAuthenticationInformation",
        "baseName": "consumerAuthenticationInformation",
        "type": "Ptsv2billingagreementsConsumerAuthenticationInformation"
    },
    {
        "name": "deviceInformation",
        "baseName": "deviceInformation",
        "type": "Ptsv2billingagreementsDeviceInformation"
    },
    {
        "name": "installmentInformation",
        "baseName": "installmentInformation",
        "type": "Ptsv2billingagreementsInstallmentInformation"
    },
    {
        "name": "merchantInformation",
        "baseName": "merchantInformation",
        "type": "Ptsv2billingagreementsMerchantInformation"
    },
    {
        "name": "orderInformation",
        "baseName": "orderInformation",
        "type": "Ptsv2billingagreementsOrderInformation"
    },
    {
        "name": "paymentInformation",
        "baseName": "paymentInformation",
        "type": "Ptsv2billingagreementsPaymentInformation"
    },
    {
        "name": "processingInformation",
        "baseName": "processingInformation",
        "type": "Ptsv2billingagreementsProcessingInformation"
    },
    {
        "name": "buyerInformation",
        "baseName": "buyerInformation",
        "type": "Ptsv2billingagreementsBuyerInformation"
    }
];
class CreateBinLookupRequest {
    static getAttributeTypeMap() {
        return CreateBinLookupRequest.attributeTypeMap;
    }
}
exports.CreateBinLookupRequest = CreateBinLookupRequest;
CreateBinLookupRequest.discriminator = undefined;
CreateBinLookupRequest.attributeTypeMap = [
    {
        "name": "clientReferenceInformation",
        "baseName": "clientReferenceInformation",
        "type": "Binv1binlookupClientReferenceInformation"
    },
    {
        "name": "paymentInformation",
        "baseName": "paymentInformation",
        "type": "Binv1binlookupPaymentInformation"
    },
    {
        "name": "tokenInformation",
        "baseName": "tokenInformation",
        "type": "Binv1binlookupTokenInformation"
    },
    {
        "name": "processingInformation",
        "baseName": "processingInformation",
        "type": "Binv1binlookupProcessingInformation"
    }
];
class CreateBundledDecisionManagerCaseRequest {
    static getAttributeTypeMap() {
        return CreateBundledDecisionManagerCaseRequest.attributeTypeMap;
    }
}
exports.CreateBundledDecisionManagerCaseRequest = CreateBundledDecisionManagerCaseRequest;
CreateBundledDecisionManagerCaseRequest.discriminator = undefined;
CreateBundledDecisionManagerCaseRequest.attributeTypeMap = [
    {
        "name": "clientReferenceInformation",
        "baseName": "clientReferenceInformation",
        "type": "Riskv1decisionsClientReferenceInformation"
    },
    {
        "name": "processorInformation",
        "baseName": "processorInformation",
        "type": "Riskv1decisionsProcessorInformation"
    },
    {
        "name": "processingInformation",
        "baseName": "processingInformation",
        "type": "Riskv1decisionsProcessingInformation"
    },
    {
        "name": "paymentInformation",
        "baseName": "paymentInformation",
        "type": "Riskv1decisionsPaymentInformation"
    },
    {
        "name": "orderInformation",
        "baseName": "orderInformation",
        "type": "Riskv1decisionsOrderInformation"
    },
    {
        "name": "buyerInformation",
        "baseName": "buyerInformation",
        "type": "Riskv1decisionsBuyerInformation"
    },
    {
        "name": "deviceInformation",
        "baseName": "deviceInformation",
        "type": "Riskv1decisionsDeviceInformation"
    },
    {
        "name": "riskInformation",
        "baseName": "riskInformation",
        "type": "Riskv1decisionsRiskInformation"
    },
    {
        "name": "travelInformation",
        "baseName": "travelInformation",
        "type": "Riskv1decisionsTravelInformation"
    },
    {
        "name": "merchantDefinedInformation",
        "baseName": "merchantDefinedInformation",
        "type": "Array<Riskv1decisionsMerchantDefinedInformation>"
    },
    {
        "name": "merchantInformation",
        "baseName": "merchantInformation",
        "type": "Riskv1decisionsMerchantInformation"
    },
    {
        "name": "acquirerInformation",
        "baseName": "acquirerInformation",
        "type": "Riskv1decisionsAcquirerInformation"
    },
    {
        "name": "recurringPaymentInformation",
        "baseName": "recurringPaymentInformation",
        "type": "Ptsv2paymentsRecurringPaymentInformation"
    },
    {
        "name": "consumerAuthenticationInformation",
        "baseName": "consumerAuthenticationInformation",
        "type": "Riskv1decisionsConsumerAuthenticationInformation"
    },
    {
        "name": "watchlistScreeningInformation",
        "baseName": "watchlistScreeningInformation",
        "type": "Ptsv2paymentsWatchlistScreeningInformation"
    },
    {
        "name": "tokenInformation",
        "baseName": "tokenInformation",
        "type": "Riskv1decisionsTokenInformation"
    }
];
class CreateCreditRequest {
    static getAttributeTypeMap() {
        return CreateCreditRequest.attributeTypeMap;
    }
}
exports.CreateCreditRequest = CreateCreditRequest;
CreateCreditRequest.discriminator = undefined;
CreateCreditRequest.attributeTypeMap = [
    {
        "name": "clientReferenceInformation",
        "baseName": "clientReferenceInformation",
        "type": "Ptsv2paymentsClientReferenceInformation"
    },
    {
        "name": "processingInformation",
        "baseName": "processingInformation",
        "type": "Ptsv2creditsProcessingInformation"
    },
    {
        "name": "paymentInformation",
        "baseName": "paymentInformation",
        "type": "Ptsv2paymentsidrefundsPaymentInformation"
    },
    {
        "name": "orderInformation",
        "baseName": "orderInformation",
        "type": "Ptsv2paymentsidrefundsOrderInformation"
    },
    {
        "name": "buyerInformation",
        "baseName": "buyerInformation",
        "type": "Ptsv2paymentsidcapturesBuyerInformation"
    },
    {
        "name": "deviceInformation",
        "baseName": "deviceInformation",
        "type": "Ptsv2paymentsidcapturesDeviceInformation"
    },
    {
        "name": "merchantInformation",
        "baseName": "merchantInformation",
        "type": "Ptsv2paymentsidrefundsMerchantInformation"
    },
    {
        "name": "aggregatorInformation",
        "baseName": "aggregatorInformation",
        "type": "Ptsv2paymentsidcapturesAggregatorInformation"
    },
    {
        "name": "pointOfSaleInformation",
        "baseName": "pointOfSaleInformation",
        "type": "Ptsv2paymentsPointOfSaleInformation"
    },
    {
        "name": "merchantDefinedInformation",
        "baseName": "merchantDefinedInformation",
        "type": "Array<Ptsv2paymentsMerchantDefinedInformation>"
    },
    {
        "name": "merchantDefinedSecureInformation",
        "baseName": "merchantDefinedSecureInformation",
        "type": "Ptsv2paymentsMerchantDefinedSecureInformation"
    },
    {
        "name": "installmentInformation",
        "baseName": "installmentInformation",
        "type": "Ptsv2creditsInstallmentInformation"
    },
    {
        "name": "travelInformation",
        "baseName": "travelInformation",
        "type": "Ptsv2paymentsTravelInformation"
    },
    {
        "name": "recipientInformation",
        "baseName": "recipientInformation",
        "type": "Ptsv2creditsRecipientInformation"
    },
    {
        "name": "senderInformation",
        "baseName": "senderInformation",
        "type": "Ptsv2creditsSenderInformation"
    },
    {
        "name": "promotionInformation",
        "baseName": "promotionInformation",
        "type": "Ptsv2paymentsPromotionInformation"
    }
];
class CreateInvoiceRequest {
    static getAttributeTypeMap() {
        return CreateInvoiceRequest.attributeTypeMap;
    }
}
exports.CreateInvoiceRequest = CreateInvoiceRequest;
CreateInvoiceRequest.discriminator = undefined;
CreateInvoiceRequest.attributeTypeMap = [
    {
        "name": "clientReferenceInformation",
        "baseName": "clientReferenceInformation",
        "type": "Invoicingv2invoicesClientReferenceInformation"
    },
    {
        "name": "customerInformation",
        "baseName": "customerInformation",
        "type": "Invoicingv2invoicesCustomerInformation"
    },
    {
        "name": "processingInformation",
        "baseName": "processingInformation",
        "type": "Invoicingv2invoicesProcessingInformation"
    },
    {
        "name": "invoiceInformation",
        "baseName": "invoiceInformation",
        "type": "Invoicingv2invoicesInvoiceInformation"
    },
    {
        "name": "orderInformation",
        "baseName": "orderInformation",
        "type": "Invoicingv2invoicesOrderInformation"
    }
];
class CreateOrderRequest {
    static getAttributeTypeMap() {
        return CreateOrderRequest.attributeTypeMap;
    }
}
exports.CreateOrderRequest = CreateOrderRequest;
CreateOrderRequest.discriminator = undefined;
CreateOrderRequest.attributeTypeMap = [
    {
        "name": "clientReferenceInformation",
        "baseName": "clientReferenceInformation",
        "type": "Ptsv2intentsClientReferenceInformation"
    },
    {
        "name": "processingInformation",
        "baseName": "processingInformation",
        "type": "Ptsv2intentsProcessingInformation"
    },
    {
        "name": "merchantInformation",
        "baseName": "merchantInformation",
        "type": "Ptsv2intentsMerchantInformation"
    },
    {
        "name": "paymentInformation",
        "baseName": "paymentInformation",
        "type": "Ptsv2intentsPaymentInformation"
    },
    {
        "name": "orderInformation",
        "baseName": "orderInformation",
        "type": "Ptsv2intentsOrderInformation"
    },
    {
        "name": "senderInformation",
        "baseName": "senderInformation",
        "type": "Ptsv2intentsSenderInformation"
    },
    {
        "name": "eventInformation",
        "baseName": "eventInformation",
        "type": "Ptsv2intentsEventInformation"
    },
    {
        "name": "travelInformation",
        "baseName": "travelInformation",
        "type": "Ptsv2intentsTravelInformation"
    },
    {
        "name": "recipientInformation",
        "baseName": "recipientInformation",
        "type": "Ptsv2intentsRecipientInformation"
    }
];
class CreatePaymentLinkRequest {
    static getAttributeTypeMap() {
        return CreatePaymentLinkRequest.attributeTypeMap;
    }
}
exports.CreatePaymentLinkRequest = CreatePaymentLinkRequest;
CreatePaymentLinkRequest.discriminator = undefined;
CreatePaymentLinkRequest.attributeTypeMap = [
    {
        "name": "clientReferenceInformation",
        "baseName": "clientReferenceInformation",
        "type": "Invoicingv2invoicesClientReferenceInformation"
    },
    {
        "name": "processingInformation",
        "baseName": "processingInformation",
        "type": "Iplv2paymentlinksProcessingInformation"
    },
    {
        "name": "purchaseInformation",
        "baseName": "purchaseInformation",
        "type": "Iplv2paymentlinksPurchaseInformation"
    },
    {
        "name": "orderInformation",
        "baseName": "orderInformation",
        "type": "Iplv2paymentlinksOrderInformation"
    }
];
class CreatePaymentRequest {
    static getAttributeTypeMap() {
        return CreatePaymentRequest.attributeTypeMap;
    }
}
exports.CreatePaymentRequest = CreatePaymentRequest;
CreatePaymentRequest.discriminator = undefined;
CreatePaymentRequest.attributeTypeMap = [
    {
        "name": "clientReferenceInformation",
        "baseName": "clientReferenceInformation",
        "type": "Ptsv2paymentsClientReferenceInformation"
    },
    {
        "name": "processingInformation",
        "baseName": "processingInformation",
        "type": "Ptsv2paymentsProcessingInformation"
    },
    {
        "name": "issuerInformation",
        "baseName": "issuerInformation",
        "type": "Ptsv2paymentsIssuerInformation"
    },
    {
        "name": "paymentInformation",
        "baseName": "paymentInformation",
        "type": "Ptsv2paymentsPaymentInformation"
    },
    {
        "name": "orderInformation",
        "baseName": "orderInformation",
        "type": "Ptsv2paymentsOrderInformation"
    },
    {
        "name": "buyerInformation",
        "baseName": "buyerInformation",
        "type": "Ptsv2paymentsBuyerInformation"
    },
    {
        "name": "senderInformation",
        "baseName": "senderInformation",
        "type": "Ptsv2paymentsSenderInformation"
    },
    {
        "name": "recipientInformation",
        "baseName": "recipientInformation",
        "type": "Ptsv2paymentsRecipientInformation"
    },
    {
        "name": "deviceInformation",
        "baseName": "deviceInformation",
        "type": "Ptsv2paymentsDeviceInformation"
    },
    {
        "name": "merchantInformation",
        "baseName": "merchantInformation",
        "type": "Ptsv2paymentsMerchantInformation"
    },
    {
        "name": "aggregatorInformation",
        "baseName": "aggregatorInformation",
        "type": "Ptsv2paymentsAggregatorInformation"
    },
    {
        "name": "consumerAuthenticationInformation",
        "baseName": "consumerAuthenticationInformation",
        "type": "Ptsv2paymentsConsumerAuthenticationInformation"
    },
    {
        "name": "pointOfSaleInformation",
        "baseName": "pointOfSaleInformation",
        "type": "Ptsv2paymentsPointOfSaleInformation"
    },
    {
        "name": "merchantDefinedInformation",
        "baseName": "merchantDefinedInformation",
        "type": "Array<Ptsv2paymentsMerchantDefinedInformation>"
    },
    {
        "name": "merchantDefinedSecureInformation",
        "baseName": "merchantDefinedSecureInformation",
        "type": "Ptsv2paymentsMerchantDefinedSecureInformation"
    },
    {
        "name": "installmentInformation",
        "baseName": "installmentInformation",
        "type": "Ptsv2paymentsInstallmentInformation"
    },
    {
        "name": "travelInformation",
        "baseName": "travelInformation",
        "type": "Ptsv2paymentsTravelInformation"
    },
    {
        "name": "healthCareInformation",
        "baseName": "healthCareInformation",
        "type": "Ptsv2paymentsHealthCareInformation"
    },
    {
        "name": "promotionInformation",
        "baseName": "promotionInformation",
        "type": "Ptsv2paymentsPromotionInformation"
    },
    {
        "name": "tokenInformation",
        "baseName": "tokenInformation",
        "type": "Ptsv2paymentsTokenInformation"
    },
    {
        "name": "invoiceDetails",
        "baseName": "invoiceDetails",
        "type": "Ptsv2paymentsInvoiceDetails"
    },
    {
        "name": "processorInformation",
        "baseName": "processorInformation",
        "type": "Ptsv2paymentsProcessorInformation"
    },
    {
        "name": "agreementInformation",
        "baseName": "agreementInformation",
        "type": "Ptsv2paymentsAgreementInformation"
    },
    {
        "name": "riskInformation",
        "baseName": "riskInformation",
        "type": "Ptsv2paymentsRiskInformation"
    },
    {
        "name": "acquirerInformation",
        "baseName": "acquirerInformation",
        "type": "Ptsv2paymentsAcquirerInformation"
    },
    {
        "name": "recurringPaymentInformation",
        "baseName": "recurringPaymentInformation",
        "type": "Ptsv2paymentsRecurringPaymentInformation"
    },
    {
        "name": "unscheduledPaymentInformation",
        "baseName": "unscheduledPaymentInformation",
        "type": "Ptsv2paymentsUnscheduledPaymentInformation"
    },
    {
        "name": "hostedPaymentInformation",
        "baseName": "hostedPaymentInformation",
        "type": "Ptsv2paymentsHostedPaymentInformation"
    },
    {
        "name": "watchlistScreeningInformation",
        "baseName": "watchlistScreeningInformation",
        "type": "Ptsv2paymentsWatchlistScreeningInformation"
    }
];
class CreatePlanRequest {
    static getAttributeTypeMap() {
        return CreatePlanRequest.attributeTypeMap;
    }
}
exports.CreatePlanRequest = CreatePlanRequest;
CreatePlanRequest.discriminator = undefined;
CreatePlanRequest.attributeTypeMap = [
    {
        "name": "clientReferenceInformation",
        "baseName": "clientReferenceInformation",
        "type": "Rbsv1plansClientReferenceInformation"
    },
    {
        "name": "planInformation",
        "baseName": "planInformation",
        "type": "Rbsv1plansPlanInformation"
    },
    {
        "name": "orderInformation",
        "baseName": "orderInformation",
        "type": "Rbsv1plansOrderInformation"
    }
];
class CreatePlanResponse {
    static getAttributeTypeMap() {
        return CreatePlanResponse.attributeTypeMap;
    }
}
exports.CreatePlanResponse = CreatePlanResponse;
CreatePlanResponse.discriminator = undefined;
CreatePlanResponse.attributeTypeMap = [
    {
        "name": "links",
        "baseName": "_links",
        "type": "PtsV2IncrementalAuthorizationPatch201ResponseLinks"
    },
    {
        "name": "id",
        "baseName": "id",
        "type": "string"
    },
    {
        "name": "submitTimeUtc",
        "baseName": "submitTimeUtc",
        "type": "string"
    },
    {
        "name": "status",
        "baseName": "status",
        "type": "string"
    },
    {
        "name": "planInformation",
        "baseName": "planInformation",
        "type": "CreatePlanResponsePlanInformation"
    }
];
class CreatePlanResponsePlanInformation {
    static getAttributeTypeMap() {
        return CreatePlanResponsePlanInformation.attributeTypeMap;
    }
}
exports.CreatePlanResponsePlanInformation = CreatePlanResponsePlanInformation;
CreatePlanResponsePlanInformation.discriminator = undefined;
CreatePlanResponsePlanInformation.attributeTypeMap = [
    {
        "name": "code",
        "baseName": "code",
        "type": "string"
    },
    {
        "name": "status",
        "baseName": "status",
        "type": "string"
    }
];
class CreateReportSubscriptionRequest {
    static getAttributeTypeMap() {
        return CreateReportSubscriptionRequest.attributeTypeMap;
    }
}
exports.CreateReportSubscriptionRequest = CreateReportSubscriptionRequest;
CreateReportSubscriptionRequest.discriminator = undefined;
CreateReportSubscriptionRequest.attributeTypeMap = [
    {
        "name": "organizationId",
        "baseName": "organizationId",
        "type": "string"
    },
    {
        "name": "reportDefinitionName",
        "baseName": "reportDefinitionName",
        "type": "string"
    },
    {
        "name": "reportFields",
        "baseName": "reportFields",
        "type": "Array<string>"
    },
    {
        "name": "reportMimeType",
        "baseName": "reportMimeType",
        "type": "string"
    },
    {
        "name": "reportFrequency",
        "baseName": "reportFrequency",
        "type": "string"
    },
    {
        "name": "reportInterval",
        "baseName": "reportInterval",
        "type": "string"
    },
    {
        "name": "reportName",
        "baseName": "reportName",
        "type": "string"
    },
    {
        "name": "timezone",
        "baseName": "timezone",
        "type": "string"
    },
    {
        "name": "startTime",
        "baseName": "startTime",
        "type": "string"
    },
    {
        "name": "startDay",
        "baseName": "startDay",
        "type": "number"
    },
    {
        "name": "reportFilters",
        "baseName": "reportFilters",
        "type": "{ [key: string]: Array<string>; }"
    },
    {
        "name": "reportPreferences",
        "baseName": "reportPreferences",
        "type": "Reportingv3reportsReportPreferences"
    },
    {
        "name": "groupName",
        "baseName": "groupName",
        "type": "string"
    }
];
class CreateSearchRequest {
    static getAttributeTypeMap() {
        return CreateSearchRequest.attributeTypeMap;
    }
}
exports.CreateSearchRequest = CreateSearchRequest;
CreateSearchRequest.discriminator = undefined;
CreateSearchRequest.attributeTypeMap = [
    {
        "name": "save",
        "baseName": "save",
        "type": "boolean"
    },
    {
        "name": "name",
        "baseName": "name",
        "type": "string"
    },
    {
        "name": "timezone",
        "baseName": "timezone",
        "type": "string"
    },
    {
        "name": "query",
        "baseName": "query",
        "type": "string"
    },
    {
        "name": "offset",
        "baseName": "offset",
        "type": "number"
    },
    {
        "name": "limit",
        "baseName": "limit",
        "type": "number"
    },
    {
        "name": "sort",
        "baseName": "sort",
        "type": "string"
    }
];
class CreateSessionReq {
    static getAttributeTypeMap() {
        return CreateSessionReq.attributeTypeMap;
    }
}
exports.CreateSessionReq = CreateSessionReq;
CreateSessionReq.discriminator = undefined;
CreateSessionReq.attributeTypeMap = [
    {
        "name": "clientReferenceInformation",
        "baseName": "clientReferenceInformation",
        "type": "Ptsv2refreshpaymentstatusidClientReferenceInformation"
    },
    {
        "name": "processingInformation",
        "baseName": "processingInformation",
        "type": "Ptsv2paymentreferencesProcessingInformation"
    },
    {
        "name": "paymentInformation",
        "baseName": "paymentInformation",
        "type": "Ptsv2paymentreferencesPaymentInformation"
    },
    {
        "name": "orderInformation",
        "baseName": "orderInformation",
        "type": "Ptsv2paymentreferencesOrderInformation"
    },
    {
        "name": "buyerInformation",
        "baseName": "buyerInformation",
        "type": "Ptsv2paymentreferencesBuyerInformation"
    },
    {
        "name": "deviceInformation",
        "baseName": "deviceInformation",
        "type": "Ptsv2paymentreferencesDeviceInformation"
    },
    {
        "name": "merchantInformation",
        "baseName": "merchantInformation",
        "type": "Ptsv2paymentreferencesMerchantInformation"
    },
    {
        "name": "userInterface",
        "baseName": "userInterface",
        "type": "Ptsv2paymentreferencesUserInterface"
    },
    {
        "name": "merchantDefinedInformation",
        "baseName": "merchantDefinedInformation",
        "type": "Array<Ptsv2paymentsMerchantDefinedInformation>"
    },
    {
        "name": "agreementInformation",
        "baseName": "agreementInformation",
        "type": "Ptsv2paymentreferencesAgreementInformation"
    },
    {
        "name": "travelInformation",
        "baseName": "travelInformation",
        "type": "Ptsv2paymentreferencesTravelInformation"
    }
];
class CreateSessionRequest {
    static getAttributeTypeMap() {
        return CreateSessionRequest.attributeTypeMap;
    }
}
exports.CreateSessionRequest = CreateSessionRequest;
CreateSessionRequest.discriminator = undefined;
CreateSessionRequest.attributeTypeMap = [
    {
        "name": "clientReferenceInformation",
        "baseName": "clientReferenceInformation",
        "type": "Ptsv2refreshpaymentstatusidClientReferenceInformation"
    },
    {
        "name": "processingInformation",
        "baseName": "processingInformation",
        "type": "Ptsv2paymentreferencesProcessingInformation"
    },
    {
        "name": "paymentInformation",
        "baseName": "paymentInformation",
        "type": "Ptsv2paymentreferencesPaymentInformation"
    },
    {
        "name": "orderInformation",
        "baseName": "orderInformation",
        "type": "Ptsv2paymentreferencesOrderInformation"
    },
    {
        "name": "buyerInformation",
        "baseName": "buyerInformation",
        "type": "Ptsv2paymentreferencesBuyerInformation"
    },
    {
        "name": "deviceInformation",
        "baseName": "deviceInformation",
        "type": "Ptsv2paymentreferencesDeviceInformation"
    },
    {
        "name": "merchantInformation",
        "baseName": "merchantInformation",
        "type": "Ptsv2paymentreferencesMerchantInformation"
    },
    {
        "name": "userInterface",
        "baseName": "userInterface",
        "type": "Ptsv2paymentreferencesUserInterface"
    },
    {
        "name": "merchantDefinedInformation",
        "baseName": "merchantDefinedInformation",
        "type": "Array<Ptsv2paymentsMerchantDefinedInformation>"
    },
    {
        "name": "agreementInformation",
        "baseName": "agreementInformation",
        "type": "Ptsv2paymentreferencesAgreementInformation"
    },
    {
        "name": "travelInformation",
        "baseName": "travelInformation",
        "type": "Ptsv2paymentreferencesTravelInformation"
    }
];
class CreateSubscriptionRequest {
    static getAttributeTypeMap() {
        return CreateSubscriptionRequest.attributeTypeMap;
    }
}
exports.CreateSubscriptionRequest = CreateSubscriptionRequest;
CreateSubscriptionRequest.discriminator = undefined;
CreateSubscriptionRequest.attributeTypeMap = [
    {
        "name": "clientReferenceInformation",
        "baseName": "clientReferenceInformation",
        "type": "Rbsv1subscriptionsClientReferenceInformation"
    },
    {
        "name": "processingInformation",
        "baseName": "processingInformation",
        "type": "Rbsv1subscriptionsProcessingInformation"
    },
    {
        "name": "planInformation",
        "baseName": "planInformation",
        "type": "Rbsv1subscriptionsPlanInformation"
    },
    {
        "name": "subscriptionInformation",
        "baseName": "subscriptionInformation",
        "type": "Rbsv1subscriptionsSubscriptionInformation"
    },
    {
        "name": "paymentInformation",
        "baseName": "paymentInformation",
        "type": "Rbsv1subscriptionsPaymentInformation"
    },
    {
        "name": "orderInformation",
        "baseName": "orderInformation",
        "type": "GetAllPlansResponseOrderInformation"
    }
];
class CreateSubscriptionRequest1 {
    static getAttributeTypeMap() {
        return CreateSubscriptionRequest1.attributeTypeMap;
    }
}
exports.CreateSubscriptionRequest1 = CreateSubscriptionRequest1;
CreateSubscriptionRequest1.discriminator = undefined;
CreateSubscriptionRequest1.attributeTypeMap = [
    {
        "name": "clientReferenceInformation",
        "baseName": "clientReferenceInformation",
        "type": "Rbsv1subscriptionsClientReferenceInformation"
    },
    {
        "name": "processingInformation",
        "baseName": "processingInformation",
        "type": "Rbsv1subscriptionsProcessingInformation"
    },
    {
        "name": "planInformation",
        "baseName": "planInformation",
        "type": "Rbsv1subscriptionsPlanInformation"
    },
    {
        "name": "subscriptionInformation",
        "baseName": "subscriptionInformation",
        "type": "Rbsv1subscriptionsSubscriptionInformation"
    },
    {
        "name": "orderInformation",
        "baseName": "orderInformation",
        "type": "GetAllPlansResponseOrderInformation"
    }
];
class CreateSubscriptionResponse {
    static getAttributeTypeMap() {
        return CreateSubscriptionResponse.attributeTypeMap;
    }
}
exports.CreateSubscriptionResponse = CreateSubscriptionResponse;
CreateSubscriptionResponse.discriminator = undefined;
CreateSubscriptionResponse.attributeTypeMap = [
    {
        "name": "links",
        "baseName": "_links",
        "type": "CreateSubscriptionResponseLinks"
    },
    {
        "name": "id",
        "baseName": "id",
        "type": "string"
    },
    {
        "name": "submitTimeUtc",
        "baseName": "submitTimeUtc",
        "type": "string"
    },
    {
        "name": "status",
        "baseName": "status",
        "type": "string"
    },
    {
        "name": "subscriptionInformation",
        "baseName": "subscriptionInformation",
        "type": "CreateSubscriptionResponseSubscriptionInformation"
    }
];
class CreateSubscriptionResponseLinks {
    static getAttributeTypeMap() {
        return CreateSubscriptionResponseLinks.attributeTypeMap;
    }
}
exports.CreateSubscriptionResponseLinks = CreateSubscriptionResponseLinks;
CreateSubscriptionResponseLinks.discriminator = undefined;
CreateSubscriptionResponseLinks.attributeTypeMap = [
    {
        "name": "self",
        "baseName": "self",
        "type": "PtsV2PaymentsPost201ResponseLinksSelf"
    },
    {
        "name": "update",
        "baseName": "update",
        "type": "PtsV2PaymentsPost201ResponseLinksSelf"
    },
    {
        "name": "cancel",
        "baseName": "cancel",
        "type": "PtsV2PaymentsPost201ResponseLinksSelf"
    },
    {
        "name": "suspend",
        "baseName": "suspend",
        "type": "PtsV2PaymentsPost201ResponseLinksSelf"
    },
    {
        "name": "activate",
        "baseName": "activate",
        "type": "PtsV2PaymentsPost201ResponseLinksSelf"
    }
];
class CreateSubscriptionResponseSubscriptionInformation {
    static getAttributeTypeMap() {
        return CreateSubscriptionResponseSubscriptionInformation.attributeTypeMap;
    }
}
exports.CreateSubscriptionResponseSubscriptionInformation = CreateSubscriptionResponseSubscriptionInformation;
CreateSubscriptionResponseSubscriptionInformation.discriminator = undefined;
CreateSubscriptionResponseSubscriptionInformation.attributeTypeMap = [
    {
        "name": "code",
        "baseName": "code",
        "type": "string"
    },
    {
        "name": "status",
        "baseName": "status",
        "type": "string"
    }
];
class CreateWebhook {
    static getAttributeTypeMap() {
        return CreateWebhook.attributeTypeMap;
    }
}
exports.CreateWebhook = CreateWebhook;
CreateWebhook.discriminator = undefined;
CreateWebhook.attributeTypeMap = [
    {
        "name": "name",
        "baseName": "name",
        "type": "string"
    },
    {
        "name": "description",
        "baseName": "description",
        "type": "string"
    },
    {
        "name": "organizationId",
        "baseName": "organizationId",
        "type": "string"
    },
    {
        "name": "products",
        "baseName": "products",
        "type": "Array<Notificationsubscriptionsv2webhooksProducts1>"
    },
    {
        "name": "webhookUrl",
        "baseName": "webhookUrl",
        "type": "string"
    },
    {
        "name": "healthCheckUrl",
        "baseName": "healthCheckUrl",
        "type": "string"
    },
    {
        "name": "retryPolicy",
        "baseName": "retryPolicy",
        "type": "Notificationsubscriptionsv2webhooksRetryPolicy"
    },
    {
        "name": "notificationScope",
        "baseName": "notificationScope",
        "type": "CreateWebhook.NotificationScopeEnum"
    },
    {
        "name": "securityPolicy",
        "baseName": "securityPolicy",
        "type": "Notificationsubscriptionsv2webhooksSecurityPolicy"
    }
];
(function (CreateWebhook) {
    let NotificationScopeEnum;
    (function (NotificationScopeEnum) {
        NotificationScopeEnum[NotificationScopeEnum["SELF"] = 'SELF'] = "SELF";
        NotificationScopeEnum[NotificationScopeEnum["DESCENDANTS"] = 'DESCENDANTS'] = "DESCENDANTS";
    })(NotificationScopeEnum = CreateWebhook.NotificationScopeEnum || (CreateWebhook.NotificationScopeEnum = {}));
})(CreateWebhook = exports.CreateWebhook || (exports.CreateWebhook = {}));
class DeletePlanResponse {
    static getAttributeTypeMap() {
        return DeletePlanResponse.attributeTypeMap;
    }
}
exports.DeletePlanResponse = DeletePlanResponse;
DeletePlanResponse.discriminator = undefined;
DeletePlanResponse.attributeTypeMap = [
    {
        "name": "submitTimeUtc",
        "baseName": "submitTimeUtc",
        "type": "string"
    },
    {
        "name": "status",
        "baseName": "status",
        "type": "string"
    }
];
class DeviceDeAssociateV3Request {
    static getAttributeTypeMap() {
        return DeviceDeAssociateV3Request.attributeTypeMap;
    }
}
exports.DeviceDeAssociateV3Request = DeviceDeAssociateV3Request;
DeviceDeAssociateV3Request.discriminator = undefined;
DeviceDeAssociateV3Request.attributeTypeMap = [
    {
        "name": "deviceId",
        "baseName": "deviceId",
        "type": "string"
    },
    {
        "name": "organizationId",
        "baseName": "organizationId",
        "type": "string"
    }
];
class DeviceTransferRequest {
    static getAttributeTypeMap() {
        return DeviceTransferRequest.attributeTypeMap;
    }
}
exports.DeviceTransferRequest = DeviceTransferRequest;
DeviceTransferRequest.discriminator = undefined;
DeviceTransferRequest.attributeTypeMap = [
    {
        "name": "deviceId",
        "baseName": "deviceId",
        "type": "string"
    },
    {
        "name": "merchantId",
        "baseName": "merchantId",
        "type": "string"
    },
    {
        "name": "organizationId",
        "baseName": "organizationId",
        "type": "string"
    }
];
class DmConfig {
    static getAttributeTypeMap() {
        return DmConfig.attributeTypeMap;
    }
}
exports.DmConfig = DmConfig;
DmConfig.discriminator = undefined;
DmConfig.attributeTypeMap = [
    {
        "name": "processingOptions",
        "baseName": "processingOptions",
        "type": "DmConfigProcessingOptions"
    },
    {
        "name": "organization",
        "baseName": "organization",
        "type": "DmConfigOrganization"
    },
    {
        "name": "portfolioControls",
        "baseName": "portfolioControls",
        "type": "DmConfigPortfolioControls"
    },
    {
        "name": "thirdparty",
        "baseName": "thirdparty",
        "type": "DmConfigThirdparty"
    }
];
class DmConfigOrganization {
    static getAttributeTypeMap() {
        return DmConfigOrganization.attributeTypeMap;
    }
}
exports.DmConfigOrganization = DmConfigOrganization;
DmConfigOrganization.discriminator = undefined;
DmConfigOrganization.attributeTypeMap = [
    {
        "name": "hierarchyGroup",
        "baseName": "hierarchyGroup",
        "type": "string"
    }
];
class DmConfigPortfolioControls {
    static getAttributeTypeMap() {
        return DmConfigPortfolioControls.attributeTypeMap;
    }
}
exports.DmConfigPortfolioControls = DmConfigPortfolioControls;
DmConfigPortfolioControls.discriminator = undefined;
DmConfigPortfolioControls.attributeTypeMap = [
    {
        "name": "hideRiskMenus",
        "baseName": "hideRiskMenus",
        "type": "boolean"
    },
    {
        "name": "hideRiskTransactionData",
        "baseName": "hideRiskTransactionData",
        "type": "boolean"
    }
];
class DmConfigProcessingOptions {
    static getAttributeTypeMap() {
        return DmConfigProcessingOptions.attributeTypeMap;
    }
}
exports.DmConfigProcessingOptions = DmConfigProcessingOptions;
DmConfigProcessingOptions.discriminator = undefined;
DmConfigProcessingOptions.attributeTypeMap = [
    {
        "name": "stepUpAuthEnabled",
        "baseName": "stepUpAuthEnabled",
        "type": "boolean"
    }
];
class DmConfigThirdparty {
    static getAttributeTypeMap() {
        return DmConfigThirdparty.attributeTypeMap;
    }
}
exports.DmConfigThirdparty = DmConfigThirdparty;
DmConfigThirdparty.discriminator = undefined;
DmConfigThirdparty.attributeTypeMap = [
    {
        "name": "provider",
        "baseName": "provider",
        "type": "DmConfigThirdpartyProvider"
    }
];
class DmConfigThirdpartyProvider {
    static getAttributeTypeMap() {
        return DmConfigThirdpartyProvider.attributeTypeMap;
    }
}
exports.DmConfigThirdpartyProvider = DmConfigThirdpartyProvider;
DmConfigThirdpartyProvider.discriminator = undefined;
DmConfigThirdpartyProvider.attributeTypeMap = [
    {
        "name": "accurint",
        "baseName": "accurint",
        "type": "DmConfigThirdpartyProviderAccurint"
    },
    {
        "name": "credilink",
        "baseName": "credilink",
        "type": "DmConfigThirdpartyProviderCredilink"
    },
    {
        "name": "ekata",
        "baseName": "ekata",
        "type": "DmConfigThirdpartyProviderEkata"
    },
    {
        "name": "emailage",
        "baseName": "emailage",
        "type": "DmConfigThirdpartyProviderEmailage"
    },
    {
        "name": "perseuss",
        "baseName": "perseuss",
        "type": "DmConfigThirdpartyProviderPerseuss"
    },
    {
        "name": "signifyd",
        "baseName": "signifyd",
        "type": "DmConfigThirdpartyProviderSignifyd"
    },
    {
        "name": "targus",
        "baseName": "targus",
        "type": "DmConfigThirdpartyProviderTargus"
    }
];
class DmConfigThirdpartyProviderAccurint {
    static getAttributeTypeMap() {
        return DmConfigThirdpartyProviderAccurint.attributeTypeMap;
    }
}
exports.DmConfigThirdpartyProviderAccurint = DmConfigThirdpartyProviderAccurint;
DmConfigThirdpartyProviderAccurint.discriminator = undefined;
DmConfigThirdpartyProviderAccurint.attributeTypeMap = [
    {
        "name": "enabled",
        "baseName": "enabled",
        "type": "boolean"
    },
    {
        "name": "credentials",
        "baseName": "credentials",
        "type": "DmConfigThirdpartyProviderAccurintCredentials"
    }
];
class DmConfigThirdpartyProviderAccurintCredentials {
    static getAttributeTypeMap() {
        return DmConfigThirdpartyProviderAccurintCredentials.attributeTypeMap;
    }
}
exports.DmConfigThirdpartyProviderAccurintCredentials = DmConfigThirdpartyProviderAccurintCredentials;
DmConfigThirdpartyProviderAccurintCredentials.discriminator = undefined;
DmConfigThirdpartyProviderAccurintCredentials.attributeTypeMap = [
    {
        "name": "username",
        "baseName": "username",
        "type": "string"
    },
    {
        "name": "password",
        "baseName": "password",
        "type": "string"
    }
];
class DmConfigThirdpartyProviderCredilink {
    static getAttributeTypeMap() {
        return DmConfigThirdpartyProviderCredilink.attributeTypeMap;
    }
}
exports.DmConfigThirdpartyProviderCredilink = DmConfigThirdpartyProviderCredilink;
DmConfigThirdpartyProviderCredilink.discriminator = undefined;
DmConfigThirdpartyProviderCredilink.attributeTypeMap = [
    {
        "name": "enabled",
        "baseName": "enabled",
        "type": "boolean"
    },
    {
        "name": "enableRealTime",
        "baseName": "enableRealTime",
        "type": "boolean"
    },
    {
        "name": "useCybsCredentials",
        "baseName": "useCybsCredentials",
        "type": "boolean"
    },
    {
        "name": "credentials",
        "baseName": "credentials",
        "type": "DmConfigThirdpartyProviderCredilinkCredentials"
    }
];
class DmConfigThirdpartyProviderCredilinkCredentials {
    static getAttributeTypeMap() {
        return DmConfigThirdpartyProviderCredilinkCredentials.attributeTypeMap;
    }
}
exports.DmConfigThirdpartyProviderCredilinkCredentials = DmConfigThirdpartyProviderCredilinkCredentials;
DmConfigThirdpartyProviderCredilinkCredentials.discriminator = undefined;
DmConfigThirdpartyProviderCredilinkCredentials.attributeTypeMap = [
    {
        "name": "username",
        "baseName": "username",
        "type": "string"
    },
    {
        "name": "password",
        "baseName": "password",
        "type": "string"
    },
    {
        "name": "sigla",
        "baseName": "sigla",
        "type": "string"
    }
];
class DmConfigThirdpartyProviderEkata {
    static getAttributeTypeMap() {
        return DmConfigThirdpartyProviderEkata.attributeTypeMap;
    }
}
exports.DmConfigThirdpartyProviderEkata = DmConfigThirdpartyProviderEkata;
DmConfigThirdpartyProviderEkata.discriminator = undefined;
DmConfigThirdpartyProviderEkata.attributeTypeMap = [
    {
        "name": "enabled",
        "baseName": "enabled",
        "type": "boolean"
    },
    {
        "name": "enableRealTime",
        "baseName": "enableRealTime",
        "type": "boolean"
    },
    {
        "name": "useCybsCredentials",
        "baseName": "useCybsCredentials",
        "type": "boolean"
    },
    {
        "name": "credentials",
        "baseName": "credentials",
        "type": "DmConfigThirdpartyProviderEkataCredentials"
    }
];
class DmConfigThirdpartyProviderEkataCredentials {
    static getAttributeTypeMap() {
        return DmConfigThirdpartyProviderEkataCredentials.attributeTypeMap;
    }
}
exports.DmConfigThirdpartyProviderEkataCredentials = DmConfigThirdpartyProviderEkataCredentials;
DmConfigThirdpartyProviderEkataCredentials.discriminator = undefined;
DmConfigThirdpartyProviderEkataCredentials.attributeTypeMap = [
    {
        "name": "apiKey",
        "baseName": "apiKey",
        "type": "string"
    }
];
class DmConfigThirdpartyProviderEmailage {
    static getAttributeTypeMap() {
        return DmConfigThirdpartyProviderEmailage.attributeTypeMap;
    }
}
exports.DmConfigThirdpartyProviderEmailage = DmConfigThirdpartyProviderEmailage;
DmConfigThirdpartyProviderEmailage.discriminator = undefined;
DmConfigThirdpartyProviderEmailage.attributeTypeMap = [
    {
        "name": "enabled",
        "baseName": "enabled",
        "type": "boolean"
    },
    {
        "name": "enableRealTime",
        "baseName": "enableRealTime",
        "type": "boolean"
    },
    {
        "name": "useCybsCredentials",
        "baseName": "useCybsCredentials",
        "type": "boolean"
    },
    {
        "name": "credentials",
        "baseName": "credentials",
        "type": "DmConfigThirdpartyProviderAccurintCredentials"
    }
];
class DmConfigThirdpartyProviderPerseuss {
    static getAttributeTypeMap() {
        return DmConfigThirdpartyProviderPerseuss.attributeTypeMap;
    }
}
exports.DmConfigThirdpartyProviderPerseuss = DmConfigThirdpartyProviderPerseuss;
DmConfigThirdpartyProviderPerseuss.discriminator = undefined;
DmConfigThirdpartyProviderPerseuss.attributeTypeMap = [
    {
        "name": "enabled",
        "baseName": "enabled",
        "type": "boolean"
    },
    {
        "name": "enableRealTime",
        "baseName": "enableRealTime",
        "type": "boolean"
    },
    {
        "name": "credentials",
        "baseName": "credentials",
        "type": "DmConfigThirdpartyProviderAccurintCredentials"
    }
];
class DmConfigThirdpartyProviderSignifyd {
    static getAttributeTypeMap() {
        return DmConfigThirdpartyProviderSignifyd.attributeTypeMap;
    }
}
exports.DmConfigThirdpartyProviderSignifyd = DmConfigThirdpartyProviderSignifyd;
DmConfigThirdpartyProviderSignifyd.discriminator = undefined;
DmConfigThirdpartyProviderSignifyd.attributeTypeMap = [
    {
        "name": "enabled",
        "baseName": "enabled",
        "type": "boolean"
    },
    {
        "name": "credentials",
        "baseName": "credentials",
        "type": "DmConfigThirdpartyProviderSignifydCredentials"
    }
];
class DmConfigThirdpartyProviderSignifydCredentials {
    static getAttributeTypeMap() {
        return DmConfigThirdpartyProviderSignifydCredentials.attributeTypeMap;
    }
}
exports.DmConfigThirdpartyProviderSignifydCredentials = DmConfigThirdpartyProviderSignifydCredentials;
DmConfigThirdpartyProviderSignifydCredentials.discriminator = undefined;
DmConfigThirdpartyProviderSignifydCredentials.attributeTypeMap = [
    {
        "name": "teamId",
        "baseName": "teamId",
        "type": "string"
    },
    {
        "name": "apiKey",
        "baseName": "apiKey",
        "type": "string"
    },
    {
        "name": "secretKeyid",
        "baseName": "secretKeyid",
        "type": "string"
    },
    {
        "name": "secretKey",
        "baseName": "secretKey",
        "type": "string"
    }
];
class DmConfigThirdpartyProviderTargus {
    static getAttributeTypeMap() {
        return DmConfigThirdpartyProviderTargus.attributeTypeMap;
    }
}
exports.DmConfigThirdpartyProviderTargus = DmConfigThirdpartyProviderTargus;
DmConfigThirdpartyProviderTargus.discriminator = undefined;
DmConfigThirdpartyProviderTargus.attributeTypeMap = [
    {
        "name": "enabled",
        "baseName": "enabled",
        "type": "boolean"
    },
    {
        "name": "useCybsCredentials",
        "baseName": "useCybsCredentials",
        "type": "boolean"
    },
    {
        "name": "credentials",
        "baseName": "credentials",
        "type": "DmConfigThirdpartyProviderTargusCredentials"
    }
];
class DmConfigThirdpartyProviderTargusCredentials {
    static getAttributeTypeMap() {
        return DmConfigThirdpartyProviderTargusCredentials.attributeTypeMap;
    }
}
exports.DmConfigThirdpartyProviderTargusCredentials = DmConfigThirdpartyProviderTargusCredentials;
DmConfigThirdpartyProviderTargusCredentials.discriminator = undefined;
DmConfigThirdpartyProviderTargusCredentials.attributeTypeMap = [
    {
        "name": "username",
        "baseName": "username",
        "type": "string"
    },
    {
        "name": "password",
        "baseName": "password",
        "type": "string"
    },
    {
        "name": "serviceId",
        "baseName": "serviceId",
        "type": "string"
    }
];
class Dmsv2devicesPaymentProcessor {
    static getAttributeTypeMap() {
        return Dmsv2devicesPaymentProcessor.attributeTypeMap;
    }
}
exports.Dmsv2devicesPaymentProcessor = Dmsv2devicesPaymentProcessor;
Dmsv2devicesPaymentProcessor.discriminator = undefined;
Dmsv2devicesPaymentProcessor.attributeTypeMap = [
    {
        "name": "name",
        "baseName": "name",
        "type": "string"
    },
    {
        "name": "terminalId",
        "baseName": "terminalId",
        "type": "string"
    }
];
class Dmsv2devicetransferDetails {
    static getAttributeTypeMap() {
        return Dmsv2devicetransferDetails.attributeTypeMap;
    }
}
exports.Dmsv2devicetransferDetails = Dmsv2devicetransferDetails;
Dmsv2devicetransferDetails.discriminator = undefined;
Dmsv2devicetransferDetails.attributeTypeMap = [
    {
        "name": "field",
        "baseName": "field",
        "type": "string"
    },
    {
        "name": "reason",
        "baseName": "reason",
        "type": "string"
    },
    {
        "name": "code",
        "baseName": "code",
        "type": "string"
    }
];
class Dmsv2devicetransferDetails1 {
    static getAttributeTypeMap() {
        return Dmsv2devicetransferDetails1.attributeTypeMap;
    }
}
exports.Dmsv2devicetransferDetails1 = Dmsv2devicetransferDetails1;
Dmsv2devicetransferDetails1.discriminator = undefined;
Dmsv2devicetransferDetails1.attributeTypeMap = [
    {
        "name": "field",
        "baseName": "field",
        "type": "string"
    },
    {
        "name": "reason",
        "baseName": "reason",
        "type": "string"
    },
    {
        "name": "code",
        "baseName": "code",
        "type": "string"
    }
];
class Dmsv3devicesdeassociateDevices {
    static getAttributeTypeMap() {
        return Dmsv3devicesdeassociateDevices.attributeTypeMap;
    }
}
exports.Dmsv3devicesdeassociateDevices = Dmsv3devicesdeassociateDevices;
Dmsv3devicesdeassociateDevices.discriminator = undefined;
Dmsv3devicesdeassociateDevices.attributeTypeMap = [
    {
        "name": "deviceId",
        "baseName": "deviceId",
        "type": "string"
    },
    {
        "name": "reason",
        "baseName": "reason",
        "type": "string"
    },
    {
        "name": "code",
        "baseName": "code",
        "type": "string"
    }
];
class ECheckConfig {
    static getAttributeTypeMap() {
        return ECheckConfig.attributeTypeMap;
    }
}
exports.ECheckConfig = ECheckConfig;
ECheckConfig.discriminator = undefined;
ECheckConfig.attributeTypeMap = [
    {
        "name": "common",
        "baseName": "common",
        "type": "ECheckConfigCommon"
    },
    {
        "name": "underwriting",
        "baseName": "underwriting",
        "type": "ECheckConfigUnderwriting"
    },
    {
        "name": "features",
        "baseName": "features",
        "type": "ECheckConfigFeatures"
    }
];
class ECheckConfigCommon {
    static getAttributeTypeMap() {
        return ECheckConfigCommon.attributeTypeMap;
    }
}
exports.ECheckConfigCommon = ECheckConfigCommon;
ECheckConfigCommon.discriminator = undefined;
ECheckConfigCommon.attributeTypeMap = [
    {
        "name": "processors",
        "baseName": "processors",
        "type": "{ [key: string]: ECheckConfigCommonProcessors; }"
    },
    {
        "name": "internalOnly",
        "baseName": "internalOnly",
        "type": "ECheckConfigCommonInternalOnly"
    },
    {
        "name": "accountHolderName",
        "baseName": "accountHolderName",
        "type": "string"
    },
    {
        "name": "accountType",
        "baseName": "accountType",
        "type": "string"
    },
    {
        "name": "accountRoutingNumber",
        "baseName": "accountRoutingNumber",
        "type": "string"
    },
    {
        "name": "accountNumber",
        "baseName": "accountNumber",
        "type": "string"
    }
];
class ECheckConfigCommonInternalOnly {
    static getAttributeTypeMap() {
        return ECheckConfigCommonInternalOnly.attributeTypeMap;
    }
}
exports.ECheckConfigCommonInternalOnly = ECheckConfigCommonInternalOnly;
ECheckConfigCommonInternalOnly.discriminator = undefined;
ECheckConfigCommonInternalOnly.attributeTypeMap = [
    {
        "name": "displayEcheckInfo",
        "baseName": "displayEcheckInfo",
        "type": "boolean"
    },
    {
        "name": "processors",
        "baseName": "processors",
        "type": "{ [key: string]: ECheckConfigCommonInternalOnlyProcessors; }"
    }
];
/**
* Name of the payment processor. Example - \"wellsfargoach\"
*/
class ECheckConfigCommonInternalOnlyProcessors {
    static getAttributeTypeMap() {
        return ECheckConfigCommonInternalOnlyProcessors.attributeTypeMap;
    }
}
exports.ECheckConfigCommonInternalOnlyProcessors = ECheckConfigCommonInternalOnlyProcessors;
ECheckConfigCommonInternalOnlyProcessors.discriminator = undefined;
ECheckConfigCommonInternalOnlyProcessors.attributeTypeMap = [
    {
        "name": "enableCCS",
        "baseName": "enableCCS",
        "type": "boolean"
    },
    {
        "name": "terminalId",
        "baseName": "terminalId",
        "type": "string"
    },
    {
        "name": "enable15anTransactionReferenceNumber",
        "baseName": "enable15anTransactionReferenceNumber",
        "type": "boolean"
    },
    {
        "name": "portalSupportedPaytypes",
        "baseName": "portalSupportedPaytypes",
        "type": "string"
    },
    {
        "name": "settlementMethod",
        "baseName": "settlementMethod",
        "type": "ECheckConfigCommonInternalOnlyProcessors.SettlementMethodEnum"
    },
    {
        "name": "verificationLevel",
        "baseName": "verificationLevel",
        "type": "ECheckConfigCommonInternalOnlyProcessors.VerificationLevelEnum"
    },
    {
        "name": "setCompletedState",
        "baseName": "setCompletedState",
        "type": "boolean"
    }
];
(function (ECheckConfigCommonInternalOnlyProcessors) {
    let SettlementMethodEnum;
    (function (SettlementMethodEnum) {
        SettlementMethodEnum[SettlementMethodEnum["BESTGUESS"] = 'BEST_GUESS'] = "BESTGUESS";
    })(SettlementMethodEnum = ECheckConfigCommonInternalOnlyProcessors.SettlementMethodEnum || (ECheckConfigCommonInternalOnlyProcessors.SettlementMethodEnum = {}));
    let VerificationLevelEnum;
    (function (VerificationLevelEnum) {
        VerificationLevelEnum[VerificationLevelEnum["VALIDATION"] = 'VALIDATION'] = "VALIDATION";
    })(VerificationLevelEnum = ECheckConfigCommonInternalOnlyProcessors.VerificationLevelEnum || (ECheckConfigCommonInternalOnlyProcessors.VerificationLevelEnum = {}));
})(ECheckConfigCommonInternalOnlyProcessors = exports.ECheckConfigCommonInternalOnlyProcessors || (exports.ECheckConfigCommonInternalOnlyProcessors = {}));
/**
* Payment Processing connection used to support eCheck, aka ACH, payment methods. Example - \"bofaach\"
*/
class ECheckConfigCommonProcessors {
    static getAttributeTypeMap() {
        return ECheckConfigCommonProcessors.attributeTypeMap;
    }
}
exports.ECheckConfigCommonProcessors = ECheckConfigCommonProcessors;
ECheckConfigCommonProcessors.discriminator = undefined;
ECheckConfigCommonProcessors.attributeTypeMap = [
    {
        "name": "companyEntryDescription",
        "baseName": "companyEntryDescription",
        "type": "string"
    },
    {
        "name": "companyId",
        "baseName": "companyId",
        "type": "string"
    },
    {
        "name": "batchGroup",
        "baseName": "batchGroup",
        "type": "string"
    },
    {
        "name": "enableAccuityForAvs",
        "baseName": "enableAccuityForAvs",
        "type": "boolean"
    },
    {
        "name": "accuityCheckType",
        "baseName": "accuityCheckType",
        "type": "ECheckConfigCommonProcessors.AccuityCheckTypeEnum"
    },
    {
        "name": "setCompletedState",
        "baseName": "setCompletedState",
        "type": "boolean"
    }
];
(function (ECheckConfigCommonProcessors) {
    let AccuityCheckTypeEnum;
    (function (AccuityCheckTypeEnum) {
        AccuityCheckTypeEnum[AccuityCheckTypeEnum["ALWAYS"] = 'ALWAYS'] = "ALWAYS";
    })(AccuityCheckTypeEnum = ECheckConfigCommonProcessors.AccuityCheckTypeEnum || (ECheckConfigCommonProcessors.AccuityCheckTypeEnum = {}));
})(ECheckConfigCommonProcessors = exports.ECheckConfigCommonProcessors || (exports.ECheckConfigCommonProcessors = {}));
class ECheckConfigFeatures {
    static getAttributeTypeMap() {
        return ECheckConfigFeatures.attributeTypeMap;
    }
}
exports.ECheckConfigFeatures = ECheckConfigFeatures;
ECheckConfigFeatures.discriminator = undefined;
ECheckConfigFeatures.attributeTypeMap = [
    {
        "name": "accountValidationService",
        "baseName": "accountValidationService",
        "type": "ECheckConfigFeaturesAccountValidationService"
    }
];
class ECheckConfigFeaturesAccountValidationService {
    static getAttributeTypeMap() {
        return ECheckConfigFeaturesAccountValidationService.attributeTypeMap;
    }
}
exports.ECheckConfigFeaturesAccountValidationService = ECheckConfigFeaturesAccountValidationService;
ECheckConfigFeaturesAccountValidationService.discriminator = undefined;
ECheckConfigFeaturesAccountValidationService.attributeTypeMap = [
    {
        "name": "internalOnly",
        "baseName": "internalOnly",
        "type": "ECheckConfigFeaturesAccountValidationServiceInternalOnly"
    },
    {
        "name": "processors",
        "baseName": "processors",
        "type": "{ [key: string]: ECheckConfigFeaturesAccountValidationServiceProcessors; }"
    }
];
class ECheckConfigFeaturesAccountValidationServiceInternalOnly {
    static getAttributeTypeMap() {
        return ECheckConfigFeaturesAccountValidationServiceInternalOnly.attributeTypeMap;
    }
}
exports.ECheckConfigFeaturesAccountValidationServiceInternalOnly = ECheckConfigFeaturesAccountValidationServiceInternalOnly;
ECheckConfigFeaturesAccountValidationServiceInternalOnly.discriminator = undefined;
ECheckConfigFeaturesAccountValidationServiceInternalOnly.attributeTypeMap = [
    {
        "name": "processors",
        "baseName": "processors",
        "type": "{ [key: string]: ECheckConfigFeaturesAccountValidationServiceInternalOnlyProcessors; }"
    }
];
/**
* Name of the payment processor. Example - \"wellsfargoach\"
*/
class ECheckConfigFeaturesAccountValidationServiceInternalOnlyProcessors {
    static getAttributeTypeMap() {
        return ECheckConfigFeaturesAccountValidationServiceInternalOnlyProcessors.attributeTypeMap;
    }
}
exports.ECheckConfigFeaturesAccountValidationServiceInternalOnlyProcessors = ECheckConfigFeaturesAccountValidationServiceInternalOnlyProcessors;
ECheckConfigFeaturesAccountValidationServiceInternalOnlyProcessors.discriminator = undefined;
ECheckConfigFeaturesAccountValidationServiceInternalOnlyProcessors.attributeTypeMap = [
    {
        "name": "avsVersion",
        "baseName": "avsVersion",
        "type": "ECheckConfigFeaturesAccountValidationServiceInternalOnlyProcessors.AvsVersionEnum"
    }
];
(function (ECheckConfigFeaturesAccountValidationServiceInternalOnlyProcessors) {
    let AvsVersionEnum;
    (function (AvsVersionEnum) {
        AvsVersionEnum[AvsVersionEnum["_2"] = '2'] = "_2";
    })(AvsVersionEnum = ECheckConfigFeaturesAccountValidationServiceInternalOnlyProcessors.AvsVersionEnum || (ECheckConfigFeaturesAccountValidationServiceInternalOnlyProcessors.AvsVersionEnum = {}));
})(ECheckConfigFeaturesAccountValidationServiceInternalOnlyProcessors = exports.ECheckConfigFeaturesAccountValidationServiceInternalOnlyProcessors || (exports.ECheckConfigFeaturesAccountValidationServiceInternalOnlyProcessors = {}));
/**
* *NEW* Name of the payment processor. Example - \"wellsfargoach\"
*/
class ECheckConfigFeaturesAccountValidationServiceProcessors {
    static getAttributeTypeMap() {
        return ECheckConfigFeaturesAccountValidationServiceProcessors.attributeTypeMap;
    }
}
exports.ECheckConfigFeaturesAccountValidationServiceProcessors = ECheckConfigFeaturesAccountValidationServiceProcessors;
ECheckConfigFeaturesAccountValidationServiceProcessors.discriminator = undefined;
ECheckConfigFeaturesAccountValidationServiceProcessors.attributeTypeMap = [
    {
        "name": "avsAccountOwnershipService",
        "baseName": "avsAccountOwnershipService",
        "type": "boolean"
    },
    {
        "name": "avsAccountStatusService",
        "baseName": "avsAccountStatusService",
        "type": "boolean"
    },
    {
        "name": "avsSignedAgreement",
        "baseName": "avsSignedAgreement",
        "type": "boolean"
    },
    {
        "name": "avsCalculatedResponseBehavior",
        "baseName": "avsCalculatedResponseBehavior",
        "type": "ECheckConfigFeaturesAccountValidationServiceProcessors.AvsCalculatedResponseBehaviorEnum"
    },
    {
        "name": "avsAdditionalId",
        "baseName": "avsAdditionalId",
        "type": "string"
    },
    {
        "name": "enableAvs",
        "baseName": "enableAvs",
        "type": "boolean"
    },
    {
        "name": "avsEntityId",
        "baseName": "avsEntityId",
        "type": "string"
    },
    {
        "name": "avsResultMode",
        "baseName": "avsResultMode",
        "type": "ECheckConfigFeaturesAccountValidationServiceProcessors.AvsResultModeEnum"
    },
    {
        "name": "enableAvsTokenCreation",
        "baseName": "enableAvsTokenCreation",
        "type": "boolean"
    }
];
(function (ECheckConfigFeaturesAccountValidationServiceProcessors) {
    let AvsCalculatedResponseBehaviorEnum;
    (function (AvsCalculatedResponseBehaviorEnum) {
        AvsCalculatedResponseBehaviorEnum[AvsCalculatedResponseBehaviorEnum["Continue"] = 'continue'] = "Continue";
    })(AvsCalculatedResponseBehaviorEnum = ECheckConfigFeaturesAccountValidationServiceProcessors.AvsCalculatedResponseBehaviorEnum || (ECheckConfigFeaturesAccountValidationServiceProcessors.AvsCalculatedResponseBehaviorEnum = {}));
    let AvsResultModeEnum;
    (function (AvsResultModeEnum) {
        AvsResultModeEnum[AvsResultModeEnum["FULLRESPONSE"] = 'FULL_RESPONSE'] = "FULLRESPONSE";
        AvsResultModeEnum[AvsResultModeEnum["LOGICBOX"] = 'LOGIC_BOX'] = "LOGICBOX";
    })(AvsResultModeEnum = ECheckConfigFeaturesAccountValidationServiceProcessors.AvsResultModeEnum || (ECheckConfigFeaturesAccountValidationServiceProcessors.AvsResultModeEnum = {}));
})(ECheckConfigFeaturesAccountValidationServiceProcessors = exports.ECheckConfigFeaturesAccountValidationServiceProcessors || (exports.ECheckConfigFeaturesAccountValidationServiceProcessors = {}));
class ECheckConfigUnderwriting {
    static getAttributeTypeMap() {
        return ECheckConfigUnderwriting.attributeTypeMap;
    }
}
exports.ECheckConfigUnderwriting = ECheckConfigUnderwriting;
ECheckConfigUnderwriting.discriminator = undefined;
ECheckConfigUnderwriting.attributeTypeMap = [
    {
        "name": "standardEntryClassCodes",
        "baseName": "standardEntryClassCodes",
        "type": "string"
    },
    {
        "name": "enableHold",
        "baseName": "enableHold",
        "type": "boolean"
    },
    {
        "name": "monthlyTotalTransactionAmountLimit",
        "baseName": "monthlyTotalTransactionAmountLimit",
        "type": "number"
    },
    {
        "name": "holdingDays",
        "baseName": "holdingDays",
        "type": "number"
    },
    {
        "name": "enableCredits",
        "baseName": "enableCredits",
        "type": "boolean"
    },
    {
        "name": "transactionAmountLimit",
        "baseName": "transactionAmountLimit",
        "type": "number"
    },
    {
        "name": "riskReserveMethod",
        "baseName": "riskReserveMethod",
        "type": "string"
    },
    {
        "name": "riskReserveRate",
        "baseName": "riskReserveRate",
        "type": "number"
    },
    {
        "name": "riskReserveTargetAmount",
        "baseName": "riskReserveTargetAmount",
        "type": "number"
    },
    {
        "name": "solutionOrganizationId",
        "baseName": "solutionOrganizationId",
        "type": "string"
    }
];
class FraudMarkingActionRequest {
    static getAttributeTypeMap() {
        return FraudMarkingActionRequest.attributeTypeMap;
    }
}
exports.FraudMarkingActionRequest = FraudMarkingActionRequest;
FraudMarkingActionRequest.discriminator = undefined;
FraudMarkingActionRequest.attributeTypeMap = [
    {
        "name": "riskInformation",
        "baseName": "riskInformation",
        "type": "Riskv1decisionsidmarkingRiskInformation"
    },
    {
        "name": "clientReferenceInformation",
        "baseName": "clientReferenceInformation",
        "type": "Riskv1liststypeentriesClientReferenceInformation"
    }
];
/**
* This is a server-to-server API request to generate the capture context that can be used to initiate an instance of Microform on an acceptance page.   The capture context is a digitally signed JWT that provides authentication, one-time keys, and the target origin to the Microform Integration application.
*/
class GenerateCaptureContextRequest {
    static getAttributeTypeMap() {
        return GenerateCaptureContextRequest.attributeTypeMap;
    }
}
exports.GenerateCaptureContextRequest = GenerateCaptureContextRequest;
GenerateCaptureContextRequest.discriminator = undefined;
GenerateCaptureContextRequest.attributeTypeMap = [
    {
        "name": "clientVersion",
        "baseName": "clientVersion",
        "type": "string"
    },
    {
        "name": "targetOrigins",
        "baseName": "targetOrigins",
        "type": "Array<string>"
    },
    {
        "name": "allowedCardNetworks",
        "baseName": "allowedCardNetworks",
        "type": "Array<string>"
    },
    {
        "name": "allowedPaymentTypes",
        "baseName": "allowedPaymentTypes",
        "type": "Array<string>"
    },
    {
        "name": "transientTokenResponseOptions",
        "baseName": "transientTokenResponseOptions",
        "type": "Microformv2sessionsTransientTokenResponseOptions"
    }
];
class GenerateUnifiedCheckoutCaptureContextRequest {
    static getAttributeTypeMap() {
        return GenerateUnifiedCheckoutCaptureContextRequest.attributeTypeMap;
    }
}
exports.GenerateUnifiedCheckoutCaptureContextRequest = GenerateUnifiedCheckoutCaptureContextRequest;
GenerateUnifiedCheckoutCaptureContextRequest.discriminator = undefined;
GenerateUnifiedCheckoutCaptureContextRequest.attributeTypeMap = [
    {
        "name": "clientVersion",
        "baseName": "clientVersion",
        "type": "string"
    },
    {
        "name": "targetOrigins",
        "baseName": "targetOrigins",
        "type": "Array<string>"
    },
    {
        "name": "allowedCardNetworks",
        "baseName": "allowedCardNetworks",
        "type": "Array<string>"
    },
    {
        "name": "allowedPaymentTypes",
        "baseName": "allowedPaymentTypes",
        "type": "Array<string>"
    },
    {
        "name": "country",
        "baseName": "country",
        "type": "string"
    },
    {
        "name": "locale",
        "baseName": "locale",
        "type": "string"
    },
    {
        "name": "captureMandate",
        "baseName": "captureMandate",
        "type": "Upv1capturecontextsCaptureMandate"
    },
    {
        "name": "completeMandate",
        "baseName": "completeMandate",
        "type": "Upv1capturecontextsCompleteMandate"
    },
    {
        "name": "orderInformation",
        "baseName": "orderInformation",
        "type": "Upv1capturecontextsOrderInformation"
    },
    {
        "name": "transientTokenResponseOptions",
        "baseName": "transientTokenResponseOptions",
        "type": "Microformv2sessionsTransientTokenResponseOptions"
    }
];
class GetAllPlansResponse {
    static getAttributeTypeMap() {
        return GetAllPlansResponse.attributeTypeMap;
    }
}
exports.GetAllPlansResponse = GetAllPlansResponse;
GetAllPlansResponse.discriminator = undefined;
GetAllPlansResponse.attributeTypeMap = [
    {
        "name": "links",
        "baseName": "_links",
        "type": "GetAllPlansResponseLinks"
    },
    {
        "name": "submitTimeUtc",
        "baseName": "submitTimeUtc",
        "type": "string"
    },
    {
        "name": "totalCount",
        "baseName": "totalCount",
        "type": "number"
    },
    {
        "name": "plans",
        "baseName": "plans",
        "type": "Array<GetAllPlansResponsePlans>"
    }
];
class GetAllPlansResponseLinks {
    static getAttributeTypeMap() {
        return GetAllPlansResponseLinks.attributeTypeMap;
    }
}
exports.GetAllPlansResponseLinks = GetAllPlansResponseLinks;
GetAllPlansResponseLinks.discriminator = undefined;
GetAllPlansResponseLinks.attributeTypeMap = [
    {
        "name": "self",
        "baseName": "self",
        "type": "PtsV2PaymentsPost201ResponseLinksSelf"
    },
    {
        "name": "next",
        "baseName": "next",
        "type": "PtsV2PaymentsPost201ResponseLinksSelf"
    },
    {
        "name": "previous",
        "baseName": "previous",
        "type": "PtsV2PaymentsPost201ResponseLinksSelf"
    }
];
class GetAllPlansResponseOrderInformation {
    static getAttributeTypeMap() {
        return GetAllPlansResponseOrderInformation.attributeTypeMap;
    }
}
exports.GetAllPlansResponseOrderInformation = GetAllPlansResponseOrderInformation;
GetAllPlansResponseOrderInformation.discriminator = undefined;
GetAllPlansResponseOrderInformation.attributeTypeMap = [
    {
        "name": "amountDetails",
        "baseName": "amountDetails",
        "type": "GetAllPlansResponseOrderInformationAmountDetails"
    }
];
class GetAllPlansResponseOrderInformationAmountDetails {
    static getAttributeTypeMap() {
        return GetAllPlansResponseOrderInformationAmountDetails.attributeTypeMap;
    }
}
exports.GetAllPlansResponseOrderInformationAmountDetails = GetAllPlansResponseOrderInformationAmountDetails;
GetAllPlansResponseOrderInformationAmountDetails.discriminator = undefined;
GetAllPlansResponseOrderInformationAmountDetails.attributeTypeMap = [
    {
        "name": "currency",
        "baseName": "currency",
        "type": "string"
    },
    {
        "name": "billingAmount",
        "baseName": "billingAmount",
        "type": "string"
    },
    {
        "name": "setupFee",
        "baseName": "setupFee",
        "type": "string"
    }
];
class GetAllPlansResponsePlanInformation {
    static getAttributeTypeMap() {
        return GetAllPlansResponsePlanInformation.attributeTypeMap;
    }
}
exports.GetAllPlansResponsePlanInformation = GetAllPlansResponsePlanInformation;
GetAllPlansResponsePlanInformation.discriminator = undefined;
GetAllPlansResponsePlanInformation.attributeTypeMap = [
    {
        "name": "code",
        "baseName": "code",
        "type": "string"
    },
    {
        "name": "status",
        "baseName": "status",
        "type": "string"
    },
    {
        "name": "name",
        "baseName": "name",
        "type": "string"
    },
    {
        "name": "description",
        "baseName": "description",
        "type": "string"
    },
    {
        "name": "billingPeriod",
        "baseName": "billingPeriod",
        "type": "GetAllPlansResponsePlanInformationBillingPeriod"
    },
    {
        "name": "billingCycles",
        "baseName": "billingCycles",
        "type": "GetAllPlansResponsePlanInformationBillingCycles"
    }
];
class GetAllPlansResponsePlanInformationBillingCycles {
    static getAttributeTypeMap() {
        return GetAllPlansResponsePlanInformationBillingCycles.attributeTypeMap;
    }
}
exports.GetAllPlansResponsePlanInformationBillingCycles = GetAllPlansResponsePlanInformationBillingCycles;
GetAllPlansResponsePlanInformationBillingCycles.discriminator = undefined;
GetAllPlansResponsePlanInformationBillingCycles.attributeTypeMap = [
    {
        "name": "total",
        "baseName": "total",
        "type": "string"
    }
];
/**
* Billing Frequency
*/
class GetAllPlansResponsePlanInformationBillingPeriod {
    static getAttributeTypeMap() {
        return GetAllPlansResponsePlanInformationBillingPeriod.attributeTypeMap;
    }
}
exports.GetAllPlansResponsePlanInformationBillingPeriod = GetAllPlansResponsePlanInformationBillingPeriod;
GetAllPlansResponsePlanInformationBillingPeriod.discriminator = undefined;
GetAllPlansResponsePlanInformationBillingPeriod.attributeTypeMap = [
    {
        "name": "length",
        "baseName": "length",
        "type": "string"
    },
    {
        "name": "unit",
        "baseName": "unit",
        "type": "string"
    }
];
/**
* Plan list.
*/
class GetAllPlansResponsePlans {
    static getAttributeTypeMap() {
        return GetAllPlansResponsePlans.attributeTypeMap;
    }
}
exports.GetAllPlansResponsePlans = GetAllPlansResponsePlans;
GetAllPlansResponsePlans.discriminator = undefined;
GetAllPlansResponsePlans.attributeTypeMap = [
    {
        "name": "links",
        "baseName": "_links",
        "type": "PtsV2IncrementalAuthorizationPatch201ResponseLinks"
    },
    {
        "name": "id",
        "baseName": "id",
        "type": "string"
    },
    {
        "name": "planInformation",
        "baseName": "planInformation",
        "type": "GetAllPlansResponsePlanInformation"
    },
    {
        "name": "orderInformation",
        "baseName": "orderInformation",
        "type": "GetAllPlansResponseOrderInformation"
    }
];
class GetAllSubscriptionsResponse {
    static getAttributeTypeMap() {
        return GetAllSubscriptionsResponse.attributeTypeMap;
    }
}
exports.GetAllSubscriptionsResponse = GetAllSubscriptionsResponse;
GetAllSubscriptionsResponse.discriminator = undefined;
GetAllSubscriptionsResponse.attributeTypeMap = [
    {
        "name": "links",
        "baseName": "_links",
        "type": "GetAllPlansResponseLinks"
    },
    {
        "name": "submitTimeUtc",
        "baseName": "submitTimeUtc",
        "type": "string"
    },
    {
        "name": "totalCount",
        "baseName": "totalCount",
        "type": "number"
    },
    {
        "name": "subscriptions",
        "baseName": "subscriptions",
        "type": "Array<GetAllSubscriptionsResponseSubscriptions>"
    }
];
class GetAllSubscriptionsResponseLinks {
    static getAttributeTypeMap() {
        return GetAllSubscriptionsResponseLinks.attributeTypeMap;
    }
}
exports.GetAllSubscriptionsResponseLinks = GetAllSubscriptionsResponseLinks;
GetAllSubscriptionsResponseLinks.discriminator = undefined;
GetAllSubscriptionsResponseLinks.attributeTypeMap = [
    {
        "name": "self",
        "baseName": "self",
        "type": "PtsV2PaymentsPost201ResponseLinksSelf"
    },
    {
        "name": "cancel",
        "baseName": "cancel",
        "type": "PtsV2PaymentsPost201ResponseLinksSelf"
    },
    {
        "name": "suspend",
        "baseName": "suspend",
        "type": "PtsV2PaymentsPost201ResponseLinksSelf"
    },
    {
        "name": "activate",
        "baseName": "activate",
        "type": "PtsV2PaymentsPost201ResponseLinksSelf"
    }
];
class GetAllSubscriptionsResponseOrderInformation {
    static getAttributeTypeMap() {
        return GetAllSubscriptionsResponseOrderInformation.attributeTypeMap;
    }
}
exports.GetAllSubscriptionsResponseOrderInformation = GetAllSubscriptionsResponseOrderInformation;
GetAllSubscriptionsResponseOrderInformation.discriminator = undefined;
GetAllSubscriptionsResponseOrderInformation.attributeTypeMap = [
    {
        "name": "amountDetails",
        "baseName": "amountDetails",
        "type": "GetAllPlansResponseOrderInformationAmountDetails"
    },
    {
        "name": "billTo",
        "baseName": "billTo",
        "type": "GetAllSubscriptionsResponseOrderInformationBillTo"
    }
];
class GetAllSubscriptionsResponseOrderInformationBillTo {
    static getAttributeTypeMap() {
        return GetAllSubscriptionsResponseOrderInformationBillTo.attributeTypeMap;
    }
}
exports.GetAllSubscriptionsResponseOrderInformationBillTo = GetAllSubscriptionsResponseOrderInformationBillTo;
GetAllSubscriptionsResponseOrderInformationBillTo.discriminator = undefined;
GetAllSubscriptionsResponseOrderInformationBillTo.attributeTypeMap = [
    {
        "name": "firstName",
        "baseName": "firstName",
        "type": "string"
    },
    {
        "name": "lastName",
        "baseName": "lastName",
        "type": "string"
    }
];
class GetAllSubscriptionsResponsePaymentInformation {
    static getAttributeTypeMap() {
        return GetAllSubscriptionsResponsePaymentInformation.attributeTypeMap;
    }
}
exports.GetAllSubscriptionsResponsePaymentInformation = GetAllSubscriptionsResponsePaymentInformation;
GetAllSubscriptionsResponsePaymentInformation.discriminator = undefined;
GetAllSubscriptionsResponsePaymentInformation.attributeTypeMap = [
    {
        "name": "customer",
        "baseName": "customer",
        "type": "GetAllSubscriptionsResponsePaymentInformationCustomer"
    }
];
class GetAllSubscriptionsResponsePaymentInformationCustomer {
    static getAttributeTypeMap() {
        return GetAllSubscriptionsResponsePaymentInformationCustomer.attributeTypeMap;
    }
}
exports.GetAllSubscriptionsResponsePaymentInformationCustomer = GetAllSubscriptionsResponsePaymentInformationCustomer;
GetAllSubscriptionsResponsePaymentInformationCustomer.discriminator = undefined;
GetAllSubscriptionsResponsePaymentInformationCustomer.attributeTypeMap = [
    {
        "name": "id",
        "baseName": "id",
        "type": "string"
    }
];
class GetAllSubscriptionsResponsePlanInformation {
    static getAttributeTypeMap() {
        return GetAllSubscriptionsResponsePlanInformation.attributeTypeMap;
    }
}
exports.GetAllSubscriptionsResponsePlanInformation = GetAllSubscriptionsResponsePlanInformation;
GetAllSubscriptionsResponsePlanInformation.discriminator = undefined;
GetAllSubscriptionsResponsePlanInformation.attributeTypeMap = [
    {
        "name": "code",
        "baseName": "code",
        "type": "string"
    },
    {
        "name": "name",
        "baseName": "name",
        "type": "string"
    },
    {
        "name": "billingPeriod",
        "baseName": "billingPeriod",
        "type": "GetAllPlansResponsePlanInformationBillingPeriod"
    },
    {
        "name": "billingCycles",
        "baseName": "billingCycles",
        "type": "GetAllSubscriptionsResponsePlanInformationBillingCycles"
    }
];
class GetAllSubscriptionsResponsePlanInformationBillingCycles {
    static getAttributeTypeMap() {
        return GetAllSubscriptionsResponsePlanInformationBillingCycles.attributeTypeMap;
    }
}
exports.GetAllSubscriptionsResponsePlanInformationBillingCycles = GetAllSubscriptionsResponsePlanInformationBillingCycles;
GetAllSubscriptionsResponsePlanInformationBillingCycles.discriminator = undefined;
GetAllSubscriptionsResponsePlanInformationBillingCycles.attributeTypeMap = [
    {
        "name": "total",
        "baseName": "total",
        "type": "string"
    },
    {
        "name": "current",
        "baseName": "current",
        "type": "string"
    }
];
class GetAllSubscriptionsResponseSubscriptionInformation {
    static getAttributeTypeMap() {
        return GetAllSubscriptionsResponseSubscriptionInformation.attributeTypeMap;
    }
}
exports.GetAllSubscriptionsResponseSubscriptionInformation = GetAllSubscriptionsResponseSubscriptionInformation;
GetAllSubscriptionsResponseSubscriptionInformation.discriminator = undefined;
GetAllSubscriptionsResponseSubscriptionInformation.attributeTypeMap = [
    {
        "name": "code",
        "baseName": "code",
        "type": "string"
    },
    {
        "name": "planId",
        "baseName": "planId",
        "type": "string"
    },
    {
        "name": "name",
        "baseName": "name",
        "type": "string"
    },
    {
        "name": "startDate",
        "baseName": "startDate",
        "type": "string"
    },
    {
        "name": "status",
        "baseName": "status",
        "type": "string"
    }
];
/**
* Subscription list
*/
class GetAllSubscriptionsResponseSubscriptions {
    static getAttributeTypeMap() {
        return GetAllSubscriptionsResponseSubscriptions.attributeTypeMap;
    }
}
exports.GetAllSubscriptionsResponseSubscriptions = GetAllSubscriptionsResponseSubscriptions;
GetAllSubscriptionsResponseSubscriptions.discriminator = undefined;
GetAllSubscriptionsResponseSubscriptions.attributeTypeMap = [
    {
        "name": "links",
        "baseName": "_links",
        "type": "GetAllSubscriptionsResponseLinks"
    },
    {
        "name": "id",
        "baseName": "id",
        "type": "string"
    },
    {
        "name": "planInformation",
        "baseName": "planInformation",
        "type": "GetAllSubscriptionsResponsePlanInformation"
    },
    {
        "name": "subscriptionInformation",
        "baseName": "subscriptionInformation",
        "type": "GetAllSubscriptionsResponseSubscriptionInformation"
    },
    {
        "name": "paymentInformation",
        "baseName": "paymentInformation",
        "type": "GetAllSubscriptionsResponsePaymentInformation"
    },
    {
        "name": "orderInformation",
        "baseName": "orderInformation",
        "type": "GetAllSubscriptionsResponseOrderInformation"
    }
];
class GetPlanCodeResponse {
    static getAttributeTypeMap() {
        return GetPlanCodeResponse.attributeTypeMap;
    }
}
exports.GetPlanCodeResponse = GetPlanCodeResponse;
GetPlanCodeResponse.discriminator = undefined;
GetPlanCodeResponse.attributeTypeMap = [
    {
        "name": "code",
        "baseName": "code",
        "type": "string"
    },
    {
        "name": "submitTimeUtc",
        "baseName": "submitTimeUtc",
        "type": "string"
    }
];
class GetPlanResponse {
    static getAttributeTypeMap() {
        return GetPlanResponse.attributeTypeMap;
    }
}
exports.GetPlanResponse = GetPlanResponse;
GetPlanResponse.discriminator = undefined;
GetPlanResponse.attributeTypeMap = [
    {
        "name": "links",
        "baseName": "_links",
        "type": "PtsV2IncrementalAuthorizationPatch201ResponseLinks"
    },
    {
        "name": "id",
        "baseName": "id",
        "type": "string"
    },
    {
        "name": "submitTimeUtc",
        "baseName": "submitTimeUtc",
        "type": "string"
    },
    {
        "name": "planInformation",
        "baseName": "planInformation",
        "type": "GetAllPlansResponsePlanInformation"
    },
    {
        "name": "orderInformation",
        "baseName": "orderInformation",
        "type": "GetAllPlansResponseOrderInformation"
    }
];
class GetSubscriptionCodeResponse {
    static getAttributeTypeMap() {
        return GetSubscriptionCodeResponse.attributeTypeMap;
    }
}
exports.GetSubscriptionCodeResponse = GetSubscriptionCodeResponse;
GetSubscriptionCodeResponse.discriminator = undefined;
GetSubscriptionCodeResponse.attributeTypeMap = [
    {
        "name": "code",
        "baseName": "code",
        "type": "string"
    },
    {
        "name": "submitTimeUtc",
        "baseName": "submitTimeUtc",
        "type": "string"
    }
];
class GetSubscriptionResponse {
    static getAttributeTypeMap() {
        return GetSubscriptionResponse.attributeTypeMap;
    }
}
exports.GetSubscriptionResponse = GetSubscriptionResponse;
GetSubscriptionResponse.discriminator = undefined;
GetSubscriptionResponse.attributeTypeMap = [
    {
        "name": "links",
        "baseName": "_links",
        "type": "GetAllSubscriptionsResponseLinks"
    },
    {
        "name": "id",
        "baseName": "id",
        "type": "string"
    },
    {
        "name": "submitTimeUtc",
        "baseName": "submitTimeUtc",
        "type": "string"
    },
    {
        "name": "planInformation",
        "baseName": "planInformation",
        "type": "GetAllSubscriptionsResponsePlanInformation"
    },
    {
        "name": "subscriptionInformation",
        "baseName": "subscriptionInformation",
        "type": "GetAllSubscriptionsResponseSubscriptionInformation"
    },
    {
        "name": "paymentInformation",
        "baseName": "paymentInformation",
        "type": "GetAllSubscriptionsResponsePaymentInformation"
    },
    {
        "name": "orderInformation",
        "baseName": "orderInformation",
        "type": "GetAllSubscriptionsResponseOrderInformation"
    },
    {
        "name": "reactivationInformation",
        "baseName": "reactivationInformation",
        "type": "GetSubscriptionResponseReactivationInformation"
    }
];
class GetSubscriptionResponse1 {
    static getAttributeTypeMap() {
        return GetSubscriptionResponse1.attributeTypeMap;
    }
}
exports.GetSubscriptionResponse1 = GetSubscriptionResponse1;
GetSubscriptionResponse1.discriminator = undefined;
GetSubscriptionResponse1.attributeTypeMap = [
    {
        "name": "links",
        "baseName": "_links",
        "type": "GetSubscriptionResponse1Links"
    },
    {
        "name": "buyerInformation",
        "baseName": "buyerInformation",
        "type": "GetSubscriptionResponse1BuyerInformation"
    },
    {
        "name": "paymentInstrument",
        "baseName": "paymentInstrument",
        "type": "GetSubscriptionResponse1PaymentInstrument"
    },
    {
        "name": "shippingAddress",
        "baseName": "shippingAddress",
        "type": "GetSubscriptionResponse1ShippingAddress"
    }
];
/**
* Customer information used during Follow-On Transaction.
*/
class GetSubscriptionResponse1BuyerInformation {
    static getAttributeTypeMap() {
        return GetSubscriptionResponse1BuyerInformation.attributeTypeMap;
    }
}
exports.GetSubscriptionResponse1BuyerInformation = GetSubscriptionResponse1BuyerInformation;
GetSubscriptionResponse1BuyerInformation.discriminator = undefined;
GetSubscriptionResponse1BuyerInformation.attributeTypeMap = [
    {
        "name": "merchantCustomerID",
        "baseName": "merchantCustomerID",
        "type": "string"
    },
    {
        "name": "email",
        "baseName": "email",
        "type": "string"
    }
];
class GetSubscriptionResponse1Links {
    static getAttributeTypeMap() {
        return GetSubscriptionResponse1Links.attributeTypeMap;
    }
}
exports.GetSubscriptionResponse1Links = GetSubscriptionResponse1Links;
GetSubscriptionResponse1Links.discriminator = undefined;
GetSubscriptionResponse1Links.attributeTypeMap = [
    {
        "name": "self",
        "baseName": "self",
        "type": "PtsV2PaymentsPost201ResponseLinksSelf"
    },
    {
        "name": "create",
        "baseName": "create",
        "type": "PtsV2PaymentsPost201ResponseLinksSelf"
    }
];
/**
* Payment instrument used during Follow-On Transaction.
*/
class GetSubscriptionResponse1PaymentInstrument {
    static getAttributeTypeMap() {
        return GetSubscriptionResponse1PaymentInstrument.attributeTypeMap;
    }
}
exports.GetSubscriptionResponse1PaymentInstrument = GetSubscriptionResponse1PaymentInstrument;
GetSubscriptionResponse1PaymentInstrument.discriminator = undefined;
GetSubscriptionResponse1PaymentInstrument.attributeTypeMap = [
    {
        "name": "id",
        "baseName": "id",
        "type": "string"
    },
    {
        "name": "bankAccount",
        "baseName": "bankAccount",
        "type": "GetSubscriptionResponse1PaymentInstrumentBankAccount"
    },
    {
        "name": "card",
        "baseName": "card",
        "type": "GetSubscriptionResponse1PaymentInstrumentCard"
    },
    {
        "name": "billTo",
        "baseName": "billTo",
        "type": "Tmsv2customersEmbeddedDefaultPaymentInstrumentBillTo"
    },
    {
        "name": "buyerInformation",
        "baseName": "buyerInformation",
        "type": "GetSubscriptionResponse1PaymentInstrumentBuyerInformation"
    }
];
class GetSubscriptionResponse1PaymentInstrumentBankAccount {
    static getAttributeTypeMap() {
        return GetSubscriptionResponse1PaymentInstrumentBankAccount.attributeTypeMap;
    }
}
exports.GetSubscriptionResponse1PaymentInstrumentBankAccount = GetSubscriptionResponse1PaymentInstrumentBankAccount;
GetSubscriptionResponse1PaymentInstrumentBankAccount.discriminator = undefined;
GetSubscriptionResponse1PaymentInstrumentBankAccount.attributeTypeMap = [
    {
        "name": "type",
        "baseName": "type",
        "type": "string"
    },
    {
        "name": "number",
        "baseName": "number",
        "type": "string"
    },
    {
        "name": "routingNumber",
        "baseName": "routingNumber",
        "type": "string"
    }
];
class GetSubscriptionResponse1PaymentInstrumentBuyerInformation {
    static getAttributeTypeMap() {
        return GetSubscriptionResponse1PaymentInstrumentBuyerInformation.attributeTypeMap;
    }
}
exports.GetSubscriptionResponse1PaymentInstrumentBuyerInformation = GetSubscriptionResponse1PaymentInstrumentBuyerInformation;
GetSubscriptionResponse1PaymentInstrumentBuyerInformation.discriminator = undefined;
GetSubscriptionResponse1PaymentInstrumentBuyerInformation.attributeTypeMap = [
    {
        "name": "companyTaxID",
        "baseName": "companyTaxID",
        "type": "string"
    },
    {
        "name": "currency",
        "baseName": "currency",
        "type": "string"
    },
    {
        "name": "dateOfBirth",
        "baseName": "dateOfBirth",
        "type": "string"
    },
    {
        "name": "personalIdentification",
        "baseName": "personalIdentification",
        "type": "Array<Tmsv2customersEmbeddedDefaultPaymentInstrumentBuyerInformationPersonalIdentification>"
    }
];
/**
* The masked number (PAN), expirationMonth, expirationYear and type of the card used during transaction.
*/
class GetSubscriptionResponse1PaymentInstrumentCard {
    static getAttributeTypeMap() {
        return GetSubscriptionResponse1PaymentInstrumentCard.attributeTypeMap;
    }
}
exports.GetSubscriptionResponse1PaymentInstrumentCard = GetSubscriptionResponse1PaymentInstrumentCard;
GetSubscriptionResponse1PaymentInstrumentCard.discriminator = undefined;
GetSubscriptionResponse1PaymentInstrumentCard.attributeTypeMap = [
    {
        "name": "number",
        "baseName": "number",
        "type": "string"
    },
    {
        "name": "expirationMonth",
        "baseName": "expirationMonth",
        "type": "string"
    },
    {
        "name": "expirationYear",
        "baseName": "expirationYear",
        "type": "string"
    },
    {
        "name": "type",
        "baseName": "type",
        "type": "string"
    }
];
/**
* Shipping address used during Follow-On Transaction.
*/
class GetSubscriptionResponse1ShippingAddress {
    static getAttributeTypeMap() {
        return GetSubscriptionResponse1ShippingAddress.attributeTypeMap;
    }
}
exports.GetSubscriptionResponse1ShippingAddress = GetSubscriptionResponse1ShippingAddress;
GetSubscriptionResponse1ShippingAddress.discriminator = undefined;
GetSubscriptionResponse1ShippingAddress.attributeTypeMap = [
    {
        "name": "id",
        "baseName": "id",
        "type": "string"
    },
    {
        "name": "shipTo",
        "baseName": "shipTo",
        "type": "Tmsv2customersEmbeddedDefaultShippingAddressShipTo"
    }
];
class GetSubscriptionResponseReactivationInformation {
    static getAttributeTypeMap() {
        return GetSubscriptionResponseReactivationInformation.attributeTypeMap;
    }
}
exports.GetSubscriptionResponseReactivationInformation = GetSubscriptionResponseReactivationInformation;
GetSubscriptionResponseReactivationInformation.discriminator = undefined;
GetSubscriptionResponseReactivationInformation.attributeTypeMap = [
    {
        "name": "skippedPaymentsCount",
        "baseName": "skippedPaymentsCount",
        "type": "string"
    },
    {
        "name": "skippedPaymentsTotalAmount",
        "baseName": "skippedPaymentsTotalAmount",
        "type": "string"
    }
];
class IncrementAuthRequest {
    static getAttributeTypeMap() {
        return IncrementAuthRequest.attributeTypeMap;
    }
}
exports.IncrementAuthRequest = IncrementAuthRequest;
IncrementAuthRequest.discriminator = undefined;
IncrementAuthRequest.attributeTypeMap = [
    {
        "name": "clientReferenceInformation",
        "baseName": "clientReferenceInformation",
        "type": "Ptsv2paymentsidClientReferenceInformation"
    },
    {
        "name": "processingInformation",
        "baseName": "processingInformation",
        "type": "Ptsv2paymentsidProcessingInformation"
    },
    {
        "name": "orderInformation",
        "baseName": "orderInformation",
        "type": "Ptsv2paymentsidOrderInformation"
    },
    {
        "name": "merchantInformation",
        "baseName": "merchantInformation",
        "type": "Ptsv2paymentsidMerchantInformation"
    },
    {
        "name": "travelInformation",
        "baseName": "travelInformation",
        "type": "Ptsv2paymentsidTravelInformation"
    }
];
/**
* Represents the Card Art Asset associated to the Network Token.
*/
class InlineResponse200 {
    static getAttributeTypeMap() {
        return InlineResponse200.attributeTypeMap;
    }
}
exports.InlineResponse200 = InlineResponse200;
InlineResponse200.discriminator = undefined;
InlineResponse200.attributeTypeMap = [
    {
        "name": "id",
        "baseName": "id",
        "type": "string"
    },
    {
        "name": "type",
        "baseName": "type",
        "type": "string"
    },
    {
        "name": "provider",
        "baseName": "provider",
        "type": "string"
    },
    {
        "name": "content",
        "baseName": "content",
        "type": "Array<InlineResponse200Content>"
    }
];
class InlineResponse2001 {
    static getAttributeTypeMap() {
        return InlineResponse2001.attributeTypeMap;
    }
}
exports.InlineResponse2001 = InlineResponse2001;
InlineResponse2001.discriminator = undefined;
InlineResponse2001.attributeTypeMap = [
    {
        "name": "id",
        "baseName": "id",
        "type": "string"
    },
    {
        "name": "submitTimeUtc",
        "baseName": "submitTimeUtc",
        "type": "string"
    },
    {
        "name": "status",
        "baseName": "status",
        "type": "string"
    },
    {
        "name": "embedded",
        "baseName": "_embedded",
        "type": "InlineResponse2001Embedded"
    }
];
class InlineResponse20010 {
    static getAttributeTypeMap() {
        return InlineResponse20010.attributeTypeMap;
    }
}
exports.InlineResponse20010 = InlineResponse20010;
InlineResponse20010.discriminator = undefined;
InlineResponse20010.attributeTypeMap = [
    {
        "name": "expirations",
        "baseName": "expirations",
        "type": "Array<InlineResponse20010Expirations>"
    }
];
class InlineResponse20010Expirations {
    static getAttributeTypeMap() {
        return InlineResponse20010Expirations.attributeTypeMap;
    }
}
exports.InlineResponse20010Expirations = InlineResponse20010Expirations;
InlineResponse20010Expirations.discriminator = undefined;
InlineResponse20010Expirations.attributeTypeMap = [
    {
        "name": "deviceId",
        "baseName": "deviceId",
        "type": "string"
    },
    {
        "name": "deviceType",
        "baseName": "deviceType",
        "type": "string"
    },
    {
        "name": "expirationDateInMilliseconds",
        "baseName": "expirationDateInMilliseconds",
        "type": "number"
    }
];
class InlineResponse20011 {
    static getAttributeTypeMap() {
        return InlineResponse20011.attributeTypeMap;
    }
}
exports.InlineResponse20011 = InlineResponse20011;
InlineResponse20011.discriminator = undefined;
InlineResponse20011.attributeTypeMap = [
    {
        "name": "id",
        "baseName": "id",
        "type": "string"
    },
    {
        "name": "version",
        "baseName": "version",
        "type": "number"
    },
    {
        "name": "customizations",
        "baseName": "customizations",
        "type": "{ [key: string]: string; }"
    },
    {
        "name": "customizationMetadata",
        "baseName": "customizationMetadata",
        "type": "Array<InlineResponse20011CustomizationMetadata>"
    }
];
class InlineResponse20011CustomizationMetadata {
    static getAttributeTypeMap() {
        return InlineResponse20011CustomizationMetadata.attributeTypeMap;
    }
}
exports.InlineResponse20011CustomizationMetadata = InlineResponse20011CustomizationMetadata;
InlineResponse20011CustomizationMetadata.discriminator = undefined;
InlineResponse20011CustomizationMetadata.attributeTypeMap = [
    {
        "name": "source",
        "baseName": "source",
        "type": "string"
    },
    {
        "name": "format",
        "baseName": "format",
        "type": "string"
    },
    {
        "name": "description",
        "baseName": "description",
        "type": "string"
    },
    {
        "name": "displayKey",
        "baseName": "displayKey",
        "type": "string"
    },
    {
        "name": "editable",
        "baseName": "editable",
        "type": "boolean"
    },
    {
        "name": "paramType",
        "baseName": "paramType",
        "type": "string"
    },
    {
        "name": "possibleValues",
        "baseName": "possibleValues",
        "type": "Array<string>"
    },
    {
        "name": "allowMultiSelect",
        "baseName": "allowMultiSelect",
        "type": "boolean"
    }
];
class InlineResponse20012 {
    static getAttributeTypeMap() {
        return InlineResponse20012.attributeTypeMap;
    }
}
exports.InlineResponse20012 = InlineResponse20012;
InlineResponse20012.discriminator = undefined;
InlineResponse20012.attributeTypeMap = [
    {
        "name": "links",
        "baseName": "_links",
        "type": "Array<InlineResponse20012Links>"
    },
    {
        "name": "object",
        "baseName": "object",
        "type": "string"
    },
    {
        "name": "offset",
        "baseName": "offset",
        "type": "number"
    },
    {
        "name": "limit",
        "baseName": "limit",
        "type": "number"
    },
    {
        "name": "count",
        "baseName": "count",
        "type": "number"
    },
    {
        "name": "total",
        "baseName": "total",
        "type": "number"
    },
    {
        "name": "embedded",
        "baseName": "_embedded",
        "type": "InlineResponse20012Embedded"
    }
];
class InlineResponse20012Embedded {
    static getAttributeTypeMap() {
        return InlineResponse20012Embedded.attributeTypeMap;
    }
}
exports.InlineResponse20012Embedded = InlineResponse20012Embedded;
InlineResponse20012Embedded.discriminator = undefined;
InlineResponse20012Embedded.attributeTypeMap = [
    {
        "name": "batches",
        "baseName": "batches",
        "type": "Array<InlineResponse20012EmbeddedBatches>"
    }
];
class InlineResponse20012EmbeddedBatches {
    static getAttributeTypeMap() {
        return InlineResponse20012EmbeddedBatches.attributeTypeMap;
    }
}
exports.InlineResponse20012EmbeddedBatches = InlineResponse20012EmbeddedBatches;
InlineResponse20012EmbeddedBatches.discriminator = undefined;
InlineResponse20012EmbeddedBatches.attributeTypeMap = [
    {
        "name": "links",
        "baseName": "_links",
        "type": "InlineResponse20012EmbeddedLinks"
    },
    {
        "name": "batchId",
        "baseName": "batchId",
        "type": "string"
    },
    {
        "name": "batchCreatedDate",
        "baseName": "batchCreatedDate",
        "type": "string"
    },
    {
        "name": "batchModifiedDate",
        "baseName": "batchModifiedDate",
        "type": "string"
    },
    {
        "name": "batchSource",
        "baseName": "batchSource",
        "type": "string"
    },
    {
        "name": "tokenSource",
        "baseName": "tokenSource",
        "type": "string"
    },
    {
        "name": "merchantReference",
        "baseName": "merchantReference",
        "type": "string"
    },
    {
        "name": "batchCaEndpoints",
        "baseName": "batchCaEndpoints",
        "type": "Array<string>"
    },
    {
        "name": "status",
        "baseName": "status",
        "type": "string"
    },
    {
        "name": "totals",
        "baseName": "totals",
        "type": "InlineResponse20012EmbeddedTotals"
    }
];
class InlineResponse20012EmbeddedLinks {
    static getAttributeTypeMap() {
        return InlineResponse20012EmbeddedLinks.attributeTypeMap;
    }
}
exports.InlineResponse20012EmbeddedLinks = InlineResponse20012EmbeddedLinks;
InlineResponse20012EmbeddedLinks.discriminator = undefined;
InlineResponse20012EmbeddedLinks.attributeTypeMap = [
    {
        "name": "reports",
        "baseName": "reports",
        "type": "Array<InlineResponse20012EmbeddedLinksReports>"
    }
];
/**
* Retrieve the generated report of a batch when available.
*/
class InlineResponse20012EmbeddedLinksReports {
    static getAttributeTypeMap() {
        return InlineResponse20012EmbeddedLinksReports.attributeTypeMap;
    }
}
exports.InlineResponse20012EmbeddedLinksReports = InlineResponse20012EmbeddedLinksReports;
InlineResponse20012EmbeddedLinksReports.discriminator = undefined;
InlineResponse20012EmbeddedLinksReports.attributeTypeMap = [
    {
        "name": "href",
        "baseName": "href",
        "type": "string"
    }
];
class InlineResponse20012EmbeddedTotals {
    static getAttributeTypeMap() {
        return InlineResponse20012EmbeddedTotals.attributeTypeMap;
    }
}
exports.InlineResponse20012EmbeddedTotals = InlineResponse20012EmbeddedTotals;
InlineResponse20012EmbeddedTotals.discriminator = undefined;
InlineResponse20012EmbeddedTotals.attributeTypeMap = [
    {
        "name": "acceptedRecords",
        "baseName": "acceptedRecords",
        "type": "number"
    },
    {
        "name": "rejectedRecords",
        "baseName": "rejectedRecords",
        "type": "number"
    },
    {
        "name": "updatedRecords",
        "baseName": "updatedRecords",
        "type": "number"
    },
    {
        "name": "caResponses",
        "baseName": "caResponses",
        "type": "number"
    },
    {
        "name": "caResponsesOmitted",
        "baseName": "caResponsesOmitted",
        "type": "number"
    }
];
class InlineResponse20012Links {
    static getAttributeTypeMap() {
        return InlineResponse20012Links.attributeTypeMap;
    }
}
exports.InlineResponse20012Links = InlineResponse20012Links;
InlineResponse20012Links.discriminator = undefined;
InlineResponse20012Links.attributeTypeMap = [
    {
        "name": "rel",
        "baseName": "rel",
        "type": "string"
    },
    {
        "name": "href",
        "baseName": "href",
        "type": "string"
    }
];
class InlineResponse20013 {
    static getAttributeTypeMap() {
        return InlineResponse20013.attributeTypeMap;
    }
}
exports.InlineResponse20013 = InlineResponse20013;
InlineResponse20013.discriminator = undefined;
InlineResponse20013.attributeTypeMap = [
    {
        "name": "links",
        "baseName": "_links",
        "type": "InlineResponse20013Links"
    },
    {
        "name": "batchId",
        "baseName": "batchId",
        "type": "string"
    },
    {
        "name": "batchCreatedDate",
        "baseName": "batchCreatedDate",
        "type": "string"
    },
    {
        "name": "batchSource",
        "baseName": "batchSource",
        "type": "string"
    },
    {
        "name": "merchantReference",
        "baseName": "merchantReference",
        "type": "string"
    },
    {
        "name": "batchCaEndpoints",
        "baseName": "batchCaEndpoints",
        "type": "string"
    },
    {
        "name": "status",
        "baseName": "status",
        "type": "string"
    },
    {
        "name": "totals",
        "baseName": "totals",
        "type": "InlineResponse20012EmbeddedTotals"
    },
    {
        "name": "billing",
        "baseName": "billing",
        "type": "InlineResponse20013Billing"
    },
    {
        "name": "description",
        "baseName": "description",
        "type": "string"
    }
];
class InlineResponse20013Billing {
    static getAttributeTypeMap() {
        return InlineResponse20013Billing.attributeTypeMap;
    }
}
exports.InlineResponse20013Billing = InlineResponse20013Billing;
InlineResponse20013Billing.discriminator = undefined;
InlineResponse20013Billing.attributeTypeMap = [
    {
        "name": "nan",
        "baseName": "nan",
        "type": "number"
    },
    {
        "name": "ned",
        "baseName": "ned",
        "type": "number"
    },
    {
        "name": "acl",
        "baseName": "acl",
        "type": "number"
    },
    {
        "name": "cch",
        "baseName": "cch",
        "type": "number"
    }
];
class InlineResponse20013Links {
    static getAttributeTypeMap() {
        return InlineResponse20013Links.attributeTypeMap;
    }
}
exports.InlineResponse20013Links = InlineResponse20013Links;
InlineResponse20013Links.discriminator = undefined;
InlineResponse20013Links.attributeTypeMap = [
    {
        "name": "self",
        "baseName": "self",
        "type": "InlineResponse202LinksStatus"
    },
    {
        "name": "report",
        "baseName": "report",
        "type": "Array<InlineResponse20013LinksReport>"
    }
];
class InlineResponse20013LinksReport {
    static getAttributeTypeMap() {
        return InlineResponse20013LinksReport.attributeTypeMap;
    }
}
exports.InlineResponse20013LinksReport = InlineResponse20013LinksReport;
InlineResponse20013LinksReport.discriminator = undefined;
InlineResponse20013LinksReport.attributeTypeMap = [
    {
        "name": "href",
        "baseName": "href",
        "type": "string"
    }
];
class InlineResponse20014 {
    static getAttributeTypeMap() {
        return InlineResponse20014.attributeTypeMap;
    }
}
exports.InlineResponse20014 = InlineResponse20014;
InlineResponse20014.discriminator = undefined;
InlineResponse20014.attributeTypeMap = [
    {
        "name": "version",
        "baseName": "version",
        "type": "string"
    },
    {
        "name": "reportCreatedDate",
        "baseName": "reportCreatedDate",
        "type": "string"
    },
    {
        "name": "batchId",
        "baseName": "batchId",
        "type": "string"
    },
    {
        "name": "batchSource",
        "baseName": "batchSource",
        "type": "string"
    },
    {
        "name": "batchCaEndpoints",
        "baseName": "batchCaEndpoints",
        "type": "string"
    },
    {
        "name": "batchCreatedDate",
        "baseName": "batchCreatedDate",
        "type": "string"
    },
    {
        "name": "merchantReference",
        "baseName": "merchantReference",
        "type": "string"
    },
    {
        "name": "totals",
        "baseName": "totals",
        "type": "InlineResponse20012EmbeddedTotals"
    },
    {
        "name": "billing",
        "baseName": "billing",
        "type": "InlineResponse20013Billing"
    },
    {
        "name": "records",
        "baseName": "records",
        "type": "Array<InlineResponse20014Records>"
    }
];
class InlineResponse20014Records {
    static getAttributeTypeMap() {
        return InlineResponse20014Records.attributeTypeMap;
    }
}
exports.InlineResponse20014Records = InlineResponse20014Records;
InlineResponse20014Records.discriminator = undefined;
InlineResponse20014Records.attributeTypeMap = [
    {
        "name": "id",
        "baseName": "id",
        "type": "string"
    },
    {
        "name": "sourceRecord",
        "baseName": "sourceRecord",
        "type": "InlineResponse20014SourceRecord"
    },
    {
        "name": "responseRecord",
        "baseName": "responseRecord",
        "type": "InlineResponse20014ResponseRecord"
    }
];
class InlineResponse20014ResponseRecord {
    static getAttributeTypeMap() {
        return InlineResponse20014ResponseRecord.attributeTypeMap;
    }
}
exports.InlineResponse20014ResponseRecord = InlineResponse20014ResponseRecord;
InlineResponse20014ResponseRecord.discriminator = undefined;
InlineResponse20014ResponseRecord.attributeTypeMap = [
    {
        "name": "response",
        "baseName": "response",
        "type": "string"
    },
    {
        "name": "reason",
        "baseName": "reason",
        "type": "string"
    },
    {
        "name": "token",
        "baseName": "token",
        "type": "string"
    },
    {
        "name": "instrumentIdentifierId",
        "baseName": "instrumentIdentifierId",
        "type": "string"
    },
    {
        "name": "instrumentIdentifierCreated",
        "baseName": "instrumentIdentifierCreated",
        "type": "string"
    },
    {
        "name": "cardNumber",
        "baseName": "cardNumber",
        "type": "string"
    },
    {
        "name": "cardExpiryMonth",
        "baseName": "cardExpiryMonth",
        "type": "string"
    },
    {
        "name": "cardExpiryYear",
        "baseName": "cardExpiryYear",
        "type": "string"
    },
    {
        "name": "cardType",
        "baseName": "cardType",
        "type": "string"
    },
    {
        "name": "additionalUpdates",
        "baseName": "additionalUpdates",
        "type": "Array<InlineResponse20014ResponseRecordAdditionalUpdates>"
    }
];
class InlineResponse20014ResponseRecordAdditionalUpdates {
    static getAttributeTypeMap() {
        return InlineResponse20014ResponseRecordAdditionalUpdates.attributeTypeMap;
    }
}
exports.InlineResponse20014ResponseRecordAdditionalUpdates = InlineResponse20014ResponseRecordAdditionalUpdates;
InlineResponse20014ResponseRecordAdditionalUpdates.discriminator = undefined;
InlineResponse20014ResponseRecordAdditionalUpdates.attributeTypeMap = [
    {
        "name": "customerId",
        "baseName": "customerId",
        "type": "string"
    },
    {
        "name": "paymentInstrumentId",
        "baseName": "paymentInstrumentId",
        "type": "string"
    },
    {
        "name": "creator",
        "baseName": "creator",
        "type": "string"
    },
    {
        "name": "state",
        "baseName": "state",
        "type": "string"
    },
    {
        "name": "message",
        "baseName": "message",
        "type": "string"
    }
];
class InlineResponse20014SourceRecord {
    static getAttributeTypeMap() {
        return InlineResponse20014SourceRecord.attributeTypeMap;
    }
}
exports.InlineResponse20014SourceRecord = InlineResponse20014SourceRecord;
InlineResponse20014SourceRecord.discriminator = undefined;
InlineResponse20014SourceRecord.attributeTypeMap = [
    {
        "name": "token",
        "baseName": "token",
        "type": "string"
    },
    {
        "name": "customerId",
        "baseName": "customerId",
        "type": "string"
    },
    {
        "name": "paymentInstrumentId",
        "baseName": "paymentInstrumentId",
        "type": "string"
    },
    {
        "name": "instrumentIdentifierId",
        "baseName": "instrumentIdentifierId",
        "type": "string"
    },
    {
        "name": "cardNumber",
        "baseName": "cardNumber",
        "type": "string"
    },
    {
        "name": "cardExpiryMonth",
        "baseName": "cardExpiryMonth",
        "type": "string"
    },
    {
        "name": "cardExpiryYear",
        "baseName": "cardExpiryYear",
        "type": "string"
    },
    {
        "name": "cardType",
        "baseName": "cardType",
        "type": "string"
    }
];
/**
* This object includes either a capture or reversal object. They each has the status of the action and link to the GET method to the following-on capture transaction or reversal transaction.
*/
class InlineResponse2001Embedded {
    static getAttributeTypeMap() {
        return InlineResponse2001Embedded.attributeTypeMap;
    }
}
exports.InlineResponse2001Embedded = InlineResponse2001Embedded;
InlineResponse2001Embedded.discriminator = undefined;
InlineResponse2001Embedded.attributeTypeMap = [
    {
        "name": "capture",
        "baseName": "capture",
        "type": "InlineResponse2001EmbeddedCapture"
    },
    {
        "name": "reversal",
        "baseName": "reversal",
        "type": "InlineResponse2001EmbeddedReversal"
    }
];
/**
* This object includes the status of the action and link to the GET method to the following-on capture transaction.
*/
class InlineResponse2001EmbeddedCapture {
    static getAttributeTypeMap() {
        return InlineResponse2001EmbeddedCapture.attributeTypeMap;
    }
}
exports.InlineResponse2001EmbeddedCapture = InlineResponse2001EmbeddedCapture;
InlineResponse2001EmbeddedCapture.discriminator = undefined;
InlineResponse2001EmbeddedCapture.attributeTypeMap = [
    {
        "name": "status",
        "baseName": "status",
        "type": "string"
    },
    {
        "name": "links",
        "baseName": "_links",
        "type": "InlineResponse2001EmbeddedCaptureLinks"
    }
];
/**
* The link to the GET method to the capture transaction if the capture is called.
*/
class InlineResponse2001EmbeddedCaptureLinks {
    static getAttributeTypeMap() {
        return InlineResponse2001EmbeddedCaptureLinks.attributeTypeMap;
    }
}
exports.InlineResponse2001EmbeddedCaptureLinks = InlineResponse2001EmbeddedCaptureLinks;
InlineResponse2001EmbeddedCaptureLinks.discriminator = undefined;
InlineResponse2001EmbeddedCaptureLinks.attributeTypeMap = [
    {
        "name": "self",
        "baseName": "self",
        "type": "InlineResponse2001EmbeddedCaptureLinksSelf"
    }
];
/**
* The object holds http method and endpoint if the capture is called.
*/
class InlineResponse2001EmbeddedCaptureLinksSelf {
    static getAttributeTypeMap() {
        return InlineResponse2001EmbeddedCaptureLinksSelf.attributeTypeMap;
    }
}
exports.InlineResponse2001EmbeddedCaptureLinksSelf = InlineResponse2001EmbeddedCaptureLinksSelf;
InlineResponse2001EmbeddedCaptureLinksSelf.discriminator = undefined;
InlineResponse2001EmbeddedCaptureLinksSelf.attributeTypeMap = [
    {
        "name": "href",
        "baseName": "href",
        "type": "string"
    },
    {
        "name": "method",
        "baseName": "method",
        "type": "string"
    }
];
/**
* This object includes the status of the action and link to the GET method to the following-on reversal transaction.
*/
class InlineResponse2001EmbeddedReversal {
    static getAttributeTypeMap() {
        return InlineResponse2001EmbeddedReversal.attributeTypeMap;
    }
}
exports.InlineResponse2001EmbeddedReversal = InlineResponse2001EmbeddedReversal;
InlineResponse2001EmbeddedReversal.discriminator = undefined;
InlineResponse2001EmbeddedReversal.attributeTypeMap = [
    {
        "name": "status",
        "baseName": "status",
        "type": "string"
    },
    {
        "name": "links",
        "baseName": "_links",
        "type": "InlineResponse2001EmbeddedReversalLinks"
    }
];
/**
* The link to the GET method to the reversal transaction if the auth reversal is called.
*/
class InlineResponse2001EmbeddedReversalLinks {
    static getAttributeTypeMap() {
        return InlineResponse2001EmbeddedReversalLinks.attributeTypeMap;
    }
}
exports.InlineResponse2001EmbeddedReversalLinks = InlineResponse2001EmbeddedReversalLinks;
InlineResponse2001EmbeddedReversalLinks.discriminator = undefined;
InlineResponse2001EmbeddedReversalLinks.attributeTypeMap = [
    {
        "name": "self",
        "baseName": "self",
        "type": "InlineResponse2001EmbeddedReversalLinksSelf"
    }
];
/**
* The object holds http method and endpoint if the reversal is called.
*/
class InlineResponse2001EmbeddedReversalLinksSelf {
    static getAttributeTypeMap() {
        return InlineResponse2001EmbeddedReversalLinksSelf.attributeTypeMap;
    }
}
exports.InlineResponse2001EmbeddedReversalLinksSelf = InlineResponse2001EmbeddedReversalLinksSelf;
InlineResponse2001EmbeddedReversalLinksSelf.discriminator = undefined;
InlineResponse2001EmbeddedReversalLinksSelf.attributeTypeMap = [
    {
        "name": "href",
        "baseName": "href",
        "type": "string"
    },
    {
        "name": "method",
        "baseName": "method",
        "type": "string"
    }
];
class InlineResponse2002 {
    static getAttributeTypeMap() {
        return InlineResponse2002.attributeTypeMap;
    }
}
exports.InlineResponse2002 = InlineResponse2002;
InlineResponse2002.discriminator = undefined;
InlineResponse2002.attributeTypeMap = [
    {
        "name": "registrationInformation",
        "baseName": "registrationInformation",
        "type": "Boardingv1registrationsRegistrationInformation"
    },
    {
        "name": "integrationInformation",
        "baseName": "integrationInformation",
        "type": "InlineResponse2002IntegrationInformation"
    },
    {
        "name": "organizationInformation",
        "baseName": "organizationInformation",
        "type": "Boardingv1registrationsOrganizationInformation"
    },
    {
        "name": "productInformation",
        "baseName": "productInformation",
        "type": "Boardingv1registrationsProductInformation"
    },
    {
        "name": "productInformationSetups",
        "baseName": "productInformationSetups",
        "type": "Array<InlineResponse2013ProductInformationSetups>"
    },
    {
        "name": "documentInformation",
        "baseName": "documentInformation",
        "type": "Boardingv1registrationsDocumentInformation"
    },
    {
        "name": "details",
        "baseName": "details",
        "type": "{ [key: string]: Array<any>; }"
    }
];
class InlineResponse2002IntegrationInformation {
    static getAttributeTypeMap() {
        return InlineResponse2002IntegrationInformation.attributeTypeMap;
    }
}
exports.InlineResponse2002IntegrationInformation = InlineResponse2002IntegrationInformation;
InlineResponse2002IntegrationInformation.discriminator = undefined;
InlineResponse2002IntegrationInformation.attributeTypeMap = [
    {
        "name": "oauth2",
        "baseName": "oauth2",
        "type": "Array<Boardingv1registrationsIntegrationInformationOauth2>"
    },
    {
        "name": "tenantConfigurations",
        "baseName": "tenantConfigurations",
        "type": "Array<InlineResponse2002IntegrationInformationTenantConfigurations>"
    }
];
class InlineResponse2002IntegrationInformationTenantConfigurations {
    static getAttributeTypeMap() {
        return InlineResponse2002IntegrationInformationTenantConfigurations.attributeTypeMap;
    }
}
exports.InlineResponse2002IntegrationInformationTenantConfigurations = InlineResponse2002IntegrationInformationTenantConfigurations;
InlineResponse2002IntegrationInformationTenantConfigurations.discriminator = undefined;
InlineResponse2002IntegrationInformationTenantConfigurations.attributeTypeMap = [
    {
        "name": "solutionId",
        "baseName": "solutionId",
        "type": "string"
    },
    {
        "name": "tenantConfigurationId",
        "baseName": "tenantConfigurationId",
        "type": "string"
    },
    {
        "name": "status",
        "baseName": "status",
        "type": "InlineResponse2002IntegrationInformationTenantConfigurations.StatusEnum"
    },
    {
        "name": "submitTimeUtc",
        "baseName": "submitTimeUtc",
        "type": "Date"
    },
    {
        "name": "tenantInformation",
        "baseName": "tenantInformation",
        "type": "Boardingv1registrationsIntegrationInformationTenantInformation"
    }
];
(function (InlineResponse2002IntegrationInformationTenantConfigurations) {
    let StatusEnum;
    (function (StatusEnum) {
        StatusEnum[StatusEnum["LIVE"] = 'LIVE'] = "LIVE";
        StatusEnum[StatusEnum["INACTIVE"] = 'INACTIVE'] = "INACTIVE";
        StatusEnum[StatusEnum["TEST"] = 'TEST'] = "TEST";
    })(StatusEnum = InlineResponse2002IntegrationInformationTenantConfigurations.StatusEnum || (InlineResponse2002IntegrationInformationTenantConfigurations.StatusEnum = {}));
})(InlineResponse2002IntegrationInformationTenantConfigurations = exports.InlineResponse2002IntegrationInformationTenantConfigurations || (exports.InlineResponse2002IntegrationInformationTenantConfigurations = {}));
class InlineResponse2003 {
    static getAttributeTypeMap() {
        return InlineResponse2003.attributeTypeMap;
    }
}
exports.InlineResponse2003 = InlineResponse2003;
InlineResponse2003.discriminator = undefined;
InlineResponse2003.attributeTypeMap = [
    {
        "name": "productId",
        "baseName": "productId",
        "type": "string"
    },
    {
        "name": "productName",
        "baseName": "productName",
        "type": "string"
    },
    {
        "name": "eventTypes",
        "baseName": "eventTypes",
        "type": "Array<Notificationsubscriptionsv2productsorganizationIdEventTypes>"
    }
];
class InlineResponse2004 {
    static getAttributeTypeMap() {
        return InlineResponse2004.attributeTypeMap;
    }
}
exports.InlineResponse2004 = InlineResponse2004;
InlineResponse2004.discriminator = undefined;
InlineResponse2004.attributeTypeMap = [
    {
        "name": "webhookId",
        "baseName": "webhookId",
        "type": "string"
    },
    {
        "name": "organizationId",
        "baseName": "organizationId",
        "type": "string"
    },
    {
        "name": "products",
        "baseName": "products",
        "type": "Array<Notificationsubscriptionsv2webhooksProducts>"
    },
    {
        "name": "webhookUrl",
        "baseName": "webhookUrl",
        "type": "string"
    },
    {
        "name": "healthCheckUrl",
        "baseName": "healthCheckUrl",
        "type": "string"
    },
    {
        "name": "status",
        "baseName": "status",
        "type": "string"
    },
    {
        "name": "name",
        "baseName": "name",
        "type": "string"
    },
    {
        "name": "description",
        "baseName": "description",
        "type": "string"
    },
    {
        "name": "retryPolicy",
        "baseName": "retryPolicy",
        "type": "Notificationsubscriptionsv2webhooksRetryPolicy"
    },
    {
        "name": "securityPolicy",
        "baseName": "securityPolicy",
        "type": "Notificationsubscriptionsv2webhooksSecurityPolicy"
    },
    {
        "name": "createdOn",
        "baseName": "createdOn",
        "type": "string"
    },
    {
        "name": "notificationScope",
        "baseName": "notificationScope",
        "type": "InlineResponse2004.NotificationScopeEnum"
    }
];
(function (InlineResponse2004) {
    let NotificationScopeEnum;
    (function (NotificationScopeEnum) {
        NotificationScopeEnum[NotificationScopeEnum["SELF"] = 'SELF'] = "SELF";
        NotificationScopeEnum[NotificationScopeEnum["DESCENDANTS"] = 'DESCENDANTS'] = "DESCENDANTS";
    })(NotificationScopeEnum = InlineResponse2004.NotificationScopeEnum || (InlineResponse2004.NotificationScopeEnum = {}));
})(InlineResponse2004 = exports.InlineResponse2004 || (exports.InlineResponse2004 = {}));
class InlineResponse2005 {
    static getAttributeTypeMap() {
        return InlineResponse2005.attributeTypeMap;
    }
}
exports.InlineResponse2005 = InlineResponse2005;
InlineResponse2005.discriminator = undefined;
InlineResponse2005.attributeTypeMap = [
    {
        "name": "webhookId",
        "baseName": "webhookId",
        "type": "string"
    },
    {
        "name": "organizationId",
        "baseName": "organizationId",
        "type": "string"
    },
    {
        "name": "products",
        "baseName": "products",
        "type": "Array<Notificationsubscriptionsv2webhooksProducts>"
    },
    {
        "name": "webhookUrl",
        "baseName": "webhookUrl",
        "type": "string"
    },
    {
        "name": "healthCheckUrl",
        "baseName": "healthCheckUrl",
        "type": "string"
    },
    {
        "name": "status",
        "baseName": "status",
        "type": "string"
    },
    {
        "name": "name",
        "baseName": "name",
        "type": "string"
    },
    {
        "name": "description",
        "baseName": "description",
        "type": "string"
    },
    {
        "name": "retryPolicy",
        "baseName": "retryPolicy",
        "type": "Notificationsubscriptionsv2webhooksRetryPolicy"
    },
    {
        "name": "securityPolicy",
        "baseName": "securityPolicy",
        "type": "Notificationsubscriptionsv2webhooksSecurityPolicy"
    },
    {
        "name": "createdOn",
        "baseName": "createdOn",
        "type": "string"
    },
    {
        "name": "updatedOn",
        "baseName": "updatedOn",
        "type": "string"
    },
    {
        "name": "notificationScope",
        "baseName": "notificationScope",
        "type": "InlineResponse2005.NotificationScopeEnum"
    }
];
(function (InlineResponse2005) {
    let NotificationScopeEnum;
    (function (NotificationScopeEnum) {
        NotificationScopeEnum[NotificationScopeEnum["SELF"] = 'SELF'] = "SELF";
        NotificationScopeEnum[NotificationScopeEnum["DESCENDANTS"] = 'DESCENDANTS'] = "DESCENDANTS";
    })(NotificationScopeEnum = InlineResponse2005.NotificationScopeEnum || (InlineResponse2005.NotificationScopeEnum = {}));
})(InlineResponse2005 = exports.InlineResponse2005 || (exports.InlineResponse2005 = {}));
class InlineResponse2006 {
    static getAttributeTypeMap() {
        return InlineResponse2006.attributeTypeMap;
    }
}
exports.InlineResponse2006 = InlineResponse2006;
InlineResponse2006.discriminator = undefined;
InlineResponse2006.attributeTypeMap = [
    {
        "name": "submitTimeUtc",
        "baseName": "submitTimeUtc",
        "type": "string"
    }
];
class InlineResponse2007 {
    static getAttributeTypeMap() {
        return InlineResponse2007.attributeTypeMap;
    }
}
exports.InlineResponse2007 = InlineResponse2007;
InlineResponse2007.discriminator = undefined;
InlineResponse2007.attributeTypeMap = [
    {
        "name": "status",
        "baseName": "status",
        "type": "InlineResponse2007.StatusEnum"
    },
    {
        "name": "devices",
        "baseName": "devices",
        "type": "Array<Dmsv3devicesdeassociateDevices>"
    }
];
(function (InlineResponse2007) {
    let StatusEnum;
    (function (StatusEnum) {
        StatusEnum[StatusEnum["OK"] = 'OK'] = "OK";
    })(StatusEnum = InlineResponse2007.StatusEnum || (InlineResponse2007.StatusEnum = {}));
})(InlineResponse2007 = exports.InlineResponse2007 || (exports.InlineResponse2007 = {}));
class InlineResponse2008 {
    static getAttributeTypeMap() {
        return InlineResponse2008.attributeTypeMap;
    }
}
exports.InlineResponse2008 = InlineResponse2008;
InlineResponse2008.discriminator = undefined;
InlineResponse2008.attributeTypeMap = [
    {
        "name": "totalCount",
        "baseName": "totalCount",
        "type": "number"
    },
    {
        "name": "offset",
        "baseName": "offset",
        "type": "number"
    },
    {
        "name": "limit",
        "baseName": "limit",
        "type": "number"
    },
    {
        "name": "sort",
        "baseName": "sort",
        "type": "string"
    },
    {
        "name": "count",
        "baseName": "count",
        "type": "number"
    },
    {
        "name": "devices",
        "baseName": "devices",
        "type": "Array<InlineResponse2008Devices>"
    }
];
class InlineResponse2008Devices {
    static getAttributeTypeMap() {
        return InlineResponse2008Devices.attributeTypeMap;
    }
}
exports.InlineResponse2008Devices = InlineResponse2008Devices;
InlineResponse2008Devices.discriminator = undefined;
InlineResponse2008Devices.attributeTypeMap = [
    {
        "name": "readerId",
        "baseName": "readerId",
        "type": "string"
    },
    {
        "name": "serialNumber",
        "baseName": "serialNumber",
        "type": "string"
    },
    {
        "name": "model",
        "baseName": "model",
        "type": "string"
    },
    {
        "name": "make",
        "baseName": "make",
        "type": "string"
    },
    {
        "name": "hardwareRevision",
        "baseName": "hardwareRevision",
        "type": "string"
    },
    {
        "name": "status",
        "baseName": "status",
        "type": "InlineResponse2008Devices.StatusEnum"
    },
    {
        "name": "statusChangeReason",
        "baseName": "statusChangeReason",
        "type": "string"
    },
    {
        "name": "merchantId",
        "baseName": "merchantId",
        "type": "string"
    },
    {
        "name": "accountId",
        "baseName": "accountId",
        "type": "string"
    },
    {
        "name": "terminalCreationDate",
        "baseName": "terminalCreationDate",
        "type": "Date"
    },
    {
        "name": "terminalUpdationDate",
        "baseName": "terminalUpdationDate",
        "type": "Date"
    },
    {
        "name": "paymentProcessorToTerminalMap",
        "baseName": "paymentProcessorToTerminalMap",
        "type": "InlineResponse2008PaymentProcessorToTerminalMap"
    }
];
(function (InlineResponse2008Devices) {
    let StatusEnum;
    (function (StatusEnum) {
        StatusEnum[StatusEnum["ACTIVE"] = 'ACTIVE'] = "ACTIVE";
        StatusEnum[StatusEnum["INACTIVE"] = 'INACTIVE'] = "INACTIVE";
    })(StatusEnum = InlineResponse2008Devices.StatusEnum || (InlineResponse2008Devices.StatusEnum = {}));
})(InlineResponse2008Devices = exports.InlineResponse2008Devices || (exports.InlineResponse2008Devices = {}));
/**
* Mapping between processor and Terminal.
*/
class InlineResponse2008PaymentProcessorToTerminalMap {
    static getAttributeTypeMap() {
        return InlineResponse2008PaymentProcessorToTerminalMap.attributeTypeMap;
    }
}
exports.InlineResponse2008PaymentProcessorToTerminalMap = InlineResponse2008PaymentProcessorToTerminalMap;
InlineResponse2008PaymentProcessorToTerminalMap.discriminator = undefined;
InlineResponse2008PaymentProcessorToTerminalMap.attributeTypeMap = [
    {
        "name": "processor",
        "baseName": "processor",
        "type": "string"
    },
    {
        "name": "terminalId",
        "baseName": "terminalId",
        "type": "string"
    }
];
class InlineResponse2009 {
    static getAttributeTypeMap() {
        return InlineResponse2009.attributeTypeMap;
    }
}
exports.InlineResponse2009 = InlineResponse2009;
InlineResponse2009.discriminator = undefined;
InlineResponse2009.attributeTypeMap = [
    {
        "name": "certificateChain",
        "baseName": "certificateChain",
        "type": "string"
    }
];
class InlineResponse200Content {
    static getAttributeTypeMap() {
        return InlineResponse200Content.attributeTypeMap;
    }
}
exports.InlineResponse200Content = InlineResponse200Content;
InlineResponse200Content.discriminator = undefined;
InlineResponse200Content.attributeTypeMap = [
    {
        "name": "type",
        "baseName": "type",
        "type": "string"
    },
    {
        "name": "data",
        "baseName": "data",
        "type": "string"
    },
    {
        "name": "width",
        "baseName": "width",
        "type": "number"
    },
    {
        "name": "height",
        "baseName": "height",
        "type": "number"
    }
];
class InlineResponse201 {
    static getAttributeTypeMap() {
        return InlineResponse201.attributeTypeMap;
    }
}
exports.InlineResponse201 = InlineResponse201;
InlineResponse201.discriminator = undefined;
InlineResponse201.attributeTypeMap = [
    {
        "name": "id",
        "baseName": "id",
        "type": "string"
    },
    {
        "name": "status",
        "baseName": "status",
        "type": "string"
    },
    {
        "name": "paymentInformation",
        "baseName": "paymentInformation",
        "type": "InlineResponse201PaymentInformation"
    },
    {
        "name": "orderInformation",
        "baseName": "orderInformation",
        "type": "InlineResponse201OrderInformation"
    }
];
class InlineResponse2011 {
    static getAttributeTypeMap() {
        return InlineResponse2011.attributeTypeMap;
    }
}
exports.InlineResponse2011 = InlineResponse2011;
InlineResponse2011.discriminator = undefined;
InlineResponse2011.attributeTypeMap = [
    {
        "name": "id",
        "baseName": "id",
        "type": "string"
    },
    {
        "name": "submitTimeUtc",
        "baseName": "submitTimeUtc",
        "type": "string"
    },
    {
        "name": "status",
        "baseName": "status",
        "type": "string"
    }
];
class InlineResponse20110 {
    static getAttributeTypeMap() {
        return InlineResponse20110.attributeTypeMap;
    }
}
exports.InlineResponse20110 = InlineResponse20110;
InlineResponse20110.discriminator = undefined;
InlineResponse20110.attributeTypeMap = [
    {
        "name": "status",
        "baseName": "status",
        "type": "InlineResponse20110.StatusEnum"
    },
    {
        "name": "details",
        "baseName": "details",
        "type": "Array<Dmsv2devicetransferDetails>"
    }
];
(function (InlineResponse20110) {
    let StatusEnum;
    (function (StatusEnum) {
        StatusEnum[StatusEnum["CREATED"] = 'CREATED'] = "CREATED";
        StatusEnum[StatusEnum["ACCEPTED"] = 'ACCEPTED'] = "ACCEPTED";
    })(StatusEnum = InlineResponse20110.StatusEnum || (InlineResponse20110.StatusEnum = {}));
})(InlineResponse20110 = exports.InlineResponse20110 || (exports.InlineResponse20110 = {}));
class InlineResponse2012 {
    static getAttributeTypeMap() {
        return InlineResponse2012.attributeTypeMap;
    }
}
exports.InlineResponse2012 = InlineResponse2012;
InlineResponse2012.discriminator = undefined;
InlineResponse2012.attributeTypeMap = [
    {
        "name": "id",
        "baseName": "id",
        "type": "string"
    },
    {
        "name": "submitTimeUtc",
        "baseName": "submitTimeUtc",
        "type": "string"
    },
    {
        "name": "status",
        "baseName": "status",
        "type": "string"
    },
    {
        "name": "paymentAccountInformation",
        "baseName": "paymentAccountInformation",
        "type": "TmsBinLookupPaymentAccountInformation"
    },
    {
        "name": "issuerInformation",
        "baseName": "issuerInformation",
        "type": "TmsBinLookupIssuerInformation"
    },
    {
        "name": "payoutInformation",
        "baseName": "payoutInformation",
        "type": "InlineResponse2012PayoutInformation"
    }
];
class InlineResponse2012PayoutInformation {
    static getAttributeTypeMap() {
        return InlineResponse2012PayoutInformation.attributeTypeMap;
    }
}
exports.InlineResponse2012PayoutInformation = InlineResponse2012PayoutInformation;
InlineResponse2012PayoutInformation.discriminator = undefined;
InlineResponse2012PayoutInformation.attributeTypeMap = [
    {
        "name": "pushFunds",
        "baseName": "pushFunds",
        "type": "InlineResponse2012PayoutInformationPushFunds"
    },
    {
        "name": "pullFunds",
        "baseName": "pullFunds",
        "type": "InlineResponse2012PayoutInformationPullFunds"
    },
    {
        "name": "geoRestrictionIndicator",
        "baseName": "geoRestrictionIndicator",
        "type": "string"
    }
];
class InlineResponse2012PayoutInformationPullFunds {
    static getAttributeTypeMap() {
        return InlineResponse2012PayoutInformationPullFunds.attributeTypeMap;
    }
}
exports.InlineResponse2012PayoutInformationPullFunds = InlineResponse2012PayoutInformationPullFunds;
InlineResponse2012PayoutInformationPullFunds.discriminator = undefined;
InlineResponse2012PayoutInformationPullFunds.attributeTypeMap = [
    {
        "name": "domesticParticipant",
        "baseName": "domesticParticipant",
        "type": "string"
    },
    {
        "name": "crossBorderParticipant",
        "baseName": "crossBorderParticipant",
        "type": "string"
    }
];
class InlineResponse2012PayoutInformationPushFunds {
    static getAttributeTypeMap() {
        return InlineResponse2012PayoutInformationPushFunds.attributeTypeMap;
    }
}
exports.InlineResponse2012PayoutInformationPushFunds = InlineResponse2012PayoutInformationPushFunds;
InlineResponse2012PayoutInformationPushFunds.discriminator = undefined;
InlineResponse2012PayoutInformationPushFunds.attributeTypeMap = [
    {
        "name": "moneyTransferFastFundsCrossBorder",
        "baseName": "moneyTransferFastFundsCrossBorder",
        "type": "string"
    },
    {
        "name": "moneyTransferFastFundsDomestic",
        "baseName": "moneyTransferFastFundsDomestic",
        "type": "string"
    },
    {
        "name": "moneyTransferCrossBorder",
        "baseName": "moneyTransferCrossBorder",
        "type": "string"
    },
    {
        "name": "moneyTransferDomestic",
        "baseName": "moneyTransferDomestic",
        "type": "string"
    },
    {
        "name": "nonMoneyTransferFastFundsCrossBorder",
        "baseName": "nonMoneyTransferFastFundsCrossBorder",
        "type": "string"
    },
    {
        "name": "nonMoneyTransferFastFundsDomestic",
        "baseName": "nonMoneyTransferFastFundsDomestic",
        "type": "string"
    },
    {
        "name": "nonMoneyTransferCrossBorder",
        "baseName": "nonMoneyTransferCrossBorder",
        "type": "string"
    },
    {
        "name": "nonMoneyTransferDomestic",
        "baseName": "nonMoneyTransferDomestic",
        "type": "string"
    },
    {
        "name": "onlineGamblingFastFundsCrossBorder",
        "baseName": "onlineGamblingFastFundsCrossBorder",
        "type": "string"
    },
    {
        "name": "onlineGamblingFastFundsDomestic",
        "baseName": "onlineGamblingFastFundsDomestic",
        "type": "string"
    },
    {
        "name": "onlineGamblingCrossBorder",
        "baseName": "onlineGamblingCrossBorder",
        "type": "string"
    },
    {
        "name": "onlineGamblingDomestic",
        "baseName": "onlineGamblingDomestic",
        "type": "string"
    },
    {
        "name": "domesticParticipant",
        "baseName": "domesticParticipant",
        "type": "string"
    },
    {
        "name": "crossBorderParticipant",
        "baseName": "crossBorderParticipant",
        "type": "string"
    }
];
class InlineResponse2013 {
    static getAttributeTypeMap() {
        return InlineResponse2013.attributeTypeMap;
    }
}
exports.InlineResponse2013 = InlineResponse2013;
InlineResponse2013.discriminator = undefined;
InlineResponse2013.attributeTypeMap = [
    {
        "name": "id",
        "baseName": "id",
        "type": "string"
    },
    {
        "name": "submitTimeUtc",
        "baseName": "submitTimeUtc",
        "type": "Date"
    },
    {
        "name": "status",
        "baseName": "status",
        "type": "InlineResponse2013.StatusEnum"
    },
    {
        "name": "registrationInformation",
        "baseName": "registrationInformation",
        "type": "InlineResponse2013RegistrationInformation"
    },
    {
        "name": "integrationInformation",
        "baseName": "integrationInformation",
        "type": "InlineResponse2013IntegrationInformation"
    },
    {
        "name": "organizationInformation",
        "baseName": "organizationInformation",
        "type": "InlineResponse2013OrganizationInformation"
    },
    {
        "name": "productInformationSetups",
        "baseName": "productInformationSetups",
        "type": "Array<InlineResponse2013ProductInformationSetups>"
    },
    {
        "name": "message",
        "baseName": "message",
        "type": "string"
    },
    {
        "name": "details",
        "baseName": "details",
        "type": "{ [key: string]: Array<any>; }"
    }
];
(function (InlineResponse2013) {
    let StatusEnum;
    (function (StatusEnum) {
        StatusEnum[StatusEnum["INITIALIZED"] = 'INITIALIZED'] = "INITIALIZED";
        StatusEnum[StatusEnum["RECEIVED"] = 'RECEIVED'] = "RECEIVED";
        StatusEnum[StatusEnum["PROCESSING"] = 'PROCESSING'] = "PROCESSING";
        StatusEnum[StatusEnum["SUCCESS"] = 'SUCCESS'] = "SUCCESS";
        StatusEnum[StatusEnum["FAILURE"] = 'FAILURE'] = "FAILURE";
        StatusEnum[StatusEnum["PARTIAL"] = 'PARTIAL'] = "PARTIAL";
    })(StatusEnum = InlineResponse2013.StatusEnum || (InlineResponse2013.StatusEnum = {}));
})(InlineResponse2013 = exports.InlineResponse2013 || (exports.InlineResponse2013 = {}));
class InlineResponse2013IntegrationInformation {
    static getAttributeTypeMap() {
        return InlineResponse2013IntegrationInformation.attributeTypeMap;
    }
}
exports.InlineResponse2013IntegrationInformation = InlineResponse2013IntegrationInformation;
InlineResponse2013IntegrationInformation.discriminator = undefined;
InlineResponse2013IntegrationInformation.attributeTypeMap = [
    {
        "name": "tenantConfigurations",
        "baseName": "tenantConfigurations",
        "type": "Array<InlineResponse2013IntegrationInformationTenantConfigurations>"
    }
];
class InlineResponse2013IntegrationInformationTenantConfigurations {
    static getAttributeTypeMap() {
        return InlineResponse2013IntegrationInformationTenantConfigurations.attributeTypeMap;
    }
}
exports.InlineResponse2013IntegrationInformationTenantConfigurations = InlineResponse2013IntegrationInformationTenantConfigurations;
InlineResponse2013IntegrationInformationTenantConfigurations.discriminator = undefined;
InlineResponse2013IntegrationInformationTenantConfigurations.attributeTypeMap = [
    {
        "name": "solutionId",
        "baseName": "solutionId",
        "type": "string"
    },
    {
        "name": "tenantConfigurationId",
        "baseName": "tenantConfigurationId",
        "type": "string"
    },
    {
        "name": "status",
        "baseName": "status",
        "type": "InlineResponse2013IntegrationInformationTenantConfigurations.StatusEnum"
    },
    {
        "name": "submitTimeUtc",
        "baseName": "submitTimeUtc",
        "type": "Date"
    }
];
(function (InlineResponse2013IntegrationInformationTenantConfigurations) {
    let StatusEnum;
    (function (StatusEnum) {
        StatusEnum[StatusEnum["LIVE"] = 'LIVE'] = "LIVE";
        StatusEnum[StatusEnum["INACTIVE"] = 'INACTIVE'] = "INACTIVE";
        StatusEnum[StatusEnum["TEST"] = 'TEST'] = "TEST";
    })(StatusEnum = InlineResponse2013IntegrationInformationTenantConfigurations.StatusEnum || (InlineResponse2013IntegrationInformationTenantConfigurations.StatusEnum = {}));
})(InlineResponse2013IntegrationInformationTenantConfigurations = exports.InlineResponse2013IntegrationInformationTenantConfigurations || (exports.InlineResponse2013IntegrationInformationTenantConfigurations = {}));
class InlineResponse2013OrganizationInformation {
    static getAttributeTypeMap() {
        return InlineResponse2013OrganizationInformation.attributeTypeMap;
    }
}
exports.InlineResponse2013OrganizationInformation = InlineResponse2013OrganizationInformation;
InlineResponse2013OrganizationInformation.discriminator = undefined;
InlineResponse2013OrganizationInformation.attributeTypeMap = [
    {
        "name": "organizationId",
        "baseName": "organizationId",
        "type": "string"
    },
    {
        "name": "parentOrganizationId",
        "baseName": "parentOrganizationId",
        "type": "string"
    },
    {
        "name": "childOrganizations",
        "baseName": "childOrganizations",
        "type": "Array<string>"
    }
];
class InlineResponse2013ProductInformationSetups {
    static getAttributeTypeMap() {
        return InlineResponse2013ProductInformationSetups.attributeTypeMap;
    }
}
exports.InlineResponse2013ProductInformationSetups = InlineResponse2013ProductInformationSetups;
InlineResponse2013ProductInformationSetups.discriminator = undefined;
InlineResponse2013ProductInformationSetups.attributeTypeMap = [
    {
        "name": "organizationId",
        "baseName": "organizationId",
        "type": "string"
    },
    {
        "name": "setups",
        "baseName": "setups",
        "type": "InlineResponse2013Setups"
    }
];
class InlineResponse2013RegistrationInformation {
    static getAttributeTypeMap() {
        return InlineResponse2013RegistrationInformation.attributeTypeMap;
    }
}
exports.InlineResponse2013RegistrationInformation = InlineResponse2013RegistrationInformation;
InlineResponse2013RegistrationInformation.discriminator = undefined;
InlineResponse2013RegistrationInformation.attributeTypeMap = [
    {
        "name": "boardingPackageId",
        "baseName": "boardingPackageId",
        "type": "string"
    },
    {
        "name": "mode",
        "baseName": "mode",
        "type": "InlineResponse2013RegistrationInformation.ModeEnum"
    },
    {
        "name": "salesRepId",
        "baseName": "salesRepId",
        "type": "string"
    }
];
(function (InlineResponse2013RegistrationInformation) {
    let ModeEnum;
    (function (ModeEnum) {
        ModeEnum[ModeEnum["COMPLETE"] = 'COMPLETE'] = "COMPLETE";
        ModeEnum[ModeEnum["PARTIAL"] = 'PARTIAL'] = "PARTIAL";
    })(ModeEnum = InlineResponse2013RegistrationInformation.ModeEnum || (InlineResponse2013RegistrationInformation.ModeEnum = {}));
})(InlineResponse2013RegistrationInformation = exports.InlineResponse2013RegistrationInformation || (exports.InlineResponse2013RegistrationInformation = {}));
class InlineResponse2013Setups {
    static getAttributeTypeMap() {
        return InlineResponse2013Setups.attributeTypeMap;
    }
}
exports.InlineResponse2013Setups = InlineResponse2013Setups;
InlineResponse2013Setups.discriminator = undefined;
InlineResponse2013Setups.attributeTypeMap = [
    {
        "name": "payments",
        "baseName": "payments",
        "type": "InlineResponse2013SetupsPayments"
    },
    {
        "name": "risk",
        "baseName": "risk",
        "type": "InlineResponse2013SetupsRisk"
    },
    {
        "name": "commerceSolutions",
        "baseName": "commerceSolutions",
        "type": "InlineResponse2013SetupsCommerceSolutions"
    },
    {
        "name": "valueAddedServices",
        "baseName": "valueAddedServices",
        "type": "InlineResponse2013SetupsValueAddedServices"
    }
];
class InlineResponse2013SetupsCommerceSolutions {
    static getAttributeTypeMap() {
        return InlineResponse2013SetupsCommerceSolutions.attributeTypeMap;
    }
}
exports.InlineResponse2013SetupsCommerceSolutions = InlineResponse2013SetupsCommerceSolutions;
InlineResponse2013SetupsCommerceSolutions.discriminator = undefined;
InlineResponse2013SetupsCommerceSolutions.attributeTypeMap = [
    {
        "name": "tokenManagement",
        "baseName": "tokenManagement",
        "type": "InlineResponse2013SetupsPaymentsCardProcessing"
    },
    {
        "name": "accountUpdater",
        "baseName": "accountUpdater",
        "type": "InlineResponse2013SetupsPaymentsCardProcessing"
    },
    {
        "name": "binLookup",
        "baseName": "binLookup",
        "type": "InlineResponse2013SetupsPaymentsCardProcessing"
    }
];
class InlineResponse2013SetupsPayments {
    static getAttributeTypeMap() {
        return InlineResponse2013SetupsPayments.attributeTypeMap;
    }
}
exports.InlineResponse2013SetupsPayments = InlineResponse2013SetupsPayments;
InlineResponse2013SetupsPayments.discriminator = undefined;
InlineResponse2013SetupsPayments.attributeTypeMap = [
    {
        "name": "cardProcessing",
        "baseName": "cardProcessing",
        "type": "InlineResponse2013SetupsPaymentsCardProcessing"
    },
    {
        "name": "alternativePaymentMethods",
        "baseName": "alternativePaymentMethods",
        "type": "InlineResponse2013SetupsPaymentsAlternativePaymentMethods"
    },
    {
        "name": "cardPresentConnect",
        "baseName": "cardPresentConnect",
        "type": "InlineResponse2013SetupsPaymentsCardProcessing"
    },
    {
        "name": "eCheck",
        "baseName": "eCheck",
        "type": "InlineResponse2013SetupsPaymentsCardProcessing"
    },
    {
        "name": "payerAuthentication",
        "baseName": "payerAuthentication",
        "type": "InlineResponse2013SetupsPaymentsCardProcessing"
    },
    {
        "name": "digitalPayments",
        "baseName": "digitalPayments",
        "type": "InlineResponse2013SetupsPaymentsDigitalPayments"
    },
    {
        "name": "secureAcceptance",
        "baseName": "secureAcceptance",
        "type": "InlineResponse2013SetupsPaymentsCardProcessing"
    },
    {
        "name": "virtualTerminal",
        "baseName": "virtualTerminal",
        "type": "InlineResponse2013SetupsPaymentsCardProcessing"
    },
    {
        "name": "currencyConversion",
        "baseName": "currencyConversion",
        "type": "InlineResponse2013SetupsPaymentsCardProcessing"
    },
    {
        "name": "tax",
        "baseName": "tax",
        "type": "InlineResponse2013SetupsPaymentsDigitalPayments"
    },
    {
        "name": "customerInvoicing",
        "baseName": "customerInvoicing",
        "type": "InlineResponse2013SetupsPaymentsDigitalPayments"
    },
    {
        "name": "recurringBilling",
        "baseName": "recurringBilling",
        "type": "InlineResponse2013SetupsPaymentsCardProcessing"
    },
    {
        "name": "cybsReadyTerminal",
        "baseName": "cybsReadyTerminal",
        "type": "InlineResponse2013SetupsPaymentsCardProcessing"
    },
    {
        "name": "paymentOrchestration",
        "baseName": "paymentOrchestration",
        "type": "InlineResponse2013SetupsPaymentsDigitalPayments"
    },
    {
        "name": "payouts",
        "baseName": "payouts",
        "type": "InlineResponse2013SetupsPaymentsCardProcessing"
    },
    {
        "name": "payByLink",
        "baseName": "payByLink",
        "type": "InlineResponse2013SetupsPaymentsDigitalPayments"
    },
    {
        "name": "unifiedCheckout",
        "baseName": "unifiedCheckout",
        "type": "InlineResponse2013SetupsPaymentsDigitalPayments"
    },
    {
        "name": "receivablesManager",
        "baseName": "receivablesManager",
        "type": "InlineResponse2013SetupsPaymentsDigitalPayments"
    },
    {
        "name": "serviceFee",
        "baseName": "serviceFee",
        "type": "InlineResponse2013SetupsPaymentsCardProcessing"
    }
];
class InlineResponse2013SetupsPaymentsAlternativePaymentMethods {
    static getAttributeTypeMap() {
        return InlineResponse2013SetupsPaymentsAlternativePaymentMethods.attributeTypeMap;
    }
}
exports.InlineResponse2013SetupsPaymentsAlternativePaymentMethods = InlineResponse2013SetupsPaymentsAlternativePaymentMethods;
InlineResponse2013SetupsPaymentsAlternativePaymentMethods.discriminator = undefined;
InlineResponse2013SetupsPaymentsAlternativePaymentMethods.attributeTypeMap = [
    {
        "name": "configurationStatus",
        "baseName": "configurationStatus",
        "type": "InlineResponse2013SetupsPaymentsAlternativePaymentMethodsConfigurationStatus"
    },
    {
        "name": "subscriptionStatus",
        "baseName": "subscriptionStatus",
        "type": "InlineResponse2013SetupsPaymentsAlternativePaymentMethodsConfigurationStatus"
    },
    {
        "name": "status",
        "baseName": "status",
        "type": "InlineResponse2013SetupsPaymentsAlternativePaymentMethods.StatusEnum"
    },
    {
        "name": "submitTimeUtc",
        "baseName": "submitTimeUtc",
        "type": "Date"
    }
];
(function (InlineResponse2013SetupsPaymentsAlternativePaymentMethods) {
    let StatusEnum;
    (function (StatusEnum) {
        StatusEnum[StatusEnum["PROCESSED"] = 'PROCESSED'] = "PROCESSED";
        StatusEnum[StatusEnum["PARTIALPROCESSED"] = 'PARTIAL_PROCESSED'] = "PARTIALPROCESSED";
    })(StatusEnum = InlineResponse2013SetupsPaymentsAlternativePaymentMethods.StatusEnum || (InlineResponse2013SetupsPaymentsAlternativePaymentMethods.StatusEnum = {}));
})(InlineResponse2013SetupsPaymentsAlternativePaymentMethods = exports.InlineResponse2013SetupsPaymentsAlternativePaymentMethods || (exports.InlineResponse2013SetupsPaymentsAlternativePaymentMethods = {}));
class InlineResponse2013SetupsPaymentsAlternativePaymentMethodsConfigurationStatus {
    static getAttributeTypeMap() {
        return InlineResponse2013SetupsPaymentsAlternativePaymentMethodsConfigurationStatus.attributeTypeMap;
    }
}
exports.InlineResponse2013SetupsPaymentsAlternativePaymentMethodsConfigurationStatus = InlineResponse2013SetupsPaymentsAlternativePaymentMethodsConfigurationStatus;
InlineResponse2013SetupsPaymentsAlternativePaymentMethodsConfigurationStatus.discriminator = undefined;
InlineResponse2013SetupsPaymentsAlternativePaymentMethodsConfigurationStatus.attributeTypeMap = [
    {
        "name": "status",
        "baseName": "status",
        "type": "InlineResponse2013SetupsPaymentsAlternativePaymentMethodsConfigurationStatus.StatusEnum"
    },
    {
        "name": "message",
        "baseName": "message",
        "type": "string"
    }
];
(function (InlineResponse2013SetupsPaymentsAlternativePaymentMethodsConfigurationStatus) {
    let StatusEnum;
    (function (StatusEnum) {
        StatusEnum[StatusEnum["SUCCESS"] = 'SUCCESS'] = "SUCCESS";
        StatusEnum[StatusEnum["FAILURE"] = 'FAILURE'] = "FAILURE";
        StatusEnum[StatusEnum["PARTIAL"] = 'PARTIAL'] = "PARTIAL";
        StatusEnum[StatusEnum["PENDING"] = 'PENDING'] = "PENDING";
    })(StatusEnum = InlineResponse2013SetupsPaymentsAlternativePaymentMethodsConfigurationStatus.StatusEnum || (InlineResponse2013SetupsPaymentsAlternativePaymentMethodsConfigurationStatus.StatusEnum = {}));
})(InlineResponse2013SetupsPaymentsAlternativePaymentMethodsConfigurationStatus = exports.InlineResponse2013SetupsPaymentsAlternativePaymentMethodsConfigurationStatus || (exports.InlineResponse2013SetupsPaymentsAlternativePaymentMethodsConfigurationStatus = {}));
class InlineResponse2013SetupsPaymentsCardProcessing {
    static getAttributeTypeMap() {
        return InlineResponse2013SetupsPaymentsCardProcessing.attributeTypeMap;
    }
}
exports.InlineResponse2013SetupsPaymentsCardProcessing = InlineResponse2013SetupsPaymentsCardProcessing;
InlineResponse2013SetupsPaymentsCardProcessing.discriminator = undefined;
InlineResponse2013SetupsPaymentsCardProcessing.attributeTypeMap = [
    {
        "name": "subscriptionStatus",
        "baseName": "subscriptionStatus",
        "type": "InlineResponse2013SetupsPaymentsCardProcessingSubscriptionStatus"
    },
    {
        "name": "configurationStatus",
        "baseName": "configurationStatus",
        "type": "InlineResponse2013SetupsPaymentsCardProcessingConfigurationStatus"
    }
];
class InlineResponse2013SetupsPaymentsCardProcessingConfigurationStatus {
    static getAttributeTypeMap() {
        return InlineResponse2013SetupsPaymentsCardProcessingConfigurationStatus.attributeTypeMap;
    }
}
exports.InlineResponse2013SetupsPaymentsCardProcessingConfigurationStatus = InlineResponse2013SetupsPaymentsCardProcessingConfigurationStatus;
InlineResponse2013SetupsPaymentsCardProcessingConfigurationStatus.discriminator = undefined;
InlineResponse2013SetupsPaymentsCardProcessingConfigurationStatus.attributeTypeMap = [
    {
        "name": "configurationId",
        "baseName": "configurationId",
        "type": "string"
    },
    {
        "name": "version",
        "baseName": "version",
        "type": "string"
    },
    {
        "name": "submitTimeUtc",
        "baseName": "submitTimeUtc",
        "type": "string"
    },
    {
        "name": "status",
        "baseName": "status",
        "type": "InlineResponse2013SetupsPaymentsCardProcessingConfigurationStatus.StatusEnum"
    },
    {
        "name": "reason",
        "baseName": "reason",
        "type": "InlineResponse2013SetupsPaymentsCardProcessingConfigurationStatus.ReasonEnum"
    },
    {
        "name": "details",
        "baseName": "details",
        "type": "Array<{ [key: string]: string; }>"
    },
    {
        "name": "message",
        "baseName": "message",
        "type": "string"
    }
];
(function (InlineResponse2013SetupsPaymentsCardProcessingConfigurationStatus) {
    let StatusEnum;
    (function (StatusEnum) {
        StatusEnum[StatusEnum["SUCCESS"] = 'SUCCESS'] = "SUCCESS";
        StatusEnum[StatusEnum["PARTIAL"] = 'PARTIAL'] = "PARTIAL";
        StatusEnum[StatusEnum["PENDING"] = 'PENDING'] = "PENDING";
        StatusEnum[StatusEnum["NOTSETUP"] = 'NOT_SETUP'] = "NOTSETUP";
    })(StatusEnum = InlineResponse2013SetupsPaymentsCardProcessingConfigurationStatus.StatusEnum || (InlineResponse2013SetupsPaymentsCardProcessingConfigurationStatus.StatusEnum = {}));
    let ReasonEnum;
    (function (ReasonEnum) {
        ReasonEnum[ReasonEnum["PENDINGPROVISIONINGPROCESS"] = 'PENDING_PROVISIONING_PROCESS'] = "PENDINGPROVISIONINGPROCESS";
        ReasonEnum[ReasonEnum["MISSINGDATA"] = 'MISSING_DATA'] = "MISSINGDATA";
        ReasonEnum[ReasonEnum["INVALIDDATA"] = 'INVALID_DATA'] = "INVALIDDATA";
        ReasonEnum[ReasonEnum["DUPLICATEFIELD"] = 'DUPLICATE_FIELD'] = "DUPLICATEFIELD";
        ReasonEnum[ReasonEnum["NOTAPPLICABLE"] = 'NOT_APPLICABLE'] = "NOTAPPLICABLE";
    })(ReasonEnum = InlineResponse2013SetupsPaymentsCardProcessingConfigurationStatus.ReasonEnum || (InlineResponse2013SetupsPaymentsCardProcessingConfigurationStatus.ReasonEnum = {}));
})(InlineResponse2013SetupsPaymentsCardProcessingConfigurationStatus = exports.InlineResponse2013SetupsPaymentsCardProcessingConfigurationStatus || (exports.InlineResponse2013SetupsPaymentsCardProcessingConfigurationStatus = {}));
class InlineResponse2013SetupsPaymentsCardProcessingSubscriptionStatus {
    static getAttributeTypeMap() {
        return InlineResponse2013SetupsPaymentsCardProcessingSubscriptionStatus.attributeTypeMap;
    }
}
exports.InlineResponse2013SetupsPaymentsCardProcessingSubscriptionStatus = InlineResponse2013SetupsPaymentsCardProcessingSubscriptionStatus;
InlineResponse2013SetupsPaymentsCardProcessingSubscriptionStatus.discriminator = undefined;
InlineResponse2013SetupsPaymentsCardProcessingSubscriptionStatus.attributeTypeMap = [
    {
        "name": "submitTimeUtc",
        "baseName": "submitTimeUtc",
        "type": "string"
    },
    {
        "name": "status",
        "baseName": "status",
        "type": "InlineResponse2013SetupsPaymentsCardProcessingSubscriptionStatus.StatusEnum"
    },
    {
        "name": "reason",
        "baseName": "reason",
        "type": "InlineResponse2013SetupsPaymentsCardProcessingSubscriptionStatus.ReasonEnum"
    },
    {
        "name": "details",
        "baseName": "details",
        "type": "Array<{ [key: string]: string; }>"
    },
    {
        "name": "message",
        "baseName": "message",
        "type": "string"
    }
];
(function (InlineResponse2013SetupsPaymentsCardProcessingSubscriptionStatus) {
    let StatusEnum;
    (function (StatusEnum) {
        StatusEnum[StatusEnum["SUCCESS"] = 'SUCCESS'] = "SUCCESS";
        StatusEnum[StatusEnum["FAILURE"] = 'FAILURE'] = "FAILURE";
        StatusEnum[StatusEnum["PARTIAL"] = 'PARTIAL'] = "PARTIAL";
        StatusEnum[StatusEnum["PENDING"] = 'PENDING'] = "PENDING";
    })(StatusEnum = InlineResponse2013SetupsPaymentsCardProcessingSubscriptionStatus.StatusEnum || (InlineResponse2013SetupsPaymentsCardProcessingSubscriptionStatus.StatusEnum = {}));
    let ReasonEnum;
    (function (ReasonEnum) {
        ReasonEnum[ReasonEnum["DEPENDENTPRODUCTNOTCONTRACTED"] = 'DEPENDENT_PRODUCT_NOT_CONTRACTED'] = "DEPENDENTPRODUCTNOTCONTRACTED";
        ReasonEnum[ReasonEnum["DEPENDENTFEATURENOTCHOSEN"] = 'DEPENDENT_FEATURE_NOT_CHOSEN'] = "DEPENDENTFEATURENOTCHOSEN";
        ReasonEnum[ReasonEnum["MISSINGDATA"] = 'MISSING_DATA'] = "MISSINGDATA";
        ReasonEnum[ReasonEnum["INVALIDDATA"] = 'INVALID_DATA'] = "INVALIDDATA";
        ReasonEnum[ReasonEnum["DUPLICATEFIELD"] = 'DUPLICATE_FIELD'] = "DUPLICATEFIELD";
    })(ReasonEnum = InlineResponse2013SetupsPaymentsCardProcessingSubscriptionStatus.ReasonEnum || (InlineResponse2013SetupsPaymentsCardProcessingSubscriptionStatus.ReasonEnum = {}));
})(InlineResponse2013SetupsPaymentsCardProcessingSubscriptionStatus = exports.InlineResponse2013SetupsPaymentsCardProcessingSubscriptionStatus || (exports.InlineResponse2013SetupsPaymentsCardProcessingSubscriptionStatus = {}));
class InlineResponse2013SetupsPaymentsDigitalPayments {
    static getAttributeTypeMap() {
        return InlineResponse2013SetupsPaymentsDigitalPayments.attributeTypeMap;
    }
}
exports.InlineResponse2013SetupsPaymentsDigitalPayments = InlineResponse2013SetupsPaymentsDigitalPayments;
InlineResponse2013SetupsPaymentsDigitalPayments.discriminator = undefined;
InlineResponse2013SetupsPaymentsDigitalPayments.attributeTypeMap = [
    {
        "name": "subscriptionStatus",
        "baseName": "subscriptionStatus",
        "type": "InlineResponse2013SetupsPaymentsCardProcessingSubscriptionStatus"
    }
];
class InlineResponse2013SetupsRisk {
    static getAttributeTypeMap() {
        return InlineResponse2013SetupsRisk.attributeTypeMap;
    }
}
exports.InlineResponse2013SetupsRisk = InlineResponse2013SetupsRisk;
InlineResponse2013SetupsRisk.discriminator = undefined;
InlineResponse2013SetupsRisk.attributeTypeMap = [
    {
        "name": "fraudManagementEssentials",
        "baseName": "fraudManagementEssentials",
        "type": "InlineResponse2013SetupsPaymentsCardProcessing"
    },
    {
        "name": "decisionManager",
        "baseName": "decisionManager",
        "type": "InlineResponse2013SetupsPaymentsCardProcessing"
    }
];
class InlineResponse2013SetupsValueAddedServices {
    static getAttributeTypeMap() {
        return InlineResponse2013SetupsValueAddedServices.attributeTypeMap;
    }
}
exports.InlineResponse2013SetupsValueAddedServices = InlineResponse2013SetupsValueAddedServices;
InlineResponse2013SetupsValueAddedServices.discriminator = undefined;
InlineResponse2013SetupsValueAddedServices.attributeTypeMap = [
    {
        "name": "reporting",
        "baseName": "reporting",
        "type": "InlineResponse2013SetupsPaymentsDigitalPayments"
    },
    {
        "name": "transactionSearch",
        "baseName": "transactionSearch",
        "type": "InlineResponse2013SetupsPaymentsDigitalPayments"
    },
    {
        "name": "bankAccountValidation",
        "baseName": "bankAccountValidation",
        "type": "InlineResponse2013SetupsPaymentsDigitalPayments"
    }
];
/**
* Egress Key Information Response
*/
class InlineResponse2014 {
    static getAttributeTypeMap() {
        return InlineResponse2014.attributeTypeMap;
    }
}
exports.InlineResponse2014 = InlineResponse2014;
InlineResponse2014.discriminator = undefined;
InlineResponse2014.attributeTypeMap = [
    {
        "name": "submitTimeUtc",
        "baseName": "submitTimeUtc",
        "type": "string"
    },
    {
        "name": "status",
        "baseName": "status",
        "type": "string"
    },
    {
        "name": "clientReferenceInformation",
        "baseName": "clientReferenceInformation",
        "type": "Kmsegressv2keyssymClientReferenceInformation"
    },
    {
        "name": "keyInformation",
        "baseName": "keyInformation",
        "type": "InlineResponse2014KeyInformation"
    }
];
/**
* Egress Key Information
*/
class InlineResponse2014KeyInformation {
    static getAttributeTypeMap() {
        return InlineResponse2014KeyInformation.attributeTypeMap;
    }
}
exports.InlineResponse2014KeyInformation = InlineResponse2014KeyInformation;
InlineResponse2014KeyInformation.discriminator = undefined;
InlineResponse2014KeyInformation.attributeTypeMap = [
    {
        "name": "provider",
        "baseName": "provider",
        "type": "string"
    },
    {
        "name": "tenant",
        "baseName": "tenant",
        "type": "string"
    },
    {
        "name": "organizationId",
        "baseName": "organizationId",
        "type": "string"
    },
    {
        "name": "clientKeyId",
        "baseName": "clientKeyId",
        "type": "string"
    },
    {
        "name": "keyId",
        "baseName": "keyId",
        "type": "string"
    },
    {
        "name": "key",
        "baseName": "key",
        "type": "string"
    },
    {
        "name": "keyType",
        "baseName": "keyType",
        "type": "string"
    },
    {
        "name": "status",
        "baseName": "status",
        "type": "string"
    },
    {
        "name": "expirationDate",
        "baseName": "expirationDate",
        "type": "string"
    },
    {
        "name": "message",
        "baseName": "message",
        "type": "string"
    },
    {
        "name": "errorInformation",
        "baseName": "errorInformation",
        "type": "InlineResponse2014KeyInformationErrorInformation"
    }
];
class InlineResponse2014KeyInformationErrorInformation {
    static getAttributeTypeMap() {
        return InlineResponse2014KeyInformationErrorInformation.attributeTypeMap;
    }
}
exports.InlineResponse2014KeyInformationErrorInformation = InlineResponse2014KeyInformationErrorInformation;
InlineResponse2014KeyInformationErrorInformation.discriminator = undefined;
InlineResponse2014KeyInformationErrorInformation.attributeTypeMap = [
    {
        "name": "reason",
        "baseName": "reason",
        "type": "string"
    },
    {
        "name": "details",
        "baseName": "details",
        "type": "Array<InlineResponse2014KeyInformationErrorInformationDetails>"
    }
];
class InlineResponse2014KeyInformationErrorInformationDetails {
    static getAttributeTypeMap() {
        return InlineResponse2014KeyInformationErrorInformationDetails.attributeTypeMap;
    }
}
exports.InlineResponse2014KeyInformationErrorInformationDetails = InlineResponse2014KeyInformationErrorInformationDetails;
InlineResponse2014KeyInformationErrorInformationDetails.discriminator = undefined;
InlineResponse2014KeyInformationErrorInformationDetails.attributeTypeMap = [
    {
        "name": "field",
        "baseName": "field",
        "type": "string"
    },
    {
        "name": "reason",
        "baseName": "reason",
        "type": "string"
    }
];
class InlineResponse2015 {
    static getAttributeTypeMap() {
        return InlineResponse2015.attributeTypeMap;
    }
}
exports.InlineResponse2015 = InlineResponse2015;
InlineResponse2015.discriminator = undefined;
InlineResponse2015.attributeTypeMap = [
    {
        "name": "webhookId",
        "baseName": "webhookId",
        "type": "string"
    },
    {
        "name": "organizationId",
        "baseName": "organizationId",
        "type": "string"
    },
    {
        "name": "products",
        "baseName": "products",
        "type": "Array<Notificationsubscriptionsv2webhooksProducts>"
    },
    {
        "name": "webhookUrl",
        "baseName": "webhookUrl",
        "type": "string"
    },
    {
        "name": "healthCheckUrl",
        "baseName": "healthCheckUrl",
        "type": "string"
    },
    {
        "name": "status",
        "baseName": "status",
        "type": "string"
    },
    {
        "name": "name",
        "baseName": "name",
        "type": "string"
    },
    {
        "name": "description",
        "baseName": "description",
        "type": "string"
    },
    {
        "name": "retryPolicy",
        "baseName": "retryPolicy",
        "type": "Notificationsubscriptionsv2webhooksRetryPolicy"
    },
    {
        "name": "securityPolicy",
        "baseName": "securityPolicy",
        "type": "Notificationsubscriptionsv2webhooksSecurityPolicy"
    },
    {
        "name": "createdOn",
        "baseName": "createdOn",
        "type": "string"
    },
    {
        "name": "notificationScope",
        "baseName": "notificationScope",
        "type": "InlineResponse2015.NotificationScopeEnum"
    }
];
(function (InlineResponse2015) {
    let NotificationScopeEnum;
    (function (NotificationScopeEnum) {
        NotificationScopeEnum[NotificationScopeEnum["SELF"] = 'SELF'] = "SELF";
        NotificationScopeEnum[NotificationScopeEnum["DESCENDANTS"] = 'DESCENDANTS'] = "DESCENDANTS";
    })(NotificationScopeEnum = InlineResponse2015.NotificationScopeEnum || (InlineResponse2015.NotificationScopeEnum = {}));
})(InlineResponse2015 = exports.InlineResponse2015 || (exports.InlineResponse2015 = {}));
class InlineResponse2016 {
    static getAttributeTypeMap() {
        return InlineResponse2016.attributeTypeMap;
    }
}
exports.InlineResponse2016 = InlineResponse2016;
InlineResponse2016.discriminator = undefined;
InlineResponse2016.attributeTypeMap = [
    {
        "name": "eventDate",
        "baseName": "eventDate",
        "type": "string"
    },
    {
        "name": "eventType",
        "baseName": "eventType",
        "type": "string"
    },
    {
        "name": "organizationId",
        "baseName": "organizationId",
        "type": "string"
    },
    {
        "name": "payloads",
        "baseName": "payloads",
        "type": "InlineResponse2016Payloads"
    },
    {
        "name": "productId",
        "baseName": "productId",
        "type": "string"
    },
    {
        "name": "requestType",
        "baseName": "requestType",
        "type": "string"
    },
    {
        "name": "retryNumber",
        "baseName": "retryNumber",
        "type": "number"
    },
    {
        "name": "transactionTraceId",
        "baseName": "transactionTraceId",
        "type": "string"
    },
    {
        "name": "webhookId",
        "baseName": "webhookId",
        "type": "string"
    }
];
class InlineResponse2016Payloads {
    static getAttributeTypeMap() {
        return InlineResponse2016Payloads.attributeTypeMap;
    }
}
exports.InlineResponse2016Payloads = InlineResponse2016Payloads;
InlineResponse2016Payloads.discriminator = undefined;
InlineResponse2016Payloads.attributeTypeMap = [
    {
        "name": "testPayload",
        "baseName": "testPayload",
        "type": "InlineResponse2016PayloadsTestPayload"
    }
];
class InlineResponse2016PayloadsTestPayload {
    static getAttributeTypeMap() {
        return InlineResponse2016PayloadsTestPayload.attributeTypeMap;
    }
}
exports.InlineResponse2016PayloadsTestPayload = InlineResponse2016PayloadsTestPayload;
InlineResponse2016PayloadsTestPayload.discriminator = undefined;
InlineResponse2016PayloadsTestPayload.attributeTypeMap = [
    {
        "name": "message",
        "baseName": "message",
        "type": "string"
    }
];
/**
* Egress Asymmetric Key Information Response.
*/
class InlineResponse2017 {
    static getAttributeTypeMap() {
        return InlineResponse2017.attributeTypeMap;
    }
}
exports.InlineResponse2017 = InlineResponse2017;
InlineResponse2017.discriminator = undefined;
InlineResponse2017.attributeTypeMap = [
    {
        "name": "submitTimeUtc",
        "baseName": "submitTimeUtc",
        "type": "string"
    },
    {
        "name": "status",
        "baseName": "status",
        "type": "string"
    }
];
class InlineResponse2018 {
    static getAttributeTypeMap() {
        return InlineResponse2018.attributeTypeMap;
    }
}
exports.InlineResponse2018 = InlineResponse2018;
InlineResponse2018.discriminator = undefined;
InlineResponse2018.attributeTypeMap = [
    {
        "name": "id",
        "baseName": "id",
        "type": "string"
    },
    {
        "name": "deviceExternalId",
        "baseName": "deviceExternalId",
        "type": "string"
    },
    {
        "name": "cardEncryptionKsi",
        "baseName": "cardEncryptionKsi",
        "type": "string"
    },
    {
        "name": "cardEncryptionKeyName",
        "baseName": "cardEncryptionKeyName",
        "type": "string"
    },
    {
        "name": "pinEncryptionKsi",
        "baseName": "pinEncryptionKsi",
        "type": "string"
    },
    {
        "name": "pinEncryptionKeyName",
        "baseName": "pinEncryptionKeyName",
        "type": "string"
    },
    {
        "name": "submitTimeUtc",
        "baseName": "submitTimeUtc",
        "type": "string"
    }
];
class InlineResponse2019 {
    static getAttributeTypeMap() {
        return InlineResponse2019.attributeTypeMap;
    }
}
exports.InlineResponse2019 = InlineResponse2019;
InlineResponse2019.discriminator = undefined;
InlineResponse2019.attributeTypeMap = [
    {
        "name": "tokens",
        "baseName": "tokens",
        "type": "Array<InlineResponse2019Tokens>"
    }
];
class InlineResponse2019Tokens {
    static getAttributeTypeMap() {
        return InlineResponse2019Tokens.attributeTypeMap;
    }
}
exports.InlineResponse2019Tokens = InlineResponse2019Tokens;
InlineResponse2019Tokens.discriminator = undefined;
InlineResponse2019Tokens.attributeTypeMap = [
    {
        "name": "token",
        "baseName": "token",
        "type": "string"
    },
    {
        "name": "ttl",
        "baseName": "ttl",
        "type": "number"
    }
];
class InlineResponse201OrderInformation {
    static getAttributeTypeMap() {
        return InlineResponse201OrderInformation.attributeTypeMap;
    }
}
exports.InlineResponse201OrderInformation = InlineResponse201OrderInformation;
InlineResponse201OrderInformation.discriminator = undefined;
InlineResponse201OrderInformation.attributeTypeMap = [
    {
        "name": "shipTo",
        "baseName": "shipTo",
        "type": "InlineResponse201OrderInformationShipTo"
    }
];
class InlineResponse201OrderInformationShipTo {
    static getAttributeTypeMap() {
        return InlineResponse201OrderInformationShipTo.attributeTypeMap;
    }
}
exports.InlineResponse201OrderInformationShipTo = InlineResponse201OrderInformationShipTo;
InlineResponse201OrderInformationShipTo.discriminator = undefined;
InlineResponse201OrderInformationShipTo.attributeTypeMap = [
    {
        "name": "firstName",
        "baseName": "firstName",
        "type": "string"
    },
    {
        "name": "lastName",
        "baseName": "lastName",
        "type": "string"
    },
    {
        "name": "address1",
        "baseName": "address1",
        "type": "string"
    },
    {
        "name": "address2",
        "baseName": "address2",
        "type": "string"
    },
    {
        "name": "administrativeArea",
        "baseName": "administrativeArea",
        "type": "string"
    },
    {
        "name": "locality",
        "baseName": "locality",
        "type": "string"
    },
    {
        "name": "postalCode",
        "baseName": "postalCode",
        "type": "string"
    },
    {
        "name": "country",
        "baseName": "country",
        "type": "string"
    }
];
class InlineResponse201PaymentInformation {
    static getAttributeTypeMap() {
        return InlineResponse201PaymentInformation.attributeTypeMap;
    }
}
exports.InlineResponse201PaymentInformation = InlineResponse201PaymentInformation;
InlineResponse201PaymentInformation.discriminator = undefined;
InlineResponse201PaymentInformation.attributeTypeMap = [
    {
        "name": "tokenizedPaymentMethod",
        "baseName": "tokenizedPaymentMethod",
        "type": "InlineResponse201PaymentInformationTokenizedPaymentMethod"
    },
    {
        "name": "eWallet",
        "baseName": "eWallet",
        "type": "InlineResponse201PaymentInformationEWallet"
    }
];
class InlineResponse201PaymentInformationEWallet {
    static getAttributeTypeMap() {
        return InlineResponse201PaymentInformationEWallet.attributeTypeMap;
    }
}
exports.InlineResponse201PaymentInformationEWallet = InlineResponse201PaymentInformationEWallet;
InlineResponse201PaymentInformationEWallet.discriminator = undefined;
InlineResponse201PaymentInformationEWallet.attributeTypeMap = [
    {
        "name": "accountId",
        "baseName": "accountId",
        "type": "string"
    }
];
class InlineResponse201PaymentInformationTokenizedPaymentMethod {
    static getAttributeTypeMap() {
        return InlineResponse201PaymentInformationTokenizedPaymentMethod.attributeTypeMap;
    }
}
exports.InlineResponse201PaymentInformationTokenizedPaymentMethod = InlineResponse201PaymentInformationTokenizedPaymentMethod;
InlineResponse201PaymentInformationTokenizedPaymentMethod.discriminator = undefined;
InlineResponse201PaymentInformationTokenizedPaymentMethod.attributeTypeMap = [
    {
        "name": "id",
        "baseName": "id",
        "type": "string"
    },
    {
        "name": "usageType",
        "baseName": "usageType",
        "type": "string"
    }
];
class InlineResponse202 {
    static getAttributeTypeMap() {
        return InlineResponse202.attributeTypeMap;
    }
}
exports.InlineResponse202 = InlineResponse202;
InlineResponse202.discriminator = undefined;
InlineResponse202.attributeTypeMap = [
    {
        "name": "links",
        "baseName": "_links",
        "type": "InlineResponse202Links"
    },
    {
        "name": "batchId",
        "baseName": "batchId",
        "type": "string"
    },
    {
        "name": "batchItemCount",
        "baseName": "batchItemCount",
        "type": "number"
    }
];
class InlineResponse202Links {
    static getAttributeTypeMap() {
        return InlineResponse202Links.attributeTypeMap;
    }
}
exports.InlineResponse202Links = InlineResponse202Links;
InlineResponse202Links.discriminator = undefined;
InlineResponse202Links.attributeTypeMap = [
    {
        "name": "self",
        "baseName": "self",
        "type": "InlineResponse4011LinksSelf"
    },
    {
        "name": "status",
        "baseName": "status",
        "type": "Array<InlineResponse202LinksStatus>"
    }
];
class InlineResponse202LinksStatus {
    static getAttributeTypeMap() {
        return InlineResponse202LinksStatus.attributeTypeMap;
    }
}
exports.InlineResponse202LinksStatus = InlineResponse202LinksStatus;
InlineResponse202LinksStatus.discriminator = undefined;
InlineResponse202LinksStatus.attributeTypeMap = [
    {
        "name": "href",
        "baseName": "href",
        "type": "string"
    }
];
class InlineResponse206 {
    static getAttributeTypeMap() {
        return InlineResponse206.attributeTypeMap;
    }
}
exports.InlineResponse206 = InlineResponse206;
InlineResponse206.discriminator = undefined;
InlineResponse206.attributeTypeMap = [
    {
        "name": "status",
        "baseName": "status",
        "type": "InlineResponse206.StatusEnum"
    },
    {
        "name": "devices",
        "baseName": "devices",
        "type": "Array<Dmsv3devicesdeassociateDevices>"
    }
];
(function (InlineResponse206) {
    let StatusEnum;
    (function (StatusEnum) {
        StatusEnum[StatusEnum["OK"] = 'OK'] = "OK";
        StatusEnum[StatusEnum["BADREQUEST"] = 'BAD_REQUEST'] = "BADREQUEST";
    })(StatusEnum = InlineResponse206.StatusEnum || (InlineResponse206.StatusEnum = {}));
})(InlineResponse206 = exports.InlineResponse206 || (exports.InlineResponse206 = {}));
class InlineResponse2061 {
    static getAttributeTypeMap() {
        return InlineResponse2061.attributeTypeMap;
    }
}
exports.InlineResponse2061 = InlineResponse2061;
InlineResponse2061.discriminator = undefined;
InlineResponse2061.attributeTypeMap = [
    {
        "name": "status",
        "baseName": "status",
        "type": "InlineResponse2061.StatusEnum"
    },
    {
        "name": "details",
        "baseName": "details",
        "type": "Array<Dmsv2devicetransferDetails1>"
    }
];
(function (InlineResponse2061) {
    let StatusEnum;
    (function (StatusEnum) {
        StatusEnum[StatusEnum["CREATED"] = 'CREATED'] = "CREATED";
        StatusEnum[StatusEnum["ACCEPTED"] = 'ACCEPTED'] = "ACCEPTED";
        StatusEnum[StatusEnum["BADREQUEST"] = 'BAD_REQUEST'] = "BADREQUEST";
    })(StatusEnum = InlineResponse2061.StatusEnum || (InlineResponse2061.StatusEnum = {}));
})(InlineResponse2061 = exports.InlineResponse2061 || (exports.InlineResponse2061 = {}));
class InlineResponse400 {
    static getAttributeTypeMap() {
        return InlineResponse400.attributeTypeMap;
    }
}
exports.InlineResponse400 = InlineResponse400;
InlineResponse400.discriminator = undefined;
InlineResponse400.attributeTypeMap = [
    {
        "name": "errors",
        "baseName": "errors",
        "type": "Array<InlineResponse400Errors>"
    }
];
class InlineResponse4001 {
    static getAttributeTypeMap() {
        return InlineResponse4001.attributeTypeMap;
    }
}
exports.InlineResponse4001 = InlineResponse4001;
InlineResponse4001.discriminator = undefined;
InlineResponse4001.attributeTypeMap = [
    {
        "name": "submitTimeUtc",
        "baseName": "submitTimeUtc",
        "type": "string"
    },
    {
        "name": "status",
        "baseName": "status",
        "type": "string"
    },
    {
        "name": "reason",
        "baseName": "reason",
        "type": "string"
    },
    {
        "name": "message",
        "baseName": "message",
        "type": "string"
    },
    {
        "name": "details",
        "baseName": "details",
        "type": "Array<PtsV2PaymentsPost201ResponseErrorInformationDetails>"
    }
];
class InlineResponse4002 {
    static getAttributeTypeMap() {
        return InlineResponse4002.attributeTypeMap;
    }
}
exports.InlineResponse4002 = InlineResponse4002;
InlineResponse4002.discriminator = undefined;
InlineResponse4002.attributeTypeMap = [
    {
        "name": "submitTimeUtc",
        "baseName": "submitTimeUtc",
        "type": "string"
    },
    {
        "name": "status",
        "baseName": "status",
        "type": "string"
    },
    {
        "name": "reason",
        "baseName": "reason",
        "type": "string"
    },
    {
        "name": "message",
        "baseName": "message",
        "type": "string"
    },
    {
        "name": "details",
        "baseName": "details",
        "type": "Array<PtsV2PaymentsPost201ResponseErrorInformationDetails>"
    }
];
class InlineResponse4003 {
    static getAttributeTypeMap() {
        return InlineResponse4003.attributeTypeMap;
    }
}
exports.InlineResponse4003 = InlineResponse4003;
InlineResponse4003.discriminator = undefined;
InlineResponse4003.attributeTypeMap = [
    {
        "name": "submitTimeUtc",
        "baseName": "submitTimeUtc",
        "type": "string"
    },
    {
        "name": "status",
        "baseName": "status",
        "type": "string"
    },
    {
        "name": "reason",
        "baseName": "reason",
        "type": "string"
    },
    {
        "name": "message",
        "baseName": "message",
        "type": "string"
    },
    {
        "name": "details",
        "baseName": "details",
        "type": "Array<PtsV2PaymentsPost201ResponseErrorInformationDetails>"
    }
];
class InlineResponse4004 {
    static getAttributeTypeMap() {
        return InlineResponse4004.attributeTypeMap;
    }
}
exports.InlineResponse4004 = InlineResponse4004;
InlineResponse4004.discriminator = undefined;
InlineResponse4004.attributeTypeMap = [
    {
        "name": "submitTimeUtc",
        "baseName": "submitTimeUtc",
        "type": "string"
    },
    {
        "name": "status",
        "baseName": "status",
        "type": "string"
    },
    {
        "name": "reason",
        "baseName": "reason",
        "type": "string"
    },
    {
        "name": "message",
        "baseName": "message",
        "type": "string"
    },
    {
        "name": "details",
        "baseName": "details",
        "type": "Array<PtsV2PaymentsPost201ResponseErrorInformationDetails>"
    }
];
/**
* Error Bean
*/
class InlineResponse4005 {
    static getAttributeTypeMap() {
        return InlineResponse4005.attributeTypeMap;
    }
}
exports.InlineResponse4005 = InlineResponse4005;
InlineResponse4005.discriminator = undefined;
InlineResponse4005.attributeTypeMap = [
    {
        "name": "code",
        "baseName": "code",
        "type": "string"
    },
    {
        "name": "message",
        "baseName": "message",
        "type": "string"
    },
    {
        "name": "localizationKey",
        "baseName": "localizationKey",
        "type": "string"
    },
    {
        "name": "correlationId",
        "baseName": "correlationId",
        "type": "string"
    },
    {
        "name": "detail",
        "baseName": "detail",
        "type": "string"
    },
    {
        "name": "fields",
        "baseName": "fields",
        "type": "Array<InlineResponse4005Fields>"
    }
];
/**
* Provide validation failed input field details
*/
class InlineResponse4005Fields {
    static getAttributeTypeMap() {
        return InlineResponse4005Fields.attributeTypeMap;
    }
}
exports.InlineResponse4005Fields = InlineResponse4005Fields;
InlineResponse4005Fields.discriminator = undefined;
InlineResponse4005Fields.attributeTypeMap = [
    {
        "name": "path",
        "baseName": "path",
        "type": "string"
    },
    {
        "name": "message",
        "baseName": "message",
        "type": "string"
    },
    {
        "name": "localizationKey",
        "baseName": "localizationKey",
        "type": "string"
    }
];
class InlineResponse4006 {
    static getAttributeTypeMap() {
        return InlineResponse4006.attributeTypeMap;
    }
}
exports.InlineResponse4006 = InlineResponse4006;
InlineResponse4006.discriminator = undefined;
InlineResponse4006.attributeTypeMap = [
    {
        "name": "submitTimeUtc",
        "baseName": "submitTimeUtc",
        "type": "Date"
    },
    {
        "name": "status",
        "baseName": "status",
        "type": "string"
    },
    {
        "name": "reason",
        "baseName": "reason",
        "type": "string"
    },
    {
        "name": "message",
        "baseName": "message",
        "type": "string"
    },
    {
        "name": "details",
        "baseName": "details",
        "type": "Array<InlineResponse4006Details>"
    }
];
class InlineResponse4006Details {
    static getAttributeTypeMap() {
        return InlineResponse4006Details.attributeTypeMap;
    }
}
exports.InlineResponse4006Details = InlineResponse4006Details;
InlineResponse4006Details.discriminator = undefined;
InlineResponse4006Details.attributeTypeMap = [
    {
        "name": "field",
        "baseName": "field",
        "type": "string"
    },
    {
        "name": "reason",
        "baseName": "reason",
        "type": "string"
    }
];
class InlineResponse4007 {
    static getAttributeTypeMap() {
        return InlineResponse4007.attributeTypeMap;
    }
}
exports.InlineResponse4007 = InlineResponse4007;
InlineResponse4007.discriminator = undefined;
InlineResponse4007.attributeTypeMap = [
    {
        "name": "status",
        "baseName": "status",
        "type": "InlineResponse4007.StatusEnum"
    },
    {
        "name": "message",
        "baseName": "message",
        "type": "string"
    },
    {
        "name": "code",
        "baseName": "code",
        "type": "string"
    },
    {
        "name": "details",
        "baseName": "details",
        "type": "Array<InlineResponse4007Details>"
    },
    {
        "name": "submitTimeUtc",
        "baseName": "submitTimeUtc",
        "type": "string"
    }
];
(function (InlineResponse4007) {
    let StatusEnum;
    (function (StatusEnum) {
        StatusEnum[StatusEnum["BADREQUEST"] = 'BAD_REQUEST'] = "BADREQUEST";
    })(StatusEnum = InlineResponse4007.StatusEnum || (InlineResponse4007.StatusEnum = {}));
})(InlineResponse4007 = exports.InlineResponse4007 || (exports.InlineResponse4007 = {}));
class InlineResponse4007Details {
    static getAttributeTypeMap() {
        return InlineResponse4007Details.attributeTypeMap;
    }
}
exports.InlineResponse4007Details = InlineResponse4007Details;
InlineResponse4007Details.discriminator = undefined;
InlineResponse4007Details.attributeTypeMap = [
    {
        "name": "field",
        "baseName": "field",
        "type": "string"
    },
    {
        "name": "reason",
        "baseName": "reason",
        "type": "string"
    },
    {
        "name": "code",
        "baseName": "code",
        "type": "string"
    }
];
class InlineResponse4008 {
    static getAttributeTypeMap() {
        return InlineResponse4008.attributeTypeMap;
    }
}
exports.InlineResponse4008 = InlineResponse4008;
InlineResponse4008.discriminator = undefined;
InlineResponse4008.attributeTypeMap = [
    {
        "name": "correlationId",
        "baseName": "correlationId",
        "type": "string"
    },
    {
        "name": "details",
        "baseName": "details",
        "type": "Array<InlineResponse4008Details>"
    },
    {
        "name": "informationLink",
        "baseName": "informationLink",
        "type": "string"
    },
    {
        "name": "message",
        "baseName": "message",
        "type": "string"
    },
    {
        "name": "reason",
        "baseName": "reason",
        "type": "InlineResponse4008.ReasonEnum"
    }
];
(function (InlineResponse4008) {
    let ReasonEnum;
    (function (ReasonEnum) {
        ReasonEnum[ReasonEnum["INVALIDAPIKEY"] = 'INVALID_APIKEY'] = "INVALIDAPIKEY";
        ReasonEnum[ReasonEnum["INVALIDSHIPPINGINPUTPARAMS"] = 'INVALID_SHIPPING_INPUT_PARAMS'] = "INVALIDSHIPPINGINPUTPARAMS";
        ReasonEnum[ReasonEnum["CAPTURECONTEXTINVALID"] = 'CAPTURE_CONTEXT_INVALID'] = "CAPTURECONTEXTINVALID";
        ReasonEnum[ReasonEnum["CAPTURECONTEXTEXPIRED"] = 'CAPTURE_CONTEXT_EXPIRED'] = "CAPTURECONTEXTEXPIRED";
        ReasonEnum[ReasonEnum["SDKXHRERROR"] = 'SDK_XHR_ERROR'] = "SDKXHRERROR";
        ReasonEnum[ReasonEnum["UNIFIEDPAYMENTSVALIDATIONPARAMS"] = 'UNIFIEDPAYMENTS_VALIDATION_PARAMS'] = "UNIFIEDPAYMENTSVALIDATIONPARAMS";
        ReasonEnum[ReasonEnum["UNIFIEDPAYMENTSVALIDATIONFIELDS"] = 'UNIFIEDPAYMENTS_VALIDATION_FIELDS'] = "UNIFIEDPAYMENTSVALIDATIONFIELDS";
        ReasonEnum[ReasonEnum["UNIFIEDPAYMENTPAYMENTPARAMITERS"] = 'UNIFIEDPAYMENT_PAYMENT_PARAMITERS'] = "UNIFIEDPAYMENTPAYMENTPARAMITERS";
        ReasonEnum[ReasonEnum["CREATETOKENTIMEOUT"] = 'CREATE_TOKEN_TIMEOUT'] = "CREATETOKENTIMEOUT";
        ReasonEnum[ReasonEnum["CREATETOKENXHRERROR"] = 'CREATE_TOKEN_XHR_ERROR'] = "CREATETOKENXHRERROR";
        ReasonEnum[ReasonEnum["SHOWLOADCONTAINERSELECTOR"] = 'SHOW_LOAD_CONTAINER_SELECTOR'] = "SHOWLOADCONTAINERSELECTOR";
        ReasonEnum[ReasonEnum["SHOWLOADINVALIDCONTAINER"] = 'SHOW_LOAD_INVALID_CONTAINER'] = "SHOWLOADINVALIDCONTAINER";
        ReasonEnum[ReasonEnum["SHOWTOKENTIMEOUT"] = 'SHOW_TOKEN_TIMEOUT'] = "SHOWTOKENTIMEOUT";
        ReasonEnum[ReasonEnum["SHOWTOKENXHRERROR"] = 'SHOW_TOKEN_XHR_ERROR'] = "SHOWTOKENXHRERROR";
        ReasonEnum[ReasonEnum["SHOWPAYMENTTIMEOUT"] = 'SHOW_PAYMENT_TIMEOUT'] = "SHOWPAYMENTTIMEOUT";
    })(ReasonEnum = InlineResponse4008.ReasonEnum || (InlineResponse4008.ReasonEnum = {}));
})(InlineResponse4008 = exports.InlineResponse4008 || (exports.InlineResponse4008 = {}));
class InlineResponse4008Details {
    static getAttributeTypeMap() {
        return InlineResponse4008Details.attributeTypeMap;
    }
}
exports.InlineResponse4008Details = InlineResponse4008Details;
InlineResponse4008Details.discriminator = undefined;
InlineResponse4008Details.attributeTypeMap = [
    {
        "name": "location",
        "baseName": "location",
        "type": "string"
    },
    {
        "name": "message",
        "baseName": "message",
        "type": "string"
    }
];
class InlineResponse400Details {
    static getAttributeTypeMap() {
        return InlineResponse400Details.attributeTypeMap;
    }
}
exports.InlineResponse400Details = InlineResponse400Details;
InlineResponse400Details.discriminator = undefined;
InlineResponse400Details.attributeTypeMap = [
    {
        "name": "name",
        "baseName": "name",
        "type": "string"
    },
    {
        "name": "location",
        "baseName": "location",
        "type": "string"
    }
];
class InlineResponse400Errors {
    static getAttributeTypeMap() {
        return InlineResponse400Errors.attributeTypeMap;
    }
}
exports.InlineResponse400Errors = InlineResponse400Errors;
InlineResponse400Errors.discriminator = undefined;
InlineResponse400Errors.attributeTypeMap = [
    {
        "name": "type",
        "baseName": "type",
        "type": "string"
    },
    {
        "name": "message",
        "baseName": "message",
        "type": "string"
    },
    {
        "name": "details",
        "baseName": "details",
        "type": "Array<InlineResponse400Details>"
    }
];
class InlineResponse401 {
    static getAttributeTypeMap() {
        return InlineResponse401.attributeTypeMap;
    }
}
exports.InlineResponse401 = InlineResponse401;
InlineResponse401.discriminator = undefined;
InlineResponse401.attributeTypeMap = [
    {
        "name": "status",
        "baseName": "status",
        "type": "InlineResponse401.StatusEnum"
    },
    {
        "name": "message",
        "baseName": "message",
        "type": "string"
    },
    {
        "name": "code",
        "baseName": "code",
        "type": "string"
    },
    {
        "name": "submitTimeUtc",
        "baseName": "submitTimeUtc",
        "type": "string"
    }
];
(function (InlineResponse401) {
    let StatusEnum;
    (function (StatusEnum) {
        StatusEnum[StatusEnum["UNAUTHORIZED"] = 'UNAUTHORIZED'] = "UNAUTHORIZED";
    })(StatusEnum = InlineResponse401.StatusEnum || (InlineResponse401.StatusEnum = {}));
})(InlineResponse401 = exports.InlineResponse401 || (exports.InlineResponse401 = {}));
class InlineResponse4011 {
    static getAttributeTypeMap() {
        return InlineResponse4011.attributeTypeMap;
    }
}
exports.InlineResponse4011 = InlineResponse4011;
InlineResponse4011.discriminator = undefined;
InlineResponse4011.attributeTypeMap = [
    {
        "name": "links",
        "baseName": "_links",
        "type": "InlineResponse4011Links"
    },
    {
        "name": "code",
        "baseName": "code",
        "type": "string"
    },
    {
        "name": "correlationId",
        "baseName": "correlationId",
        "type": "string"
    },
    {
        "name": "detail",
        "baseName": "detail",
        "type": "string"
    },
    {
        "name": "fields",
        "baseName": "fields",
        "type": "Array<InlineResponse4011Fields>"
    },
    {
        "name": "localizationKey",
        "baseName": "localizationKey",
        "type": "string"
    },
    {
        "name": "message",
        "baseName": "message",
        "type": "string"
    }
];
class InlineResponse4011Fields {
    static getAttributeTypeMap() {
        return InlineResponse4011Fields.attributeTypeMap;
    }
}
exports.InlineResponse4011Fields = InlineResponse4011Fields;
InlineResponse4011Fields.discriminator = undefined;
InlineResponse4011Fields.attributeTypeMap = [
    {
        "name": "path",
        "baseName": "path",
        "type": "string"
    },
    {
        "name": "message",
        "baseName": "message",
        "type": "string"
    },
    {
        "name": "localizationKey",
        "baseName": "localizationKey",
        "type": "string"
    }
];
class InlineResponse4011Links {
    static getAttributeTypeMap() {
        return InlineResponse4011Links.attributeTypeMap;
    }
}
exports.InlineResponse4011Links = InlineResponse4011Links;
InlineResponse4011Links.discriminator = undefined;
InlineResponse4011Links.attributeTypeMap = [
    {
        "name": "self",
        "baseName": "self",
        "type": "InlineResponse4011LinksSelf"
    }
];
class InlineResponse4011LinksSelf {
    static getAttributeTypeMap() {
        return InlineResponse4011LinksSelf.attributeTypeMap;
    }
}
exports.InlineResponse4011LinksSelf = InlineResponse4011LinksSelf;
InlineResponse4011LinksSelf.discriminator = undefined;
InlineResponse4011LinksSelf.attributeTypeMap = [
    {
        "name": "href",
        "baseName": "href",
        "type": "string"
    }
];
class InlineResponse403 {
    static getAttributeTypeMap() {
        return InlineResponse403.attributeTypeMap;
    }
}
exports.InlineResponse403 = InlineResponse403;
InlineResponse403.discriminator = undefined;
InlineResponse403.attributeTypeMap = [
    {
        "name": "errors",
        "baseName": "errors",
        "type": "Array<InlineResponse403Errors>"
    }
];
class InlineResponse4031 {
    static getAttributeTypeMap() {
        return InlineResponse4031.attributeTypeMap;
    }
}
exports.InlineResponse4031 = InlineResponse4031;
InlineResponse4031.discriminator = undefined;
InlineResponse4031.attributeTypeMap = [
    {
        "name": "submitTimeUtc",
        "baseName": "submitTimeUtc",
        "type": "string"
    },
    {
        "name": "status",
        "baseName": "status",
        "type": "string"
    },
    {
        "name": "reason",
        "baseName": "reason",
        "type": "string"
    },
    {
        "name": "message",
        "baseName": "message",
        "type": "string"
    },
    {
        "name": "details",
        "baseName": "details",
        "type": "Array<PtsV2PaymentsPost201ResponseErrorInformationDetails>"
    }
];
class InlineResponse4032 {
    static getAttributeTypeMap() {
        return InlineResponse4032.attributeTypeMap;
    }
}
exports.InlineResponse4032 = InlineResponse4032;
InlineResponse4032.discriminator = undefined;
InlineResponse4032.attributeTypeMap = [
    {
        "name": "status",
        "baseName": "status",
        "type": "InlineResponse4032.StatusEnum"
    },
    {
        "name": "message",
        "baseName": "message",
        "type": "string"
    },
    {
        "name": "code",
        "baseName": "code",
        "type": "string"
    },
    {
        "name": "submitTimeUtc",
        "baseName": "submitTimeUtc",
        "type": "string"
    }
];
(function (InlineResponse4032) {
    let StatusEnum;
    (function (StatusEnum) {
        StatusEnum[StatusEnum["FORBIDDEN"] = 'FORBIDDEN'] = "FORBIDDEN";
    })(StatusEnum = InlineResponse4032.StatusEnum || (InlineResponse4032.StatusEnum = {}));
})(InlineResponse4032 = exports.InlineResponse4032 || (exports.InlineResponse4032 = {}));
class InlineResponse403Errors {
    static getAttributeTypeMap() {
        return InlineResponse403Errors.attributeTypeMap;
    }
}
exports.InlineResponse403Errors = InlineResponse403Errors;
InlineResponse403Errors.discriminator = undefined;
InlineResponse403Errors.attributeTypeMap = [
    {
        "name": "type",
        "baseName": "type",
        "type": "string"
    },
    {
        "name": "message",
        "baseName": "message",
        "type": "string"
    }
];
class InlineResponse404 {
    static getAttributeTypeMap() {
        return InlineResponse404.attributeTypeMap;
    }
}
exports.InlineResponse404 = InlineResponse404;
InlineResponse404.discriminator = undefined;
InlineResponse404.attributeTypeMap = [
    {
        "name": "submitTimeUtc",
        "baseName": "submitTimeUtc",
        "type": "string"
    },
    {
        "name": "status",
        "baseName": "status",
        "type": "string"
    }
];
class InlineResponse4041 {
    static getAttributeTypeMap() {
        return InlineResponse4041.attributeTypeMap;
    }
}
exports.InlineResponse4041 = InlineResponse4041;
InlineResponse4041.discriminator = undefined;
InlineResponse4041.attributeTypeMap = [
    {
        "name": "submitTimeUtc",
        "baseName": "submitTimeUtc",
        "type": "Date"
    },
    {
        "name": "status",
        "baseName": "status",
        "type": "string"
    },
    {
        "name": "reason",
        "baseName": "reason",
        "type": "string"
    },
    {
        "name": "message",
        "baseName": "message",
        "type": "string"
    },
    {
        "name": "details",
        "baseName": "details",
        "type": "Array<InlineResponse4006Details>"
    }
];
class InlineResponse4042 {
    static getAttributeTypeMap() {
        return InlineResponse4042.attributeTypeMap;
    }
}
exports.InlineResponse4042 = InlineResponse4042;
InlineResponse4042.discriminator = undefined;
InlineResponse4042.attributeTypeMap = [
    {
        "name": "reason",
        "baseName": "reason",
        "type": "string"
    },
    {
        "name": "message",
        "baseName": "message",
        "type": "string"
    },
    {
        "name": "details",
        "baseName": "details",
        "type": "Array<InlineResponse4042Details>"
    }
];
class InlineResponse4042Details {
    static getAttributeTypeMap() {
        return InlineResponse4042Details.attributeTypeMap;
    }
}
exports.InlineResponse4042Details = InlineResponse4042Details;
InlineResponse4042Details.discriminator = undefined;
InlineResponse4042Details.attributeTypeMap = [
    {
        "name": "field",
        "baseName": "field",
        "type": "string"
    },
    {
        "name": "reason",
        "baseName": "reason",
        "type": "string"
    }
];
class InlineResponse4043 {
    static getAttributeTypeMap() {
        return InlineResponse4043.attributeTypeMap;
    }
}
exports.InlineResponse4043 = InlineResponse4043;
InlineResponse4043.discriminator = undefined;
InlineResponse4043.attributeTypeMap = [
    {
        "name": "status",
        "baseName": "status",
        "type": "InlineResponse4043.StatusEnum"
    },
    {
        "name": "message",
        "baseName": "message",
        "type": "string"
    },
    {
        "name": "code",
        "baseName": "code",
        "type": "string"
    },
    {
        "name": "submitTimeUtc",
        "baseName": "submitTimeUtc",
        "type": "string"
    }
];
(function (InlineResponse4043) {
    let StatusEnum;
    (function (StatusEnum) {
        StatusEnum[StatusEnum["NOTFOUND"] = 'NOT_FOUND'] = "NOTFOUND";
    })(StatusEnum = InlineResponse4043.StatusEnum || (InlineResponse4043.StatusEnum = {}));
})(InlineResponse4043 = exports.InlineResponse4043 || (exports.InlineResponse4043 = {}));
class InlineResponse409 {
    static getAttributeTypeMap() {
        return InlineResponse409.attributeTypeMap;
    }
}
exports.InlineResponse409 = InlineResponse409;
InlineResponse409.discriminator = undefined;
InlineResponse409.attributeTypeMap = [
    {
        "name": "errors",
        "baseName": "errors",
        "type": "Array<InlineResponse409Errors>"
    }
];
class InlineResponse409Errors {
    static getAttributeTypeMap() {
        return InlineResponse409Errors.attributeTypeMap;
    }
}
exports.InlineResponse409Errors = InlineResponse409Errors;
InlineResponse409Errors.discriminator = undefined;
InlineResponse409Errors.attributeTypeMap = [
    {
        "name": "type",
        "baseName": "type",
        "type": "string"
    },
    {
        "name": "message",
        "baseName": "message",
        "type": "string"
    }
];
class InlineResponse410 {
    static getAttributeTypeMap() {
        return InlineResponse410.attributeTypeMap;
    }
}
exports.InlineResponse410 = InlineResponse410;
InlineResponse410.discriminator = undefined;
InlineResponse410.attributeTypeMap = [
    {
        "name": "errors",
        "baseName": "errors",
        "type": "Array<InlineResponse410Errors>"
    }
];
class InlineResponse410Errors {
    static getAttributeTypeMap() {
        return InlineResponse410Errors.attributeTypeMap;
    }
}
exports.InlineResponse410Errors = InlineResponse410Errors;
InlineResponse410Errors.discriminator = undefined;
InlineResponse410Errors.attributeTypeMap = [
    {
        "name": "type",
        "baseName": "type",
        "type": "string"
    },
    {
        "name": "message",
        "baseName": "message",
        "type": "string"
    }
];
class InlineResponse412 {
    static getAttributeTypeMap() {
        return InlineResponse412.attributeTypeMap;
    }
}
exports.InlineResponse412 = InlineResponse412;
InlineResponse412.discriminator = undefined;
InlineResponse412.attributeTypeMap = [
    {
        "name": "errors",
        "baseName": "errors",
        "type": "Array<InlineResponse412Errors>"
    }
];
class InlineResponse412Errors {
    static getAttributeTypeMap() {
        return InlineResponse412Errors.attributeTypeMap;
    }
}
exports.InlineResponse412Errors = InlineResponse412Errors;
InlineResponse412Errors.discriminator = undefined;
InlineResponse412Errors.attributeTypeMap = [
    {
        "name": "type",
        "baseName": "type",
        "type": "string"
    },
    {
        "name": "message",
        "baseName": "message",
        "type": "string"
    }
];
class InlineResponse422 {
    static getAttributeTypeMap() {
        return InlineResponse422.attributeTypeMap;
    }
}
exports.InlineResponse422 = InlineResponse422;
InlineResponse422.discriminator = undefined;
InlineResponse422.attributeTypeMap = [
    {
        "name": "submitTimeUtc",
        "baseName": "submitTimeUtc",
        "type": "string"
    },
    {
        "name": "status",
        "baseName": "status",
        "type": "string"
    },
    {
        "name": "reason",
        "baseName": "reason",
        "type": "string"
    },
    {
        "name": "message",
        "baseName": "message",
        "type": "string"
    },
    {
        "name": "details",
        "baseName": "details",
        "type": "Array<PtsV2PaymentsPost201ResponseErrorInformationDetails>"
    }
];
class InlineResponse4221 {
    static getAttributeTypeMap() {
        return InlineResponse4221.attributeTypeMap;
    }
}
exports.InlineResponse4221 = InlineResponse4221;
InlineResponse4221.discriminator = undefined;
InlineResponse4221.attributeTypeMap = [
    {
        "name": "submitTimeUtc",
        "baseName": "submitTimeUtc",
        "type": "Date"
    },
    {
        "name": "status",
        "baseName": "status",
        "type": "string"
    },
    {
        "name": "reason",
        "baseName": "reason",
        "type": "string"
    },
    {
        "name": "message",
        "baseName": "message",
        "type": "string"
    },
    {
        "name": "details",
        "baseName": "details",
        "type": "Array<InlineResponse4006Details>"
    }
];
class InlineResponse424 {
    static getAttributeTypeMap() {
        return InlineResponse424.attributeTypeMap;
    }
}
exports.InlineResponse424 = InlineResponse424;
InlineResponse424.discriminator = undefined;
InlineResponse424.attributeTypeMap = [
    {
        "name": "errors",
        "baseName": "errors",
        "type": "Array<InlineResponse424Errors>"
    }
];
class InlineResponse424Errors {
    static getAttributeTypeMap() {
        return InlineResponse424Errors.attributeTypeMap;
    }
}
exports.InlineResponse424Errors = InlineResponse424Errors;
InlineResponse424Errors.discriminator = undefined;
InlineResponse424Errors.attributeTypeMap = [
    {
        "name": "type",
        "baseName": "type",
        "type": "string"
    },
    {
        "name": "message",
        "baseName": "message",
        "type": "string"
    }
];
class InlineResponse500 {
    static getAttributeTypeMap() {
        return InlineResponse500.attributeTypeMap;
    }
}
exports.InlineResponse500 = InlineResponse500;
InlineResponse500.discriminator = undefined;
InlineResponse500.attributeTypeMap = [
    {
        "name": "errors",
        "baseName": "errors",
        "type": "Array<InlineResponse500Errors>"
    }
];
class InlineResponse5001 {
    static getAttributeTypeMap() {
        return InlineResponse5001.attributeTypeMap;
    }
}
exports.InlineResponse5001 = InlineResponse5001;
InlineResponse5001.discriminator = undefined;
InlineResponse5001.attributeTypeMap = [
    {
        "name": "submitTimeUtc",
        "baseName": "submitTimeUtc",
        "type": "string"
    },
    {
        "name": "status",
        "baseName": "status",
        "type": "string"
    },
    {
        "name": "reason",
        "baseName": "reason",
        "type": "string"
    },
    {
        "name": "message",
        "baseName": "message",
        "type": "string"
    },
    {
        "name": "details",
        "baseName": "details",
        "type": "Array<PtsV2PaymentsPost201ResponseErrorInformationDetails>"
    }
];
class InlineResponse5002 {
    static getAttributeTypeMap() {
        return InlineResponse5002.attributeTypeMap;
    }
}
exports.InlineResponse5002 = InlineResponse5002;
InlineResponse5002.discriminator = undefined;
InlineResponse5002.attributeTypeMap = [
    {
        "name": "submitTimeUtc",
        "baseName": "submitTimeUtc",
        "type": "Date"
    },
    {
        "name": "status",
        "baseName": "status",
        "type": "string"
    },
    {
        "name": "reason",
        "baseName": "reason",
        "type": "string"
    },
    {
        "name": "message",
        "baseName": "message",
        "type": "string"
    }
];
class InlineResponse5003 {
    static getAttributeTypeMap() {
        return InlineResponse5003.attributeTypeMap;
    }
}
exports.InlineResponse5003 = InlineResponse5003;
InlineResponse5003.discriminator = undefined;
InlineResponse5003.attributeTypeMap = [
    {
        "name": "status",
        "baseName": "status",
        "type": "InlineResponse5003.StatusEnum"
    },
    {
        "name": "message",
        "baseName": "message",
        "type": "string"
    },
    {
        "name": "code",
        "baseName": "code",
        "type": "string"
    },
    {
        "name": "submitTimeUtc",
        "baseName": "submitTimeUtc",
        "type": "string"
    }
];
(function (InlineResponse5003) {
    let StatusEnum;
    (function (StatusEnum) {
        StatusEnum[StatusEnum["INTERNALSERVERERROR"] = 'INTERNAL_SERVER_ERROR'] = "INTERNALSERVERERROR";
    })(StatusEnum = InlineResponse5003.StatusEnum || (InlineResponse5003.StatusEnum = {}));
})(InlineResponse5003 = exports.InlineResponse5003 || (exports.InlineResponse5003 = {}));
class InlineResponse500Errors {
    static getAttributeTypeMap() {
        return InlineResponse500Errors.attributeTypeMap;
    }
}
exports.InlineResponse500Errors = InlineResponse500Errors;
InlineResponse500Errors.discriminator = undefined;
InlineResponse500Errors.attributeTypeMap = [
    {
        "name": "type",
        "baseName": "type",
        "type": "string"
    },
    {
        "name": "message",
        "baseName": "message",
        "type": "string"
    }
];
class InlineResponse502 {
    static getAttributeTypeMap() {
        return InlineResponse502.attributeTypeMap;
    }
}
exports.InlineResponse502 = InlineResponse502;
InlineResponse502.discriminator = undefined;
InlineResponse502.attributeTypeMap = [
    {
        "name": "submitTimeUtc",
        "baseName": "submitTimeUtc",
        "type": "string"
    },
    {
        "name": "status",
        "baseName": "status",
        "type": "string"
    },
    {
        "name": "reason",
        "baseName": "reason",
        "type": "string"
    },
    {
        "name": "message",
        "baseName": "message",
        "type": "string"
    },
    {
        "name": "details",
        "baseName": "details",
        "type": "Array<PtsV2PaymentsPost201ResponseErrorInformationDetails>"
    }
];
class InlineResponse503 {
    static getAttributeTypeMap() {
        return InlineResponse503.attributeTypeMap;
    }
}
exports.InlineResponse503 = InlineResponse503;
InlineResponse503.discriminator = undefined;
InlineResponse503.attributeTypeMap = [
    {
        "name": "submitTimeUtc",
        "baseName": "submitTimeUtc",
        "type": "string"
    },
    {
        "name": "status",
        "baseName": "status",
        "type": "string"
    },
    {
        "name": "reason",
        "baseName": "reason",
        "type": "string"
    },
    {
        "name": "message",
        "baseName": "message",
        "type": "string"
    },
    {
        "name": "details",
        "baseName": "details",
        "type": "Array<PtsV2PaymentsPost201ResponseErrorInformationDetails>"
    }
];
class InlineResponseDefault {
    static getAttributeTypeMap() {
        return InlineResponseDefault.attributeTypeMap;
    }
}
exports.InlineResponseDefault = InlineResponseDefault;
InlineResponseDefault.discriminator = undefined;
InlineResponseDefault.attributeTypeMap = [
    {
        "name": "responseStatus",
        "baseName": "responseStatus",
        "type": "InlineResponseDefaultResponseStatus"
    },
    {
        "name": "links",
        "baseName": "_links",
        "type": "InlineResponseDefaultLinks"
    }
];
class InlineResponseDefaultLinks {
    static getAttributeTypeMap() {
        return InlineResponseDefaultLinks.attributeTypeMap;
    }
}
exports.InlineResponseDefaultLinks = InlineResponseDefaultLinks;
InlineResponseDefaultLinks.discriminator = undefined;
InlineResponseDefaultLinks.attributeTypeMap = [
    {
        "name": "next",
        "baseName": "next",
        "type": "Array<InlineResponseDefaultLinksNext>"
    },
    {
        "name": "documentation",
        "baseName": "documentation",
        "type": "Array<InlineResponseDefaultLinksNext>"
    },
    {
        "name": "self",
        "baseName": "self",
        "type": "InlineResponseDefaultLinksNext"
    }
];
class InlineResponseDefaultLinksNext {
    static getAttributeTypeMap() {
        return InlineResponseDefaultLinksNext.attributeTypeMap;
    }
}
exports.InlineResponseDefaultLinksNext = InlineResponseDefaultLinksNext;
InlineResponseDefaultLinksNext.discriminator = undefined;
InlineResponseDefaultLinksNext.attributeTypeMap = [
    {
        "name": "href",
        "baseName": "href",
        "type": "string"
    },
    {
        "name": "title",
        "baseName": "title",
        "type": "string"
    },
    {
        "name": "method",
        "baseName": "method",
        "type": "string"
    }
];
class InlineResponseDefaultResponseStatus {
    static getAttributeTypeMap() {
        return InlineResponseDefaultResponseStatus.attributeTypeMap;
    }
}
exports.InlineResponseDefaultResponseStatus = InlineResponseDefaultResponseStatus;
InlineResponseDefaultResponseStatus.discriminator = undefined;
InlineResponseDefaultResponseStatus.attributeTypeMap = [
    {
        "name": "status",
        "baseName": "status",
        "type": "number"
    },
    {
        "name": "reason",
        "baseName": "reason",
        "type": "string"
    },
    {
        "name": "message",
        "baseName": "message",
        "type": "string"
    },
    {
        "name": "correlationId",
        "baseName": "correlationId",
        "type": "string"
    },
    {
        "name": "details",
        "baseName": "details",
        "type": "Array<InlineResponseDefaultResponseStatusDetails>"
    }
];
class InlineResponseDefaultResponseStatusDetails {
    static getAttributeTypeMap() {
        return InlineResponseDefaultResponseStatusDetails.attributeTypeMap;
    }
}
exports.InlineResponseDefaultResponseStatusDetails = InlineResponseDefaultResponseStatusDetails;
InlineResponseDefaultResponseStatusDetails.discriminator = undefined;
InlineResponseDefaultResponseStatusDetails.attributeTypeMap = [
    {
        "name": "location",
        "baseName": "location",
        "type": "string"
    },
    {
        "name": "message",
        "baseName": "message",
        "type": "string"
    }
];
class IntimateBillingAgreement {
    static getAttributeTypeMap() {
        return IntimateBillingAgreement.attributeTypeMap;
    }
}
exports.IntimateBillingAgreement = IntimateBillingAgreement;
IntimateBillingAgreement.discriminator = undefined;
IntimateBillingAgreement.attributeTypeMap = [
    {
        "name": "clientReferenceInformation",
        "baseName": "clientReferenceInformation",
        "type": "Ptsv2paymentsClientReferenceInformation"
    },
    {
        "name": "installmentInformation",
        "baseName": "installmentInformation",
        "type": "Ptsv2billingagreementsInstallmentInformation"
    },
    {
        "name": "merchantInformation",
        "baseName": "merchantInformation",
        "type": "Ptsv2billingagreementsMerchantInformation"
    },
    {
        "name": "orderInformation",
        "baseName": "orderInformation",
        "type": "Ptsv2billingagreementsOrderInformation"
    },
    {
        "name": "paymentInformation",
        "baseName": "paymentInformation",
        "type": "Ptsv2billingagreementsPaymentInformation"
    }
];
class InvoiceSettingsRequest {
    static getAttributeTypeMap() {
        return InvoiceSettingsRequest.attributeTypeMap;
    }
}
exports.InvoiceSettingsRequest = InvoiceSettingsRequest;
InvoiceSettingsRequest.discriminator = undefined;
InvoiceSettingsRequest.attributeTypeMap = [
    {
        "name": "invoiceSettingsInformation",
        "baseName": "invoiceSettingsInformation",
        "type": "Invoicingv2invoiceSettingsInvoiceSettingsInformation"
    }
];
class InvoicingV2InvoiceSettingsGet200Response {
    static getAttributeTypeMap() {
        return InvoicingV2InvoiceSettingsGet200Response.attributeTypeMap;
    }
}
exports.InvoicingV2InvoiceSettingsGet200Response = InvoicingV2InvoiceSettingsGet200Response;
InvoicingV2InvoiceSettingsGet200Response.discriminator = undefined;
InvoicingV2InvoiceSettingsGet200Response.attributeTypeMap = [
    {
        "name": "submitTimeUtc",
        "baseName": "submitTimeUtc",
        "type": "string"
    },
    {
        "name": "invoiceSettingsInformation",
        "baseName": "invoiceSettingsInformation",
        "type": "InvoicingV2InvoiceSettingsGet200ResponseInvoiceSettingsInformation"
    }
];
class InvoicingV2InvoiceSettingsGet200ResponseInvoiceSettingsInformation {
    static getAttributeTypeMap() {
        return InvoicingV2InvoiceSettingsGet200ResponseInvoiceSettingsInformation.attributeTypeMap;
    }
}
exports.InvoicingV2InvoiceSettingsGet200ResponseInvoiceSettingsInformation = InvoicingV2InvoiceSettingsGet200ResponseInvoiceSettingsInformation;
InvoicingV2InvoiceSettingsGet200ResponseInvoiceSettingsInformation.discriminator = undefined;
InvoicingV2InvoiceSettingsGet200ResponseInvoiceSettingsInformation.attributeTypeMap = [
    {
        "name": "merchantLogo",
        "baseName": "merchantLogo",
        "type": "string"
    },
    {
        "name": "merchantDisplayName",
        "baseName": "merchantDisplayName",
        "type": "string"
    },
    {
        "name": "customEmailMessage",
        "baseName": "customEmailMessage",
        "type": "string"
    },
    {
        "name": "enableReminders",
        "baseName": "enableReminders",
        "type": "boolean"
    },
    {
        "name": "headerStyle",
        "baseName": "headerStyle",
        "type": "InvoicingV2InvoiceSettingsGet200ResponseInvoiceSettingsInformationHeaderStyle"
    },
    {
        "name": "deliveryLanguage",
        "baseName": "deliveryLanguage",
        "type": "string"
    },
    {
        "name": "defaultCurrencyCode",
        "baseName": "defaultCurrencyCode",
        "type": "string"
    },
    {
        "name": "payerAuthentication3DSVersion",
        "baseName": "payerAuthentication3DSVersion",
        "type": "boolean"
    },
    {
        "name": "showVatNumber",
        "baseName": "showVatNumber",
        "type": "boolean"
    },
    {
        "name": "vatRegistrationNumber",
        "baseName": "vatRegistrationNumber",
        "type": "string"
    },
    {
        "name": "shipTo",
        "baseName": "shipTo",
        "type": "boolean"
    },
    {
        "name": "phoneNumber",
        "baseName": "phoneNumber",
        "type": "boolean"
    },
    {
        "name": "email",
        "baseName": "email",
        "type": "boolean"
    },
    {
        "name": "enableMerchantEmailNotifications",
        "baseName": "enableMerchantEmailNotifications",
        "type": "boolean"
    },
    {
        "name": "customLabels",
        "baseName": "customLabels",
        "type": "Array<InvoicingV2InvoicesPost201ResponseInvoiceInformationCustomLabels>"
    }
];
class InvoicingV2InvoiceSettingsGet200ResponseInvoiceSettingsInformationHeaderStyle {
    static getAttributeTypeMap() {
        return InvoicingV2InvoiceSettingsGet200ResponseInvoiceSettingsInformationHeaderStyle.attributeTypeMap;
    }
}
exports.InvoicingV2InvoiceSettingsGet200ResponseInvoiceSettingsInformationHeaderStyle = InvoicingV2InvoiceSettingsGet200ResponseInvoiceSettingsInformationHeaderStyle;
InvoicingV2InvoiceSettingsGet200ResponseInvoiceSettingsInformationHeaderStyle.discriminator = undefined;
InvoicingV2InvoiceSettingsGet200ResponseInvoiceSettingsInformationHeaderStyle.attributeTypeMap = [
    {
        "name": "fontColor",
        "baseName": "fontColor",
        "type": "string"
    },
    {
        "name": "backgroundColor",
        "baseName": "backgroundColor",
        "type": "string"
    }
];
class InvoicingV2InvoicesAllGet200Response {
    static getAttributeTypeMap() {
        return InvoicingV2InvoicesAllGet200Response.attributeTypeMap;
    }
}
exports.InvoicingV2InvoicesAllGet200Response = InvoicingV2InvoicesAllGet200Response;
InvoicingV2InvoicesAllGet200Response.discriminator = undefined;
InvoicingV2InvoicesAllGet200Response.attributeTypeMap = [
    {
        "name": "links",
        "baseName": "_links",
        "type": "InvoicingV2InvoicesAllGet200ResponseLinks"
    },
    {
        "name": "submitTimeUtc",
        "baseName": "submitTimeUtc",
        "type": "string"
    },
    {
        "name": "totalInvoices",
        "baseName": "totalInvoices",
        "type": "number"
    },
    {
        "name": "invoices",
        "baseName": "invoices",
        "type": "Array<InvoicingV2InvoicesAllGet200ResponseInvoices>"
    }
];
class InvoicingV2InvoicesAllGet200ResponseCustomerInformation {
    static getAttributeTypeMap() {
        return InvoicingV2InvoicesAllGet200ResponseCustomerInformation.attributeTypeMap;
    }
}
exports.InvoicingV2InvoicesAllGet200ResponseCustomerInformation = InvoicingV2InvoicesAllGet200ResponseCustomerInformation;
InvoicingV2InvoicesAllGet200ResponseCustomerInformation.discriminator = undefined;
InvoicingV2InvoicesAllGet200ResponseCustomerInformation.attributeTypeMap = [
    {
        "name": "name",
        "baseName": "name",
        "type": "string"
    },
    {
        "name": "merchantCustomerId",
        "baseName": "merchantCustomerId",
        "type": "string"
    }
];
class InvoicingV2InvoicesAllGet200ResponseInvoiceInformation {
    static getAttributeTypeMap() {
        return InvoicingV2InvoicesAllGet200ResponseInvoiceInformation.attributeTypeMap;
    }
}
exports.InvoicingV2InvoicesAllGet200ResponseInvoiceInformation = InvoicingV2InvoicesAllGet200ResponseInvoiceInformation;
InvoicingV2InvoicesAllGet200ResponseInvoiceInformation.discriminator = undefined;
InvoicingV2InvoicesAllGet200ResponseInvoiceInformation.attributeTypeMap = [
    {
        "name": "dueDate",
        "baseName": "dueDate",
        "type": "string"
    },
    {
        "name": "expirationDate",
        "baseName": "expirationDate",
        "type": "string"
    }
];
/**
* A list of invoices.
*/
class InvoicingV2InvoicesAllGet200ResponseInvoices {
    static getAttributeTypeMap() {
        return InvoicingV2InvoicesAllGet200ResponseInvoices.attributeTypeMap;
    }
}
exports.InvoicingV2InvoicesAllGet200ResponseInvoices = InvoicingV2InvoicesAllGet200ResponseInvoices;
InvoicingV2InvoicesAllGet200ResponseInvoices.discriminator = undefined;
InvoicingV2InvoicesAllGet200ResponseInvoices.attributeTypeMap = [
    {
        "name": "links",
        "baseName": "_links",
        "type": "InvoicingV2InvoicesAllGet200ResponseLinks"
    },
    {
        "name": "id",
        "baseName": "id",
        "type": "string"
    },
    {
        "name": "status",
        "baseName": "status",
        "type": "string"
    },
    {
        "name": "createdDate",
        "baseName": "createdDate",
        "type": "string"
    },
    {
        "name": "customerInformation",
        "baseName": "customerInformation",
        "type": "InvoicingV2InvoicesAllGet200ResponseCustomerInformation"
    },
    {
        "name": "invoiceInformation",
        "baseName": "invoiceInformation",
        "type": "InvoicingV2InvoicesAllGet200ResponseInvoiceInformation"
    },
    {
        "name": "orderInformation",
        "baseName": "orderInformation",
        "type": "InvoicingV2InvoicesAllGet200ResponseOrderInformation"
    }
];
class InvoicingV2InvoicesAllGet200ResponseLinks {
    static getAttributeTypeMap() {
        return InvoicingV2InvoicesAllGet200ResponseLinks.attributeTypeMap;
    }
}
exports.InvoicingV2InvoicesAllGet200ResponseLinks = InvoicingV2InvoicesAllGet200ResponseLinks;
InvoicingV2InvoicesAllGet200ResponseLinks.discriminator = undefined;
InvoicingV2InvoicesAllGet200ResponseLinks.attributeTypeMap = [
    {
        "name": "self",
        "baseName": "self",
        "type": "PtsV2PaymentsPost201ResponseLinksSelf"
    },
    {
        "name": "update",
        "baseName": "update",
        "type": "PtsV2PaymentsPost201ResponseLinksSelf"
    },
    {
        "name": "deliver",
        "baseName": "deliver",
        "type": "PtsV2PaymentsPost201ResponseLinksSelf"
    },
    {
        "name": "cancel",
        "baseName": "cancel",
        "type": "PtsV2PaymentsPost201ResponseLinksSelf"
    }
];
/**
* Contains all of the order-related fields, such as the amount and line item details.
*/
class InvoicingV2InvoicesAllGet200ResponseOrderInformation {
    static getAttributeTypeMap() {
        return InvoicingV2InvoicesAllGet200ResponseOrderInformation.attributeTypeMap;
    }
}
exports.InvoicingV2InvoicesAllGet200ResponseOrderInformation = InvoicingV2InvoicesAllGet200ResponseOrderInformation;
InvoicingV2InvoicesAllGet200ResponseOrderInformation.discriminator = undefined;
InvoicingV2InvoicesAllGet200ResponseOrderInformation.attributeTypeMap = [
    {
        "name": "amountDetails",
        "baseName": "amountDetails",
        "type": "InvoicingV2InvoicesAllGet200ResponseOrderInformationAmountDetails"
    }
];
/**
* Contains all of the amount-related fields.
*/
class InvoicingV2InvoicesAllGet200ResponseOrderInformationAmountDetails {
    static getAttributeTypeMap() {
        return InvoicingV2InvoicesAllGet200ResponseOrderInformationAmountDetails.attributeTypeMap;
    }
}
exports.InvoicingV2InvoicesAllGet200ResponseOrderInformationAmountDetails = InvoicingV2InvoicesAllGet200ResponseOrderInformationAmountDetails;
InvoicingV2InvoicesAllGet200ResponseOrderInformationAmountDetails.discriminator = undefined;
InvoicingV2InvoicesAllGet200ResponseOrderInformationAmountDetails.attributeTypeMap = [
    {
        "name": "totalAmount",
        "baseName": "totalAmount",
        "type": "string"
    },
    {
        "name": "currency",
        "baseName": "currency",
        "type": "string"
    }
];
class InvoicingV2InvoicesAllGet400Response {
    static getAttributeTypeMap() {
        return InvoicingV2InvoicesAllGet400Response.attributeTypeMap;
    }
}
exports.InvoicingV2InvoicesAllGet400Response = InvoicingV2InvoicesAllGet400Response;
InvoicingV2InvoicesAllGet400Response.discriminator = undefined;
InvoicingV2InvoicesAllGet400Response.attributeTypeMap = [
    {
        "name": "submitTimeUtc",
        "baseName": "submitTimeUtc",
        "type": "string"
    },
    {
        "name": "status",
        "baseName": "status",
        "type": "string"
    },
    {
        "name": "reason",
        "baseName": "reason",
        "type": "string"
    },
    {
        "name": "message",
        "baseName": "message",
        "type": "string"
    },
    {
        "name": "details",
        "baseName": "details",
        "type": "Array<PtsV2PaymentsPost201ResponseErrorInformationDetails>"
    }
];
class InvoicingV2InvoicesAllGet404Response {
    static getAttributeTypeMap() {
        return InvoicingV2InvoicesAllGet404Response.attributeTypeMap;
    }
}
exports.InvoicingV2InvoicesAllGet404Response = InvoicingV2InvoicesAllGet404Response;
InvoicingV2InvoicesAllGet404Response.discriminator = undefined;
InvoicingV2InvoicesAllGet404Response.attributeTypeMap = [
    {
        "name": "submitTimeUtc",
        "baseName": "submitTimeUtc",
        "type": "string"
    },
    {
        "name": "status",
        "baseName": "status",
        "type": "string"
    },
    {
        "name": "reason",
        "baseName": "reason",
        "type": "string"
    },
    {
        "name": "message",
        "baseName": "message",
        "type": "string"
    },
    {
        "name": "details",
        "baseName": "details",
        "type": "Array<PtsV2PaymentsPost201ResponseErrorInformationDetails>"
    }
];
class InvoicingV2InvoicesAllGet502Response {
    static getAttributeTypeMap() {
        return InvoicingV2InvoicesAllGet502Response.attributeTypeMap;
    }
}
exports.InvoicingV2InvoicesAllGet502Response = InvoicingV2InvoicesAllGet502Response;
InvoicingV2InvoicesAllGet502Response.discriminator = undefined;
InvoicingV2InvoicesAllGet502Response.attributeTypeMap = [
    {
        "name": "submitTimeUtc",
        "baseName": "submitTimeUtc",
        "type": "string"
    },
    {
        "name": "status",
        "baseName": "status",
        "type": "string"
    },
    {
        "name": "reason",
        "baseName": "reason",
        "type": "string"
    },
    {
        "name": "message",
        "baseName": "message",
        "type": "string"
    }
];
class InvoicingV2InvoicesCancel200Response {
    static getAttributeTypeMap() {
        return InvoicingV2InvoicesCancel200Response.attributeTypeMap;
    }
}
exports.InvoicingV2InvoicesCancel200Response = InvoicingV2InvoicesCancel200Response;
InvoicingV2InvoicesCancel200Response.discriminator = undefined;
InvoicingV2InvoicesCancel200Response.attributeTypeMap = [
    {
        "name": "links",
        "baseName": "_links",
        "type": "InvoicingV2InvoicesAllGet200ResponseLinks"
    },
    {
        "name": "id",
        "baseName": "id",
        "type": "string"
    },
    {
        "name": "submitTimeUtc",
        "baseName": "submitTimeUtc",
        "type": "string"
    },
    {
        "name": "status",
        "baseName": "status",
        "type": "string"
    },
    {
        "name": "customerInformation",
        "baseName": "customerInformation",
        "type": "Invoicingv2invoicesCustomerInformation"
    },
    {
        "name": "processingInformation",
        "baseName": "processingInformation",
        "type": "Invoicingv2invoicesProcessingInformation"
    },
    {
        "name": "invoiceInformation",
        "baseName": "invoiceInformation",
        "type": "InvoicingV2InvoicesPost201ResponseInvoiceInformation"
    },
    {
        "name": "orderInformation",
        "baseName": "orderInformation",
        "type": "InvoicingV2InvoicesPost201ResponseOrderInformation"
    }
];
class InvoicingV2InvoicesGet200Response {
    static getAttributeTypeMap() {
        return InvoicingV2InvoicesGet200Response.attributeTypeMap;
    }
}
exports.InvoicingV2InvoicesGet200Response = InvoicingV2InvoicesGet200Response;
InvoicingV2InvoicesGet200Response.discriminator = undefined;
InvoicingV2InvoicesGet200Response.attributeTypeMap = [
    {
        "name": "links",
        "baseName": "_links",
        "type": "InvoicingV2InvoicesAllGet200ResponseLinks"
    },
    {
        "name": "id",
        "baseName": "id",
        "type": "string"
    },
    {
        "name": "submitTimeUtc",
        "baseName": "submitTimeUtc",
        "type": "string"
    },
    {
        "name": "status",
        "baseName": "status",
        "type": "string"
    },
    {
        "name": "customerInformation",
        "baseName": "customerInformation",
        "type": "Invoicingv2invoicesCustomerInformation"
    },
    {
        "name": "processingInformation",
        "baseName": "processingInformation",
        "type": "Invoicingv2invoicesProcessingInformation"
    },
    {
        "name": "invoiceInformation",
        "baseName": "invoiceInformation",
        "type": "InvoicingV2InvoicesPost201ResponseInvoiceInformation"
    },
    {
        "name": "orderInformation",
        "baseName": "orderInformation",
        "type": "InvoicingV2InvoicesPost201ResponseOrderInformation"
    },
    {
        "name": "invoiceHistory",
        "baseName": "invoiceHistory",
        "type": "Array<InvoicingV2InvoicesGet200ResponseInvoiceHistory>"
    }
];
class InvoicingV2InvoicesGet200ResponseInvoiceHistory {
    static getAttributeTypeMap() {
        return InvoicingV2InvoicesGet200ResponseInvoiceHistory.attributeTypeMap;
    }
}
exports.InvoicingV2InvoicesGet200ResponseInvoiceHistory = InvoicingV2InvoicesGet200ResponseInvoiceHistory;
InvoicingV2InvoicesGet200ResponseInvoiceHistory.discriminator = undefined;
InvoicingV2InvoicesGet200ResponseInvoiceHistory.attributeTypeMap = [
    {
        "name": "event",
        "baseName": "event",
        "type": "string"
    },
    {
        "name": "date",
        "baseName": "date",
        "type": "Date"
    },
    {
        "name": "transactionDetails",
        "baseName": "transactionDetails",
        "type": "InvoicingV2InvoicesGet200ResponseTransactionDetails"
    }
];
/**
* These details are only returned when the invoice event is `payment`.
*/
class InvoicingV2InvoicesGet200ResponseTransactionDetails {
    static getAttributeTypeMap() {
        return InvoicingV2InvoicesGet200ResponseTransactionDetails.attributeTypeMap;
    }
}
exports.InvoicingV2InvoicesGet200ResponseTransactionDetails = InvoicingV2InvoicesGet200ResponseTransactionDetails;
InvoicingV2InvoicesGet200ResponseTransactionDetails.discriminator = undefined;
InvoicingV2InvoicesGet200ResponseTransactionDetails.attributeTypeMap = [
    {
        "name": "transactionId",
        "baseName": "transactionId",
        "type": "string"
    },
    {
        "name": "amount",
        "baseName": "amount",
        "type": "string"
    }
];
class InvoicingV2InvoicesPost201Response {
    static getAttributeTypeMap() {
        return InvoicingV2InvoicesPost201Response.attributeTypeMap;
    }
}
exports.InvoicingV2InvoicesPost201Response = InvoicingV2InvoicesPost201Response;
InvoicingV2InvoicesPost201Response.discriminator = undefined;
InvoicingV2InvoicesPost201Response.attributeTypeMap = [
    {
        "name": "links",
        "baseName": "_links",
        "type": "InvoicingV2InvoicesAllGet200ResponseLinks"
    },
    {
        "name": "id",
        "baseName": "id",
        "type": "string"
    },
    {
        "name": "submitTimeUtc",
        "baseName": "submitTimeUtc",
        "type": "string"
    },
    {
        "name": "status",
        "baseName": "status",
        "type": "string"
    },
    {
        "name": "customerInformation",
        "baseName": "customerInformation",
        "type": "Invoicingv2invoicesCustomerInformation"
    },
    {
        "name": "processingInformation",
        "baseName": "processingInformation",
        "type": "Invoicingv2invoicesProcessingInformation"
    },
    {
        "name": "invoiceInformation",
        "baseName": "invoiceInformation",
        "type": "InvoicingV2InvoicesPost201ResponseInvoiceInformation"
    },
    {
        "name": "orderInformation",
        "baseName": "orderInformation",
        "type": "InvoicingV2InvoicesPost201ResponseOrderInformation"
    }
];
/**
* Contains all of the invoice-specific fields, such as the invoice number and due date.
*/
class InvoicingV2InvoicesPost201ResponseInvoiceInformation {
    static getAttributeTypeMap() {
        return InvoicingV2InvoicesPost201ResponseInvoiceInformation.attributeTypeMap;
    }
}
exports.InvoicingV2InvoicesPost201ResponseInvoiceInformation = InvoicingV2InvoicesPost201ResponseInvoiceInformation;
InvoicingV2InvoicesPost201ResponseInvoiceInformation.discriminator = undefined;
InvoicingV2InvoicesPost201ResponseInvoiceInformation.attributeTypeMap = [
    {
        "name": "invoiceNumber",
        "baseName": "invoiceNumber",
        "type": "string"
    },
    {
        "name": "description",
        "baseName": "description",
        "type": "string"
    },
    {
        "name": "dueDate",
        "baseName": "dueDate",
        "type": "string"
    },
    {
        "name": "expirationDate",
        "baseName": "expirationDate",
        "type": "string"
    },
    {
        "name": "allowPartialPayments",
        "baseName": "allowPartialPayments",
        "type": "boolean"
    },
    {
        "name": "paymentLink",
        "baseName": "paymentLink",
        "type": "string"
    },
    {
        "name": "deliveryMode",
        "baseName": "deliveryMode",
        "type": "string"
    },
    {
        "name": "customLabels",
        "baseName": "customLabels",
        "type": "Array<InvoicingV2InvoicesPost201ResponseInvoiceInformationCustomLabels>"
    }
];
class InvoicingV2InvoicesPost201ResponseInvoiceInformationCustomLabels {
    static getAttributeTypeMap() {
        return InvoicingV2InvoicesPost201ResponseInvoiceInformationCustomLabels.attributeTypeMap;
    }
}
exports.InvoicingV2InvoicesPost201ResponseInvoiceInformationCustomLabels = InvoicingV2InvoicesPost201ResponseInvoiceInformationCustomLabels;
InvoicingV2InvoicesPost201ResponseInvoiceInformationCustomLabels.discriminator = undefined;
InvoicingV2InvoicesPost201ResponseInvoiceInformationCustomLabels.attributeTypeMap = [
    {
        "name": "key",
        "baseName": "key",
        "type": "string"
    },
    {
        "name": "value",
        "baseName": "value",
        "type": "string"
    },
    {
        "name": "hidden",
        "baseName": "hidden",
        "type": "boolean"
    },
    {
        "name": "hiddenForInvoice",
        "baseName": "hiddenForInvoice",
        "type": "boolean"
    },
    {
        "name": "hiddenForItem",
        "baseName": "hiddenForItem",
        "type": "boolean"
    }
];
/**
* Contains all of the order-related fields, such as the amount and line item details.
*/
class InvoicingV2InvoicesPost201ResponseOrderInformation {
    static getAttributeTypeMap() {
        return InvoicingV2InvoicesPost201ResponseOrderInformation.attributeTypeMap;
    }
}
exports.InvoicingV2InvoicesPost201ResponseOrderInformation = InvoicingV2InvoicesPost201ResponseOrderInformation;
InvoicingV2InvoicesPost201ResponseOrderInformation.discriminator = undefined;
InvoicingV2InvoicesPost201ResponseOrderInformation.attributeTypeMap = [
    {
        "name": "amountDetails",
        "baseName": "amountDetails",
        "type": "InvoicingV2InvoicesPost201ResponseOrderInformationAmountDetails"
    },
    {
        "name": "lineItems",
        "baseName": "lineItems",
        "type": "Array<Invoicingv2invoicesOrderInformationLineItems>"
    }
];
/**
* Contains all of the amount-related fields.
*/
class InvoicingV2InvoicesPost201ResponseOrderInformationAmountDetails {
    static getAttributeTypeMap() {
        return InvoicingV2InvoicesPost201ResponseOrderInformationAmountDetails.attributeTypeMap;
    }
}
exports.InvoicingV2InvoicesPost201ResponseOrderInformationAmountDetails = InvoicingV2InvoicesPost201ResponseOrderInformationAmountDetails;
InvoicingV2InvoicesPost201ResponseOrderInformationAmountDetails.discriminator = undefined;
InvoicingV2InvoicesPost201ResponseOrderInformationAmountDetails.attributeTypeMap = [
    {
        "name": "totalAmount",
        "baseName": "totalAmount",
        "type": "string"
    },
    {
        "name": "currency",
        "baseName": "currency",
        "type": "string"
    },
    {
        "name": "balanceAmount",
        "baseName": "balanceAmount",
        "type": "string"
    },
    {
        "name": "discountAmount",
        "baseName": "discountAmount",
        "type": "string"
    },
    {
        "name": "discountPercent",
        "baseName": "discountPercent",
        "type": "string"
    },
    {
        "name": "subAmount",
        "baseName": "subAmount",
        "type": "string"
    },
    {
        "name": "minimumPartialAmount",
        "baseName": "minimumPartialAmount",
        "type": "string"
    },
    {
        "name": "taxDetails",
        "baseName": "taxDetails",
        "type": "Invoicingv2invoicesOrderInformationAmountDetailsTaxDetails"
    },
    {
        "name": "freight",
        "baseName": "freight",
        "type": "Invoicingv2invoicesOrderInformationAmountDetailsFreight"
    }
];
class InvoicingV2InvoicesPost202Response {
    static getAttributeTypeMap() {
        return InvoicingV2InvoicesPost202Response.attributeTypeMap;
    }
}
exports.InvoicingV2InvoicesPost202Response = InvoicingV2InvoicesPost202Response;
InvoicingV2InvoicesPost202Response.discriminator = undefined;
InvoicingV2InvoicesPost202Response.attributeTypeMap = [
    {
        "name": "submitTimeUtc",
        "baseName": "submitTimeUtc",
        "type": "string"
    },
    {
        "name": "status",
        "baseName": "status",
        "type": "string"
    },
    {
        "name": "reason",
        "baseName": "reason",
        "type": "string"
    },
    {
        "name": "message",
        "baseName": "message",
        "type": "string"
    },
    {
        "name": "details",
        "baseName": "details",
        "type": "Array<PtsV2PaymentsPost201ResponseErrorInformationDetails>"
    }
];
class InvoicingV2InvoicesPublish200Response {
    static getAttributeTypeMap() {
        return InvoicingV2InvoicesPublish200Response.attributeTypeMap;
    }
}
exports.InvoicingV2InvoicesPublish200Response = InvoicingV2InvoicesPublish200Response;
InvoicingV2InvoicesPublish200Response.discriminator = undefined;
InvoicingV2InvoicesPublish200Response.attributeTypeMap = [
    {
        "name": "links",
        "baseName": "_links",
        "type": "InvoicingV2InvoicesAllGet200ResponseLinks"
    },
    {
        "name": "id",
        "baseName": "id",
        "type": "string"
    },
    {
        "name": "submitTimeUtc",
        "baseName": "submitTimeUtc",
        "type": "string"
    },
    {
        "name": "status",
        "baseName": "status",
        "type": "string"
    },
    {
        "name": "customerInformation",
        "baseName": "customerInformation",
        "type": "Invoicingv2invoicesCustomerInformation"
    },
    {
        "name": "processingInformation",
        "baseName": "processingInformation",
        "type": "Invoicingv2invoicesProcessingInformation"
    },
    {
        "name": "invoiceInformation",
        "baseName": "invoiceInformation",
        "type": "InvoicingV2InvoicesPost201ResponseInvoiceInformation"
    },
    {
        "name": "orderInformation",
        "baseName": "orderInformation",
        "type": "InvoicingV2InvoicesPost201ResponseOrderInformation"
    }
];
class InvoicingV2InvoicesPut200Response {
    static getAttributeTypeMap() {
        return InvoicingV2InvoicesPut200Response.attributeTypeMap;
    }
}
exports.InvoicingV2InvoicesPut200Response = InvoicingV2InvoicesPut200Response;
InvoicingV2InvoicesPut200Response.discriminator = undefined;
InvoicingV2InvoicesPut200Response.attributeTypeMap = [
    {
        "name": "links",
        "baseName": "_links",
        "type": "InvoicingV2InvoicesAllGet200ResponseLinks"
    },
    {
        "name": "id",
        "baseName": "id",
        "type": "string"
    },
    {
        "name": "submitTimeUtc",
        "baseName": "submitTimeUtc",
        "type": "string"
    },
    {
        "name": "status",
        "baseName": "status",
        "type": "string"
    },
    {
        "name": "customerInformation",
        "baseName": "customerInformation",
        "type": "Invoicingv2invoicesCustomerInformation"
    },
    {
        "name": "processingInformation",
        "baseName": "processingInformation",
        "type": "Invoicingv2invoicesProcessingInformation"
    },
    {
        "name": "invoiceInformation",
        "baseName": "invoiceInformation",
        "type": "InvoicingV2InvoicesPost201ResponseInvoiceInformation"
    },
    {
        "name": "orderInformation",
        "baseName": "orderInformation",
        "type": "InvoicingV2InvoicesPost201ResponseOrderInformation"
    }
];
class InvoicingV2InvoicesSend200Response {
    static getAttributeTypeMap() {
        return InvoicingV2InvoicesSend200Response.attributeTypeMap;
    }
}
exports.InvoicingV2InvoicesSend200Response = InvoicingV2InvoicesSend200Response;
InvoicingV2InvoicesSend200Response.discriminator = undefined;
InvoicingV2InvoicesSend200Response.attributeTypeMap = [
    {
        "name": "links",
        "baseName": "_links",
        "type": "InvoicingV2InvoicesAllGet200ResponseLinks"
    },
    {
        "name": "id",
        "baseName": "id",
        "type": "string"
    },
    {
        "name": "submitTimeUtc",
        "baseName": "submitTimeUtc",
        "type": "string"
    },
    {
        "name": "status",
        "baseName": "status",
        "type": "string"
    },
    {
        "name": "customerInformation",
        "baseName": "customerInformation",
        "type": "Invoicingv2invoicesCustomerInformation"
    },
    {
        "name": "processingInformation",
        "baseName": "processingInformation",
        "type": "Invoicingv2invoicesProcessingInformation"
    },
    {
        "name": "invoiceInformation",
        "baseName": "invoiceInformation",
        "type": "InvoicingV2InvoicesPost201ResponseInvoiceInformation"
    },
    {
        "name": "orderInformation",
        "baseName": "orderInformation",
        "type": "InvoicingV2InvoicesPost201ResponseOrderInformation"
    }
];
class Invoicingv2invoiceSettingsInvoiceSettingsInformation {
    static getAttributeTypeMap() {
        return Invoicingv2invoiceSettingsInvoiceSettingsInformation.attributeTypeMap;
    }
}
exports.Invoicingv2invoiceSettingsInvoiceSettingsInformation = Invoicingv2invoiceSettingsInvoiceSettingsInformation;
Invoicingv2invoiceSettingsInvoiceSettingsInformation.discriminator = undefined;
Invoicingv2invoiceSettingsInvoiceSettingsInformation.attributeTypeMap = [
    {
        "name": "merchantLogo",
        "baseName": "merchantLogo",
        "type": "string"
    },
    {
        "name": "merchantDisplayName",
        "baseName": "merchantDisplayName",
        "type": "string"
    },
    {
        "name": "customEmailMessage",
        "baseName": "customEmailMessage",
        "type": "string"
    },
    {
        "name": "enableReminders",
        "baseName": "enableReminders",
        "type": "boolean"
    },
    {
        "name": "headerStyle",
        "baseName": "headerStyle",
        "type": "InvoicingV2InvoiceSettingsGet200ResponseInvoiceSettingsInformationHeaderStyle"
    },
    {
        "name": "deliveryLanguage",
        "baseName": "deliveryLanguage",
        "type": "string"
    },
    {
        "name": "defaultCurrencyCode",
        "baseName": "defaultCurrencyCode",
        "type": "string"
    },
    {
        "name": "payerAuthenticationInInvoicing",
        "baseName": "payerAuthenticationInInvoicing",
        "type": "string"
    },
    {
        "name": "showVatNumber",
        "baseName": "showVatNumber",
        "type": "boolean"
    },
    {
        "name": "vatRegistrationNumber",
        "baseName": "vatRegistrationNumber",
        "type": "string"
    },
    {
        "name": "shipTo",
        "baseName": "shipTo",
        "type": "boolean"
    },
    {
        "name": "phoneNumber",
        "baseName": "phoneNumber",
        "type": "boolean"
    },
    {
        "name": "email",
        "baseName": "email",
        "type": "boolean"
    },
    {
        "name": "enableMerchantEmailNotifications",
        "baseName": "enableMerchantEmailNotifications",
        "type": "boolean"
    },
    {
        "name": "customLabels",
        "baseName": "customLabels",
        "type": "Array<InvoicingV2InvoicesPost201ResponseInvoiceInformationCustomLabels>"
    }
];
class Invoicingv2invoicesClientReferenceInformation {
    static getAttributeTypeMap() {
        return Invoicingv2invoicesClientReferenceInformation.attributeTypeMap;
    }
}
exports.Invoicingv2invoicesClientReferenceInformation = Invoicingv2invoicesClientReferenceInformation;
Invoicingv2invoicesClientReferenceInformation.discriminator = undefined;
Invoicingv2invoicesClientReferenceInformation.attributeTypeMap = [
    {
        "name": "partner",
        "baseName": "partner",
        "type": "Invoicingv2invoicesClientReferenceInformationPartner"
    }
];
class Invoicingv2invoicesClientReferenceInformationPartner {
    static getAttributeTypeMap() {
        return Invoicingv2invoicesClientReferenceInformationPartner.attributeTypeMap;
    }
}
exports.Invoicingv2invoicesClientReferenceInformationPartner = Invoicingv2invoicesClientReferenceInformationPartner;
Invoicingv2invoicesClientReferenceInformationPartner.discriminator = undefined;
Invoicingv2invoicesClientReferenceInformationPartner.attributeTypeMap = [
    {
        "name": "developerId",
        "baseName": "developerId",
        "type": "string"
    },
    {
        "name": "solutionId",
        "baseName": "solutionId",
        "type": "string"
    }
];
/**
* Contains all of the customer-related fields for the invoice.
*/
class Invoicingv2invoicesCustomerInformation {
    static getAttributeTypeMap() {
        return Invoicingv2invoicesCustomerInformation.attributeTypeMap;
    }
}
exports.Invoicingv2invoicesCustomerInformation = Invoicingv2invoicesCustomerInformation;
Invoicingv2invoicesCustomerInformation.discriminator = undefined;
Invoicingv2invoicesCustomerInformation.attributeTypeMap = [
    {
        "name": "name",
        "baseName": "name",
        "type": "string"
    },
    {
        "name": "email",
        "baseName": "email",
        "type": "string"
    },
    {
        "name": "merchantCustomerId",
        "baseName": "merchantCustomerId",
        "type": "string"
    },
    {
        "name": "company",
        "baseName": "company",
        "type": "Invoicingv2invoicesCustomerInformationCompany"
    }
];
class Invoicingv2invoicesCustomerInformationCompany {
    static getAttributeTypeMap() {
        return Invoicingv2invoicesCustomerInformationCompany.attributeTypeMap;
    }
}
exports.Invoicingv2invoicesCustomerInformationCompany = Invoicingv2invoicesCustomerInformationCompany;
Invoicingv2invoicesCustomerInformationCompany.discriminator = undefined;
Invoicingv2invoicesCustomerInformationCompany.attributeTypeMap = [
    {
        "name": "name",
        "baseName": "name",
        "type": "string"
    }
];
/**
* Contains all of the invoice-specific fields, such as the invoice number and due date.
*/
class Invoicingv2invoicesInvoiceInformation {
    static getAttributeTypeMap() {
        return Invoicingv2invoicesInvoiceInformation.attributeTypeMap;
    }
}
exports.Invoicingv2invoicesInvoiceInformation = Invoicingv2invoicesInvoiceInformation;
Invoicingv2invoicesInvoiceInformation.discriminator = undefined;
Invoicingv2invoicesInvoiceInformation.attributeTypeMap = [
    {
        "name": "invoiceNumber",
        "baseName": "invoiceNumber",
        "type": "string"
    },
    {
        "name": "description",
        "baseName": "description",
        "type": "string"
    },
    {
        "name": "dueDate",
        "baseName": "dueDate",
        "type": "string"
    },
    {
        "name": "expirationDate",
        "baseName": "expirationDate",
        "type": "string"
    },
    {
        "name": "sendImmediately",
        "baseName": "sendImmediately",
        "type": "boolean"
    },
    {
        "name": "allowPartialPayments",
        "baseName": "allowPartialPayments",
        "type": "boolean"
    },
    {
        "name": "deliveryMode",
        "baseName": "deliveryMode",
        "type": "string"
    }
];
/**
* Contains all of the order-related fields, such as the amount and line item details.
*/
class Invoicingv2invoicesOrderInformation {
    static getAttributeTypeMap() {
        return Invoicingv2invoicesOrderInformation.attributeTypeMap;
    }
}
exports.Invoicingv2invoicesOrderInformation = Invoicingv2invoicesOrderInformation;
Invoicingv2invoicesOrderInformation.discriminator = undefined;
Invoicingv2invoicesOrderInformation.attributeTypeMap = [
    {
        "name": "amountDetails",
        "baseName": "amountDetails",
        "type": "Invoicingv2invoicesOrderInformationAmountDetails"
    },
    {
        "name": "lineItems",
        "baseName": "lineItems",
        "type": "Array<Invoicingv2invoicesOrderInformationLineItems>"
    }
];
/**
* Contains all of the amount-related fields.
*/
class Invoicingv2invoicesOrderInformationAmountDetails {
    static getAttributeTypeMap() {
        return Invoicingv2invoicesOrderInformationAmountDetails.attributeTypeMap;
    }
}
exports.Invoicingv2invoicesOrderInformationAmountDetails = Invoicingv2invoicesOrderInformationAmountDetails;
Invoicingv2invoicesOrderInformationAmountDetails.discriminator = undefined;
Invoicingv2invoicesOrderInformationAmountDetails.attributeTypeMap = [
    {
        "name": "totalAmount",
        "baseName": "totalAmount",
        "type": "string"
    },
    {
        "name": "currency",
        "baseName": "currency",
        "type": "string"
    },
    {
        "name": "discountAmount",
        "baseName": "discountAmount",
        "type": "string"
    },
    {
        "name": "discountPercent",
        "baseName": "discountPercent",
        "type": "string"
    },
    {
        "name": "subAmount",
        "baseName": "subAmount",
        "type": "string"
    },
    {
        "name": "minimumPartialAmount",
        "baseName": "minimumPartialAmount",
        "type": "string"
    },
    {
        "name": "taxDetails",
        "baseName": "taxDetails",
        "type": "Invoicingv2invoicesOrderInformationAmountDetailsTaxDetails"
    },
    {
        "name": "freight",
        "baseName": "freight",
        "type": "Invoicingv2invoicesOrderInformationAmountDetailsFreight"
    }
];
/**
* Contains all of the shipping-related fields for the order.
*/
class Invoicingv2invoicesOrderInformationAmountDetailsFreight {
    static getAttributeTypeMap() {
        return Invoicingv2invoicesOrderInformationAmountDetailsFreight.attributeTypeMap;
    }
}
exports.Invoicingv2invoicesOrderInformationAmountDetailsFreight = Invoicingv2invoicesOrderInformationAmountDetailsFreight;
Invoicingv2invoicesOrderInformationAmountDetailsFreight.discriminator = undefined;
Invoicingv2invoicesOrderInformationAmountDetailsFreight.attributeTypeMap = [
    {
        "name": "amount",
        "baseName": "amount",
        "type": "string"
    },
    {
        "name": "taxable",
        "baseName": "taxable",
        "type": "boolean"
    },
    {
        "name": "taxRate",
        "baseName": "taxRate",
        "type": "string"
    }
];
/**
* Contains all of the tax-related fields for the order.
*/
class Invoicingv2invoicesOrderInformationAmountDetailsTaxDetails {
    static getAttributeTypeMap() {
        return Invoicingv2invoicesOrderInformationAmountDetailsTaxDetails.attributeTypeMap;
    }
}
exports.Invoicingv2invoicesOrderInformationAmountDetailsTaxDetails = Invoicingv2invoicesOrderInformationAmountDetailsTaxDetails;
Invoicingv2invoicesOrderInformationAmountDetailsTaxDetails.discriminator = undefined;
Invoicingv2invoicesOrderInformationAmountDetailsTaxDetails.attributeTypeMap = [
    {
        "name": "type",
        "baseName": "type",
        "type": "string"
    },
    {
        "name": "amount",
        "baseName": "amount",
        "type": "string"
    },
    {
        "name": "rate",
        "baseName": "rate",
        "type": "string"
    }
];
/**
* Line item from the order.
*/
class Invoicingv2invoicesOrderInformationLineItems {
    static getAttributeTypeMap() {
        return Invoicingv2invoicesOrderInformationLineItems.attributeTypeMap;
    }
}
exports.Invoicingv2invoicesOrderInformationLineItems = Invoicingv2invoicesOrderInformationLineItems;
Invoicingv2invoicesOrderInformationLineItems.discriminator = undefined;
Invoicingv2invoicesOrderInformationLineItems.attributeTypeMap = [
    {
        "name": "productSku",
        "baseName": "productSku",
        "type": "string"
    },
    {
        "name": "productName",
        "baseName": "productName",
        "type": "string"
    },
    {
        "name": "quantity",
        "baseName": "quantity",
        "type": "number"
    },
    {
        "name": "unitPrice",
        "baseName": "unitPrice",
        "type": "string"
    },
    {
        "name": "discountAmount",
        "baseName": "discountAmount",
        "type": "string"
    },
    {
        "name": "discountPercent",
        "baseName": "discountPercent",
        "type": "string"
    },
    {
        "name": "taxAmount",
        "baseName": "taxAmount",
        "type": "string"
    },
    {
        "name": "taxRate",
        "baseName": "taxRate",
        "type": "string"
    },
    {
        "name": "totalAmount",
        "baseName": "totalAmount",
        "type": "string"
    }
];
/**
* Contains processing information, such as collection details.
*/
class Invoicingv2invoicesProcessingInformation {
    static getAttributeTypeMap() {
        return Invoicingv2invoicesProcessingInformation.attributeTypeMap;
    }
}
exports.Invoicingv2invoicesProcessingInformation = Invoicingv2invoicesProcessingInformation;
Invoicingv2invoicesProcessingInformation.discriminator = undefined;
Invoicingv2invoicesProcessingInformation.attributeTypeMap = [
    {
        "name": "requestPhone",
        "baseName": "requestPhone",
        "type": "boolean"
    },
    {
        "name": "requestShipping",
        "baseName": "requestShipping",
        "type": "boolean"
    }
];
/**
* Contains the updatable invoice information.
*/
class Invoicingv2invoicesidInvoiceInformation {
    static getAttributeTypeMap() {
        return Invoicingv2invoicesidInvoiceInformation.attributeTypeMap;
    }
}
exports.Invoicingv2invoicesidInvoiceInformation = Invoicingv2invoicesidInvoiceInformation;
Invoicingv2invoicesidInvoiceInformation.discriminator = undefined;
Invoicingv2invoicesidInvoiceInformation.attributeTypeMap = [
    {
        "name": "description",
        "baseName": "description",
        "type": "string"
    },
    {
        "name": "dueDate",
        "baseName": "dueDate",
        "type": "string"
    },
    {
        "name": "expirationDate",
        "baseName": "expirationDate",
        "type": "string"
    },
    {
        "name": "sendImmediately",
        "baseName": "sendImmediately",
        "type": "boolean"
    },
    {
        "name": "allowPartialPayments",
        "baseName": "allowPartialPayments",
        "type": "boolean"
    },
    {
        "name": "deliveryMode",
        "baseName": "deliveryMode",
        "type": "string"
    }
];
/**
* Contains all of the order-related fields, such as the amount and line item details.
*/
class Iplv2paymentlinksOrderInformation {
    static getAttributeTypeMap() {
        return Iplv2paymentlinksOrderInformation.attributeTypeMap;
    }
}
exports.Iplv2paymentlinksOrderInformation = Iplv2paymentlinksOrderInformation;
Iplv2paymentlinksOrderInformation.discriminator = undefined;
Iplv2paymentlinksOrderInformation.attributeTypeMap = [
    {
        "name": "amountDetails",
        "baseName": "amountDetails",
        "type": "Iplv2paymentlinksOrderInformationAmountDetails"
    },
    {
        "name": "lineItems",
        "baseName": "lineItems",
        "type": "Array<Iplv2paymentlinksOrderInformationLineItems>"
    }
];
/**
* Contains all of the amount-related fields.
*/
class Iplv2paymentlinksOrderInformationAmountDetails {
    static getAttributeTypeMap() {
        return Iplv2paymentlinksOrderInformationAmountDetails.attributeTypeMap;
    }
}
exports.Iplv2paymentlinksOrderInformationAmountDetails = Iplv2paymentlinksOrderInformationAmountDetails;
Iplv2paymentlinksOrderInformationAmountDetails.discriminator = undefined;
Iplv2paymentlinksOrderInformationAmountDetails.attributeTypeMap = [
    {
        "name": "totalAmount",
        "baseName": "totalAmount",
        "type": "string"
    },
    {
        "name": "currency",
        "baseName": "currency",
        "type": "string"
    },
    {
        "name": "maxAmount",
        "baseName": "maxAmount",
        "type": "string"
    },
    {
        "name": "minAmount",
        "baseName": "minAmount",
        "type": "string"
    }
];
/**
* Line item from the order.
*/
class Iplv2paymentlinksOrderInformationLineItems {
    static getAttributeTypeMap() {
        return Iplv2paymentlinksOrderInformationLineItems.attributeTypeMap;
    }
}
exports.Iplv2paymentlinksOrderInformationLineItems = Iplv2paymentlinksOrderInformationLineItems;
Iplv2paymentlinksOrderInformationLineItems.discriminator = undefined;
Iplv2paymentlinksOrderInformationLineItems.attributeTypeMap = [
    {
        "name": "productSku",
        "baseName": "productSku",
        "type": "string"
    },
    {
        "name": "productName",
        "baseName": "productName",
        "type": "string"
    },
    {
        "name": "quantity",
        "baseName": "quantity",
        "type": "number"
    },
    {
        "name": "unitPrice",
        "baseName": "unitPrice",
        "type": "string"
    },
    {
        "name": "productDescription",
        "baseName": "productDescription",
        "type": "string"
    }
];
/**
* Contains processing information, such as the type and collection details.
*/
class Iplv2paymentlinksProcessingInformation {
    static getAttributeTypeMap() {
        return Iplv2paymentlinksProcessingInformation.attributeTypeMap;
    }
}
exports.Iplv2paymentlinksProcessingInformation = Iplv2paymentlinksProcessingInformation;
Iplv2paymentlinksProcessingInformation.discriminator = undefined;
Iplv2paymentlinksProcessingInformation.attributeTypeMap = [
    {
        "name": "linkType",
        "baseName": "linkType",
        "type": "Iplv2paymentlinksProcessingInformation.LinkTypeEnum"
    },
    {
        "name": "requestPhone",
        "baseName": "requestPhone",
        "type": "boolean"
    },
    {
        "name": "requestShipping",
        "baseName": "requestShipping",
        "type": "boolean"
    }
];
(function (Iplv2paymentlinksProcessingInformation) {
    let LinkTypeEnum;
    (function (LinkTypeEnum) {
        LinkTypeEnum[LinkTypeEnum["PURCHASE"] = 'PURCHASE'] = "PURCHASE";
        LinkTypeEnum[LinkTypeEnum["DONATION"] = 'DONATION'] = "DONATION";
    })(LinkTypeEnum = Iplv2paymentlinksProcessingInformation.LinkTypeEnum || (Iplv2paymentlinksProcessingInformation.LinkTypeEnum = {}));
})(Iplv2paymentlinksProcessingInformation = exports.Iplv2paymentlinksProcessingInformation || (exports.Iplv2paymentlinksProcessingInformation = {}));
/**
* Contains link specific detail.
*/
class Iplv2paymentlinksPurchaseInformation {
    static getAttributeTypeMap() {
        return Iplv2paymentlinksPurchaseInformation.attributeTypeMap;
    }
}
exports.Iplv2paymentlinksPurchaseInformation = Iplv2paymentlinksPurchaseInformation;
Iplv2paymentlinksPurchaseInformation.discriminator = undefined;
Iplv2paymentlinksPurchaseInformation.attributeTypeMap = [
    {
        "name": "purchaseNumber",
        "baseName": "purchaseNumber",
        "type": "string"
    }
];
/**
* Contains all of the order-related fields, such as the amount and line item details.
*/
class Iplv2paymentlinksidOrderInformation {
    static getAttributeTypeMap() {
        return Iplv2paymentlinksidOrderInformation.attributeTypeMap;
    }
}
exports.Iplv2paymentlinksidOrderInformation = Iplv2paymentlinksidOrderInformation;
Iplv2paymentlinksidOrderInformation.discriminator = undefined;
Iplv2paymentlinksidOrderInformation.attributeTypeMap = [
    {
        "name": "amountDetails",
        "baseName": "amountDetails",
        "type": "PblPaymentLinksAllGet200ResponseOrderInformationAmountDetails"
    },
    {
        "name": "lineItems",
        "baseName": "lineItems",
        "type": "Array<Iplv2paymentlinksOrderInformationLineItems>"
    }
];
/**
* Contains processing information, such as the type and collection details.
*/
class Iplv2paymentlinksidProcessingInformation {
    static getAttributeTypeMap() {
        return Iplv2paymentlinksidProcessingInformation.attributeTypeMap;
    }
}
exports.Iplv2paymentlinksidProcessingInformation = Iplv2paymentlinksidProcessingInformation;
Iplv2paymentlinksidProcessingInformation.discriminator = undefined;
Iplv2paymentlinksidProcessingInformation.attributeTypeMap = [
    {
        "name": "linkType",
        "baseName": "linkType",
        "type": "Iplv2paymentlinksidProcessingInformation.LinkTypeEnum"
    },
    {
        "name": "requestPhone",
        "baseName": "requestPhone",
        "type": "boolean"
    },
    {
        "name": "requestShipping",
        "baseName": "requestShipping",
        "type": "boolean"
    }
];
(function (Iplv2paymentlinksidProcessingInformation) {
    let LinkTypeEnum;
    (function (LinkTypeEnum) {
        LinkTypeEnum[LinkTypeEnum["PURCHASE"] = 'PURCHASE'] = "PURCHASE";
        LinkTypeEnum[LinkTypeEnum["DONATION"] = 'DONATION'] = "DONATION";
    })(LinkTypeEnum = Iplv2paymentlinksidProcessingInformation.LinkTypeEnum || (Iplv2paymentlinksidProcessingInformation.LinkTypeEnum = {}));
})(Iplv2paymentlinksidProcessingInformation = exports.Iplv2paymentlinksidProcessingInformation || (exports.Iplv2paymentlinksidProcessingInformation = {}));
/**
* Contains link specific detail.
*/
class Iplv2paymentlinksidPurchaseInformation {
    static getAttributeTypeMap() {
        return Iplv2paymentlinksidPurchaseInformation.attributeTypeMap;
    }
}
exports.Iplv2paymentlinksidPurchaseInformation = Iplv2paymentlinksidPurchaseInformation;
Iplv2paymentlinksidPurchaseInformation.discriminator = undefined;
Iplv2paymentlinksidPurchaseInformation.attributeTypeMap = [
    {
        "name": "purchaseNumber",
        "baseName": "purchaseNumber",
        "type": "string"
    }
];
/**
* Client object
*/
class Kmsegressv2keysasymClientReferenceInformation {
    static getAttributeTypeMap() {
        return Kmsegressv2keysasymClientReferenceInformation.attributeTypeMap;
    }
}
exports.Kmsegressv2keysasymClientReferenceInformation = Kmsegressv2keysasymClientReferenceInformation;
Kmsegressv2keysasymClientReferenceInformation.discriminator = undefined;
Kmsegressv2keysasymClientReferenceInformation.attributeTypeMap = [
    {
        "name": "code",
        "baseName": "code",
        "type": "string"
    }
];
/**
* Egress Asymmetric  Key Information Request
*/
class Kmsegressv2keysasymKeyInformation {
    static getAttributeTypeMap() {
        return Kmsegressv2keysasymKeyInformation.attributeTypeMap;
    }
}
exports.Kmsegressv2keysasymKeyInformation = Kmsegressv2keysasymKeyInformation;
Kmsegressv2keysasymKeyInformation.discriminator = undefined;
Kmsegressv2keysasymKeyInformation.attributeTypeMap = [
    {
        "name": "provider",
        "baseName": "provider",
        "type": "string"
    },
    {
        "name": "tenant",
        "baseName": "tenant",
        "type": "string"
    },
    {
        "name": "keyType",
        "baseName": "keyType",
        "type": "string"
    },
    {
        "name": "organizationId",
        "baseName": "organizationId",
        "type": "string"
    },
    {
        "name": "pub",
        "baseName": "pub",
        "type": "string"
    },
    {
        "name": "keyId",
        "baseName": "keyId",
        "type": "string"
    },
    {
        "name": "pvt",
        "baseName": "pvt",
        "type": "string"
    },
    {
        "name": "status",
        "baseName": "status",
        "type": "string"
    },
    {
        "name": "expiryDuration",
        "baseName": "expiryDuration",
        "type": "string"
    }
];
/**
* Object for client references.
*/
class Kmsegressv2keyssymClientReferenceInformation {
    static getAttributeTypeMap() {
        return Kmsegressv2keyssymClientReferenceInformation.attributeTypeMap;
    }
}
exports.Kmsegressv2keyssymClientReferenceInformation = Kmsegressv2keyssymClientReferenceInformation;
Kmsegressv2keyssymClientReferenceInformation.discriminator = undefined;
Kmsegressv2keyssymClientReferenceInformation.attributeTypeMap = [
    {
        "name": "code",
        "baseName": "code",
        "type": "string"
    }
];
/**
* Egress Key Information Request
*/
class Kmsegressv2keyssymKeyInformation {
    static getAttributeTypeMap() {
        return Kmsegressv2keyssymKeyInformation.attributeTypeMap;
    }
}
exports.Kmsegressv2keyssymKeyInformation = Kmsegressv2keyssymKeyInformation;
Kmsegressv2keyssymKeyInformation.discriminator = undefined;
Kmsegressv2keyssymKeyInformation.attributeTypeMap = [
    {
        "name": "provider",
        "baseName": "provider",
        "type": "string"
    },
    {
        "name": "tenant",
        "baseName": "tenant",
        "type": "string"
    },
    {
        "name": "keyType",
        "baseName": "keyType",
        "type": "string"
    },
    {
        "name": "organizationId",
        "baseName": "organizationId",
        "type": "string"
    },
    {
        "name": "clientKeyId",
        "baseName": "clientKeyId",
        "type": "string"
    },
    {
        "name": "keyId",
        "baseName": "keyId",
        "type": "string"
    },
    {
        "name": "key",
        "baseName": "key",
        "type": "string"
    },
    {
        "name": "status",
        "baseName": "status",
        "type": "string"
    },
    {
        "name": "expiryDuration",
        "baseName": "expiryDuration",
        "type": "string"
    }
];
class MerchantInitiatedTransactionObject {
    static getAttributeTypeMap() {
        return MerchantInitiatedTransactionObject.attributeTypeMap;
    }
}
exports.MerchantInitiatedTransactionObject = MerchantInitiatedTransactionObject;
MerchantInitiatedTransactionObject.discriminator = undefined;
MerchantInitiatedTransactionObject.attributeTypeMap = [
    {
        "name": "reason",
        "baseName": "reason",
        "type": "string"
    },
    {
        "name": "previousTransactionId",
        "baseName": "previousTransactionId",
        "type": "string"
    },
    {
        "name": "originalAuthorizedAmount",
        "baseName": "originalAuthorizedAmount",
        "type": "string"
    },
    {
        "name": "agreementId",
        "baseName": "agreementId",
        "type": "string"
    }
];
class Microformv2sessionsTransientTokenResponseOptions {
    static getAttributeTypeMap() {
        return Microformv2sessionsTransientTokenResponseOptions.attributeTypeMap;
    }
}
exports.Microformv2sessionsTransientTokenResponseOptions = Microformv2sessionsTransientTokenResponseOptions;
Microformv2sessionsTransientTokenResponseOptions.discriminator = undefined;
Microformv2sessionsTransientTokenResponseOptions.attributeTypeMap = [
    {
        "name": "includeCardPrefix",
        "baseName": "includeCardPrefix",
        "type": "boolean"
    }
];
class MitReversalRequest {
    static getAttributeTypeMap() {
        return MitReversalRequest.attributeTypeMap;
    }
}
exports.MitReversalRequest = MitReversalRequest;
MitReversalRequest.discriminator = undefined;
MitReversalRequest.attributeTypeMap = [
    {
        "name": "clientReferenceInformation",
        "baseName": "clientReferenceInformation",
        "type": "Ptsv2paymentsClientReferenceInformation"
    },
    {
        "name": "reversalInformation",
        "baseName": "reversalInformation",
        "type": "Ptsv2paymentsidreversalsReversalInformation"
    },
    {
        "name": "processingInformation",
        "baseName": "processingInformation",
        "type": "Ptsv2paymentsidreversalsProcessingInformation"
    },
    {
        "name": "orderInformation",
        "baseName": "orderInformation",
        "type": "Ptsv2paymentsidreversalsOrderInformation"
    },
    {
        "name": "pointOfSaleInformation",
        "baseName": "pointOfSaleInformation",
        "type": "Ptsv2paymentsidreversalsPointOfSaleInformation"
    }
];
class MitVoidRequest {
    static getAttributeTypeMap() {
        return MitVoidRequest.attributeTypeMap;
    }
}
exports.MitVoidRequest = MitVoidRequest;
MitVoidRequest.discriminator = undefined;
MitVoidRequest.attributeTypeMap = [
    {
        "name": "clientReferenceInformation",
        "baseName": "clientReferenceInformation",
        "type": "Ptsv2paymentsClientReferenceInformation"
    },
    {
        "name": "paymentInformation",
        "baseName": "paymentInformation",
        "type": "Ptsv2paymentsidvoidsPaymentInformation"
    },
    {
        "name": "orderInformation",
        "baseName": "orderInformation",
        "type": "Ptsv2paymentsidvoidsOrderInformation"
    },
    {
        "name": "processingInformation",
        "baseName": "processingInformation",
        "type": "Ptsv2voidsProcessingInformation"
    }
];
class ModifyBillingAgreement {
    static getAttributeTypeMap() {
        return ModifyBillingAgreement.attributeTypeMap;
    }
}
exports.ModifyBillingAgreement = ModifyBillingAgreement;
ModifyBillingAgreement.discriminator = undefined;
ModifyBillingAgreement.attributeTypeMap = [
    {
        "name": "agreementInformation",
        "baseName": "agreementInformation",
        "type": "Ptsv2billingagreementsidAgreementInformation"
    },
    {
        "name": "clientReferenceInformation",
        "baseName": "clientReferenceInformation",
        "type": "Ptsv2billingagreementsClientReferenceInformation"
    },
    {
        "name": "aggregatorInformation",
        "baseName": "aggregatorInformation",
        "type": "Ptsv2billingagreementsAggregatorInformation"
    },
    {
        "name": "consumerAuthenticationInformation",
        "baseName": "consumerAuthenticationInformation",
        "type": "Ptsv2billingagreementsConsumerAuthenticationInformation"
    },
    {
        "name": "deviceInformation",
        "baseName": "deviceInformation",
        "type": "Ptsv2billingagreementsDeviceInformation"
    },
    {
        "name": "installmentInformation",
        "baseName": "installmentInformation",
        "type": "Ptsv2billingagreementsInstallmentInformation"
    },
    {
        "name": "merchantInformation",
        "baseName": "merchantInformation",
        "type": "Ptsv2billingagreementsMerchantInformation"
    },
    {
        "name": "orderInformation",
        "baseName": "orderInformation",
        "type": "Ptsv2billingagreementsOrderInformation"
    },
    {
        "name": "paymentInformation",
        "baseName": "paymentInformation",
        "type": "Ptsv2billingagreementsPaymentInformation"
    },
    {
        "name": "processingInformation",
        "baseName": "processingInformation",
        "type": "Ptsv2billingagreementsidProcessingInformation"
    },
    {
        "name": "buyerInformation",
        "baseName": "buyerInformation",
        "type": "Ptsv2billingagreementsidBuyerInformation"
    }
];
class NetworkTokenEnrollment {
    static getAttributeTypeMap() {
        return NetworkTokenEnrollment.attributeTypeMap;
    }
}
exports.NetworkTokenEnrollment = NetworkTokenEnrollment;
NetworkTokenEnrollment.discriminator = undefined;
NetworkTokenEnrollment.attributeTypeMap = [
    {
        "name": "businessInformation",
        "baseName": "businessInformation",
        "type": "TmsBusinessInformation"
    },
    {
        "name": "networkTokenServices",
        "baseName": "networkTokenServices",
        "type": "NetworkTokenServicesEnablement"
    }
];
class NetworkTokenServicesEnablement {
    static getAttributeTypeMap() {
        return NetworkTokenServicesEnablement.attributeTypeMap;
    }
}
exports.NetworkTokenServicesEnablement = NetworkTokenServicesEnablement;
NetworkTokenServicesEnablement.discriminator = undefined;
NetworkTokenServicesEnablement.attributeTypeMap = [
    {
        "name": "visaTokenService",
        "baseName": "visaTokenService",
        "type": "NetworkTokenServicesEnablementVisaTokenService"
    },
    {
        "name": "mastercardDigitalEnablementService",
        "baseName": "mastercardDigitalEnablementService",
        "type": "NetworkTokenServicesEnablementMastercardDigitalEnablementService"
    }
];
class NetworkTokenServicesEnablementMastercardDigitalEnablementService {
    static getAttributeTypeMap() {
        return NetworkTokenServicesEnablementMastercardDigitalEnablementService.attributeTypeMap;
    }
}
exports.NetworkTokenServicesEnablementMastercardDigitalEnablementService = NetworkTokenServicesEnablementMastercardDigitalEnablementService;
NetworkTokenServicesEnablementMastercardDigitalEnablementService.discriminator = undefined;
NetworkTokenServicesEnablementMastercardDigitalEnablementService.attributeTypeMap = [
    {
        "name": "enrollment",
        "baseName": "enrollment",
        "type": "boolean"
    }
];
class NetworkTokenServicesEnablementVisaTokenService {
    static getAttributeTypeMap() {
        return NetworkTokenServicesEnablementVisaTokenService.attributeTypeMap;
    }
}
exports.NetworkTokenServicesEnablementVisaTokenService = NetworkTokenServicesEnablementVisaTokenService;
NetworkTokenServicesEnablementVisaTokenService.discriminator = undefined;
NetworkTokenServicesEnablementVisaTokenService.attributeTypeMap = [
    {
        "name": "enrollment",
        "baseName": "enrollment",
        "type": "boolean"
    }
];
class Notificationsubscriptionsv2productsorganizationIdEventTypes {
    static getAttributeTypeMap() {
        return Notificationsubscriptionsv2productsorganizationIdEventTypes.attributeTypeMap;
    }
}
exports.Notificationsubscriptionsv2productsorganizationIdEventTypes = Notificationsubscriptionsv2productsorganizationIdEventTypes;
Notificationsubscriptionsv2productsorganizationIdEventTypes.discriminator = undefined;
Notificationsubscriptionsv2productsorganizationIdEventTypes.attributeTypeMap = [
    {
        "name": "eventName",
        "baseName": "eventName",
        "type": "string"
    },
    {
        "name": "displayName",
        "baseName": "displayName",
        "type": "string"
    },
    {
        "name": "frequency",
        "baseName": "frequency",
        "type": "number"
    },
    {
        "name": "timeSensitivity",
        "baseName": "timeSensitivity",
        "type": "boolean"
    },
    {
        "name": "payloadEncryption",
        "baseName": "payloadEncryption",
        "type": "boolean"
    }
];
class Notificationsubscriptionsv2webhooksProducts {
    static getAttributeTypeMap() {
        return Notificationsubscriptionsv2webhooksProducts.attributeTypeMap;
    }
}
exports.Notificationsubscriptionsv2webhooksProducts = Notificationsubscriptionsv2webhooksProducts;
Notificationsubscriptionsv2webhooksProducts.discriminator = undefined;
Notificationsubscriptionsv2webhooksProducts.attributeTypeMap = [
    {
        "name": "productId",
        "baseName": "productId",
        "type": "string"
    },
    {
        "name": "eventTypes",
        "baseName": "eventTypes",
        "type": "Array<string>"
    }
];
class Notificationsubscriptionsv2webhooksProducts1 {
    static getAttributeTypeMap() {
        return Notificationsubscriptionsv2webhooksProducts1.attributeTypeMap;
    }
}
exports.Notificationsubscriptionsv2webhooksProducts1 = Notificationsubscriptionsv2webhooksProducts1;
Notificationsubscriptionsv2webhooksProducts1.discriminator = undefined;
Notificationsubscriptionsv2webhooksProducts1.attributeTypeMap = [
    {
        "name": "productId",
        "baseName": "productId",
        "type": "string"
    },
    {
        "name": "eventTypes",
        "baseName": "eventTypes",
        "type": "Array<string>"
    }
];
/**
* Retry policy for the individual webhooks that are a part of your subscription. If a message fails to deliver, it will execute through this retry policy.  Automatic suspend and resume:  If you experience downtime and have `deactivateFlag = true` any new messages will be held in a \"SUSPENDED\" status. When your healthCheckUrl returns healthy again, the subscription will automatically be re-enabled and your messages will be sent. We will ping your healthCheckUrl routinely using a POST call with an empty payload to check availability. If your endpoint returns an unhealthy status of != 200, we will check the healthCheckUrl at a more frequent rate until it is healthy again.  If you experience downtime and have `deactivateFlag = false` and your message exhausts all retry attempts the message will go to a \"FAILED\" status. Support will be notified and will reach out to suggest you execute the \"REPLAY\" endpoint at a later date when your server is healthy.   Reference the below values for formulas and calculations related to the frequency of retries depending on algorithm and configuration.
*/
class Notificationsubscriptionsv2webhooksRetryPolicy {
    static getAttributeTypeMap() {
        return Notificationsubscriptionsv2webhooksRetryPolicy.attributeTypeMap;
    }
}
exports.Notificationsubscriptionsv2webhooksRetryPolicy = Notificationsubscriptionsv2webhooksRetryPolicy;
Notificationsubscriptionsv2webhooksRetryPolicy.discriminator = undefined;
Notificationsubscriptionsv2webhooksRetryPolicy.attributeTypeMap = [
    {
        "name": "algorithm",
        "baseName": "algorithm",
        "type": "string"
    },
    {
        "name": "firstRetry",
        "baseName": "firstRetry",
        "type": "number"
    },
    {
        "name": "interval",
        "baseName": "interval",
        "type": "number"
    },
    {
        "name": "numberOfRetries",
        "baseName": "numberOfRetries",
        "type": "number"
    },
    {
        "name": "deactivateFlag",
        "baseName": "deactivateFlag",
        "type": "string"
    },
    {
        "name": "repeatSequenceCount",
        "baseName": "repeatSequenceCount",
        "type": "number"
    },
    {
        "name": "repeatSequenceWaitTime",
        "baseName": "repeatSequenceWaitTime",
        "type": "number"
    },
    {
        "name": "additionalAttributes",
        "baseName": "additionalAttributes",
        "type": "Array<{ [key: string]: string; }>"
    }
];
/**
* The security option to authenticate with your API or client server.
*/
class Notificationsubscriptionsv2webhooksSecurityPolicy {
    static getAttributeTypeMap() {
        return Notificationsubscriptionsv2webhooksSecurityPolicy.attributeTypeMap;
    }
}
exports.Notificationsubscriptionsv2webhooksSecurityPolicy = Notificationsubscriptionsv2webhooksSecurityPolicy;
Notificationsubscriptionsv2webhooksSecurityPolicy.discriminator = undefined;
Notificationsubscriptionsv2webhooksSecurityPolicy.attributeTypeMap = [
    {
        "name": "securityType",
        "baseName": "securityType",
        "type": "Notificationsubscriptionsv2webhooksSecurityPolicy.SecurityTypeEnum"
    },
    {
        "name": "config",
        "baseName": "config",
        "type": "Notificationsubscriptionsv2webhooksSecurityPolicyConfig"
    }
];
(function (Notificationsubscriptionsv2webhooksSecurityPolicy) {
    let SecurityTypeEnum;
    (function (SecurityTypeEnum) {
        SecurityTypeEnum[SecurityTypeEnum["Key"] = 'key'] = "Key";
        SecurityTypeEnum[SecurityTypeEnum["OAuth"] = 'oAuth'] = "OAuth";
        SecurityTypeEnum[SecurityTypeEnum["OAuthJWT"] = 'oAuth_JWT'] = "OAuthJWT";
    })(SecurityTypeEnum = Notificationsubscriptionsv2webhooksSecurityPolicy.SecurityTypeEnum || (Notificationsubscriptionsv2webhooksSecurityPolicy.SecurityTypeEnum = {}));
})(Notificationsubscriptionsv2webhooksSecurityPolicy = exports.Notificationsubscriptionsv2webhooksSecurityPolicy || (exports.Notificationsubscriptionsv2webhooksSecurityPolicy = {}));
/**
* Optional configuration object for if your API or server requires oAuth for an incoming webhook.
*/
class Notificationsubscriptionsv2webhooksSecurityPolicyConfig {
    static getAttributeTypeMap() {
        return Notificationsubscriptionsv2webhooksSecurityPolicyConfig.attributeTypeMap;
    }
}
exports.Notificationsubscriptionsv2webhooksSecurityPolicyConfig = Notificationsubscriptionsv2webhooksSecurityPolicyConfig;
Notificationsubscriptionsv2webhooksSecurityPolicyConfig.discriminator = undefined;
Notificationsubscriptionsv2webhooksSecurityPolicyConfig.attributeTypeMap = [
    {
        "name": "oAuthURL",
        "baseName": "oAuthURL",
        "type": "string"
    },
    {
        "name": "oAuthTokenType",
        "baseName": "oAuthTokenType",
        "type": "Notificationsubscriptionsv2webhooksSecurityPolicyConfig.OAuthTokenTypeEnum"
    },
    {
        "name": "additionalConfig",
        "baseName": "additionalConfig",
        "type": "Notificationsubscriptionsv2webhooksSecurityPolicyConfigAdditionalConfig"
    }
];
(function (Notificationsubscriptionsv2webhooksSecurityPolicyConfig) {
    let OAuthTokenTypeEnum;
    (function (OAuthTokenTypeEnum) {
        OAuthTokenTypeEnum[OAuthTokenTypeEnum["Bearer"] = 'Bearer'] = "Bearer";
    })(OAuthTokenTypeEnum = Notificationsubscriptionsv2webhooksSecurityPolicyConfig.OAuthTokenTypeEnum || (Notificationsubscriptionsv2webhooksSecurityPolicyConfig.OAuthTokenTypeEnum = {}));
})(Notificationsubscriptionsv2webhooksSecurityPolicyConfig = exports.Notificationsubscriptionsv2webhooksSecurityPolicyConfig || (exports.Notificationsubscriptionsv2webhooksSecurityPolicyConfig = {}));
/**
* Additional, free form configuration data.
*/
class Notificationsubscriptionsv2webhooksSecurityPolicyConfigAdditionalConfig {
    static getAttributeTypeMap() {
        return Notificationsubscriptionsv2webhooksSecurityPolicyConfigAdditionalConfig.attributeTypeMap;
    }
}
exports.Notificationsubscriptionsv2webhooksSecurityPolicyConfigAdditionalConfig = Notificationsubscriptionsv2webhooksSecurityPolicyConfigAdditionalConfig;
Notificationsubscriptionsv2webhooksSecurityPolicyConfigAdditionalConfig.discriminator = undefined;
Notificationsubscriptionsv2webhooksSecurityPolicyConfigAdditionalConfig.attributeTypeMap = [
    {
        "name": "aud",
        "baseName": "aud",
        "type": "string"
    },
    {
        "name": "clientId",
        "baseName": "client_id",
        "type": "string"
    },
    {
        "name": "keyId",
        "baseName": "keyId",
        "type": "string"
    },
    {
        "name": "scope",
        "baseName": "scope",
        "type": "string"
    }
];
class OctCreatePaymentRequest {
    static getAttributeTypeMap() {
        return OctCreatePaymentRequest.attributeTypeMap;
    }
}
exports.OctCreatePaymentRequest = OctCreatePaymentRequest;
OctCreatePaymentRequest.discriminator = undefined;
OctCreatePaymentRequest.attributeTypeMap = [
    {
        "name": "clientReferenceInformation",
        "baseName": "clientReferenceInformation",
        "type": "Ptsv2payoutsClientReferenceInformation"
    },
    {
        "name": "orderInformation",
        "baseName": "orderInformation",
        "type": "Ptsv2payoutsOrderInformation"
    },
    {
        "name": "merchantInformation",
        "baseName": "merchantInformation",
        "type": "Ptsv2payoutsMerchantInformation"
    },
    {
        "name": "recipientInformation",
        "baseName": "recipientInformation",
        "type": "Ptsv2payoutsRecipientInformation"
    },
    {
        "name": "senderInformation",
        "baseName": "senderInformation",
        "type": "Ptsv2payoutsSenderInformation"
    },
    {
        "name": "processingInformation",
        "baseName": "processingInformation",
        "type": "Ptsv2payoutsProcessingInformation"
    },
    {
        "name": "paymentInformation",
        "baseName": "paymentInformation",
        "type": "Ptsv2payoutsPaymentInformation"
    },
    {
        "name": "aggregatorInformation",
        "baseName": "aggregatorInformation",
        "type": "Ptsv2payoutsAggregatorInformation"
    }
];
class OrderPaymentRequest {
    static getAttributeTypeMap() {
        return OrderPaymentRequest.attributeTypeMap;
    }
}
exports.OrderPaymentRequest = OrderPaymentRequest;
OrderPaymentRequest.discriminator = undefined;
OrderPaymentRequest.attributeTypeMap = [
    {
        "name": "clientReferenceInformation",
        "baseName": "clientReferenceInformation",
        "type": "PtsV2IncrementalAuthorizationPatch201ResponseClientReferenceInformation"
    },
    {
        "name": "processingInformation",
        "baseName": "processingInformation",
        "type": "Ptsv2paymentreferencesidintentsProcessingInformation"
    },
    {
        "name": "paymentInformation",
        "baseName": "paymentInformation",
        "type": "Ptsv2paymentreferencesidintentsPaymentInformation"
    },
    {
        "name": "orderInformation",
        "baseName": "orderInformation",
        "type": "Ptsv2paymentreferencesidintentsOrderInformation"
    }
];
class PatchCustomerPaymentInstrumentRequest {
    static getAttributeTypeMap() {
        return PatchCustomerPaymentInstrumentRequest.attributeTypeMap;
    }
}
exports.PatchCustomerPaymentInstrumentRequest = PatchCustomerPaymentInstrumentRequest;
PatchCustomerPaymentInstrumentRequest.discriminator = undefined;
PatchCustomerPaymentInstrumentRequest.attributeTypeMap = [
    {
        "name": "links",
        "baseName": "_links",
        "type": "Tmsv2customersEmbeddedDefaultPaymentInstrumentLinks"
    },
    {
        "name": "id",
        "baseName": "id",
        "type": "string"
    },
    {
        "name": "object",
        "baseName": "object",
        "type": "string"
    },
    {
        "name": "_default",
        "baseName": "default",
        "type": "boolean"
    },
    {
        "name": "state",
        "baseName": "state",
        "type": "string"
    },
    {
        "name": "type",
        "baseName": "type",
        "type": "string"
    },
    {
        "name": "bankAccount",
        "baseName": "bankAccount",
        "type": "Tmsv2customersEmbeddedDefaultPaymentInstrumentBankAccount"
    },
    {
        "name": "card",
        "baseName": "card",
        "type": "Tmsv2customersEmbeddedDefaultPaymentInstrumentCard"
    },
    {
        "name": "buyerInformation",
        "baseName": "buyerInformation",
        "type": "Tmsv2customersEmbeddedDefaultPaymentInstrumentBuyerInformation"
    },
    {
        "name": "billTo",
        "baseName": "billTo",
        "type": "Tmsv2customersEmbeddedDefaultPaymentInstrumentBillTo"
    },
    {
        "name": "processingInformation",
        "baseName": "processingInformation",
        "type": "TmsPaymentInstrumentProcessingInfo"
    },
    {
        "name": "merchantInformation",
        "baseName": "merchantInformation",
        "type": "Tmsv2customersEmbeddedDefaultPaymentInstrumentMerchantInformation"
    },
    {
        "name": "instrumentIdentifier",
        "baseName": "instrumentIdentifier",
        "type": "Tmsv2customersEmbeddedDefaultPaymentInstrumentInstrumentIdentifier"
    },
    {
        "name": "metadata",
        "baseName": "metadata",
        "type": "Tmsv2customersEmbeddedDefaultPaymentInstrumentMetadata"
    },
    {
        "name": "embedded",
        "baseName": "_embedded",
        "type": "Tmsv2customersEmbeddedDefaultPaymentInstrumentEmbedded"
    }
];
class PatchCustomerRequest {
    static getAttributeTypeMap() {
        return PatchCustomerRequest.attributeTypeMap;
    }
}
exports.PatchCustomerRequest = PatchCustomerRequest;
PatchCustomerRequest.discriminator = undefined;
PatchCustomerRequest.attributeTypeMap = [
    {
        "name": "links",
        "baseName": "_links",
        "type": "Tmsv2customersLinks"
    },
    {
        "name": "id",
        "baseName": "id",
        "type": "string"
    },
    {
        "name": "objectInformation",
        "baseName": "objectInformation",
        "type": "Tmsv2customersObjectInformation"
    },
    {
        "name": "buyerInformation",
        "baseName": "buyerInformation",
        "type": "Tmsv2customersBuyerInformation"
    },
    {
        "name": "clientReferenceInformation",
        "baseName": "clientReferenceInformation",
        "type": "Tmsv2customersClientReferenceInformation"
    },
    {
        "name": "merchantDefinedInformation",
        "baseName": "merchantDefinedInformation",
        "type": "Array<Tmsv2customersMerchantDefinedInformation>"
    },
    {
        "name": "defaultPaymentInstrument",
        "baseName": "defaultPaymentInstrument",
        "type": "Tmsv2customersDefaultPaymentInstrument"
    },
    {
        "name": "defaultShippingAddress",
        "baseName": "defaultShippingAddress",
        "type": "Tmsv2customersDefaultShippingAddress"
    },
    {
        "name": "metadata",
        "baseName": "metadata",
        "type": "Tmsv2customersMetadata"
    },
    {
        "name": "embedded",
        "baseName": "_embedded",
        "type": "Tmsv2customersEmbedded"
    }
];
class PatchCustomerShippingAddressRequest {
    static getAttributeTypeMap() {
        return PatchCustomerShippingAddressRequest.attributeTypeMap;
    }
}
exports.PatchCustomerShippingAddressRequest = PatchCustomerShippingAddressRequest;
PatchCustomerShippingAddressRequest.discriminator = undefined;
PatchCustomerShippingAddressRequest.attributeTypeMap = [
    {
        "name": "links",
        "baseName": "_links",
        "type": "Tmsv2customersEmbeddedDefaultShippingAddressLinks"
    },
    {
        "name": "id",
        "baseName": "id",
        "type": "string"
    },
    {
        "name": "_default",
        "baseName": "default",
        "type": "boolean"
    },
    {
        "name": "shipTo",
        "baseName": "shipTo",
        "type": "Tmsv2customersEmbeddedDefaultShippingAddressShipTo"
    },
    {
        "name": "metadata",
        "baseName": "metadata",
        "type": "Tmsv2customersEmbeddedDefaultShippingAddressMetadata"
    }
];
class PatchInstrumentIdentifierRequest {
    static getAttributeTypeMap() {
        return PatchInstrumentIdentifierRequest.attributeTypeMap;
    }
}
exports.PatchInstrumentIdentifierRequest = PatchInstrumentIdentifierRequest;
PatchInstrumentIdentifierRequest.discriminator = undefined;
PatchInstrumentIdentifierRequest.attributeTypeMap = [
    {
        "name": "links",
        "baseName": "_links",
        "type": "TmsEmbeddedInstrumentIdentifierLinks"
    },
    {
        "name": "id",
        "baseName": "id",
        "type": "string"
    },
    {
        "name": "object",
        "baseName": "object",
        "type": "string"
    },
    {
        "name": "state",
        "baseName": "state",
        "type": "string"
    },
    {
        "name": "type",
        "baseName": "type",
        "type": "string"
    },
    {
        "name": "tokenProvisioningInformation",
        "baseName": "tokenProvisioningInformation",
        "type": "Ptsv2paymentsTokenInformationTokenProvisioningInformation"
    },
    {
        "name": "card",
        "baseName": "card",
        "type": "TmsEmbeddedInstrumentIdentifierCard"
    },
    {
        "name": "bankAccount",
        "baseName": "bankAccount",
        "type": "TmsEmbeddedInstrumentIdentifierBankAccount"
    },
    {
        "name": "tokenizedCard",
        "baseName": "tokenizedCard",
        "type": "Tmsv2TokenizedCard"
    },
    {
        "name": "issuer",
        "baseName": "issuer",
        "type": "TmsEmbeddedInstrumentIdentifierIssuer"
    },
    {
        "name": "processingInformation",
        "baseName": "processingInformation",
        "type": "TmsEmbeddedInstrumentIdentifierProcessingInformation"
    },
    {
        "name": "billTo",
        "baseName": "billTo",
        "type": "TmsEmbeddedInstrumentIdentifierBillTo"
    },
    {
        "name": "metadata",
        "baseName": "metadata",
        "type": "TmsEmbeddedInstrumentIdentifierMetadata"
    },
    {
        "name": "embedded",
        "baseName": "_embedded",
        "type": "TmsEmbeddedInstrumentIdentifierEmbedded"
    }
];
class PatchPaymentInstrumentRequest {
    static getAttributeTypeMap() {
        return PatchPaymentInstrumentRequest.attributeTypeMap;
    }
}
exports.PatchPaymentInstrumentRequest = PatchPaymentInstrumentRequest;
PatchPaymentInstrumentRequest.discriminator = undefined;
PatchPaymentInstrumentRequest.attributeTypeMap = [
    {
        "name": "links",
        "baseName": "_links",
        "type": "Tmsv2customersEmbeddedDefaultPaymentInstrumentLinks"
    },
    {
        "name": "id",
        "baseName": "id",
        "type": "string"
    },
    {
        "name": "object",
        "baseName": "object",
        "type": "string"
    },
    {
        "name": "_default",
        "baseName": "default",
        "type": "boolean"
    },
    {
        "name": "state",
        "baseName": "state",
        "type": "string"
    },
    {
        "name": "type",
        "baseName": "type",
        "type": "string"
    },
    {
        "name": "bankAccount",
        "baseName": "bankAccount",
        "type": "Tmsv2customersEmbeddedDefaultPaymentInstrumentBankAccount"
    },
    {
        "name": "card",
        "baseName": "card",
        "type": "Tmsv2customersEmbeddedDefaultPaymentInstrumentCard"
    },
    {
        "name": "buyerInformation",
        "baseName": "buyerInformation",
        "type": "Tmsv2customersEmbeddedDefaultPaymentInstrumentBuyerInformation"
    },
    {
        "name": "billTo",
        "baseName": "billTo",
        "type": "Tmsv2customersEmbeddedDefaultPaymentInstrumentBillTo"
    },
    {
        "name": "processingInformation",
        "baseName": "processingInformation",
        "type": "TmsPaymentInstrumentProcessingInfo"
    },
    {
        "name": "merchantInformation",
        "baseName": "merchantInformation",
        "type": "Tmsv2customersEmbeddedDefaultPaymentInstrumentMerchantInformation"
    },
    {
        "name": "instrumentIdentifier",
        "baseName": "instrumentIdentifier",
        "type": "Tmsv2customersEmbeddedDefaultPaymentInstrumentInstrumentIdentifier"
    },
    {
        "name": "metadata",
        "baseName": "metadata",
        "type": "Tmsv2customersEmbeddedDefaultPaymentInstrumentMetadata"
    },
    {
        "name": "embedded",
        "baseName": "_embedded",
        "type": "Tmsv2customersEmbeddedDefaultPaymentInstrumentEmbedded"
    }
];
class PayerAuthConfig {
    static getAttributeTypeMap() {
        return PayerAuthConfig.attributeTypeMap;
    }
}
exports.PayerAuthConfig = PayerAuthConfig;
PayerAuthConfig.discriminator = undefined;
PayerAuthConfig.attributeTypeMap = [
    {
        "name": "cardTypes",
        "baseName": "cardTypes",
        "type": "PayerAuthConfigCardTypes"
    }
];
class PayerAuthConfigCardTypes {
    static getAttributeTypeMap() {
        return PayerAuthConfigCardTypes.attributeTypeMap;
    }
}
exports.PayerAuthConfigCardTypes = PayerAuthConfigCardTypes;
PayerAuthConfigCardTypes.discriminator = undefined;
PayerAuthConfigCardTypes.attributeTypeMap = [
    {
        "name": "verifiedByVisa",
        "baseName": "verifiedByVisa",
        "type": "PayerAuthConfigCardTypesVerifiedByVisa"
    },
    {
        "name": "masterCardSecureCode",
        "baseName": "masterCardSecureCode",
        "type": "PayerAuthConfigCardTypesVerifiedByVisa"
    },
    {
        "name": "amexSafeKey",
        "baseName": "amexSafeKey",
        "type": "PayerAuthConfigCardTypesVerifiedByVisa"
    },
    {
        "name": "jCBJSecure",
        "baseName": "jCBJSecure",
        "type": "PayerAuthConfigCardTypesJCBJSecure"
    },
    {
        "name": "dinersClubInternationalProtectBuy",
        "baseName": "dinersClubInternationalProtectBuy",
        "type": "PayerAuthConfigCardTypesVerifiedByVisa"
    },
    {
        "name": "ELO",
        "baseName": "ELO",
        "type": "PayerAuthConfigCardTypesVerifiedByVisa"
    },
    {
        "name": "UPI",
        "baseName": "UPI",
        "type": "PayerAuthConfigCardTypesVerifiedByVisa"
    },
    {
        "name": "CB",
        "baseName": "CB",
        "type": "PayerAuthConfigCardTypesCB"
    }
];
class PayerAuthConfigCardTypesCB {
    static getAttributeTypeMap() {
        return PayerAuthConfigCardTypesCB.attributeTypeMap;
    }
}
exports.PayerAuthConfigCardTypesCB = PayerAuthConfigCardTypesCB;
PayerAuthConfigCardTypesCB.discriminator = undefined;
PayerAuthConfigCardTypesCB.attributeTypeMap = [
    {
        "name": "requestorId",
        "baseName": "requestorId",
        "type": "string"
    },
    {
        "name": "enabled",
        "baseName": "enabled",
        "type": "boolean"
    },
    {
        "name": "currencies",
        "baseName": "currencies",
        "type": "Array<PayerAuthConfigCardTypesVerifiedByVisaCurrencies>"
    }
];
class PayerAuthConfigCardTypesJCBJSecure {
    static getAttributeTypeMap() {
        return PayerAuthConfigCardTypesJCBJSecure.attributeTypeMap;
    }
}
exports.PayerAuthConfigCardTypesJCBJSecure = PayerAuthConfigCardTypesJCBJSecure;
PayerAuthConfigCardTypesJCBJSecure.discriminator = undefined;
PayerAuthConfigCardTypesJCBJSecure.attributeTypeMap = [
    {
        "name": "securePasswordForJCB",
        "baseName": "securePasswordForJCB",
        "type": "string"
    },
    {
        "name": "enabled",
        "baseName": "enabled",
        "type": "boolean"
    },
    {
        "name": "currencies",
        "baseName": "currencies",
        "type": "Array<PayerAuthConfigCardTypesVerifiedByVisaCurrencies>"
    }
];
class PayerAuthConfigCardTypesVerifiedByVisa {
    static getAttributeTypeMap() {
        return PayerAuthConfigCardTypesVerifiedByVisa.attributeTypeMap;
    }
}
exports.PayerAuthConfigCardTypesVerifiedByVisa = PayerAuthConfigCardTypesVerifiedByVisa;
PayerAuthConfigCardTypesVerifiedByVisa.discriminator = undefined;
PayerAuthConfigCardTypesVerifiedByVisa.attributeTypeMap = [
    {
        "name": "enabled",
        "baseName": "enabled",
        "type": "boolean"
    },
    {
        "name": "currencies",
        "baseName": "currencies",
        "type": "Array<PayerAuthConfigCardTypesVerifiedByVisaCurrencies>"
    }
];
class PayerAuthConfigCardTypesVerifiedByVisaCurrencies {
    static getAttributeTypeMap() {
        return PayerAuthConfigCardTypesVerifiedByVisaCurrencies.attributeTypeMap;
    }
}
exports.PayerAuthConfigCardTypesVerifiedByVisaCurrencies = PayerAuthConfigCardTypesVerifiedByVisaCurrencies;
PayerAuthConfigCardTypesVerifiedByVisaCurrencies.discriminator = undefined;
PayerAuthConfigCardTypesVerifiedByVisaCurrencies.attributeTypeMap = [
    {
        "name": "currencyCodes",
        "baseName": "currencyCodes",
        "type": "Array<string>"
    },
    {
        "name": "acquirerId",
        "baseName": "acquirerId",
        "type": "string"
    },
    {
        "name": "processorMerchantId",
        "baseName": "processorMerchantId",
        "type": "string"
    }
];
class PayerAuthSetupRequest {
    static getAttributeTypeMap() {
        return PayerAuthSetupRequest.attributeTypeMap;
    }
}
exports.PayerAuthSetupRequest = PayerAuthSetupRequest;
PayerAuthSetupRequest.discriminator = undefined;
PayerAuthSetupRequest.attributeTypeMap = [
    {
        "name": "clientReferenceInformation",
        "baseName": "clientReferenceInformation",
        "type": "Riskv1authenticationsetupsClientReferenceInformation"
    },
    {
        "name": "paymentInformation",
        "baseName": "paymentInformation",
        "type": "Riskv1authenticationsetupsPaymentInformation"
    },
    {
        "name": "processingInformation",
        "baseName": "processingInformation",
        "type": "Riskv1authenticationsetupsProcessingInformation"
    },
    {
        "name": "tokenInformation",
        "baseName": "tokenInformation",
        "type": "Riskv1authenticationsetupsTokenInformation"
    }
];
class PaymentInstrumentList {
    static getAttributeTypeMap() {
        return PaymentInstrumentList.attributeTypeMap;
    }
}
exports.PaymentInstrumentList = PaymentInstrumentList;
PaymentInstrumentList.discriminator = undefined;
PaymentInstrumentList.attributeTypeMap = [
    {
        "name": "links",
        "baseName": "_links",
        "type": "PaymentInstrumentListLinks"
    },
    {
        "name": "offset",
        "baseName": "offset",
        "type": "number"
    },
    {
        "name": "limit",
        "baseName": "limit",
        "type": "number"
    },
    {
        "name": "count",
        "baseName": "count",
        "type": "number"
    },
    {
        "name": "total",
        "baseName": "total",
        "type": "number"
    },
    {
        "name": "embedded",
        "baseName": "_embedded",
        "type": "PaymentInstrumentListEmbedded"
    }
];
class PaymentInstrumentList1 {
    static getAttributeTypeMap() {
        return PaymentInstrumentList1.attributeTypeMap;
    }
}
exports.PaymentInstrumentList1 = PaymentInstrumentList1;
PaymentInstrumentList1.discriminator = undefined;
PaymentInstrumentList1.attributeTypeMap = [
    {
        "name": "links",
        "baseName": "_links",
        "type": "PaymentInstrumentListLinks"
    },
    {
        "name": "offset",
        "baseName": "offset",
        "type": "number"
    },
    {
        "name": "limit",
        "baseName": "limit",
        "type": "number"
    },
    {
        "name": "count",
        "baseName": "count",
        "type": "number"
    },
    {
        "name": "total",
        "baseName": "total",
        "type": "number"
    },
    {
        "name": "embedded",
        "baseName": "_embedded",
        "type": "PaymentInstrumentList1Embedded"
    }
];
/**
* Payment Instrument Resources.
*/
class PaymentInstrumentList1Embedded {
    static getAttributeTypeMap() {
        return PaymentInstrumentList1Embedded.attributeTypeMap;
    }
}
exports.PaymentInstrumentList1Embedded = PaymentInstrumentList1Embedded;
PaymentInstrumentList1Embedded.discriminator = undefined;
PaymentInstrumentList1Embedded.attributeTypeMap = [
    {
        "name": "paymentInstruments",
        "baseName": "paymentInstruments",
        "type": "Array<PaymentInstrumentList1EmbeddedPaymentInstruments>"
    }
];
/**
* Additional resources for the Payment Instrument.
*/
class PaymentInstrumentList1EmbeddedEmbedded {
    static getAttributeTypeMap() {
        return PaymentInstrumentList1EmbeddedEmbedded.attributeTypeMap;
    }
}
exports.PaymentInstrumentList1EmbeddedEmbedded = PaymentInstrumentList1EmbeddedEmbedded;
PaymentInstrumentList1EmbeddedEmbedded.discriminator = undefined;
PaymentInstrumentList1EmbeddedEmbedded.attributeTypeMap = [
    {
        "name": "instrumentIdentifier",
        "baseName": "instrumentIdentifier",
        "type": "PatchInstrumentIdentifierRequest"
    }
];
class PaymentInstrumentList1EmbeddedPaymentInstruments {
    static getAttributeTypeMap() {
        return PaymentInstrumentList1EmbeddedPaymentInstruments.attributeTypeMap;
    }
}
exports.PaymentInstrumentList1EmbeddedPaymentInstruments = PaymentInstrumentList1EmbeddedPaymentInstruments;
PaymentInstrumentList1EmbeddedPaymentInstruments.discriminator = undefined;
PaymentInstrumentList1EmbeddedPaymentInstruments.attributeTypeMap = [
    {
        "name": "links",
        "baseName": "_links",
        "type": "Tmsv2customersEmbeddedDefaultPaymentInstrumentLinks"
    },
    {
        "name": "id",
        "baseName": "id",
        "type": "string"
    },
    {
        "name": "object",
        "baseName": "object",
        "type": "string"
    },
    {
        "name": "_default",
        "baseName": "default",
        "type": "boolean"
    },
    {
        "name": "state",
        "baseName": "state",
        "type": "string"
    },
    {
        "name": "type",
        "baseName": "type",
        "type": "string"
    },
    {
        "name": "bankAccount",
        "baseName": "bankAccount",
        "type": "Tmsv2customersEmbeddedDefaultPaymentInstrumentBankAccount"
    },
    {
        "name": "card",
        "baseName": "card",
        "type": "Tmsv2customersEmbeddedDefaultPaymentInstrumentCard"
    },
    {
        "name": "buyerInformation",
        "baseName": "buyerInformation",
        "type": "Tmsv2customersEmbeddedDefaultPaymentInstrumentBuyerInformation"
    },
    {
        "name": "billTo",
        "baseName": "billTo",
        "type": "Tmsv2customersEmbeddedDefaultPaymentInstrumentBillTo"
    },
    {
        "name": "processingInformation",
        "baseName": "processingInformation",
        "type": "TmsPaymentInstrumentProcessingInfo"
    },
    {
        "name": "merchantInformation",
        "baseName": "merchantInformation",
        "type": "Tmsv2customersEmbeddedDefaultPaymentInstrumentMerchantInformation"
    },
    {
        "name": "instrumentIdentifier",
        "baseName": "instrumentIdentifier",
        "type": "Tmsv2customersEmbeddedDefaultPaymentInstrumentInstrumentIdentifier"
    },
    {
        "name": "metadata",
        "baseName": "metadata",
        "type": "Tmsv2customersEmbeddedDefaultPaymentInstrumentMetadata"
    },
    {
        "name": "embedded",
        "baseName": "_embedded",
        "type": "PaymentInstrumentList1EmbeddedEmbedded"
    }
];
/**
* Payment Instrument Resources.
*/
class PaymentInstrumentListEmbedded {
    static getAttributeTypeMap() {
        return PaymentInstrumentListEmbedded.attributeTypeMap;
    }
}
exports.PaymentInstrumentListEmbedded = PaymentInstrumentListEmbedded;
PaymentInstrumentListEmbedded.discriminator = undefined;
PaymentInstrumentListEmbedded.attributeTypeMap = [
    {
        "name": "paymentInstruments",
        "baseName": "paymentInstruments",
        "type": "Array<Tmsv2customersEmbeddedDefaultPaymentInstrument>"
    }
];
class PaymentInstrumentListLinks {
    static getAttributeTypeMap() {
        return PaymentInstrumentListLinks.attributeTypeMap;
    }
}
exports.PaymentInstrumentListLinks = PaymentInstrumentListLinks;
PaymentInstrumentListLinks.discriminator = undefined;
PaymentInstrumentListLinks.attributeTypeMap = [
    {
        "name": "self",
        "baseName": "self",
        "type": "PaymentInstrumentListLinksSelf"
    },
    {
        "name": "first",
        "baseName": "first",
        "type": "PaymentInstrumentListLinksFirst"
    },
    {
        "name": "prev",
        "baseName": "prev",
        "type": "PaymentInstrumentListLinksPrev"
    },
    {
        "name": "next",
        "baseName": "next",
        "type": "PaymentInstrumentListLinksNext"
    },
    {
        "name": "last",
        "baseName": "last",
        "type": "PaymentInstrumentListLinksLast"
    }
];
class PaymentInstrumentListLinksFirst {
    static getAttributeTypeMap() {
        return PaymentInstrumentListLinksFirst.attributeTypeMap;
    }
}
exports.PaymentInstrumentListLinksFirst = PaymentInstrumentListLinksFirst;
PaymentInstrumentListLinksFirst.discriminator = undefined;
PaymentInstrumentListLinksFirst.attributeTypeMap = [
    {
        "name": "href",
        "baseName": "href",
        "type": "string"
    }
];
class PaymentInstrumentListLinksLast {
    static getAttributeTypeMap() {
        return PaymentInstrumentListLinksLast.attributeTypeMap;
    }
}
exports.PaymentInstrumentListLinksLast = PaymentInstrumentListLinksLast;
PaymentInstrumentListLinksLast.discriminator = undefined;
PaymentInstrumentListLinksLast.attributeTypeMap = [
    {
        "name": "href",
        "baseName": "href",
        "type": "string"
    }
];
class PaymentInstrumentListLinksNext {
    static getAttributeTypeMap() {
        return PaymentInstrumentListLinksNext.attributeTypeMap;
    }
}
exports.PaymentInstrumentListLinksNext = PaymentInstrumentListLinksNext;
PaymentInstrumentListLinksNext.discriminator = undefined;
PaymentInstrumentListLinksNext.attributeTypeMap = [
    {
        "name": "href",
        "baseName": "href",
        "type": "string"
    }
];
class PaymentInstrumentListLinksPrev {
    static getAttributeTypeMap() {
        return PaymentInstrumentListLinksPrev.attributeTypeMap;
    }
}
exports.PaymentInstrumentListLinksPrev = PaymentInstrumentListLinksPrev;
PaymentInstrumentListLinksPrev.discriminator = undefined;
PaymentInstrumentListLinksPrev.attributeTypeMap = [
    {
        "name": "href",
        "baseName": "href",
        "type": "string"
    }
];
class PaymentInstrumentListLinksSelf {
    static getAttributeTypeMap() {
        return PaymentInstrumentListLinksSelf.attributeTypeMap;
    }
}
exports.PaymentInstrumentListLinksSelf = PaymentInstrumentListLinksSelf;
PaymentInstrumentListLinksSelf.discriminator = undefined;
PaymentInstrumentListLinksSelf.attributeTypeMap = [
    {
        "name": "href",
        "baseName": "href",
        "type": "string"
    }
];
class PaymentsProducts {
    static getAttributeTypeMap() {
        return PaymentsProducts.attributeTypeMap;
    }
}
exports.PaymentsProducts = PaymentsProducts;
PaymentsProducts.discriminator = undefined;
PaymentsProducts.attributeTypeMap = [
    {
        "name": "cardProcessing",
        "baseName": "cardProcessing",
        "type": "PaymentsProductsCardProcessing"
    },
    {
        "name": "alternativePaymentMethods",
        "baseName": "alternativePaymentMethods",
        "type": "PaymentsProductsAlternativePaymentMethods"
    },
    {
        "name": "cardPresentConnect",
        "baseName": "cardPresentConnect",
        "type": "PaymentsProductsCardPresentConnect"
    },
    {
        "name": "cybsReadyTerminal",
        "baseName": "cybsReadyTerminal",
        "type": "PaymentsProductsCybsReadyTerminal"
    },
    {
        "name": "eCheck",
        "baseName": "eCheck",
        "type": "PaymentsProductsECheck"
    },
    {
        "name": "payerAuthentication",
        "baseName": "payerAuthentication",
        "type": "PaymentsProductsPayerAuthentication"
    },
    {
        "name": "digitalPayments",
        "baseName": "digitalPayments",
        "type": "PaymentsProductsDigitalPayments"
    },
    {
        "name": "secureAcceptance",
        "baseName": "secureAcceptance",
        "type": "PaymentsProductsSecureAcceptance"
    },
    {
        "name": "virtualTerminal",
        "baseName": "virtualTerminal",
        "type": "PaymentsProductsVirtualTerminal"
    },
    {
        "name": "currencyConversion",
        "baseName": "currencyConversion",
        "type": "PaymentsProductsCurrencyConversion"
    },
    {
        "name": "tax",
        "baseName": "tax",
        "type": "PaymentsProductsTax"
    },
    {
        "name": "customerInvoicing",
        "baseName": "customerInvoicing",
        "type": "PaymentsProductsTax"
    },
    {
        "name": "recurringBilling",
        "baseName": "recurringBilling",
        "type": "PaymentsProductsTax"
    },
    {
        "name": "paymentOrchestration",
        "baseName": "paymentOrchestration",
        "type": "PaymentsProductsTax"
    },
    {
        "name": "payouts",
        "baseName": "payouts",
        "type": "PaymentsProductsPayouts"
    },
    {
        "name": "differentialFee",
        "baseName": "differentialFee",
        "type": "PaymentsProductsDifferentialFee"
    },
    {
        "name": "payByLink",
        "baseName": "payByLink",
        "type": "PaymentsProductsTax"
    },
    {
        "name": "unifiedCheckout",
        "baseName": "unifiedCheckout",
        "type": "PaymentsProductsUnifiedCheckout"
    },
    {
        "name": "receivablesManager",
        "baseName": "receivablesManager",
        "type": "PaymentsProductsTax"
    },
    {
        "name": "serviceFee",
        "baseName": "serviceFee",
        "type": "PaymentsProductsServiceFee"
    }
];
class PaymentsProductsAlternativePaymentMethods {
    static getAttributeTypeMap() {
        return PaymentsProductsAlternativePaymentMethods.attributeTypeMap;
    }
}
exports.PaymentsProductsAlternativePaymentMethods = PaymentsProductsAlternativePaymentMethods;
PaymentsProductsAlternativePaymentMethods.discriminator = undefined;
PaymentsProductsAlternativePaymentMethods.attributeTypeMap = [
    {
        "name": "subscriptionInformation",
        "baseName": "subscriptionInformation",
        "type": "PaymentsProductsAlternativePaymentMethodsSubscriptionInformation"
    },
    {
        "name": "configurationInformation",
        "baseName": "configurationInformation",
        "type": "PaymentsProductsAlternativePaymentMethodsConfigurationInformation"
    }
];
class PaymentsProductsAlternativePaymentMethodsConfigurationInformation {
    static getAttributeTypeMap() {
        return PaymentsProductsAlternativePaymentMethodsConfigurationInformation.attributeTypeMap;
    }
}
exports.PaymentsProductsAlternativePaymentMethodsConfigurationInformation = PaymentsProductsAlternativePaymentMethodsConfigurationInformation;
PaymentsProductsAlternativePaymentMethodsConfigurationInformation.discriminator = undefined;
PaymentsProductsAlternativePaymentMethodsConfigurationInformation.attributeTypeMap = [
    {
        "name": "configurations",
        "baseName": "configurations",
        "type": "PaymentsProductsAlternativePaymentMethodsConfigurationInformationConfigurations"
    }
];
class PaymentsProductsAlternativePaymentMethodsConfigurationInformationConfigurations {
    static getAttributeTypeMap() {
        return PaymentsProductsAlternativePaymentMethodsConfigurationInformationConfigurations.attributeTypeMap;
    }
}
exports.PaymentsProductsAlternativePaymentMethodsConfigurationInformationConfigurations = PaymentsProductsAlternativePaymentMethodsConfigurationInformationConfigurations;
PaymentsProductsAlternativePaymentMethodsConfigurationInformationConfigurations.discriminator = undefined;
PaymentsProductsAlternativePaymentMethodsConfigurationInformationConfigurations.attributeTypeMap = [
    {
        "name": "merchantCategoryCode",
        "baseName": "merchantCategoryCode",
        "type": "string"
    },
    {
        "name": "processors",
        "baseName": "processors",
        "type": "{ [key: string]: PaymentsProductsAlternativePaymentMethodsConfigurationInformationConfigurationsProcessors; }"
    }
];
/**
* Additional configuration for the payment method.
*/
class PaymentsProductsAlternativePaymentMethodsConfigurationInformationConfigurationsAdditionalConfigurations {
    static getAttributeTypeMap() {
        return PaymentsProductsAlternativePaymentMethodsConfigurationInformationConfigurationsAdditionalConfigurations.attributeTypeMap;
    }
}
exports.PaymentsProductsAlternativePaymentMethodsConfigurationInformationConfigurationsAdditionalConfigurations = PaymentsProductsAlternativePaymentMethodsConfigurationInformationConfigurationsAdditionalConfigurations;
PaymentsProductsAlternativePaymentMethodsConfigurationInformationConfigurationsAdditionalConfigurations.discriminator = undefined;
PaymentsProductsAlternativePaymentMethodsConfigurationInformationConfigurationsAdditionalConfigurations.attributeTypeMap = [
    {
        "name": "key",
        "baseName": "key",
        "type": "string"
    },
    {
        "name": "value",
        "baseName": "value",
        "type": "string"
    }
];
/**
* Payment method configuration for the product.
*/
class PaymentsProductsAlternativePaymentMethodsConfigurationInformationConfigurationsPaymentMethods {
    static getAttributeTypeMap() {
        return PaymentsProductsAlternativePaymentMethodsConfigurationInformationConfigurationsPaymentMethods.attributeTypeMap;
    }
}
exports.PaymentsProductsAlternativePaymentMethodsConfigurationInformationConfigurationsPaymentMethods = PaymentsProductsAlternativePaymentMethodsConfigurationInformationConfigurationsPaymentMethods;
PaymentsProductsAlternativePaymentMethodsConfigurationInformationConfigurationsPaymentMethods.discriminator = undefined;
PaymentsProductsAlternativePaymentMethodsConfigurationInformationConfigurationsPaymentMethods.attributeTypeMap = [
    {
        "name": "merchantId",
        "baseName": "merchantId",
        "type": "string"
    },
    {
        "name": "logoUrl",
        "baseName": "logoUrl",
        "type": "string"
    },
    {
        "name": "redirectSuccessUrl",
        "baseName": "redirectSuccessUrl",
        "type": "string"
    },
    {
        "name": "redirectCancelUrl",
        "baseName": "redirectCancelUrl",
        "type": "string"
    },
    {
        "name": "redirectFailureUrl",
        "baseName": "redirectFailureUrl",
        "type": "string"
    },
    {
        "name": "additionalConfigurations",
        "baseName": "additionalConfigurations",
        "type": "Array<PaymentsProductsAlternativePaymentMethodsConfigurationInformationConfigurationsAdditionalConfigurations>"
    }
];
/**
* Processor configuration for the product.
*/
class PaymentsProductsAlternativePaymentMethodsConfigurationInformationConfigurationsProcessors {
    static getAttributeTypeMap() {
        return PaymentsProductsAlternativePaymentMethodsConfigurationInformationConfigurationsProcessors.attributeTypeMap;
    }
}
exports.PaymentsProductsAlternativePaymentMethodsConfigurationInformationConfigurationsProcessors = PaymentsProductsAlternativePaymentMethodsConfigurationInformationConfigurationsProcessors;
PaymentsProductsAlternativePaymentMethodsConfigurationInformationConfigurationsProcessors.discriminator = undefined;
PaymentsProductsAlternativePaymentMethodsConfigurationInformationConfigurationsProcessors.attributeTypeMap = [
    {
        "name": "paymentMethods",
        "baseName": "paymentMethods",
        "type": "{ [key: string]: PaymentsProductsAlternativePaymentMethodsConfigurationInformationConfigurationsPaymentMethods; }"
    }
];
class PaymentsProductsAlternativePaymentMethodsSubscriptionInformation {
    static getAttributeTypeMap() {
        return PaymentsProductsAlternativePaymentMethodsSubscriptionInformation.attributeTypeMap;
    }
}
exports.PaymentsProductsAlternativePaymentMethodsSubscriptionInformation = PaymentsProductsAlternativePaymentMethodsSubscriptionInformation;
PaymentsProductsAlternativePaymentMethodsSubscriptionInformation.discriminator = undefined;
PaymentsProductsAlternativePaymentMethodsSubscriptionInformation.attributeTypeMap = [
    {
        "name": "enabled",
        "baseName": "enabled",
        "type": "boolean"
    },
    {
        "name": "selfServiceability",
        "baseName": "selfServiceability",
        "type": "PaymentsProductsAlternativePaymentMethodsSubscriptionInformation.SelfServiceabilityEnum"
    }
];
(function (PaymentsProductsAlternativePaymentMethodsSubscriptionInformation) {
    let SelfServiceabilityEnum;
    (function (SelfServiceabilityEnum) {
        SelfServiceabilityEnum[SelfServiceabilityEnum["SELFSERVICEABLE"] = 'SELF_SERVICEABLE'] = "SELFSERVICEABLE";
        SelfServiceabilityEnum[SelfServiceabilityEnum["NOTSELFSERVICEABLE"] = 'NOT_SELF_SERVICEABLE'] = "NOTSELFSERVICEABLE";
        SelfServiceabilityEnum[SelfServiceabilityEnum["SELFSERVICEONLY"] = 'SELF_SERVICE_ONLY'] = "SELFSERVICEONLY";
    })(SelfServiceabilityEnum = PaymentsProductsAlternativePaymentMethodsSubscriptionInformation.SelfServiceabilityEnum || (PaymentsProductsAlternativePaymentMethodsSubscriptionInformation.SelfServiceabilityEnum = {}));
})(PaymentsProductsAlternativePaymentMethodsSubscriptionInformation = exports.PaymentsProductsAlternativePaymentMethodsSubscriptionInformation || (exports.PaymentsProductsAlternativePaymentMethodsSubscriptionInformation = {}));
class PaymentsProductsCardPresentConnect {
    static getAttributeTypeMap() {
        return PaymentsProductsCardPresentConnect.attributeTypeMap;
    }
}
exports.PaymentsProductsCardPresentConnect = PaymentsProductsCardPresentConnect;
PaymentsProductsCardPresentConnect.discriminator = undefined;
PaymentsProductsCardPresentConnect.attributeTypeMap = [
    {
        "name": "subscriptionInformation",
        "baseName": "subscriptionInformation",
        "type": "PaymentsProductsCardPresentConnectSubscriptionInformation"
    },
    {
        "name": "configurationInformation",
        "baseName": "configurationInformation",
        "type": "PaymentsProductsCardPresentConnectConfigurationInformation"
    }
];
class PaymentsProductsCardPresentConnectConfigurationInformation {
    static getAttributeTypeMap() {
        return PaymentsProductsCardPresentConnectConfigurationInformation.attributeTypeMap;
    }
}
exports.PaymentsProductsCardPresentConnectConfigurationInformation = PaymentsProductsCardPresentConnectConfigurationInformation;
PaymentsProductsCardPresentConnectConfigurationInformation.discriminator = undefined;
PaymentsProductsCardPresentConnectConfigurationInformation.attributeTypeMap = [
    {
        "name": "templateId",
        "baseName": "templateId",
        "type": "string"
    },
    {
        "name": "configurations",
        "baseName": "configurations",
        "type": "PaymentsProductsCardPresentConnectConfigurationInformationConfigurations"
    }
];
class PaymentsProductsCardPresentConnectConfigurationInformationConfigurations {
    static getAttributeTypeMap() {
        return PaymentsProductsCardPresentConnectConfigurationInformationConfigurations.attributeTypeMap;
    }
}
exports.PaymentsProductsCardPresentConnectConfigurationInformationConfigurations = PaymentsProductsCardPresentConnectConfigurationInformationConfigurations;
PaymentsProductsCardPresentConnectConfigurationInformationConfigurations.discriminator = undefined;
PaymentsProductsCardPresentConnectConfigurationInformationConfigurations.attributeTypeMap = [
    {
        "name": "partnerSolutionIdentifier",
        "baseName": "partnerSolutionIdentifier",
        "type": "string"
    }
];
class PaymentsProductsCardPresentConnectSubscriptionInformation {
    static getAttributeTypeMap() {
        return PaymentsProductsCardPresentConnectSubscriptionInformation.attributeTypeMap;
    }
}
exports.PaymentsProductsCardPresentConnectSubscriptionInformation = PaymentsProductsCardPresentConnectSubscriptionInformation;
PaymentsProductsCardPresentConnectSubscriptionInformation.discriminator = undefined;
PaymentsProductsCardPresentConnectSubscriptionInformation.attributeTypeMap = [
    {
        "name": "enabled",
        "baseName": "enabled",
        "type": "boolean"
    },
    {
        "name": "selfServiceability",
        "baseName": "selfServiceability",
        "type": "PaymentsProductsCardPresentConnectSubscriptionInformation.SelfServiceabilityEnum"
    }
];
(function (PaymentsProductsCardPresentConnectSubscriptionInformation) {
    let SelfServiceabilityEnum;
    (function (SelfServiceabilityEnum) {
        SelfServiceabilityEnum[SelfServiceabilityEnum["NOTSELFSERVICEABLE"] = 'NOT_SELF_SERVICEABLE'] = "NOTSELFSERVICEABLE";
    })(SelfServiceabilityEnum = PaymentsProductsCardPresentConnectSubscriptionInformation.SelfServiceabilityEnum || (PaymentsProductsCardPresentConnectSubscriptionInformation.SelfServiceabilityEnum = {}));
})(PaymentsProductsCardPresentConnectSubscriptionInformation = exports.PaymentsProductsCardPresentConnectSubscriptionInformation || (exports.PaymentsProductsCardPresentConnectSubscriptionInformation = {}));
class PaymentsProductsCardProcessing {
    static getAttributeTypeMap() {
        return PaymentsProductsCardProcessing.attributeTypeMap;
    }
}
exports.PaymentsProductsCardProcessing = PaymentsProductsCardProcessing;
PaymentsProductsCardProcessing.discriminator = undefined;
PaymentsProductsCardProcessing.attributeTypeMap = [
    {
        "name": "subscriptionInformation",
        "baseName": "subscriptionInformation",
        "type": "PaymentsProductsCardProcessingSubscriptionInformation"
    },
    {
        "name": "configurationInformation",
        "baseName": "configurationInformation",
        "type": "PaymentsProductsCardProcessingConfigurationInformation"
    }
];
class PaymentsProductsCardProcessingConfigurationInformation {
    static getAttributeTypeMap() {
        return PaymentsProductsCardProcessingConfigurationInformation.attributeTypeMap;
    }
}
exports.PaymentsProductsCardProcessingConfigurationInformation = PaymentsProductsCardProcessingConfigurationInformation;
PaymentsProductsCardProcessingConfigurationInformation.discriminator = undefined;
PaymentsProductsCardProcessingConfigurationInformation.attributeTypeMap = [
    {
        "name": "templateId",
        "baseName": "templateId",
        "type": "string"
    },
    {
        "name": "configurations",
        "baseName": "configurations",
        "type": "CardProcessingConfig"
    }
];
class PaymentsProductsCardProcessingSubscriptionInformation {
    static getAttributeTypeMap() {
        return PaymentsProductsCardProcessingSubscriptionInformation.attributeTypeMap;
    }
}
exports.PaymentsProductsCardProcessingSubscriptionInformation = PaymentsProductsCardProcessingSubscriptionInformation;
PaymentsProductsCardProcessingSubscriptionInformation.discriminator = undefined;
PaymentsProductsCardProcessingSubscriptionInformation.attributeTypeMap = [
    {
        "name": "enabled",
        "baseName": "enabled",
        "type": "boolean"
    },
    {
        "name": "selfServiceability",
        "baseName": "selfServiceability",
        "type": "PaymentsProductsCardProcessingSubscriptionInformation.SelfServiceabilityEnum"
    },
    {
        "name": "features",
        "baseName": "features",
        "type": "{ [key: string]: PaymentsProductsCardProcessingSubscriptionInformationFeatures; }"
    }
];
(function (PaymentsProductsCardProcessingSubscriptionInformation) {
    let SelfServiceabilityEnum;
    (function (SelfServiceabilityEnum) {
        SelfServiceabilityEnum[SelfServiceabilityEnum["SELFSERVICEABLE"] = 'SELF_SERVICEABLE'] = "SELFSERVICEABLE";
        SelfServiceabilityEnum[SelfServiceabilityEnum["NOTSELFSERVICEABLE"] = 'NOT_SELF_SERVICEABLE'] = "NOTSELFSERVICEABLE";
        SelfServiceabilityEnum[SelfServiceabilityEnum["SELFSERVICEONLY"] = 'SELF_SERVICE_ONLY'] = "SELFSERVICEONLY";
    })(SelfServiceabilityEnum = PaymentsProductsCardProcessingSubscriptionInformation.SelfServiceabilityEnum || (PaymentsProductsCardProcessingSubscriptionInformation.SelfServiceabilityEnum = {}));
})(PaymentsProductsCardProcessingSubscriptionInformation = exports.PaymentsProductsCardProcessingSubscriptionInformation || (exports.PaymentsProductsCardProcessingSubscriptionInformation = {}));
class PaymentsProductsCardProcessingSubscriptionInformationFeatures {
    static getAttributeTypeMap() {
        return PaymentsProductsCardProcessingSubscriptionInformationFeatures.attributeTypeMap;
    }
}
exports.PaymentsProductsCardProcessingSubscriptionInformationFeatures = PaymentsProductsCardProcessingSubscriptionInformationFeatures;
PaymentsProductsCardProcessingSubscriptionInformationFeatures.discriminator = undefined;
PaymentsProductsCardProcessingSubscriptionInformationFeatures.attributeTypeMap = [
    {
        "name": "enabled",
        "baseName": "enabled",
        "type": "boolean"
    }
];
class PaymentsProductsCurrencyConversion {
    static getAttributeTypeMap() {
        return PaymentsProductsCurrencyConversion.attributeTypeMap;
    }
}
exports.PaymentsProductsCurrencyConversion = PaymentsProductsCurrencyConversion;
PaymentsProductsCurrencyConversion.discriminator = undefined;
PaymentsProductsCurrencyConversion.attributeTypeMap = [
    {
        "name": "subscriptionInformation",
        "baseName": "subscriptionInformation",
        "type": "PaymentsProductsAlternativePaymentMethodsSubscriptionInformation"
    },
    {
        "name": "configurationInformation",
        "baseName": "configurationInformation",
        "type": "PaymentsProductsCurrencyConversionConfigurationInformation"
    }
];
class PaymentsProductsCurrencyConversionConfigurationInformation {
    static getAttributeTypeMap() {
        return PaymentsProductsCurrencyConversionConfigurationInformation.attributeTypeMap;
    }
}
exports.PaymentsProductsCurrencyConversionConfigurationInformation = PaymentsProductsCurrencyConversionConfigurationInformation;
PaymentsProductsCurrencyConversionConfigurationInformation.discriminator = undefined;
PaymentsProductsCurrencyConversionConfigurationInformation.attributeTypeMap = [
    {
        "name": "templateId",
        "baseName": "templateId",
        "type": "string"
    },
    {
        "name": "configurations",
        "baseName": "configurations",
        "type": "PaymentsProductsCurrencyConversionConfigurationInformationConfigurations"
    }
];
class PaymentsProductsCurrencyConversionConfigurationInformationConfigurations {
    static getAttributeTypeMap() {
        return PaymentsProductsCurrencyConversionConfigurationInformationConfigurations.attributeTypeMap;
    }
}
exports.PaymentsProductsCurrencyConversionConfigurationInformationConfigurations = PaymentsProductsCurrencyConversionConfigurationInformationConfigurations;
PaymentsProductsCurrencyConversionConfigurationInformationConfigurations.discriminator = undefined;
PaymentsProductsCurrencyConversionConfigurationInformationConfigurations.attributeTypeMap = [
    {
        "name": "processors",
        "baseName": "processors",
        "type": "{ [key: string]: PaymentsProductsCurrencyConversionConfigurationInformationConfigurationsProcessors; }"
    }
];
class PaymentsProductsCurrencyConversionConfigurationInformationConfigurationsProcessors {
    static getAttributeTypeMap() {
        return PaymentsProductsCurrencyConversionConfigurationInformationConfigurationsProcessors.attributeTypeMap;
    }
}
exports.PaymentsProductsCurrencyConversionConfigurationInformationConfigurationsProcessors = PaymentsProductsCurrencyConversionConfigurationInformationConfigurationsProcessors;
PaymentsProductsCurrencyConversionConfigurationInformationConfigurationsProcessors.discriminator = undefined;
PaymentsProductsCurrencyConversionConfigurationInformationConfigurationsProcessors.attributeTypeMap = [
    {
        "name": "merchantId",
        "baseName": "merchantId",
        "type": "string"
    },
    {
        "name": "acquirerId",
        "baseName": "acquirerId",
        "type": "string"
    }
];
class PaymentsProductsCybsReadyTerminal {
    static getAttributeTypeMap() {
        return PaymentsProductsCybsReadyTerminal.attributeTypeMap;
    }
}
exports.PaymentsProductsCybsReadyTerminal = PaymentsProductsCybsReadyTerminal;
PaymentsProductsCybsReadyTerminal.discriminator = undefined;
PaymentsProductsCybsReadyTerminal.attributeTypeMap = [
    {
        "name": "subscriptionInformation",
        "baseName": "subscriptionInformation",
        "type": "PaymentsProductsCardPresentConnectSubscriptionInformation"
    }
];
class PaymentsProductsDifferentialFee {
    static getAttributeTypeMap() {
        return PaymentsProductsDifferentialFee.attributeTypeMap;
    }
}
exports.PaymentsProductsDifferentialFee = PaymentsProductsDifferentialFee;
PaymentsProductsDifferentialFee.discriminator = undefined;
PaymentsProductsDifferentialFee.attributeTypeMap = [
    {
        "name": "subscriptionInformation",
        "baseName": "subscriptionInformation",
        "type": "PaymentsProductsDifferentialFeeSubscriptionInformation"
    }
];
class PaymentsProductsDifferentialFeeSubscriptionInformation {
    static getAttributeTypeMap() {
        return PaymentsProductsDifferentialFeeSubscriptionInformation.attributeTypeMap;
    }
}
exports.PaymentsProductsDifferentialFeeSubscriptionInformation = PaymentsProductsDifferentialFeeSubscriptionInformation;
PaymentsProductsDifferentialFeeSubscriptionInformation.discriminator = undefined;
PaymentsProductsDifferentialFeeSubscriptionInformation.attributeTypeMap = [
    {
        "name": "enabled",
        "baseName": "enabled",
        "type": "boolean"
    },
    {
        "name": "selfServiceability",
        "baseName": "selfServiceability",
        "type": "PaymentsProductsDifferentialFeeSubscriptionInformation.SelfServiceabilityEnum"
    },
    {
        "name": "features",
        "baseName": "features",
        "type": "PaymentsProductsDifferentialFeeSubscriptionInformationFeatures"
    }
];
(function (PaymentsProductsDifferentialFeeSubscriptionInformation) {
    let SelfServiceabilityEnum;
    (function (SelfServiceabilityEnum) {
        SelfServiceabilityEnum[SelfServiceabilityEnum["SELFSERVICEABLE"] = 'SELF_SERVICEABLE'] = "SELFSERVICEABLE";
        SelfServiceabilityEnum[SelfServiceabilityEnum["NOTSELFSERVICEABLE"] = 'NOT_SELF_SERVICEABLE'] = "NOTSELFSERVICEABLE";
        SelfServiceabilityEnum[SelfServiceabilityEnum["SELFSERVICEONLY"] = 'SELF_SERVICE_ONLY'] = "SELFSERVICEONLY";
    })(SelfServiceabilityEnum = PaymentsProductsDifferentialFeeSubscriptionInformation.SelfServiceabilityEnum || (PaymentsProductsDifferentialFeeSubscriptionInformation.SelfServiceabilityEnum = {}));
})(PaymentsProductsDifferentialFeeSubscriptionInformation = exports.PaymentsProductsDifferentialFeeSubscriptionInformation || (exports.PaymentsProductsDifferentialFeeSubscriptionInformation = {}));
class PaymentsProductsDifferentialFeeSubscriptionInformationFeatures {
    static getAttributeTypeMap() {
        return PaymentsProductsDifferentialFeeSubscriptionInformationFeatures.attributeTypeMap;
    }
}
exports.PaymentsProductsDifferentialFeeSubscriptionInformationFeatures = PaymentsProductsDifferentialFeeSubscriptionInformationFeatures;
PaymentsProductsDifferentialFeeSubscriptionInformationFeatures.discriminator = undefined;
PaymentsProductsDifferentialFeeSubscriptionInformationFeatures.attributeTypeMap = [
    {
        "name": "surcharge",
        "baseName": "surcharge",
        "type": "PaymentsProductsDifferentialFeeSubscriptionInformationFeaturesSurcharge"
    }
];
class PaymentsProductsDifferentialFeeSubscriptionInformationFeaturesSurcharge {
    static getAttributeTypeMap() {
        return PaymentsProductsDifferentialFeeSubscriptionInformationFeaturesSurcharge.attributeTypeMap;
    }
}
exports.PaymentsProductsDifferentialFeeSubscriptionInformationFeaturesSurcharge = PaymentsProductsDifferentialFeeSubscriptionInformationFeaturesSurcharge;
PaymentsProductsDifferentialFeeSubscriptionInformationFeaturesSurcharge.discriminator = undefined;
PaymentsProductsDifferentialFeeSubscriptionInformationFeaturesSurcharge.attributeTypeMap = [
    {
        "name": "enabled",
        "baseName": "enabled",
        "type": "boolean"
    }
];
class PaymentsProductsDigitalPayments {
    static getAttributeTypeMap() {
        return PaymentsProductsDigitalPayments.attributeTypeMap;
    }
}
exports.PaymentsProductsDigitalPayments = PaymentsProductsDigitalPayments;
PaymentsProductsDigitalPayments.discriminator = undefined;
PaymentsProductsDigitalPayments.attributeTypeMap = [
    {
        "name": "subscriptionInformation",
        "baseName": "subscriptionInformation",
        "type": "PaymentsProductsDigitalPaymentsSubscriptionInformation"
    }
];
class PaymentsProductsDigitalPaymentsSubscriptionInformation {
    static getAttributeTypeMap() {
        return PaymentsProductsDigitalPaymentsSubscriptionInformation.attributeTypeMap;
    }
}
exports.PaymentsProductsDigitalPaymentsSubscriptionInformation = PaymentsProductsDigitalPaymentsSubscriptionInformation;
PaymentsProductsDigitalPaymentsSubscriptionInformation.discriminator = undefined;
PaymentsProductsDigitalPaymentsSubscriptionInformation.attributeTypeMap = [
    {
        "name": "enabled",
        "baseName": "enabled",
        "type": "boolean"
    },
    {
        "name": "selfServiceability",
        "baseName": "selfServiceability",
        "type": "PaymentsProductsDigitalPaymentsSubscriptionInformation.SelfServiceabilityEnum"
    },
    {
        "name": "features",
        "baseName": "features",
        "type": "{ [key: string]: PaymentsProductsDigitalPaymentsSubscriptionInformationFeatures; }"
    }
];
(function (PaymentsProductsDigitalPaymentsSubscriptionInformation) {
    let SelfServiceabilityEnum;
    (function (SelfServiceabilityEnum) {
        SelfServiceabilityEnum[SelfServiceabilityEnum["SELFSERVICEABLE"] = 'SELF_SERVICEABLE'] = "SELFSERVICEABLE";
        SelfServiceabilityEnum[SelfServiceabilityEnum["NOTSELFSERVICEABLE"] = 'NOT_SELF_SERVICEABLE'] = "NOTSELFSERVICEABLE";
        SelfServiceabilityEnum[SelfServiceabilityEnum["SELFSERVICEONLY"] = 'SELF_SERVICE_ONLY'] = "SELFSERVICEONLY";
    })(SelfServiceabilityEnum = PaymentsProductsDigitalPaymentsSubscriptionInformation.SelfServiceabilityEnum || (PaymentsProductsDigitalPaymentsSubscriptionInformation.SelfServiceabilityEnum = {}));
})(PaymentsProductsDigitalPaymentsSubscriptionInformation = exports.PaymentsProductsDigitalPaymentsSubscriptionInformation || (exports.PaymentsProductsDigitalPaymentsSubscriptionInformation = {}));
class PaymentsProductsDigitalPaymentsSubscriptionInformationFeatures {
    static getAttributeTypeMap() {
        return PaymentsProductsDigitalPaymentsSubscriptionInformationFeatures.attributeTypeMap;
    }
}
exports.PaymentsProductsDigitalPaymentsSubscriptionInformationFeatures = PaymentsProductsDigitalPaymentsSubscriptionInformationFeatures;
PaymentsProductsDigitalPaymentsSubscriptionInformationFeatures.discriminator = undefined;
PaymentsProductsDigitalPaymentsSubscriptionInformationFeatures.attributeTypeMap = [
    {
        "name": "enabled",
        "baseName": "enabled",
        "type": "boolean"
    }
];
class PaymentsProductsECheck {
    static getAttributeTypeMap() {
        return PaymentsProductsECheck.attributeTypeMap;
    }
}
exports.PaymentsProductsECheck = PaymentsProductsECheck;
PaymentsProductsECheck.discriminator = undefined;
PaymentsProductsECheck.attributeTypeMap = [
    {
        "name": "subscriptionInformation",
        "baseName": "subscriptionInformation",
        "type": "PaymentsProductsECheckSubscriptionInformation"
    },
    {
        "name": "configurationInformation",
        "baseName": "configurationInformation",
        "type": "PaymentsProductsECheckConfigurationInformation"
    }
];
class PaymentsProductsECheckConfigurationInformation {
    static getAttributeTypeMap() {
        return PaymentsProductsECheckConfigurationInformation.attributeTypeMap;
    }
}
exports.PaymentsProductsECheckConfigurationInformation = PaymentsProductsECheckConfigurationInformation;
PaymentsProductsECheckConfigurationInformation.discriminator = undefined;
PaymentsProductsECheckConfigurationInformation.attributeTypeMap = [
    {
        "name": "templateId",
        "baseName": "templateId",
        "type": "string"
    },
    {
        "name": "configurations",
        "baseName": "configurations",
        "type": "ECheckConfig"
    }
];
class PaymentsProductsECheckSubscriptionInformation {
    static getAttributeTypeMap() {
        return PaymentsProductsECheckSubscriptionInformation.attributeTypeMap;
    }
}
exports.PaymentsProductsECheckSubscriptionInformation = PaymentsProductsECheckSubscriptionInformation;
PaymentsProductsECheckSubscriptionInformation.discriminator = undefined;
PaymentsProductsECheckSubscriptionInformation.attributeTypeMap = [
    {
        "name": "enabled",
        "baseName": "enabled",
        "type": "boolean"
    },
    {
        "name": "selfServiceability",
        "baseName": "selfServiceability",
        "type": "PaymentsProductsECheckSubscriptionInformation.SelfServiceabilityEnum"
    },
    {
        "name": "mode",
        "baseName": "mode",
        "type": "Array<string>"
    }
];
(function (PaymentsProductsECheckSubscriptionInformation) {
    let SelfServiceabilityEnum;
    (function (SelfServiceabilityEnum) {
        SelfServiceabilityEnum[SelfServiceabilityEnum["SELFSERVICEABLE"] = 'SELF_SERVICEABLE'] = "SELFSERVICEABLE";
        SelfServiceabilityEnum[SelfServiceabilityEnum["NOTSELFSERVICEABLE"] = 'NOT_SELF_SERVICEABLE'] = "NOTSELFSERVICEABLE";
        SelfServiceabilityEnum[SelfServiceabilityEnum["SELFSERVICEONLY"] = 'SELF_SERVICE_ONLY'] = "SELFSERVICEONLY";
    })(SelfServiceabilityEnum = PaymentsProductsECheckSubscriptionInformation.SelfServiceabilityEnum || (PaymentsProductsECheckSubscriptionInformation.SelfServiceabilityEnum = {}));
})(PaymentsProductsECheckSubscriptionInformation = exports.PaymentsProductsECheckSubscriptionInformation || (exports.PaymentsProductsECheckSubscriptionInformation = {}));
class PaymentsProductsPayerAuthentication {
    static getAttributeTypeMap() {
        return PaymentsProductsPayerAuthentication.attributeTypeMap;
    }
}
exports.PaymentsProductsPayerAuthentication = PaymentsProductsPayerAuthentication;
PaymentsProductsPayerAuthentication.discriminator = undefined;
PaymentsProductsPayerAuthentication.attributeTypeMap = [
    {
        "name": "subscriptionInformation",
        "baseName": "subscriptionInformation",
        "type": "PaymentsProductsAlternativePaymentMethodsSubscriptionInformation"
    },
    {
        "name": "configurationInformation",
        "baseName": "configurationInformation",
        "type": "PaymentsProductsPayerAuthenticationConfigurationInformation"
    }
];
class PaymentsProductsPayerAuthenticationConfigurationInformation {
    static getAttributeTypeMap() {
        return PaymentsProductsPayerAuthenticationConfigurationInformation.attributeTypeMap;
    }
}
exports.PaymentsProductsPayerAuthenticationConfigurationInformation = PaymentsProductsPayerAuthenticationConfigurationInformation;
PaymentsProductsPayerAuthenticationConfigurationInformation.discriminator = undefined;
PaymentsProductsPayerAuthenticationConfigurationInformation.attributeTypeMap = [
    {
        "name": "templateId",
        "baseName": "templateId",
        "type": "string"
    },
    {
        "name": "configurations",
        "baseName": "configurations",
        "type": "PayerAuthConfig"
    }
];
class PaymentsProductsPayouts {
    static getAttributeTypeMap() {
        return PaymentsProductsPayouts.attributeTypeMap;
    }
}
exports.PaymentsProductsPayouts = PaymentsProductsPayouts;
PaymentsProductsPayouts.discriminator = undefined;
PaymentsProductsPayouts.attributeTypeMap = [
    {
        "name": "subscriptionInformation",
        "baseName": "subscriptionInformation",
        "type": "PaymentsProductsAlternativePaymentMethodsSubscriptionInformation"
    },
    {
        "name": "configurationInformation",
        "baseName": "configurationInformation",
        "type": "PaymentsProductsPayoutsConfigurationInformation"
    }
];
class PaymentsProductsPayoutsConfigurationInformation {
    static getAttributeTypeMap() {
        return PaymentsProductsPayoutsConfigurationInformation.attributeTypeMap;
    }
}
exports.PaymentsProductsPayoutsConfigurationInformation = PaymentsProductsPayoutsConfigurationInformation;
PaymentsProductsPayoutsConfigurationInformation.discriminator = undefined;
PaymentsProductsPayoutsConfigurationInformation.attributeTypeMap = [
    {
        "name": "configurations",
        "baseName": "configurations",
        "type": "PaymentsProductsPayoutsConfigurationInformationConfigurations"
    }
];
class PaymentsProductsPayoutsConfigurationInformationConfigurations {
    static getAttributeTypeMap() {
        return PaymentsProductsPayoutsConfigurationInformationConfigurations.attributeTypeMap;
    }
}
exports.PaymentsProductsPayoutsConfigurationInformationConfigurations = PaymentsProductsPayoutsConfigurationInformationConfigurations;
PaymentsProductsPayoutsConfigurationInformationConfigurations.discriminator = undefined;
PaymentsProductsPayoutsConfigurationInformationConfigurations.attributeTypeMap = [
    {
        "name": "pullfunds",
        "baseName": "pullfunds",
        "type": "{ [key: string]: PaymentsProductsPayoutsConfigurationInformationConfigurationsPullfunds; }"
    },
    {
        "name": "pushfunds",
        "baseName": "pushfunds",
        "type": "{ [key: string]: PaymentsProductsPayoutsConfigurationInformationConfigurationsPushfunds; }"
    }
];
class PaymentsProductsPayoutsConfigurationInformationConfigurationsProcessorAccount {
    static getAttributeTypeMap() {
        return PaymentsProductsPayoutsConfigurationInformationConfigurationsProcessorAccount.attributeTypeMap;
    }
}
exports.PaymentsProductsPayoutsConfigurationInformationConfigurationsProcessorAccount = PaymentsProductsPayoutsConfigurationInformationConfigurationsProcessorAccount;
PaymentsProductsPayoutsConfigurationInformationConfigurationsProcessorAccount.discriminator = undefined;
PaymentsProductsPayoutsConfigurationInformationConfigurationsProcessorAccount.attributeTypeMap = [
    {
        "name": "originatorMerchantId",
        "baseName": "originatorMerchantId",
        "type": "string"
    },
    {
        "name": "originatorTerminalId",
        "baseName": "originatorTerminalId",
        "type": "Array<string>"
    },
    {
        "name": "supportedCurrencies",
        "baseName": "supportedCurrencies",
        "type": "Array<string>"
    }
];
/**
* Formatted as *{payoutsAcquirerName}. The property name field should be the same as the processor name for which the pull funds or push funds feature is being configured. Here is the list of valid processor names [TBD]
*/
class PaymentsProductsPayoutsConfigurationInformationConfigurationsPullfunds {
    static getAttributeTypeMap() {
        return PaymentsProductsPayoutsConfigurationInformationConfigurationsPullfunds.attributeTypeMap;
    }
}
exports.PaymentsProductsPayoutsConfigurationInformationConfigurationsPullfunds = PaymentsProductsPayoutsConfigurationInformationConfigurationsPullfunds;
PaymentsProductsPayoutsConfigurationInformationConfigurationsPullfunds.discriminator = undefined;
PaymentsProductsPayoutsConfigurationInformationConfigurationsPullfunds.attributeTypeMap = [
    {
        "name": "acquirerOrganizationId",
        "baseName": "acquirerOrganizationId",
        "type": "string"
    },
    {
        "name": "acquiringBIN",
        "baseName": "acquiringBIN",
        "type": "number"
    },
    {
        "name": "allowCryptoCurrencyPurchase",
        "baseName": "allowCryptoCurrencyPurchase",
        "type": "boolean"
    },
    {
        "name": "cardAcceptorId",
        "baseName": "cardAcceptorId",
        "type": "string"
    },
    {
        "name": "originatorMvv",
        "baseName": "originatorMvv",
        "type": "string"
    },
    {
        "name": "originatorNameAbbreviation",
        "baseName": "originatorNameAbbreviation",
        "type": "string"
    },
    {
        "name": "cardTerminalId",
        "baseName": "cardTerminalId",
        "type": "string"
    }
];
/**
* Formatted as *{payoutsAcquirerName}. The property name field should be the same as the processor name for which the pull funds or push funds feature is being configured. Here is the list of valid processor names [TBD]
*/
class PaymentsProductsPayoutsConfigurationInformationConfigurationsPushfunds {
    static getAttributeTypeMap() {
        return PaymentsProductsPayoutsConfigurationInformationConfigurationsPushfunds.attributeTypeMap;
    }
}
exports.PaymentsProductsPayoutsConfigurationInformationConfigurationsPushfunds = PaymentsProductsPayoutsConfigurationInformationConfigurationsPushfunds;
PaymentsProductsPayoutsConfigurationInformationConfigurationsPushfunds.discriminator = undefined;
PaymentsProductsPayoutsConfigurationInformationConfigurationsPushfunds.attributeTypeMap = [
    {
        "name": "acquirerCountryCode",
        "baseName": "acquirerCountryCode",
        "type": "number"
    },
    {
        "name": "acquiringBIN",
        "baseName": "acquiringBIN",
        "type": "number"
    },
    {
        "name": "allowCryptoCurrencyPurchase",
        "baseName": "allowCryptoCurrencyPurchase",
        "type": "boolean"
    },
    {
        "name": "financialInstitutionId",
        "baseName": "financialInstitutionId",
        "type": "string"
    },
    {
        "name": "networkOrder",
        "baseName": "networkOrder",
        "type": "string"
    },
    {
        "name": "nationalReimbursementFee",
        "baseName": "nationalReimbursementFee",
        "type": "string"
    },
    {
        "name": "originatorBusinessApplicationId",
        "baseName": "originatorBusinessApplicationId",
        "type": "string"
    },
    {
        "name": "originatorPseudoAbaNumber",
        "baseName": "originatorPseudoAbaNumber",
        "type": "string"
    },
    {
        "name": "processorAccount",
        "baseName": "processorAccount",
        "type": "Array<PaymentsProductsPayoutsConfigurationInformationConfigurationsProcessorAccount>"
    }
];
class PaymentsProductsSecureAcceptance {
    static getAttributeTypeMap() {
        return PaymentsProductsSecureAcceptance.attributeTypeMap;
    }
}
exports.PaymentsProductsSecureAcceptance = PaymentsProductsSecureAcceptance;
PaymentsProductsSecureAcceptance.discriminator = undefined;
PaymentsProductsSecureAcceptance.attributeTypeMap = [
    {
        "name": "subscriptionInformation",
        "baseName": "subscriptionInformation",
        "type": "PaymentsProductsAlternativePaymentMethodsSubscriptionInformation"
    },
    {
        "name": "configurationInformation",
        "baseName": "configurationInformation",
        "type": "PaymentsProductsSecureAcceptanceConfigurationInformation"
    }
];
class PaymentsProductsSecureAcceptanceConfigurationInformation {
    static getAttributeTypeMap() {
        return PaymentsProductsSecureAcceptanceConfigurationInformation.attributeTypeMap;
    }
}
exports.PaymentsProductsSecureAcceptanceConfigurationInformation = PaymentsProductsSecureAcceptanceConfigurationInformation;
PaymentsProductsSecureAcceptanceConfigurationInformation.discriminator = undefined;
PaymentsProductsSecureAcceptanceConfigurationInformation.attributeTypeMap = [
    {
        "name": "templateId",
        "baseName": "templateId",
        "type": "string"
    },
    {
        "name": "configurations",
        "baseName": "configurations",
        "type": "SAConfig"
    }
];
class PaymentsProductsServiceFee {
    static getAttributeTypeMap() {
        return PaymentsProductsServiceFee.attributeTypeMap;
    }
}
exports.PaymentsProductsServiceFee = PaymentsProductsServiceFee;
PaymentsProductsServiceFee.discriminator = undefined;
PaymentsProductsServiceFee.attributeTypeMap = [
    {
        "name": "subscriptionInformation",
        "baseName": "subscriptionInformation",
        "type": "PaymentsProductsAlternativePaymentMethodsSubscriptionInformation"
    },
    {
        "name": "configurationInformation",
        "baseName": "configurationInformation",
        "type": "PaymentsProductsServiceFeeConfigurationInformation"
    }
];
class PaymentsProductsServiceFeeConfigurationInformation {
    static getAttributeTypeMap() {
        return PaymentsProductsServiceFeeConfigurationInformation.attributeTypeMap;
    }
}
exports.PaymentsProductsServiceFeeConfigurationInformation = PaymentsProductsServiceFeeConfigurationInformation;
PaymentsProductsServiceFeeConfigurationInformation.discriminator = undefined;
PaymentsProductsServiceFeeConfigurationInformation.attributeTypeMap = [
    {
        "name": "configurations",
        "baseName": "configurations",
        "type": "PaymentsProductsServiceFeeConfigurationInformationConfigurations"
    }
];
class PaymentsProductsServiceFeeConfigurationInformationConfigurations {
    static getAttributeTypeMap() {
        return PaymentsProductsServiceFeeConfigurationInformationConfigurations.attributeTypeMap;
    }
}
exports.PaymentsProductsServiceFeeConfigurationInformationConfigurations = PaymentsProductsServiceFeeConfigurationInformationConfigurations;
PaymentsProductsServiceFeeConfigurationInformationConfigurations.discriminator = undefined;
PaymentsProductsServiceFeeConfigurationInformationConfigurations.attributeTypeMap = [
    {
        "name": "products",
        "baseName": "products",
        "type": "{ [key: string]: PaymentsProductsServiceFeeConfigurationInformationConfigurationsProducts; }"
    },
    {
        "name": "terminalId",
        "baseName": "terminalId",
        "type": "string"
    },
    {
        "name": "merchantId",
        "baseName": "merchantId",
        "type": "string"
    },
    {
        "name": "merchantInformation",
        "baseName": "merchantInformation",
        "type": "PaymentsProductsServiceFeeConfigurationInformationConfigurationsMerchantInformation"
    },
    {
        "name": "paymentInformation",
        "baseName": "paymentInformation",
        "type": "Array<PaymentsProductsServiceFeeConfigurationInformationConfigurationsPaymentInformation>"
    }
];
class PaymentsProductsServiceFeeConfigurationInformationConfigurationsMerchantInformation {
    static getAttributeTypeMap() {
        return PaymentsProductsServiceFeeConfigurationInformationConfigurationsMerchantInformation.attributeTypeMap;
    }
}
exports.PaymentsProductsServiceFeeConfigurationInformationConfigurationsMerchantInformation = PaymentsProductsServiceFeeConfigurationInformationConfigurationsMerchantInformation;
PaymentsProductsServiceFeeConfigurationInformationConfigurationsMerchantInformation.discriminator = undefined;
PaymentsProductsServiceFeeConfigurationInformationConfigurationsMerchantInformation.attributeTypeMap = [
    {
        "name": "name",
        "baseName": "name",
        "type": "string"
    },
    {
        "name": "contact",
        "baseName": "contact",
        "type": "string"
    },
    {
        "name": "state",
        "baseName": "state",
        "type": "string"
    }
];
class PaymentsProductsServiceFeeConfigurationInformationConfigurationsPaymentInformation {
    static getAttributeTypeMap() {
        return PaymentsProductsServiceFeeConfigurationInformationConfigurationsPaymentInformation.attributeTypeMap;
    }
}
exports.PaymentsProductsServiceFeeConfigurationInformationConfigurationsPaymentInformation = PaymentsProductsServiceFeeConfigurationInformationConfigurationsPaymentInformation;
PaymentsProductsServiceFeeConfigurationInformationConfigurationsPaymentInformation.discriminator = undefined;
PaymentsProductsServiceFeeConfigurationInformationConfigurationsPaymentInformation.attributeTypeMap = [
    {
        "name": "paymentType",
        "baseName": "paymentType",
        "type": "PaymentsProductsServiceFeeConfigurationInformationConfigurationsPaymentInformation.PaymentTypeEnum"
    },
    {
        "name": "feeType",
        "baseName": "feeType",
        "type": "PaymentsProductsServiceFeeConfigurationInformationConfigurationsPaymentInformation.FeeTypeEnum"
    },
    {
        "name": "feeAmount",
        "baseName": "feeAmount",
        "type": "number"
    },
    {
        "name": "percentage",
        "baseName": "percentage",
        "type": "number"
    },
    {
        "name": "feeCap",
        "baseName": "feeCap",
        "type": "number"
    }
];
(function (PaymentsProductsServiceFeeConfigurationInformationConfigurationsPaymentInformation) {
    let PaymentTypeEnum;
    (function (PaymentTypeEnum) {
        PaymentTypeEnum[PaymentTypeEnum["MASTERDEBIT"] = 'MASTERDEBIT'] = "MASTERDEBIT";
        PaymentTypeEnum[PaymentTypeEnum["MASTERCREDIT"] = 'MASTERCREDIT'] = "MASTERCREDIT";
        PaymentTypeEnum[PaymentTypeEnum["VISACREDIT"] = 'VISACREDIT'] = "VISACREDIT";
        PaymentTypeEnum[PaymentTypeEnum["VISADEBIT"] = 'VISADEBIT'] = "VISADEBIT";
        PaymentTypeEnum[PaymentTypeEnum["DISCOVERCREDIT"] = 'DISCOVERCREDIT'] = "DISCOVERCREDIT";
        PaymentTypeEnum[PaymentTypeEnum["AMEXCREDIT"] = 'AMEXCREDIT'] = "AMEXCREDIT";
        PaymentTypeEnum[PaymentTypeEnum["ECHECK"] = 'ECHECK'] = "ECHECK";
    })(PaymentTypeEnum = PaymentsProductsServiceFeeConfigurationInformationConfigurationsPaymentInformation.PaymentTypeEnum || (PaymentsProductsServiceFeeConfigurationInformationConfigurationsPaymentInformation.PaymentTypeEnum = {}));
    let FeeTypeEnum;
    (function (FeeTypeEnum) {
        FeeTypeEnum[FeeTypeEnum["FLAT"] = 'FLAT'] = "FLAT";
        FeeTypeEnum[FeeTypeEnum["PERCENTAGE"] = 'PERCENTAGE'] = "PERCENTAGE";
    })(FeeTypeEnum = PaymentsProductsServiceFeeConfigurationInformationConfigurationsPaymentInformation.FeeTypeEnum || (PaymentsProductsServiceFeeConfigurationInformationConfigurationsPaymentInformation.FeeTypeEnum = {}));
})(PaymentsProductsServiceFeeConfigurationInformationConfigurationsPaymentInformation = exports.PaymentsProductsServiceFeeConfigurationInformationConfigurationsPaymentInformation || (exports.PaymentsProductsServiceFeeConfigurationInformationConfigurationsPaymentInformation = {}));
class PaymentsProductsServiceFeeConfigurationInformationConfigurationsProducts {
    static getAttributeTypeMap() {
        return PaymentsProductsServiceFeeConfigurationInformationConfigurationsProducts.attributeTypeMap;
    }
}
exports.PaymentsProductsServiceFeeConfigurationInformationConfigurationsProducts = PaymentsProductsServiceFeeConfigurationInformationConfigurationsProducts;
PaymentsProductsServiceFeeConfigurationInformationConfigurationsProducts.discriminator = undefined;
PaymentsProductsServiceFeeConfigurationInformationConfigurationsProducts.attributeTypeMap = [
    {
        "name": "serviceFeeEnabled",
        "baseName": "serviceFeeEnabled",
        "type": "boolean"
    }
];
class PaymentsProductsTax {
    static getAttributeTypeMap() {
        return PaymentsProductsTax.attributeTypeMap;
    }
}
exports.PaymentsProductsTax = PaymentsProductsTax;
PaymentsProductsTax.discriminator = undefined;
PaymentsProductsTax.attributeTypeMap = [
    {
        "name": "subscriptionInformation",
        "baseName": "subscriptionInformation",
        "type": "PaymentsProductsAlternativePaymentMethodsSubscriptionInformation"
    }
];
class PaymentsProductsUnifiedCheckout {
    static getAttributeTypeMap() {
        return PaymentsProductsUnifiedCheckout.attributeTypeMap;
    }
}
exports.PaymentsProductsUnifiedCheckout = PaymentsProductsUnifiedCheckout;
PaymentsProductsUnifiedCheckout.discriminator = undefined;
PaymentsProductsUnifiedCheckout.attributeTypeMap = [
    {
        "name": "subscriptionInformation",
        "baseName": "subscriptionInformation",
        "type": "PaymentsProductsUnifiedCheckoutSubscriptionInformation"
    },
    {
        "name": "configurationInformation",
        "baseName": "configurationInformation",
        "type": "PaymentsProductsUnifiedCheckoutConfigurationInformation"
    }
];
class PaymentsProductsUnifiedCheckoutConfigurationInformation {
    static getAttributeTypeMap() {
        return PaymentsProductsUnifiedCheckoutConfigurationInformation.attributeTypeMap;
    }
}
exports.PaymentsProductsUnifiedCheckoutConfigurationInformation = PaymentsProductsUnifiedCheckoutConfigurationInformation;
PaymentsProductsUnifiedCheckoutConfigurationInformation.discriminator = undefined;
PaymentsProductsUnifiedCheckoutConfigurationInformation.attributeTypeMap = [
    {
        "name": "configurations",
        "baseName": "configurations",
        "type": "PaymentsProductsUnifiedCheckoutConfigurationInformationConfigurations"
    }
];
class PaymentsProductsUnifiedCheckoutConfigurationInformationConfigurations {
    static getAttributeTypeMap() {
        return PaymentsProductsUnifiedCheckoutConfigurationInformationConfigurations.attributeTypeMap;
    }
}
exports.PaymentsProductsUnifiedCheckoutConfigurationInformationConfigurations = PaymentsProductsUnifiedCheckoutConfigurationInformationConfigurations;
PaymentsProductsUnifiedCheckoutConfigurationInformationConfigurations.discriminator = undefined;
PaymentsProductsUnifiedCheckoutConfigurationInformationConfigurations.attributeTypeMap = [
    {
        "name": "features",
        "baseName": "features",
        "type": "PaymentsProductsUnifiedCheckoutConfigurationInformationConfigurationsFeatures"
    }
];
class PaymentsProductsUnifiedCheckoutConfigurationInformationConfigurationsFeatures {
    static getAttributeTypeMap() {
        return PaymentsProductsUnifiedCheckoutConfigurationInformationConfigurationsFeatures.attributeTypeMap;
    }
}
exports.PaymentsProductsUnifiedCheckoutConfigurationInformationConfigurationsFeatures = PaymentsProductsUnifiedCheckoutConfigurationInformationConfigurationsFeatures;
PaymentsProductsUnifiedCheckoutConfigurationInformationConfigurationsFeatures.discriminator = undefined;
PaymentsProductsUnifiedCheckoutConfigurationInformationConfigurationsFeatures.attributeTypeMap = [
    {
        "name": "paze",
        "baseName": "paze",
        "type": "PaymentsProductsUnifiedCheckoutConfigurationInformationConfigurationsFeaturesPaze"
    }
];
/**
* Paze specific required configuration details under unified checkout
*/
class PaymentsProductsUnifiedCheckoutConfigurationInformationConfigurationsFeaturesPaze {
    static getAttributeTypeMap() {
        return PaymentsProductsUnifiedCheckoutConfigurationInformationConfigurationsFeaturesPaze.attributeTypeMap;
    }
}
exports.PaymentsProductsUnifiedCheckoutConfigurationInformationConfigurationsFeaturesPaze = PaymentsProductsUnifiedCheckoutConfigurationInformationConfigurationsFeaturesPaze;
PaymentsProductsUnifiedCheckoutConfigurationInformationConfigurationsFeaturesPaze.discriminator = undefined;
PaymentsProductsUnifiedCheckoutConfigurationInformationConfigurationsFeaturesPaze.attributeTypeMap = [
    {
        "name": "financialInstitution",
        "baseName": "financialInstitution",
        "type": "PaymentsProductsUnifiedCheckoutConfigurationInformationConfigurationsFeaturesPaze.FinancialInstitutionEnum"
    },
    {
        "name": "financialInstitutionContract",
        "baseName": "financialInstitutionContract",
        "type": "boolean"
    },
    {
        "name": "pazeEnabledInProfile",
        "baseName": "pazeEnabledInProfile",
        "type": "boolean"
    }
];
(function (PaymentsProductsUnifiedCheckoutConfigurationInformationConfigurationsFeaturesPaze) {
    let FinancialInstitutionEnum;
    (function (FinancialInstitutionEnum) {
        FinancialInstitutionEnum[FinancialInstitutionEnum["BANKOFAMERICA"] = 'BANKOFAMERICA'] = "BANKOFAMERICA";
        FinancialInstitutionEnum[FinancialInstitutionEnum["WELLSFARGO"] = 'WELLSFARGO'] = "WELLSFARGO";
    })(FinancialInstitutionEnum = PaymentsProductsUnifiedCheckoutConfigurationInformationConfigurationsFeaturesPaze.FinancialInstitutionEnum || (PaymentsProductsUnifiedCheckoutConfigurationInformationConfigurationsFeaturesPaze.FinancialInstitutionEnum = {}));
})(PaymentsProductsUnifiedCheckoutConfigurationInformationConfigurationsFeaturesPaze = exports.PaymentsProductsUnifiedCheckoutConfigurationInformationConfigurationsFeaturesPaze || (exports.PaymentsProductsUnifiedCheckoutConfigurationInformationConfigurationsFeaturesPaze = {}));
class PaymentsProductsUnifiedCheckoutSubscriptionInformation {
    static getAttributeTypeMap() {
        return PaymentsProductsUnifiedCheckoutSubscriptionInformation.attributeTypeMap;
    }
}
exports.PaymentsProductsUnifiedCheckoutSubscriptionInformation = PaymentsProductsUnifiedCheckoutSubscriptionInformation;
PaymentsProductsUnifiedCheckoutSubscriptionInformation.discriminator = undefined;
PaymentsProductsUnifiedCheckoutSubscriptionInformation.attributeTypeMap = [
    {
        "name": "enabled",
        "baseName": "enabled",
        "type": "boolean"
    },
    {
        "name": "enablementStatus",
        "baseName": "enablementStatus",
        "type": "PaymentsProductsUnifiedCheckoutSubscriptionInformation.EnablementStatusEnum"
    },
    {
        "name": "selfServiceability",
        "baseName": "selfServiceability",
        "type": "PaymentsProductsUnifiedCheckoutSubscriptionInformation.SelfServiceabilityEnum"
    },
    {
        "name": "features",
        "baseName": "features",
        "type": "PaymentsProductsUnifiedCheckoutSubscriptionInformationFeatures"
    }
];
(function (PaymentsProductsUnifiedCheckoutSubscriptionInformation) {
    let EnablementStatusEnum;
    (function (EnablementStatusEnum) {
        EnablementStatusEnum[EnablementStatusEnum["PENDING"] = 'PENDING'] = "PENDING";
        EnablementStatusEnum[EnablementStatusEnum["ENABLEDANDUSABLE"] = 'ENABLED_AND_USABLE'] = "ENABLEDANDUSABLE";
        EnablementStatusEnum[EnablementStatusEnum["ENABLEDNOTUSABLE"] = 'ENABLED_NOT_USABLE'] = "ENABLEDNOTUSABLE";
        EnablementStatusEnum[EnablementStatusEnum["DISABLED"] = 'DISABLED'] = "DISABLED";
    })(EnablementStatusEnum = PaymentsProductsUnifiedCheckoutSubscriptionInformation.EnablementStatusEnum || (PaymentsProductsUnifiedCheckoutSubscriptionInformation.EnablementStatusEnum = {}));
    let SelfServiceabilityEnum;
    (function (SelfServiceabilityEnum) {
        SelfServiceabilityEnum[SelfServiceabilityEnum["SELFSERVICEABLE"] = 'SELF_SERVICEABLE'] = "SELFSERVICEABLE";
        SelfServiceabilityEnum[SelfServiceabilityEnum["NOTSELFSERVICEABLE"] = 'NOT_SELF_SERVICEABLE'] = "NOTSELFSERVICEABLE";
        SelfServiceabilityEnum[SelfServiceabilityEnum["SELFSERVICEONLY"] = 'SELF_SERVICE_ONLY'] = "SELFSERVICEONLY";
    })(SelfServiceabilityEnum = PaymentsProductsUnifiedCheckoutSubscriptionInformation.SelfServiceabilityEnum || (PaymentsProductsUnifiedCheckoutSubscriptionInformation.SelfServiceabilityEnum = {}));
})(PaymentsProductsUnifiedCheckoutSubscriptionInformation = exports.PaymentsProductsUnifiedCheckoutSubscriptionInformation || (exports.PaymentsProductsUnifiedCheckoutSubscriptionInformation = {}));
class PaymentsProductsUnifiedCheckoutSubscriptionInformationFeatures {
    static getAttributeTypeMap() {
        return PaymentsProductsUnifiedCheckoutSubscriptionInformationFeatures.attributeTypeMap;
    }
}
exports.PaymentsProductsUnifiedCheckoutSubscriptionInformationFeatures = PaymentsProductsUnifiedCheckoutSubscriptionInformationFeatures;
PaymentsProductsUnifiedCheckoutSubscriptionInformationFeatures.discriminator = undefined;
PaymentsProductsUnifiedCheckoutSubscriptionInformationFeatures.attributeTypeMap = [
    {
        "name": "pazeForUnifiedCheckout",
        "baseName": "pazeForUnifiedCheckout",
        "type": "PaymentsProductsUnifiedCheckoutSubscriptionInformationFeaturesPazeForUnifiedCheckout"
    }
];
/**
* Enabling Paze under unified checkout
*/
class PaymentsProductsUnifiedCheckoutSubscriptionInformationFeaturesPazeForUnifiedCheckout {
    static getAttributeTypeMap() {
        return PaymentsProductsUnifiedCheckoutSubscriptionInformationFeaturesPazeForUnifiedCheckout.attributeTypeMap;
    }
}
exports.PaymentsProductsUnifiedCheckoutSubscriptionInformationFeaturesPazeForUnifiedCheckout = PaymentsProductsUnifiedCheckoutSubscriptionInformationFeaturesPazeForUnifiedCheckout;
PaymentsProductsUnifiedCheckoutSubscriptionInformationFeaturesPazeForUnifiedCheckout.discriminator = undefined;
PaymentsProductsUnifiedCheckoutSubscriptionInformationFeaturesPazeForUnifiedCheckout.attributeTypeMap = [
    {
        "name": "enabled",
        "baseName": "enabled",
        "type": "boolean"
    }
];
class PaymentsProductsVirtualTerminal {
    static getAttributeTypeMap() {
        return PaymentsProductsVirtualTerminal.attributeTypeMap;
    }
}
exports.PaymentsProductsVirtualTerminal = PaymentsProductsVirtualTerminal;
PaymentsProductsVirtualTerminal.discriminator = undefined;
PaymentsProductsVirtualTerminal.attributeTypeMap = [
    {
        "name": "subscriptionInformation",
        "baseName": "subscriptionInformation",
        "type": "PaymentsProductsAlternativePaymentMethodsSubscriptionInformation"
    },
    {
        "name": "configurationInformation",
        "baseName": "configurationInformation",
        "type": "PaymentsProductsVirtualTerminalConfigurationInformation"
    }
];
class PaymentsProductsVirtualTerminalConfigurationInformation {
    static getAttributeTypeMap() {
        return PaymentsProductsVirtualTerminalConfigurationInformation.attributeTypeMap;
    }
}
exports.PaymentsProductsVirtualTerminalConfigurationInformation = PaymentsProductsVirtualTerminalConfigurationInformation;
PaymentsProductsVirtualTerminalConfigurationInformation.discriminator = undefined;
PaymentsProductsVirtualTerminalConfigurationInformation.attributeTypeMap = [
    {
        "name": "templateId",
        "baseName": "templateId",
        "type": "string"
    },
    {
        "name": "configurations",
        "baseName": "configurations",
        "type": "VTConfig"
    }
];
class PaymentsStrongAuthIssuerInformation {
    static getAttributeTypeMap() {
        return PaymentsStrongAuthIssuerInformation.attributeTypeMap;
    }
}
exports.PaymentsStrongAuthIssuerInformation = PaymentsStrongAuthIssuerInformation;
PaymentsStrongAuthIssuerInformation.discriminator = undefined;
PaymentsStrongAuthIssuerInformation.attributeTypeMap = [
    {
        "name": "riskAnalysisExemptionResult",
        "baseName": "riskAnalysisExemptionResult",
        "type": "string"
    },
    {
        "name": "trustedMerchantExemptionResult",
        "baseName": "trustedMerchantExemptionResult",
        "type": "string"
    },
    {
        "name": "lowValueExemptionResult",
        "baseName": "lowValueExemptionResult",
        "type": "string"
    },
    {
        "name": "secureCorporatePaymentResult",
        "baseName": "secureCorporatePaymentResult",
        "type": "string"
    },
    {
        "name": "transactionRiskAnalysisExemptionResult",
        "baseName": "transactionRiskAnalysisExemptionResult",
        "type": "string"
    },
    {
        "name": "delegatedAuthenticationResult",
        "baseName": "delegatedAuthenticationResult",
        "type": "string"
    }
];
class PblPaymentLinksAllGet200Response {
    static getAttributeTypeMap() {
        return PblPaymentLinksAllGet200Response.attributeTypeMap;
    }
}
exports.PblPaymentLinksAllGet200Response = PblPaymentLinksAllGet200Response;
PblPaymentLinksAllGet200Response.discriminator = undefined;
PblPaymentLinksAllGet200Response.attributeTypeMap = [
    {
        "name": "links",
        "baseName": "_links",
        "type": "GetAllPlansResponseLinks"
    },
    {
        "name": "submitTimeUtc",
        "baseName": "submitTimeUtc",
        "type": "string"
    },
    {
        "name": "totalLinks",
        "baseName": "totalLinks",
        "type": "number"
    },
    {
        "name": "links",
        "baseName": "links",
        "type": "Array<PblPaymentLinksAllGet200ResponseLinks>"
    }
];
/**
* A list of purchase or donation links.
*/
class PblPaymentLinksAllGet200ResponseLinks {
    static getAttributeTypeMap() {
        return PblPaymentLinksAllGet200ResponseLinks.attributeTypeMap;
    }
}
exports.PblPaymentLinksAllGet200ResponseLinks = PblPaymentLinksAllGet200ResponseLinks;
PblPaymentLinksAllGet200ResponseLinks.discriminator = undefined;
PblPaymentLinksAllGet200ResponseLinks.attributeTypeMap = [
    {
        "name": "links",
        "baseName": "_links",
        "type": "GetAllPlansResponseLinks"
    },
    {
        "name": "id",
        "baseName": "id",
        "type": "string"
    },
    {
        "name": "status",
        "baseName": "status",
        "type": "string"
    },
    {
        "name": "createdDate",
        "baseName": "createdDate",
        "type": "string"
    },
    {
        "name": "processingInformation",
        "baseName": "processingInformation",
        "type": "PblPaymentLinksAllGet200ResponseProcessingInformation"
    },
    {
        "name": "purchaseInformation",
        "baseName": "purchaseInformation",
        "type": "PblPaymentLinksAllGet200ResponsePurchaseInformation"
    },
    {
        "name": "orderInformation",
        "baseName": "orderInformation",
        "type": "PblPaymentLinksAllGet200ResponseOrderInformation"
    }
];
/**
* Contains all of the order-related fields, such as the amount and line item details.
*/
class PblPaymentLinksAllGet200ResponseOrderInformation {
    static getAttributeTypeMap() {
        return PblPaymentLinksAllGet200ResponseOrderInformation.attributeTypeMap;
    }
}
exports.PblPaymentLinksAllGet200ResponseOrderInformation = PblPaymentLinksAllGet200ResponseOrderInformation;
PblPaymentLinksAllGet200ResponseOrderInformation.discriminator = undefined;
PblPaymentLinksAllGet200ResponseOrderInformation.attributeTypeMap = [
    {
        "name": "amountDetails",
        "baseName": "amountDetails",
        "type": "PblPaymentLinksAllGet200ResponseOrderInformationAmountDetails"
    },
    {
        "name": "lineItems",
        "baseName": "lineItems",
        "type": "Array<PblPaymentLinksAllGet200ResponseOrderInformationLineItems>"
    }
];
/**
* Contains all of the amount-related fields.
*/
class PblPaymentLinksAllGet200ResponseOrderInformationAmountDetails {
    static getAttributeTypeMap() {
        return PblPaymentLinksAllGet200ResponseOrderInformationAmountDetails.attributeTypeMap;
    }
}
exports.PblPaymentLinksAllGet200ResponseOrderInformationAmountDetails = PblPaymentLinksAllGet200ResponseOrderInformationAmountDetails;
PblPaymentLinksAllGet200ResponseOrderInformationAmountDetails.discriminator = undefined;
PblPaymentLinksAllGet200ResponseOrderInformationAmountDetails.attributeTypeMap = [
    {
        "name": "totalAmount",
        "baseName": "totalAmount",
        "type": "string"
    },
    {
        "name": "currency",
        "baseName": "currency",
        "type": "string"
    },
    {
        "name": "maxAmount",
        "baseName": "maxAmount",
        "type": "string"
    },
    {
        "name": "minAmount",
        "baseName": "minAmount",
        "type": "string"
    }
];
/**
* Line item from the order.
*/
class PblPaymentLinksAllGet200ResponseOrderInformationLineItems {
    static getAttributeTypeMap() {
        return PblPaymentLinksAllGet200ResponseOrderInformationLineItems.attributeTypeMap;
    }
}
exports.PblPaymentLinksAllGet200ResponseOrderInformationLineItems = PblPaymentLinksAllGet200ResponseOrderInformationLineItems;
PblPaymentLinksAllGet200ResponseOrderInformationLineItems.discriminator = undefined;
PblPaymentLinksAllGet200ResponseOrderInformationLineItems.attributeTypeMap = [
    {
        "name": "productName",
        "baseName": "productName",
        "type": "string"
    },
    {
        "name": "unitPrice",
        "baseName": "unitPrice",
        "type": "string"
    },
    {
        "name": "productDescription",
        "baseName": "productDescription",
        "type": "string"
    }
];
/**
* Contains processing information, such as the type and collection details.
*/
class PblPaymentLinksAllGet200ResponseProcessingInformation {
    static getAttributeTypeMap() {
        return PblPaymentLinksAllGet200ResponseProcessingInformation.attributeTypeMap;
    }
}
exports.PblPaymentLinksAllGet200ResponseProcessingInformation = PblPaymentLinksAllGet200ResponseProcessingInformation;
PblPaymentLinksAllGet200ResponseProcessingInformation.discriminator = undefined;
PblPaymentLinksAllGet200ResponseProcessingInformation.attributeTypeMap = [
    {
        "name": "linkType",
        "baseName": "linkType",
        "type": "PblPaymentLinksAllGet200ResponseProcessingInformation.LinkTypeEnum"
    }
];
(function (PblPaymentLinksAllGet200ResponseProcessingInformation) {
    let LinkTypeEnum;
    (function (LinkTypeEnum) {
        LinkTypeEnum[LinkTypeEnum["PURCHASE"] = 'PURCHASE'] = "PURCHASE";
        LinkTypeEnum[LinkTypeEnum["DONATION"] = 'DONATION'] = "DONATION";
    })(LinkTypeEnum = PblPaymentLinksAllGet200ResponseProcessingInformation.LinkTypeEnum || (PblPaymentLinksAllGet200ResponseProcessingInformation.LinkTypeEnum = {}));
})(PblPaymentLinksAllGet200ResponseProcessingInformation = exports.PblPaymentLinksAllGet200ResponseProcessingInformation || (exports.PblPaymentLinksAllGet200ResponseProcessingInformation = {}));
/**
* Contains link specific detail.
*/
class PblPaymentLinksAllGet200ResponsePurchaseInformation {
    static getAttributeTypeMap() {
        return PblPaymentLinksAllGet200ResponsePurchaseInformation.attributeTypeMap;
    }
}
exports.PblPaymentLinksAllGet200ResponsePurchaseInformation = PblPaymentLinksAllGet200ResponsePurchaseInformation;
PblPaymentLinksAllGet200ResponsePurchaseInformation.discriminator = undefined;
PblPaymentLinksAllGet200ResponsePurchaseInformation.attributeTypeMap = [
    {
        "name": "purchaseNumber",
        "baseName": "purchaseNumber",
        "type": "string"
    },
    {
        "name": "paymentLink",
        "baseName": "paymentLink",
        "type": "string"
    }
];
class PblPaymentLinksAllGet400Response {
    static getAttributeTypeMap() {
        return PblPaymentLinksAllGet400Response.attributeTypeMap;
    }
}
exports.PblPaymentLinksAllGet400Response = PblPaymentLinksAllGet400Response;
PblPaymentLinksAllGet400Response.discriminator = undefined;
PblPaymentLinksAllGet400Response.attributeTypeMap = [
    {
        "name": "submitTimeUtc",
        "baseName": "submitTimeUtc",
        "type": "string"
    },
    {
        "name": "status",
        "baseName": "status",
        "type": "string"
    },
    {
        "name": "reason",
        "baseName": "reason",
        "type": "string"
    },
    {
        "name": "message",
        "baseName": "message",
        "type": "string"
    },
    {
        "name": "details",
        "baseName": "details",
        "type": "Array<PtsV2PaymentsPost201ResponseErrorInformationDetails>"
    }
];
class PblPaymentLinksAllGet404Response {
    static getAttributeTypeMap() {
        return PblPaymentLinksAllGet404Response.attributeTypeMap;
    }
}
exports.PblPaymentLinksAllGet404Response = PblPaymentLinksAllGet404Response;
PblPaymentLinksAllGet404Response.discriminator = undefined;
PblPaymentLinksAllGet404Response.attributeTypeMap = [
    {
        "name": "submitTimeUtc",
        "baseName": "submitTimeUtc",
        "type": "string"
    },
    {
        "name": "status",
        "baseName": "status",
        "type": "string"
    },
    {
        "name": "reason",
        "baseName": "reason",
        "type": "string"
    },
    {
        "name": "message",
        "baseName": "message",
        "type": "string"
    },
    {
        "name": "details",
        "baseName": "details",
        "type": "Array<PtsV2PaymentsPost201ResponseErrorInformationDetails>"
    }
];
class PblPaymentLinksGet200Response {
    static getAttributeTypeMap() {
        return PblPaymentLinksGet200Response.attributeTypeMap;
    }
}
exports.PblPaymentLinksGet200Response = PblPaymentLinksGet200Response;
PblPaymentLinksGet200Response.discriminator = undefined;
PblPaymentLinksGet200Response.attributeTypeMap = [
    {
        "name": "links",
        "baseName": "_links",
        "type": "PblPaymentLinksPost201ResponseLinks"
    },
    {
        "name": "id",
        "baseName": "id",
        "type": "string"
    },
    {
        "name": "submitTimeUtc",
        "baseName": "submitTimeUtc",
        "type": "string"
    },
    {
        "name": "status",
        "baseName": "status",
        "type": "string"
    },
    {
        "name": "processingInformation",
        "baseName": "processingInformation",
        "type": "Iplv2paymentlinksProcessingInformation"
    },
    {
        "name": "purchaseInformation",
        "baseName": "purchaseInformation",
        "type": "PblPaymentLinksPost201ResponsePurchaseInformation"
    },
    {
        "name": "orderInformation",
        "baseName": "orderInformation",
        "type": "PblPaymentLinksPost201ResponseOrderInformation"
    }
];
class PblPaymentLinksPost201Response {
    static getAttributeTypeMap() {
        return PblPaymentLinksPost201Response.attributeTypeMap;
    }
}
exports.PblPaymentLinksPost201Response = PblPaymentLinksPost201Response;
PblPaymentLinksPost201Response.discriminator = undefined;
PblPaymentLinksPost201Response.attributeTypeMap = [
    {
        "name": "links",
        "baseName": "_links",
        "type": "PblPaymentLinksPost201ResponseLinks"
    },
    {
        "name": "id",
        "baseName": "id",
        "type": "string"
    },
    {
        "name": "submitTimeUtc",
        "baseName": "submitTimeUtc",
        "type": "string"
    },
    {
        "name": "status",
        "baseName": "status",
        "type": "string"
    },
    {
        "name": "processingInformation",
        "baseName": "processingInformation",
        "type": "Iplv2paymentlinksProcessingInformation"
    },
    {
        "name": "purchaseInformation",
        "baseName": "purchaseInformation",
        "type": "PblPaymentLinksPost201ResponsePurchaseInformation"
    },
    {
        "name": "orderInformation",
        "baseName": "orderInformation",
        "type": "PblPaymentLinksPost201ResponseOrderInformation"
    }
];
class PblPaymentLinksPost201ResponseLinks {
    static getAttributeTypeMap() {
        return PblPaymentLinksPost201ResponseLinks.attributeTypeMap;
    }
}
exports.PblPaymentLinksPost201ResponseLinks = PblPaymentLinksPost201ResponseLinks;
PblPaymentLinksPost201ResponseLinks.discriminator = undefined;
PblPaymentLinksPost201ResponseLinks.attributeTypeMap = [
    {
        "name": "self",
        "baseName": "self",
        "type": "PtsV2PaymentsPost201ResponseLinksSelf"
    },
    {
        "name": "update",
        "baseName": "update",
        "type": "PtsV2PaymentsPost201ResponseLinksSelf"
    }
];
/**
* Contains all of the order-related fields, such as the amount and line item details.
*/
class PblPaymentLinksPost201ResponseOrderInformation {
    static getAttributeTypeMap() {
        return PblPaymentLinksPost201ResponseOrderInformation.attributeTypeMap;
    }
}
exports.PblPaymentLinksPost201ResponseOrderInformation = PblPaymentLinksPost201ResponseOrderInformation;
PblPaymentLinksPost201ResponseOrderInformation.discriminator = undefined;
PblPaymentLinksPost201ResponseOrderInformation.attributeTypeMap = [
    {
        "name": "amountDetails",
        "baseName": "amountDetails",
        "type": "PblPaymentLinksAllGet200ResponseOrderInformationAmountDetails"
    },
    {
        "name": "lineItems",
        "baseName": "lineItems",
        "type": "Array<Iplv2paymentlinksOrderInformationLineItems>"
    }
];
/**
* Contains link specific detail.
*/
class PblPaymentLinksPost201ResponsePurchaseInformation {
    static getAttributeTypeMap() {
        return PblPaymentLinksPost201ResponsePurchaseInformation.attributeTypeMap;
    }
}
exports.PblPaymentLinksPost201ResponsePurchaseInformation = PblPaymentLinksPost201ResponsePurchaseInformation;
PblPaymentLinksPost201ResponsePurchaseInformation.discriminator = undefined;
PblPaymentLinksPost201ResponsePurchaseInformation.attributeTypeMap = [
    {
        "name": "purchaseNumber",
        "baseName": "purchaseNumber",
        "type": "string"
    },
    {
        "name": "createdDate",
        "baseName": "createdDate",
        "type": "string"
    },
    {
        "name": "paymentLink",
        "baseName": "paymentLink",
        "type": "string"
    }
];
class PostCustomerPaymentInstrumentRequest {
    static getAttributeTypeMap() {
        return PostCustomerPaymentInstrumentRequest.attributeTypeMap;
    }
}
exports.PostCustomerPaymentInstrumentRequest = PostCustomerPaymentInstrumentRequest;
PostCustomerPaymentInstrumentRequest.discriminator = undefined;
PostCustomerPaymentInstrumentRequest.attributeTypeMap = [
    {
        "name": "links",
        "baseName": "_links",
        "type": "Tmsv2customersEmbeddedDefaultPaymentInstrumentLinks"
    },
    {
        "name": "id",
        "baseName": "id",
        "type": "string"
    },
    {
        "name": "object",
        "baseName": "object",
        "type": "string"
    },
    {
        "name": "_default",
        "baseName": "default",
        "type": "boolean"
    },
    {
        "name": "state",
        "baseName": "state",
        "type": "string"
    },
    {
        "name": "type",
        "baseName": "type",
        "type": "string"
    },
    {
        "name": "bankAccount",
        "baseName": "bankAccount",
        "type": "Tmsv2customersEmbeddedDefaultPaymentInstrumentBankAccount"
    },
    {
        "name": "card",
        "baseName": "card",
        "type": "Tmsv2customersEmbeddedDefaultPaymentInstrumentCard"
    },
    {
        "name": "buyerInformation",
        "baseName": "buyerInformation",
        "type": "Tmsv2customersEmbeddedDefaultPaymentInstrumentBuyerInformation"
    },
    {
        "name": "billTo",
        "baseName": "billTo",
        "type": "Tmsv2customersEmbeddedDefaultPaymentInstrumentBillTo"
    },
    {
        "name": "processingInformation",
        "baseName": "processingInformation",
        "type": "TmsPaymentInstrumentProcessingInfo"
    },
    {
        "name": "merchantInformation",
        "baseName": "merchantInformation",
        "type": "Tmsv2customersEmbeddedDefaultPaymentInstrumentMerchantInformation"
    },
    {
        "name": "instrumentIdentifier",
        "baseName": "instrumentIdentifier",
        "type": "Tmsv2customersEmbeddedDefaultPaymentInstrumentInstrumentIdentifier"
    },
    {
        "name": "metadata",
        "baseName": "metadata",
        "type": "Tmsv2customersEmbeddedDefaultPaymentInstrumentMetadata"
    },
    {
        "name": "embedded",
        "baseName": "_embedded",
        "type": "Tmsv2customersEmbeddedDefaultPaymentInstrumentEmbedded"
    }
];
class PostCustomerRequest {
    static getAttributeTypeMap() {
        return PostCustomerRequest.attributeTypeMap;
    }
}
exports.PostCustomerRequest = PostCustomerRequest;
PostCustomerRequest.discriminator = undefined;
PostCustomerRequest.attributeTypeMap = [
    {
        "name": "links",
        "baseName": "_links",
        "type": "Tmsv2customersLinks"
    },
    {
        "name": "id",
        "baseName": "id",
        "type": "string"
    },
    {
        "name": "objectInformation",
        "baseName": "objectInformation",
        "type": "Tmsv2customersObjectInformation"
    },
    {
        "name": "buyerInformation",
        "baseName": "buyerInformation",
        "type": "Tmsv2customersBuyerInformation"
    },
    {
        "name": "clientReferenceInformation",
        "baseName": "clientReferenceInformation",
        "type": "Tmsv2customersClientReferenceInformation"
    },
    {
        "name": "merchantDefinedInformation",
        "baseName": "merchantDefinedInformation",
        "type": "Array<Tmsv2customersMerchantDefinedInformation>"
    },
    {
        "name": "defaultPaymentInstrument",
        "baseName": "defaultPaymentInstrument",
        "type": "Tmsv2customersDefaultPaymentInstrument"
    },
    {
        "name": "defaultShippingAddress",
        "baseName": "defaultShippingAddress",
        "type": "Tmsv2customersDefaultShippingAddress"
    },
    {
        "name": "metadata",
        "baseName": "metadata",
        "type": "Tmsv2customersMetadata"
    },
    {
        "name": "embedded",
        "baseName": "_embedded",
        "type": "Tmsv2customersEmbedded"
    }
];
class PostCustomerShippingAddressRequest {
    static getAttributeTypeMap() {
        return PostCustomerShippingAddressRequest.attributeTypeMap;
    }
}
exports.PostCustomerShippingAddressRequest = PostCustomerShippingAddressRequest;
PostCustomerShippingAddressRequest.discriminator = undefined;
PostCustomerShippingAddressRequest.attributeTypeMap = [
    {
        "name": "links",
        "baseName": "_links",
        "type": "Tmsv2customersEmbeddedDefaultShippingAddressLinks"
    },
    {
        "name": "id",
        "baseName": "id",
        "type": "string"
    },
    {
        "name": "_default",
        "baseName": "default",
        "type": "boolean"
    },
    {
        "name": "shipTo",
        "baseName": "shipTo",
        "type": "Tmsv2customersEmbeddedDefaultShippingAddressShipTo"
    },
    {
        "name": "metadata",
        "baseName": "metadata",
        "type": "Tmsv2customersEmbeddedDefaultShippingAddressMetadata"
    }
];
class PostDeviceSearchRequestV3 {
    static getAttributeTypeMap() {
        return PostDeviceSearchRequestV3.attributeTypeMap;
    }
}
exports.PostDeviceSearchRequestV3 = PostDeviceSearchRequestV3;
PostDeviceSearchRequestV3.discriminator = undefined;
PostDeviceSearchRequestV3.attributeTypeMap = [
    {
        "name": "query",
        "baseName": "query",
        "type": "string"
    },
    {
        "name": "sort",
        "baseName": "sort",
        "type": "string"
    },
    {
        "name": "offset",
        "baseName": "offset",
        "type": "number"
    },
    {
        "name": "limit",
        "baseName": "limit",
        "type": "number"
    }
];
class PostInstrumentIdentifierEnrollmentRequest {
    static getAttributeTypeMap() {
        return PostInstrumentIdentifierEnrollmentRequest.attributeTypeMap;
    }
}
exports.PostInstrumentIdentifierEnrollmentRequest = PostInstrumentIdentifierEnrollmentRequest;
PostInstrumentIdentifierEnrollmentRequest.discriminator = undefined;
PostInstrumentIdentifierEnrollmentRequest.attributeTypeMap = [
    {
        "name": "links",
        "baseName": "_links",
        "type": "TmsEmbeddedInstrumentIdentifierLinks"
    },
    {
        "name": "id",
        "baseName": "id",
        "type": "string"
    },
    {
        "name": "object",
        "baseName": "object",
        "type": "string"
    },
    {
        "name": "state",
        "baseName": "state",
        "type": "string"
    },
    {
        "name": "type",
        "baseName": "type",
        "type": "string"
    },
    {
        "name": "tokenProvisioningInformation",
        "baseName": "tokenProvisioningInformation",
        "type": "Ptsv2paymentsTokenInformationTokenProvisioningInformation"
    },
    {
        "name": "card",
        "baseName": "card",
        "type": "TmsEmbeddedInstrumentIdentifierCard"
    },
    {
        "name": "bankAccount",
        "baseName": "bankAccount",
        "type": "TmsEmbeddedInstrumentIdentifierBankAccount"
    },
    {
        "name": "tokenizedCard",
        "baseName": "tokenizedCard",
        "type": "Tmsv2TokenizedCard"
    },
    {
        "name": "issuer",
        "baseName": "issuer",
        "type": "TmsEmbeddedInstrumentIdentifierIssuer"
    },
    {
        "name": "processingInformation",
        "baseName": "processingInformation",
        "type": "TmsEmbeddedInstrumentIdentifierProcessingInformation"
    },
    {
        "name": "billTo",
        "baseName": "billTo",
        "type": "TmsEmbeddedInstrumentIdentifierBillTo"
    },
    {
        "name": "metadata",
        "baseName": "metadata",
        "type": "TmsEmbeddedInstrumentIdentifierMetadata"
    },
    {
        "name": "embedded",
        "baseName": "_embedded",
        "type": "TmsEmbeddedInstrumentIdentifierEmbedded"
    }
];
class PostInstrumentIdentifierRequest {
    static getAttributeTypeMap() {
        return PostInstrumentIdentifierRequest.attributeTypeMap;
    }
}
exports.PostInstrumentIdentifierRequest = PostInstrumentIdentifierRequest;
PostInstrumentIdentifierRequest.discriminator = undefined;
PostInstrumentIdentifierRequest.attributeTypeMap = [
    {
        "name": "links",
        "baseName": "_links",
        "type": "TmsEmbeddedInstrumentIdentifierLinks"
    },
    {
        "name": "id",
        "baseName": "id",
        "type": "string"
    },
    {
        "name": "object",
        "baseName": "object",
        "type": "string"
    },
    {
        "name": "state",
        "baseName": "state",
        "type": "string"
    },
    {
        "name": "type",
        "baseName": "type",
        "type": "string"
    },
    {
        "name": "tokenProvisioningInformation",
        "baseName": "tokenProvisioningInformation",
        "type": "Ptsv2paymentsTokenInformationTokenProvisioningInformation"
    },
    {
        "name": "card",
        "baseName": "card",
        "type": "TmsEmbeddedInstrumentIdentifierCard"
    },
    {
        "name": "bankAccount",
        "baseName": "bankAccount",
        "type": "TmsEmbeddedInstrumentIdentifierBankAccount"
    },
    {
        "name": "tokenizedCard",
        "baseName": "tokenizedCard",
        "type": "Tmsv2TokenizedCard"
    },
    {
        "name": "issuer",
        "baseName": "issuer",
        "type": "TmsEmbeddedInstrumentIdentifierIssuer"
    },
    {
        "name": "processingInformation",
        "baseName": "processingInformation",
        "type": "TmsEmbeddedInstrumentIdentifierProcessingInformation"
    },
    {
        "name": "billTo",
        "baseName": "billTo",
        "type": "TmsEmbeddedInstrumentIdentifierBillTo"
    },
    {
        "name": "metadata",
        "baseName": "metadata",
        "type": "TmsEmbeddedInstrumentIdentifierMetadata"
    },
    {
        "name": "embedded",
        "baseName": "_embedded",
        "type": "TmsEmbeddedInstrumentIdentifierEmbedded"
    }
];
class PostPaymentCredentialsRequest {
    static getAttributeTypeMap() {
        return PostPaymentCredentialsRequest.attributeTypeMap;
    }
}
exports.PostPaymentCredentialsRequest = PostPaymentCredentialsRequest;
PostPaymentCredentialsRequest.discriminator = undefined;
PostPaymentCredentialsRequest.attributeTypeMap = [
    {
        "name": "paymentCredentialType",
        "baseName": "paymentCredentialType",
        "type": "string"
    },
    {
        "name": "transactionType",
        "baseName": "transactionType",
        "type": "string"
    }
];
class PostPaymentInstrumentRequest {
    static getAttributeTypeMap() {
        return PostPaymentInstrumentRequest.attributeTypeMap;
    }
}
exports.PostPaymentInstrumentRequest = PostPaymentInstrumentRequest;
PostPaymentInstrumentRequest.discriminator = undefined;
PostPaymentInstrumentRequest.attributeTypeMap = [
    {
        "name": "links",
        "baseName": "_links",
        "type": "Tmsv2customersEmbeddedDefaultPaymentInstrumentLinks"
    },
    {
        "name": "id",
        "baseName": "id",
        "type": "string"
    },
    {
        "name": "object",
        "baseName": "object",
        "type": "string"
    },
    {
        "name": "_default",
        "baseName": "default",
        "type": "boolean"
    },
    {
        "name": "state",
        "baseName": "state",
        "type": "string"
    },
    {
        "name": "type",
        "baseName": "type",
        "type": "string"
    },
    {
        "name": "bankAccount",
        "baseName": "bankAccount",
        "type": "Tmsv2customersEmbeddedDefaultPaymentInstrumentBankAccount"
    },
    {
        "name": "card",
        "baseName": "card",
        "type": "Tmsv2customersEmbeddedDefaultPaymentInstrumentCard"
    },
    {
        "name": "buyerInformation",
        "baseName": "buyerInformation",
        "type": "Tmsv2customersEmbeddedDefaultPaymentInstrumentBuyerInformation"
    },
    {
        "name": "billTo",
        "baseName": "billTo",
        "type": "Tmsv2customersEmbeddedDefaultPaymentInstrumentBillTo"
    },
    {
        "name": "processingInformation",
        "baseName": "processingInformation",
        "type": "TmsPaymentInstrumentProcessingInfo"
    },
    {
        "name": "merchantInformation",
        "baseName": "merchantInformation",
        "type": "Tmsv2customersEmbeddedDefaultPaymentInstrumentMerchantInformation"
    },
    {
        "name": "instrumentIdentifier",
        "baseName": "instrumentIdentifier",
        "type": "Tmsv2customersEmbeddedDefaultPaymentInstrumentInstrumentIdentifier"
    },
    {
        "name": "metadata",
        "baseName": "metadata",
        "type": "Tmsv2customersEmbeddedDefaultPaymentInstrumentMetadata"
    },
    {
        "name": "embedded",
        "baseName": "_embedded",
        "type": "Tmsv2customersEmbeddedDefaultPaymentInstrumentEmbedded"
    }
];
class PostRegistrationBody {
    static getAttributeTypeMap() {
        return PostRegistrationBody.attributeTypeMap;
    }
}
exports.PostRegistrationBody = PostRegistrationBody;
PostRegistrationBody.discriminator = undefined;
PostRegistrationBody.attributeTypeMap = [
    {
        "name": "registrationInformation",
        "baseName": "registrationInformation",
        "type": "Boardingv1registrationsRegistrationInformation"
    },
    {
        "name": "integrationInformation",
        "baseName": "integrationInformation",
        "type": "Boardingv1registrationsIntegrationInformation"
    },
    {
        "name": "organizationInformation",
        "baseName": "organizationInformation",
        "type": "Boardingv1registrationsOrganizationInformation"
    },
    {
        "name": "productInformation",
        "baseName": "productInformation",
        "type": "Boardingv1registrationsProductInformation"
    },
    {
        "name": "documentInformation",
        "baseName": "documentInformation",
        "type": "Boardingv1registrationsDocumentInformation"
    }
];
class PredefinedSubscriptionRequestBean {
    static getAttributeTypeMap() {
        return PredefinedSubscriptionRequestBean.attributeTypeMap;
    }
}
exports.PredefinedSubscriptionRequestBean = PredefinedSubscriptionRequestBean;
PredefinedSubscriptionRequestBean.discriminator = undefined;
PredefinedSubscriptionRequestBean.attributeTypeMap = [
    {
        "name": "reportDefinitionName",
        "baseName": "reportDefinitionName",
        "type": "string"
    },
    {
        "name": "subscriptionType",
        "baseName": "subscriptionType",
        "type": "string"
    },
    {
        "name": "reportName",
        "baseName": "reportName",
        "type": "string"
    },
    {
        "name": "reportMimeType",
        "baseName": "reportMimeType",
        "type": "string"
    },
    {
        "name": "reportFrequency",
        "baseName": "reportFrequency",
        "type": "string"
    },
    {
        "name": "reportInterval",
        "baseName": "reportInterval",
        "type": "string"
    },
    {
        "name": "timezone",
        "baseName": "timezone",
        "type": "string"
    },
    {
        "name": "startTime",
        "baseName": "startTime",
        "type": "string"
    },
    {
        "name": "startDay",
        "baseName": "startDay",
        "type": "number"
    },
    {
        "name": "subscriptionStatus",
        "baseName": "subscriptionStatus",
        "type": "string"
    }
];
class PtsV1TransactionBatchesGet200Response {
    static getAttributeTypeMap() {
        return PtsV1TransactionBatchesGet200Response.attributeTypeMap;
    }
}
exports.PtsV1TransactionBatchesGet200Response = PtsV1TransactionBatchesGet200Response;
PtsV1TransactionBatchesGet200Response.discriminator = undefined;
PtsV1TransactionBatchesGet200Response.attributeTypeMap = [
    {
        "name": "transactionBatches",
        "baseName": "transactionBatches",
        "type": "Array<PtsV1TransactionBatchesGet200ResponseTransactionBatches>"
    },
    {
        "name": "links",
        "baseName": "_links",
        "type": "PtsV1TransactionBatchesGet200ResponseLinks"
    },
    {
        "name": "submitTimeUtc",
        "baseName": "submitTimeUtc",
        "type": "string"
    }
];
class PtsV1TransactionBatchesGet200ResponseLinks {
    static getAttributeTypeMap() {
        return PtsV1TransactionBatchesGet200ResponseLinks.attributeTypeMap;
    }
}
exports.PtsV1TransactionBatchesGet200ResponseLinks = PtsV1TransactionBatchesGet200ResponseLinks;
PtsV1TransactionBatchesGet200ResponseLinks.discriminator = undefined;
PtsV1TransactionBatchesGet200ResponseLinks.attributeTypeMap = [
    {
        "name": "self",
        "baseName": "self",
        "type": "PtsV1TransactionBatchesGet200ResponseLinksSelf"
    }
];
class PtsV1TransactionBatchesGet200ResponseLinksSelf {
    static getAttributeTypeMap() {
        return PtsV1TransactionBatchesGet200ResponseLinksSelf.attributeTypeMap;
    }
}
exports.PtsV1TransactionBatchesGet200ResponseLinksSelf = PtsV1TransactionBatchesGet200ResponseLinksSelf;
PtsV1TransactionBatchesGet200ResponseLinksSelf.discriminator = undefined;
PtsV1TransactionBatchesGet200ResponseLinksSelf.attributeTypeMap = [
    {
        "name": "href",
        "baseName": "href",
        "type": "string"
    },
    {
        "name": "method",
        "baseName": "method",
        "type": "string"
    }
];
class PtsV1TransactionBatchesGet200ResponseTransactionBatches {
    static getAttributeTypeMap() {
        return PtsV1TransactionBatchesGet200ResponseTransactionBatches.attributeTypeMap;
    }
}
exports.PtsV1TransactionBatchesGet200ResponseTransactionBatches = PtsV1TransactionBatchesGet200ResponseTransactionBatches;
PtsV1TransactionBatchesGet200ResponseTransactionBatches.discriminator = undefined;
PtsV1TransactionBatchesGet200ResponseTransactionBatches.attributeTypeMap = [
    {
        "name": "id",
        "baseName": "id",
        "type": "string"
    },
    {
        "name": "uploadDate",
        "baseName": "uploadDate",
        "type": "string"
    },
    {
        "name": "completionDate",
        "baseName": "completionDate",
        "type": "string"
    },
    {
        "name": "transactionCount",
        "baseName": "transactionCount",
        "type": "number"
    },
    {
        "name": "acceptedTransactionCount",
        "baseName": "acceptedTransactionCount",
        "type": "number"
    },
    {
        "name": "rejectedTransactionCount",
        "baseName": "rejectedTransactionCount",
        "type": "string"
    },
    {
        "name": "status",
        "baseName": "status",
        "type": "string"
    }
];
class PtsV1TransactionBatchesGet400Response {
    static getAttributeTypeMap() {
        return PtsV1TransactionBatchesGet400Response.attributeTypeMap;
    }
}
exports.PtsV1TransactionBatchesGet400Response = PtsV1TransactionBatchesGet400Response;
PtsV1TransactionBatchesGet400Response.discriminator = undefined;
PtsV1TransactionBatchesGet400Response.attributeTypeMap = [
    {
        "name": "errorInformation",
        "baseName": "errorInformation",
        "type": "PtsV1TransactionBatchesGet400ResponseErrorInformation"
    },
    {
        "name": "submitTimeUtc",
        "baseName": "submitTimeUtc",
        "type": "string"
    }
];
class PtsV1TransactionBatchesGet400ResponseErrorInformation {
    static getAttributeTypeMap() {
        return PtsV1TransactionBatchesGet400ResponseErrorInformation.attributeTypeMap;
    }
}
exports.PtsV1TransactionBatchesGet400ResponseErrorInformation = PtsV1TransactionBatchesGet400ResponseErrorInformation;
PtsV1TransactionBatchesGet400ResponseErrorInformation.discriminator = undefined;
PtsV1TransactionBatchesGet400ResponseErrorInformation.attributeTypeMap = [
    {
        "name": "reason",
        "baseName": "reason",
        "type": "string"
    },
    {
        "name": "message",
        "baseName": "message",
        "type": "string"
    },
    {
        "name": "details",
        "baseName": "details",
        "type": "Array<PtsV1TransactionBatchesGet400ResponseErrorInformationDetails>"
    }
];
class PtsV1TransactionBatchesGet400ResponseErrorInformationDetails {
    static getAttributeTypeMap() {
        return PtsV1TransactionBatchesGet400ResponseErrorInformationDetails.attributeTypeMap;
    }
}
exports.PtsV1TransactionBatchesGet400ResponseErrorInformationDetails = PtsV1TransactionBatchesGet400ResponseErrorInformationDetails;
PtsV1TransactionBatchesGet400ResponseErrorInformationDetails.discriminator = undefined;
PtsV1TransactionBatchesGet400ResponseErrorInformationDetails.attributeTypeMap = [
    {
        "name": "field",
        "baseName": "field",
        "type": "string"
    },
    {
        "name": "message",
        "baseName": "message",
        "type": "string"
    }
];
class PtsV1TransactionBatchesGet500Response {
    static getAttributeTypeMap() {
        return PtsV1TransactionBatchesGet500Response.attributeTypeMap;
    }
}
exports.PtsV1TransactionBatchesGet500Response = PtsV1TransactionBatchesGet500Response;
PtsV1TransactionBatchesGet500Response.discriminator = undefined;
PtsV1TransactionBatchesGet500Response.attributeTypeMap = [
    {
        "name": "errorInformation",
        "baseName": "errorInformation",
        "type": "PtsV1TransactionBatchesGet500ResponseErrorInformation"
    },
    {
        "name": "submitTimeUtc",
        "baseName": "submitTimeUtc",
        "type": "string"
    }
];
class PtsV1TransactionBatchesGet500ResponseErrorInformation {
    static getAttributeTypeMap() {
        return PtsV1TransactionBatchesGet500ResponseErrorInformation.attributeTypeMap;
    }
}
exports.PtsV1TransactionBatchesGet500ResponseErrorInformation = PtsV1TransactionBatchesGet500ResponseErrorInformation;
PtsV1TransactionBatchesGet500ResponseErrorInformation.discriminator = undefined;
PtsV1TransactionBatchesGet500ResponseErrorInformation.attributeTypeMap = [
    {
        "name": "reason",
        "baseName": "reason",
        "type": "string"
    },
    {
        "name": "message",
        "baseName": "message",
        "type": "string"
    }
];
class PtsV1TransactionBatchesIdGet200Response {
    static getAttributeTypeMap() {
        return PtsV1TransactionBatchesIdGet200Response.attributeTypeMap;
    }
}
exports.PtsV1TransactionBatchesIdGet200Response = PtsV1TransactionBatchesIdGet200Response;
PtsV1TransactionBatchesIdGet200Response.discriminator = undefined;
PtsV1TransactionBatchesIdGet200Response.attributeTypeMap = [
    {
        "name": "id",
        "baseName": "id",
        "type": "string"
    },
    {
        "name": "uploadDate",
        "baseName": "uploadDate",
        "type": "string"
    },
    {
        "name": "completionDate",
        "baseName": "completionDate",
        "type": "string"
    },
    {
        "name": "transactionCount",
        "baseName": "transactionCount",
        "type": "number"
    },
    {
        "name": "acceptedTransactionCount",
        "baseName": "acceptedTransactionCount",
        "type": "number"
    },
    {
        "name": "rejectedTransactionCount",
        "baseName": "rejectedTransactionCount",
        "type": "string"
    },
    {
        "name": "status",
        "baseName": "status",
        "type": "string"
    },
    {
        "name": "links",
        "baseName": "_links",
        "type": "PtsV1TransactionBatchesIdGet200ResponseLinks"
    }
];
class PtsV1TransactionBatchesIdGet200ResponseLinks {
    static getAttributeTypeMap() {
        return PtsV1TransactionBatchesIdGet200ResponseLinks.attributeTypeMap;
    }
}
exports.PtsV1TransactionBatchesIdGet200ResponseLinks = PtsV1TransactionBatchesIdGet200ResponseLinks;
PtsV1TransactionBatchesIdGet200ResponseLinks.discriminator = undefined;
PtsV1TransactionBatchesIdGet200ResponseLinks.attributeTypeMap = [
    {
        "name": "transactions",
        "baseName": "transactions",
        "type": "Array<PtsV1TransactionBatchesIdGet200ResponseLinksTransactions>"
    }
];
class PtsV1TransactionBatchesIdGet200ResponseLinksTransactions {
    static getAttributeTypeMap() {
        return PtsV1TransactionBatchesIdGet200ResponseLinksTransactions.attributeTypeMap;
    }
}
exports.PtsV1TransactionBatchesIdGet200ResponseLinksTransactions = PtsV1TransactionBatchesIdGet200ResponseLinksTransactions;
PtsV1TransactionBatchesIdGet200ResponseLinksTransactions.discriminator = undefined;
PtsV1TransactionBatchesIdGet200ResponseLinksTransactions.attributeTypeMap = [
    {
        "name": "href",
        "baseName": "href",
        "type": "string"
    },
    {
        "name": "method",
        "baseName": "method",
        "type": "string"
    }
];
class PtsV2CreateBillingAgreementPost201Response {
    static getAttributeTypeMap() {
        return PtsV2CreateBillingAgreementPost201Response.attributeTypeMap;
    }
}
exports.PtsV2CreateBillingAgreementPost201Response = PtsV2CreateBillingAgreementPost201Response;
PtsV2CreateBillingAgreementPost201Response.discriminator = undefined;
PtsV2CreateBillingAgreementPost201Response.attributeTypeMap = [
    {
        "name": "links",
        "baseName": "_links",
        "type": "PtsV2CreateBillingAgreementPost201ResponseLinks"
    },
    {
        "name": "id",
        "baseName": "id",
        "type": "string"
    },
    {
        "name": "submitTimeUtc",
        "baseName": "submitTimeUtc",
        "type": "string"
    },
    {
        "name": "status",
        "baseName": "status",
        "type": "string"
    },
    {
        "name": "processorInformation",
        "baseName": "processorInformation",
        "type": "PtsV2CreateBillingAgreementPost201ResponseProcessorInformation"
    },
    {
        "name": "installmentInformation",
        "baseName": "installmentInformation",
        "type": "PtsV2CreateBillingAgreementPost201ResponseInstallmentInformation"
    },
    {
        "name": "agreementInformation",
        "baseName": "agreementInformation",
        "type": "PtsV2CreateBillingAgreementPost201ResponseAgreementInformation"
    },
    {
        "name": "clientReferenceInformation",
        "baseName": "clientReferenceInformation",
        "type": "PtsV2CreateBillingAgreementPost201ResponseClientReferenceInformation"
    },
    {
        "name": "riskInformation",
        "baseName": "riskInformation",
        "type": "PtsV2CreateBillingAgreementPost201ResponseRiskInformation"
    },
    {
        "name": "reconciliationId",
        "baseName": "reconciliationId",
        "type": "string"
    }
];
class PtsV2CreateBillingAgreementPost201ResponseAgreementInformation {
    static getAttributeTypeMap() {
        return PtsV2CreateBillingAgreementPost201ResponseAgreementInformation.attributeTypeMap;
    }
}
exports.PtsV2CreateBillingAgreementPost201ResponseAgreementInformation = PtsV2CreateBillingAgreementPost201ResponseAgreementInformation;
PtsV2CreateBillingAgreementPost201ResponseAgreementInformation.discriminator = undefined;
PtsV2CreateBillingAgreementPost201ResponseAgreementInformation.attributeTypeMap = [
    {
        "name": "id",
        "baseName": "id",
        "type": "string"
    },
    {
        "name": "dateSigned",
        "baseName": "dateSigned",
        "type": "string"
    },
    {
        "name": "dateCreated",
        "baseName": "dateCreated",
        "type": "string"
    },
    {
        "name": "encodedHtml",
        "baseName": "encodedHtml",
        "type": "string"
    },
    {
        "name": "encodedHtmlPopup",
        "baseName": "encodedHtmlPopup",
        "type": "string"
    },
    {
        "name": "url",
        "baseName": "url",
        "type": "string"
    }
];
class PtsV2CreateBillingAgreementPost201ResponseClientReferenceInformation {
    static getAttributeTypeMap() {
        return PtsV2CreateBillingAgreementPost201ResponseClientReferenceInformation.attributeTypeMap;
    }
}
exports.PtsV2CreateBillingAgreementPost201ResponseClientReferenceInformation = PtsV2CreateBillingAgreementPost201ResponseClientReferenceInformation;
PtsV2CreateBillingAgreementPost201ResponseClientReferenceInformation.discriminator = undefined;
PtsV2CreateBillingAgreementPost201ResponseClientReferenceInformation.attributeTypeMap = [
    {
        "name": "code",
        "baseName": "code",
        "type": "string"
    }
];
class PtsV2CreateBillingAgreementPost201ResponseInstallmentInformation {
    static getAttributeTypeMap() {
        return PtsV2CreateBillingAgreementPost201ResponseInstallmentInformation.attributeTypeMap;
    }
}
exports.PtsV2CreateBillingAgreementPost201ResponseInstallmentInformation = PtsV2CreateBillingAgreementPost201ResponseInstallmentInformation;
PtsV2CreateBillingAgreementPost201ResponseInstallmentInformation.discriminator = undefined;
PtsV2CreateBillingAgreementPost201ResponseInstallmentInformation.attributeTypeMap = [
    {
        "name": "identifier",
        "baseName": "identifier",
        "type": "string"
    }
];
class PtsV2CreateBillingAgreementPost201ResponseLinks {
    static getAttributeTypeMap() {
        return PtsV2CreateBillingAgreementPost201ResponseLinks.attributeTypeMap;
    }
}
exports.PtsV2CreateBillingAgreementPost201ResponseLinks = PtsV2CreateBillingAgreementPost201ResponseLinks;
PtsV2CreateBillingAgreementPost201ResponseLinks.discriminator = undefined;
PtsV2CreateBillingAgreementPost201ResponseLinks.attributeTypeMap = [
    {
        "name": "self",
        "baseName": "self",
        "type": "PtsV2PaymentsPost201ResponseLinksSelf"
    },
    {
        "name": "updateAgreement",
        "baseName": "updateAgreement",
        "type": "PtsV2PaymentsPost201ResponseLinksSelf"
    },
    {
        "name": "revokeAgreement",
        "baseName": "revokeAgreement",
        "type": "PtsV2PaymentsPost201ResponseLinksSelf"
    },
    {
        "name": "status",
        "baseName": "status",
        "type": "PtsV2PaymentsPost201ResponseLinksSelf"
    }
];
class PtsV2CreateBillingAgreementPost201ResponseProcessorInformation {
    static getAttributeTypeMap() {
        return PtsV2CreateBillingAgreementPost201ResponseProcessorInformation.attributeTypeMap;
    }
}
exports.PtsV2CreateBillingAgreementPost201ResponseProcessorInformation = PtsV2CreateBillingAgreementPost201ResponseProcessorInformation;
PtsV2CreateBillingAgreementPost201ResponseProcessorInformation.discriminator = undefined;
PtsV2CreateBillingAgreementPost201ResponseProcessorInformation.attributeTypeMap = [
    {
        "name": "approvalCode",
        "baseName": "approvalCode",
        "type": "string"
    },
    {
        "name": "responseCode",
        "baseName": "responseCode",
        "type": "string"
    },
    {
        "name": "transactionId",
        "baseName": "transactionId",
        "type": "string"
    },
    {
        "name": "responseDetails",
        "baseName": "responseDetails",
        "type": "string"
    },
    {
        "name": "reasonCode",
        "baseName": "reasonCode",
        "type": "string"
    }
];
class PtsV2CreateBillingAgreementPost201ResponseRiskInformation {
    static getAttributeTypeMap() {
        return PtsV2CreateBillingAgreementPost201ResponseRiskInformation.attributeTypeMap;
    }
}
exports.PtsV2CreateBillingAgreementPost201ResponseRiskInformation = PtsV2CreateBillingAgreementPost201ResponseRiskInformation;
PtsV2CreateBillingAgreementPost201ResponseRiskInformation.discriminator = undefined;
PtsV2CreateBillingAgreementPost201ResponseRiskInformation.attributeTypeMap = [
    {
        "name": "processorResults",
        "baseName": "processorResults",
        "type": "PtsV2CreateBillingAgreementPost201ResponseRiskInformationProcessorResults"
    }
];
class PtsV2CreateBillingAgreementPost201ResponseRiskInformationProcessorResults {
    static getAttributeTypeMap() {
        return PtsV2CreateBillingAgreementPost201ResponseRiskInformationProcessorResults.attributeTypeMap;
    }
}
exports.PtsV2CreateBillingAgreementPost201ResponseRiskInformationProcessorResults = PtsV2CreateBillingAgreementPost201ResponseRiskInformationProcessorResults;
PtsV2CreateBillingAgreementPost201ResponseRiskInformationProcessorResults.discriminator = undefined;
PtsV2CreateBillingAgreementPost201ResponseRiskInformationProcessorResults.attributeTypeMap = [
    {
        "name": "riskScore",
        "baseName": "riskScore",
        "type": "string"
    }
];
class PtsV2CreateBillingAgreementPost400Response {
    static getAttributeTypeMap() {
        return PtsV2CreateBillingAgreementPost400Response.attributeTypeMap;
    }
}
exports.PtsV2CreateBillingAgreementPost400Response = PtsV2CreateBillingAgreementPost400Response;
PtsV2CreateBillingAgreementPost400Response.discriminator = undefined;
PtsV2CreateBillingAgreementPost400Response.attributeTypeMap = [
    {
        "name": "id",
        "baseName": "id",
        "type": "string"
    },
    {
        "name": "submitTimeUtc",
        "baseName": "submitTimeUtc",
        "type": "string"
    },
    {
        "name": "status",
        "baseName": "status",
        "type": "string"
    },
    {
        "name": "reason",
        "baseName": "reason",
        "type": "string"
    },
    {
        "name": "message",
        "baseName": "message",
        "type": "string"
    },
    {
        "name": "details",
        "baseName": "details",
        "type": "Array<PtsV2PaymentsPost201ResponseErrorInformationDetails>"
    }
];
class PtsV2CreateBillingAgreementPost502Response {
    static getAttributeTypeMap() {
        return PtsV2CreateBillingAgreementPost502Response.attributeTypeMap;
    }
}
exports.PtsV2CreateBillingAgreementPost502Response = PtsV2CreateBillingAgreementPost502Response;
PtsV2CreateBillingAgreementPost502Response.discriminator = undefined;
PtsV2CreateBillingAgreementPost502Response.attributeTypeMap = [
    {
        "name": "id",
        "baseName": "id",
        "type": "string"
    },
    {
        "name": "submitTimeUtc",
        "baseName": "submitTimeUtc",
        "type": "string"
    },
    {
        "name": "status",
        "baseName": "status",
        "type": "string"
    },
    {
        "name": "reason",
        "baseName": "reason",
        "type": "string"
    },
    {
        "name": "message",
        "baseName": "message",
        "type": "string"
    }
];
class PtsV2CreateOrderPost201Response {
    static getAttributeTypeMap() {
        return PtsV2CreateOrderPost201Response.attributeTypeMap;
    }
}
exports.PtsV2CreateOrderPost201Response = PtsV2CreateOrderPost201Response;
PtsV2CreateOrderPost201Response.discriminator = undefined;
PtsV2CreateOrderPost201Response.attributeTypeMap = [
    {
        "name": "submitTimeUtc",
        "baseName": "submitTimeUtc",
        "type": "string"
    },
    {
        "name": "updateTimeUtc",
        "baseName": "updateTimeUtc",
        "type": "string"
    },
    {
        "name": "status",
        "baseName": "status",
        "type": "string"
    },
    {
        "name": "reconciliationId",
        "baseName": "reconciliationId",
        "type": "string"
    },
    {
        "name": "clientReferenceInformation",
        "baseName": "clientReferenceInformation",
        "type": "PtsV2IncrementalAuthorizationPatch201ResponseClientReferenceInformation"
    },
    {
        "name": "processorInformation",
        "baseName": "processorInformation",
        "type": "PtsV2CreateOrderPost201ResponseProcessorInformation"
    },
    {
        "name": "paymentInformation",
        "baseName": "paymentInformation",
        "type": "PtsV2PaymentsOrderPost201ResponsePaymentInformation"
    },
    {
        "name": "buyerInformation",
        "baseName": "buyerInformation",
        "type": "PtsV2CreateOrderPost201ResponseBuyerInformation"
    }
];
class PtsV2CreateOrderPost201ResponseBuyerInformation {
    static getAttributeTypeMap() {
        return PtsV2CreateOrderPost201ResponseBuyerInformation.attributeTypeMap;
    }
}
exports.PtsV2CreateOrderPost201ResponseBuyerInformation = PtsV2CreateOrderPost201ResponseBuyerInformation;
PtsV2CreateOrderPost201ResponseBuyerInformation.discriminator = undefined;
PtsV2CreateOrderPost201ResponseBuyerInformation.attributeTypeMap = [
    {
        "name": "merchantCustomerId",
        "baseName": "merchantCustomerId",
        "type": "string"
    }
];
class PtsV2CreateOrderPost201ResponseProcessorInformation {
    static getAttributeTypeMap() {
        return PtsV2CreateOrderPost201ResponseProcessorInformation.attributeTypeMap;
    }
}
exports.PtsV2CreateOrderPost201ResponseProcessorInformation = PtsV2CreateOrderPost201ResponseProcessorInformation;
PtsV2CreateOrderPost201ResponseProcessorInformation.discriminator = undefined;
PtsV2CreateOrderPost201ResponseProcessorInformation.attributeTypeMap = [
    {
        "name": "transactionId",
        "baseName": "transactionId",
        "type": "string"
    },
    {
        "name": "networkTransactionId",
        "baseName": "networkTransactionId",
        "type": "string"
    },
    {
        "name": "paymentUrl",
        "baseName": "paymentUrl",
        "type": "string"
    }
];
class PtsV2CreateOrderPost400Response {
    static getAttributeTypeMap() {
        return PtsV2CreateOrderPost400Response.attributeTypeMap;
    }
}
exports.PtsV2CreateOrderPost400Response = PtsV2CreateOrderPost400Response;
PtsV2CreateOrderPost400Response.discriminator = undefined;
PtsV2CreateOrderPost400Response.attributeTypeMap = [
    {
        "name": "submitTimeUtc",
        "baseName": "submitTimeUtc",
        "type": "string"
    },
    {
        "name": "status",
        "baseName": "status",
        "type": "string"
    },
    {
        "name": "message",
        "baseName": "message",
        "type": "string"
    },
    {
        "name": "details",
        "baseName": "details",
        "type": "Array<PtsV2PaymentsPost201ResponseErrorInformationDetails>"
    }
];
class PtsV2CreditsPost201Response {
    static getAttributeTypeMap() {
        return PtsV2CreditsPost201Response.attributeTypeMap;
    }
}
exports.PtsV2CreditsPost201Response = PtsV2CreditsPost201Response;
PtsV2CreditsPost201Response.discriminator = undefined;
PtsV2CreditsPost201Response.attributeTypeMap = [
    {
        "name": "links",
        "baseName": "_links",
        "type": "PtsV2PaymentsRefundPost201ResponseLinks"
    },
    {
        "name": "id",
        "baseName": "id",
        "type": "string"
    },
    {
        "name": "submitTimeUtc",
        "baseName": "submitTimeUtc",
        "type": "string"
    },
    {
        "name": "status",
        "baseName": "status",
        "type": "string"
    },
    {
        "name": "reconciliationId",
        "baseName": "reconciliationId",
        "type": "string"
    },
    {
        "name": "clientReferenceInformation",
        "baseName": "clientReferenceInformation",
        "type": "PtsV2PaymentsPost201ResponseClientReferenceInformation"
    },
    {
        "name": "creditAmountDetails",
        "baseName": "creditAmountDetails",
        "type": "PtsV2CreditsPost201ResponseCreditAmountDetails"
    },
    {
        "name": "processingInformation",
        "baseName": "processingInformation",
        "type": "PtsV2CreditsPost201ResponseProcessingInformation"
    },
    {
        "name": "processorInformation",
        "baseName": "processorInformation",
        "type": "PtsV2PaymentsRefundPost201ResponseProcessorInformation"
    },
    {
        "name": "paymentInformation",
        "baseName": "paymentInformation",
        "type": "PtsV2CreditsPost201ResponsePaymentInformation"
    },
    {
        "name": "orderInformation",
        "baseName": "orderInformation",
        "type": "PtsV2PaymentsRefundPost201ResponseOrderInformation"
    },
    {
        "name": "pointOfSaleInformation",
        "baseName": "pointOfSaleInformation",
        "type": "PtsV2PaymentsCapturesPost201ResponsePointOfSaleInformation"
    }
];
class PtsV2CreditsPost201Response1 {
    static getAttributeTypeMap() {
        return PtsV2CreditsPost201Response1.attributeTypeMap;
    }
}
exports.PtsV2CreditsPost201Response1 = PtsV2CreditsPost201Response1;
PtsV2CreditsPost201Response1.discriminator = undefined;
PtsV2CreditsPost201Response1.attributeTypeMap = [
    {
        "name": "id",
        "baseName": "id",
        "type": "string"
    },
    {
        "name": "submitTimeUtc",
        "baseName": "submitTimeUtc",
        "type": "string"
    },
    {
        "name": "status",
        "baseName": "status",
        "type": "string"
    },
    {
        "name": "processorInformation",
        "baseName": "processorInformation",
        "type": "PtsV2CreditsPost201Response1ProcessorInformation"
    },
    {
        "name": "installmentInformation",
        "baseName": "installmentInformation",
        "type": "PtsV2CreateBillingAgreementPost201ResponseInstallmentInformation"
    }
];
class PtsV2CreditsPost201Response1ProcessorInformation {
    static getAttributeTypeMap() {
        return PtsV2CreditsPost201Response1ProcessorInformation.attributeTypeMap;
    }
}
exports.PtsV2CreditsPost201Response1ProcessorInformation = PtsV2CreditsPost201Response1ProcessorInformation;
PtsV2CreditsPost201Response1ProcessorInformation.discriminator = undefined;
PtsV2CreditsPost201Response1ProcessorInformation.attributeTypeMap = [
    {
        "name": "approvalCode",
        "baseName": "approvalCode",
        "type": "string"
    },
    {
        "name": "responseCode",
        "baseName": "responseCode",
        "type": "string"
    }
];
class PtsV2CreditsPost201ResponseCreditAmountDetails {
    static getAttributeTypeMap() {
        return PtsV2CreditsPost201ResponseCreditAmountDetails.attributeTypeMap;
    }
}
exports.PtsV2CreditsPost201ResponseCreditAmountDetails = PtsV2CreditsPost201ResponseCreditAmountDetails;
PtsV2CreditsPost201ResponseCreditAmountDetails.discriminator = undefined;
PtsV2CreditsPost201ResponseCreditAmountDetails.attributeTypeMap = [
    {
        "name": "creditAmount",
        "baseName": "creditAmount",
        "type": "string"
    },
    {
        "name": "currency",
        "baseName": "currency",
        "type": "string"
    }
];
class PtsV2CreditsPost201ResponsePaymentInformation {
    static getAttributeTypeMap() {
        return PtsV2CreditsPost201ResponsePaymentInformation.attributeTypeMap;
    }
}
exports.PtsV2CreditsPost201ResponsePaymentInformation = PtsV2CreditsPost201ResponsePaymentInformation;
PtsV2CreditsPost201ResponsePaymentInformation.discriminator = undefined;
PtsV2CreditsPost201ResponsePaymentInformation.attributeTypeMap = [
    {
        "name": "bank",
        "baseName": "bank",
        "type": "PtsV2PaymentsPost201ResponsePaymentInformationBank"
    },
    {
        "name": "customer",
        "baseName": "customer",
        "type": "Ptsv2paymentsPaymentInformationCustomer"
    },
    {
        "name": "paymentInstrument",
        "baseName": "paymentInstrument",
        "type": "Ptsv2paymentsPaymentInformationPaymentInstrument"
    },
    {
        "name": "instrumentIdentifier",
        "baseName": "instrumentIdentifier",
        "type": "PtsV2PaymentsPost201ResponsePaymentInformationInstrumentIdentifier"
    },
    {
        "name": "shippingAddress",
        "baseName": "shippingAddress",
        "type": "Ptsv2paymentsPaymentInformationShippingAddress"
    }
];
class PtsV2CreditsPost201ResponseProcessingInformation {
    static getAttributeTypeMap() {
        return PtsV2CreditsPost201ResponseProcessingInformation.attributeTypeMap;
    }
}
exports.PtsV2CreditsPost201ResponseProcessingInformation = PtsV2CreditsPost201ResponseProcessingInformation;
PtsV2CreditsPost201ResponseProcessingInformation.discriminator = undefined;
PtsV2CreditsPost201ResponseProcessingInformation.attributeTypeMap = [
    {
        "name": "bankTransferOptions",
        "baseName": "bankTransferOptions",
        "type": "PtsV2CreditsPost201ResponseProcessingInformationBankTransferOptions"
    },
    {
        "name": "enhancedDataEnabled",
        "baseName": "enhancedDataEnabled",
        "type": "boolean"
    }
];
class PtsV2CreditsPost201ResponseProcessingInformationBankTransferOptions {
    static getAttributeTypeMap() {
        return PtsV2CreditsPost201ResponseProcessingInformationBankTransferOptions.attributeTypeMap;
    }
}
exports.PtsV2CreditsPost201ResponseProcessingInformationBankTransferOptions = PtsV2CreditsPost201ResponseProcessingInformationBankTransferOptions;
PtsV2CreditsPost201ResponseProcessingInformationBankTransferOptions.discriminator = undefined;
PtsV2CreditsPost201ResponseProcessingInformationBankTransferOptions.attributeTypeMap = [
    {
        "name": "settlementMethod",
        "baseName": "settlementMethod",
        "type": "string"
    }
];
class PtsV2IncrementalAuthorizationPatch201Response {
    static getAttributeTypeMap() {
        return PtsV2IncrementalAuthorizationPatch201Response.attributeTypeMap;
    }
}
exports.PtsV2IncrementalAuthorizationPatch201Response = PtsV2IncrementalAuthorizationPatch201Response;
PtsV2IncrementalAuthorizationPatch201Response.discriminator = undefined;
PtsV2IncrementalAuthorizationPatch201Response.attributeTypeMap = [
    {
        "name": "links",
        "baseName": "_links",
        "type": "PtsV2IncrementalAuthorizationPatch201ResponseLinks"
    },
    {
        "name": "id",
        "baseName": "id",
        "type": "string"
    },
    {
        "name": "submitTimeUtc",
        "baseName": "submitTimeUtc",
        "type": "string"
    },
    {
        "name": "status",
        "baseName": "status",
        "type": "string"
    },
    {
        "name": "reconciliationId",
        "baseName": "reconciliationId",
        "type": "string"
    },
    {
        "name": "errorInformation",
        "baseName": "errorInformation",
        "type": "PtsV2IncrementalAuthorizationPatch201ResponseErrorInformation"
    },
    {
        "name": "clientReferenceInformation",
        "baseName": "clientReferenceInformation",
        "type": "PtsV2IncrementalAuthorizationPatch201ResponseClientReferenceInformation"
    },
    {
        "name": "processorInformation",
        "baseName": "processorInformation",
        "type": "PtsV2IncrementalAuthorizationPatch201ResponseProcessorInformation"
    },
    {
        "name": "paymentInformation",
        "baseName": "paymentInformation",
        "type": "PtsV2IncrementalAuthorizationPatch201ResponsePaymentInformation"
    },
    {
        "name": "orderInformation",
        "baseName": "orderInformation",
        "type": "PtsV2IncrementalAuthorizationPatch201ResponseOrderInformation"
    }
];
class PtsV2IncrementalAuthorizationPatch201ResponseClientReferenceInformation {
    static getAttributeTypeMap() {
        return PtsV2IncrementalAuthorizationPatch201ResponseClientReferenceInformation.attributeTypeMap;
    }
}
exports.PtsV2IncrementalAuthorizationPatch201ResponseClientReferenceInformation = PtsV2IncrementalAuthorizationPatch201ResponseClientReferenceInformation;
PtsV2IncrementalAuthorizationPatch201ResponseClientReferenceInformation.discriminator = undefined;
PtsV2IncrementalAuthorizationPatch201ResponseClientReferenceInformation.attributeTypeMap = [
    {
        "name": "code",
        "baseName": "code",
        "type": "string"
    }
];
class PtsV2IncrementalAuthorizationPatch201ResponseErrorInformation {
    static getAttributeTypeMap() {
        return PtsV2IncrementalAuthorizationPatch201ResponseErrorInformation.attributeTypeMap;
    }
}
exports.PtsV2IncrementalAuthorizationPatch201ResponseErrorInformation = PtsV2IncrementalAuthorizationPatch201ResponseErrorInformation;
PtsV2IncrementalAuthorizationPatch201ResponseErrorInformation.discriminator = undefined;
PtsV2IncrementalAuthorizationPatch201ResponseErrorInformation.attributeTypeMap = [
    {
        "name": "reason",
        "baseName": "reason",
        "type": "string"
    },
    {
        "name": "message",
        "baseName": "message",
        "type": "string"
    },
    {
        "name": "details",
        "baseName": "details",
        "type": "Array<PtsV2PaymentsPost201ResponseErrorInformationDetails>"
    }
];
class PtsV2IncrementalAuthorizationPatch201ResponseLinks {
    static getAttributeTypeMap() {
        return PtsV2IncrementalAuthorizationPatch201ResponseLinks.attributeTypeMap;
    }
}
exports.PtsV2IncrementalAuthorizationPatch201ResponseLinks = PtsV2IncrementalAuthorizationPatch201ResponseLinks;
PtsV2IncrementalAuthorizationPatch201ResponseLinks.discriminator = undefined;
PtsV2IncrementalAuthorizationPatch201ResponseLinks.attributeTypeMap = [
    {
        "name": "self",
        "baseName": "self",
        "type": "PtsV2PaymentsPost201ResponseLinksSelf"
    }
];
class PtsV2IncrementalAuthorizationPatch201ResponseOrderInformation {
    static getAttributeTypeMap() {
        return PtsV2IncrementalAuthorizationPatch201ResponseOrderInformation.attributeTypeMap;
    }
}
exports.PtsV2IncrementalAuthorizationPatch201ResponseOrderInformation = PtsV2IncrementalAuthorizationPatch201ResponseOrderInformation;
PtsV2IncrementalAuthorizationPatch201ResponseOrderInformation.discriminator = undefined;
PtsV2IncrementalAuthorizationPatch201ResponseOrderInformation.attributeTypeMap = [
    {
        "name": "amountDetails",
        "baseName": "amountDetails",
        "type": "PtsV2PaymentsPost201ResponseOrderInformationAmountDetails"
    },
    {
        "name": "invoiceDetails",
        "baseName": "invoiceDetails",
        "type": "PtsV2IncrementalAuthorizationPatch201ResponseOrderInformationInvoiceDetails"
    }
];
class PtsV2IncrementalAuthorizationPatch201ResponseOrderInformationInvoiceDetails {
    static getAttributeTypeMap() {
        return PtsV2IncrementalAuthorizationPatch201ResponseOrderInformationInvoiceDetails.attributeTypeMap;
    }
}
exports.PtsV2IncrementalAuthorizationPatch201ResponseOrderInformationInvoiceDetails = PtsV2IncrementalAuthorizationPatch201ResponseOrderInformationInvoiceDetails;
PtsV2IncrementalAuthorizationPatch201ResponseOrderInformationInvoiceDetails.discriminator = undefined;
PtsV2IncrementalAuthorizationPatch201ResponseOrderInformationInvoiceDetails.attributeTypeMap = [
    {
        "name": "productId",
        "baseName": "productId",
        "type": "string"
    }
];
class PtsV2IncrementalAuthorizationPatch201ResponsePaymentInformation {
    static getAttributeTypeMap() {
        return PtsV2IncrementalAuthorizationPatch201ResponsePaymentInformation.attributeTypeMap;
    }
}
exports.PtsV2IncrementalAuthorizationPatch201ResponsePaymentInformation = PtsV2IncrementalAuthorizationPatch201ResponsePaymentInformation;
PtsV2IncrementalAuthorizationPatch201ResponsePaymentInformation.discriminator = undefined;
PtsV2IncrementalAuthorizationPatch201ResponsePaymentInformation.attributeTypeMap = [
    {
        "name": "accountFeatures",
        "baseName": "accountFeatures",
        "type": "PtsV2IncrementalAuthorizationPatch201ResponsePaymentInformationAccountFeatures"
    }
];
class PtsV2IncrementalAuthorizationPatch201ResponsePaymentInformationAccountFeatures {
    static getAttributeTypeMap() {
        return PtsV2IncrementalAuthorizationPatch201ResponsePaymentInformationAccountFeatures.attributeTypeMap;
    }
}
exports.PtsV2IncrementalAuthorizationPatch201ResponsePaymentInformationAccountFeatures = PtsV2IncrementalAuthorizationPatch201ResponsePaymentInformationAccountFeatures;
PtsV2IncrementalAuthorizationPatch201ResponsePaymentInformationAccountFeatures.discriminator = undefined;
PtsV2IncrementalAuthorizationPatch201ResponsePaymentInformationAccountFeatures.attributeTypeMap = [
    {
        "name": "category",
        "baseName": "category",
        "type": "string"
    }
];
class PtsV2IncrementalAuthorizationPatch201ResponseProcessorInformation {
    static getAttributeTypeMap() {
        return PtsV2IncrementalAuthorizationPatch201ResponseProcessorInformation.attributeTypeMap;
    }
}
exports.PtsV2IncrementalAuthorizationPatch201ResponseProcessorInformation = PtsV2IncrementalAuthorizationPatch201ResponseProcessorInformation;
PtsV2IncrementalAuthorizationPatch201ResponseProcessorInformation.discriminator = undefined;
PtsV2IncrementalAuthorizationPatch201ResponseProcessorInformation.attributeTypeMap = [
    {
        "name": "approvalCode",
        "baseName": "approvalCode",
        "type": "string"
    },
    {
        "name": "transactionId",
        "baseName": "transactionId",
        "type": "string"
    },
    {
        "name": "networkTransactionId",
        "baseName": "networkTransactionId",
        "type": "string"
    },
    {
        "name": "responseCode",
        "baseName": "responseCode",
        "type": "string"
    },
    {
        "name": "systemTraceAuditNumber",
        "baseName": "systemTraceAuditNumber",
        "type": "string"
    },
    {
        "name": "responseDetails",
        "baseName": "responseDetails",
        "type": "string"
    },
    {
        "name": "merchantAdvice",
        "baseName": "merchantAdvice",
        "type": "PtsV2PaymentsPost201ResponseProcessorInformationMerchantAdvice"
    },
    {
        "name": "merchantRiskPrediction",
        "baseName": "merchantRiskPrediction",
        "type": "string"
    },
    {
        "name": "sellerProtection",
        "baseName": "sellerProtection",
        "type": "PtsV2PaymentsPost201ResponseProcessorInformationSellerProtection"
    }
];
class PtsV2IncrementalAuthorizationPatch400Response {
    static getAttributeTypeMap() {
        return PtsV2IncrementalAuthorizationPatch400Response.attributeTypeMap;
    }
}
exports.PtsV2IncrementalAuthorizationPatch400Response = PtsV2IncrementalAuthorizationPatch400Response;
PtsV2IncrementalAuthorizationPatch400Response.discriminator = undefined;
PtsV2IncrementalAuthorizationPatch400Response.attributeTypeMap = [
    {
        "name": "submitTimeUtc",
        "baseName": "submitTimeUtc",
        "type": "string"
    },
    {
        "name": "status",
        "baseName": "status",
        "type": "string"
    },
    {
        "name": "reason",
        "baseName": "reason",
        "type": "string"
    },
    {
        "name": "message",
        "baseName": "message",
        "type": "string"
    },
    {
        "name": "details",
        "baseName": "details",
        "type": "Array<PtsV2PaymentsPost201ResponseErrorInformationDetails>"
    }
];
class PtsV2ModifyBillingAgreementPost201Response {
    static getAttributeTypeMap() {
        return PtsV2ModifyBillingAgreementPost201Response.attributeTypeMap;
    }
}
exports.PtsV2ModifyBillingAgreementPost201Response = PtsV2ModifyBillingAgreementPost201Response;
PtsV2ModifyBillingAgreementPost201Response.discriminator = undefined;
PtsV2ModifyBillingAgreementPost201Response.attributeTypeMap = [
    {
        "name": "links",
        "baseName": "_links",
        "type": "PtsV2ModifyBillingAgreementPost201ResponseLinks"
    },
    {
        "name": "id",
        "baseName": "id",
        "type": "string"
    },
    {
        "name": "submitTimeUtc",
        "baseName": "submitTimeUtc",
        "type": "string"
    },
    {
        "name": "status",
        "baseName": "status",
        "type": "string"
    },
    {
        "name": "processorInformation",
        "baseName": "processorInformation",
        "type": "PtsV2CreateBillingAgreementPost201ResponseProcessorInformation"
    },
    {
        "name": "installmentInformation",
        "baseName": "installmentInformation",
        "type": "PtsV2CreateBillingAgreementPost201ResponseInstallmentInformation"
    },
    {
        "name": "clientReferenceInformation",
        "baseName": "clientReferenceInformation",
        "type": "PtsV2CreateBillingAgreementPost201ResponseClientReferenceInformation"
    },
    {
        "name": "riskInformation",
        "baseName": "riskInformation",
        "type": "PtsV2CreateBillingAgreementPost201ResponseRiskInformation"
    },
    {
        "name": "agreementInformation",
        "baseName": "agreementInformation",
        "type": "PtsV2ModifyBillingAgreementPost201ResponseAgreementInformation"
    },
    {
        "name": "orderInformation",
        "baseName": "orderInformation",
        "type": "PtsV2ModifyBillingAgreementPost201ResponseOrderInformation"
    },
    {
        "name": "paymentInformation",
        "baseName": "paymentInformation",
        "type": "PtsV2ModifyBillingAgreementPost201ResponsePaymentInformation"
    }
];
class PtsV2ModifyBillingAgreementPost201ResponseAgreementInformation {
    static getAttributeTypeMap() {
        return PtsV2ModifyBillingAgreementPost201ResponseAgreementInformation.attributeTypeMap;
    }
}
exports.PtsV2ModifyBillingAgreementPost201ResponseAgreementInformation = PtsV2ModifyBillingAgreementPost201ResponseAgreementInformation;
PtsV2ModifyBillingAgreementPost201ResponseAgreementInformation.discriminator = undefined;
PtsV2ModifyBillingAgreementPost201ResponseAgreementInformation.attributeTypeMap = [
    {
        "name": "id",
        "baseName": "id",
        "type": "string"
    },
    {
        "name": "dateSigned",
        "baseName": "dateSigned",
        "type": "string"
    },
    {
        "name": "dateCreated",
        "baseName": "dateCreated",
        "type": "string"
    },
    {
        "name": "dateRevoked",
        "baseName": "dateRevoked",
        "type": "string"
    },
    {
        "name": "encodedHtml",
        "baseName": "encodedHtml",
        "type": "string"
    },
    {
        "name": "encodedHtmlPopup",
        "baseName": "encodedHtmlPopup",
        "type": "string"
    },
    {
        "name": "url",
        "baseName": "url",
        "type": "string"
    },
    {
        "name": "transactionId",
        "baseName": "transactionId",
        "type": "string"
    }
];
class PtsV2ModifyBillingAgreementPost201ResponseLinks {
    static getAttributeTypeMap() {
        return PtsV2ModifyBillingAgreementPost201ResponseLinks.attributeTypeMap;
    }
}
exports.PtsV2ModifyBillingAgreementPost201ResponseLinks = PtsV2ModifyBillingAgreementPost201ResponseLinks;
PtsV2ModifyBillingAgreementPost201ResponseLinks.discriminator = undefined;
PtsV2ModifyBillingAgreementPost201ResponseLinks.attributeTypeMap = [
    {
        "name": "self",
        "baseName": "self",
        "type": "PtsV2PaymentsPost201ResponseLinksSelf"
    },
    {
        "name": "status",
        "baseName": "status",
        "type": "PtsV2PaymentsPost201ResponseLinksSelf"
    }
];
class PtsV2ModifyBillingAgreementPost201ResponseOrderInformation {
    static getAttributeTypeMap() {
        return PtsV2ModifyBillingAgreementPost201ResponseOrderInformation.attributeTypeMap;
    }
}
exports.PtsV2ModifyBillingAgreementPost201ResponseOrderInformation = PtsV2ModifyBillingAgreementPost201ResponseOrderInformation;
PtsV2ModifyBillingAgreementPost201ResponseOrderInformation.discriminator = undefined;
PtsV2ModifyBillingAgreementPost201ResponseOrderInformation.attributeTypeMap = [
    {
        "name": "billTo",
        "baseName": "billTo",
        "type": "PtsV2ModifyBillingAgreementPost201ResponseOrderInformationBillTo"
    },
    {
        "name": "shipTo",
        "baseName": "shipTo",
        "type": "PtsV2ModifyBillingAgreementPost201ResponseOrderInformationShipTo"
    }
];
class PtsV2ModifyBillingAgreementPost201ResponseOrderInformationBillTo {
    static getAttributeTypeMap() {
        return PtsV2ModifyBillingAgreementPost201ResponseOrderInformationBillTo.attributeTypeMap;
    }
}
exports.PtsV2ModifyBillingAgreementPost201ResponseOrderInformationBillTo = PtsV2ModifyBillingAgreementPost201ResponseOrderInformationBillTo;
PtsV2ModifyBillingAgreementPost201ResponseOrderInformationBillTo.discriminator = undefined;
PtsV2ModifyBillingAgreementPost201ResponseOrderInformationBillTo.attributeTypeMap = [
    {
        "name": "firstName",
        "baseName": "firstName",
        "type": "string"
    },
    {
        "name": "lastName",
        "baseName": "lastName",
        "type": "string"
    },
    {
        "name": "address1",
        "baseName": "address1",
        "type": "string"
    },
    {
        "name": "address2",
        "baseName": "address2",
        "type": "string"
    },
    {
        "name": "locality",
        "baseName": "locality",
        "type": "string"
    },
    {
        "name": "administrativeArea",
        "baseName": "administrativeArea",
        "type": "string"
    },
    {
        "name": "postalCode",
        "baseName": "postalCode",
        "type": "string"
    },
    {
        "name": "country",
        "baseName": "country",
        "type": "string"
    },
    {
        "name": "email",
        "baseName": "email",
        "type": "string"
    }
];
class PtsV2ModifyBillingAgreementPost201ResponseOrderInformationShipTo {
    static getAttributeTypeMap() {
        return PtsV2ModifyBillingAgreementPost201ResponseOrderInformationShipTo.attributeTypeMap;
    }
}
exports.PtsV2ModifyBillingAgreementPost201ResponseOrderInformationShipTo = PtsV2ModifyBillingAgreementPost201ResponseOrderInformationShipTo;
PtsV2ModifyBillingAgreementPost201ResponseOrderInformationShipTo.discriminator = undefined;
PtsV2ModifyBillingAgreementPost201ResponseOrderInformationShipTo.attributeTypeMap = [
    {
        "name": "firstName",
        "baseName": "firstName",
        "type": "string"
    },
    {
        "name": "lastName",
        "baseName": "lastName",
        "type": "string"
    },
    {
        "name": "address1",
        "baseName": "address1",
        "type": "string"
    },
    {
        "name": "address2",
        "baseName": "address2",
        "type": "string"
    },
    {
        "name": "locality",
        "baseName": "locality",
        "type": "string"
    },
    {
        "name": "administrativeArea",
        "baseName": "administrativeArea",
        "type": "string"
    },
    {
        "name": "postalCode",
        "baseName": "postalCode",
        "type": "string"
    },
    {
        "name": "country",
        "baseName": "country",
        "type": "string"
    }
];
class PtsV2ModifyBillingAgreementPost201ResponsePaymentInformation {
    static getAttributeTypeMap() {
        return PtsV2ModifyBillingAgreementPost201ResponsePaymentInformation.attributeTypeMap;
    }
}
exports.PtsV2ModifyBillingAgreementPost201ResponsePaymentInformation = PtsV2ModifyBillingAgreementPost201ResponsePaymentInformation;
PtsV2ModifyBillingAgreementPost201ResponsePaymentInformation.discriminator = undefined;
PtsV2ModifyBillingAgreementPost201ResponsePaymentInformation.attributeTypeMap = [
    {
        "name": "eWallet",
        "baseName": "eWallet",
        "type": "PtsV2ModifyBillingAgreementPost201ResponsePaymentInformationEWallet"
    },
    {
        "name": "bank",
        "baseName": "bank",
        "type": "PtsV2ModifyBillingAgreementPost201ResponsePaymentInformationBank"
    }
];
class PtsV2ModifyBillingAgreementPost201ResponsePaymentInformationBank {
    static getAttributeTypeMap() {
        return PtsV2ModifyBillingAgreementPost201ResponsePaymentInformationBank.attributeTypeMap;
    }
}
exports.PtsV2ModifyBillingAgreementPost201ResponsePaymentInformationBank = PtsV2ModifyBillingAgreementPost201ResponsePaymentInformationBank;
PtsV2ModifyBillingAgreementPost201ResponsePaymentInformationBank.discriminator = undefined;
PtsV2ModifyBillingAgreementPost201ResponsePaymentInformationBank.attributeTypeMap = [
    {
        "name": "iban",
        "baseName": "iban",
        "type": "string"
    }
];
class PtsV2ModifyBillingAgreementPost201ResponsePaymentInformationEWallet {
    static getAttributeTypeMap() {
        return PtsV2ModifyBillingAgreementPost201ResponsePaymentInformationEWallet.attributeTypeMap;
    }
}
exports.PtsV2ModifyBillingAgreementPost201ResponsePaymentInformationEWallet = PtsV2ModifyBillingAgreementPost201ResponsePaymentInformationEWallet;
PtsV2ModifyBillingAgreementPost201ResponsePaymentInformationEWallet.discriminator = undefined;
PtsV2ModifyBillingAgreementPost201ResponsePaymentInformationEWallet.attributeTypeMap = [
    {
        "name": "accountId",
        "baseName": "accountId",
        "type": "string"
    }
];
class PtsV2PaymentsCapturesPost201Response {
    static getAttributeTypeMap() {
        return PtsV2PaymentsCapturesPost201Response.attributeTypeMap;
    }
}
exports.PtsV2PaymentsCapturesPost201Response = PtsV2PaymentsCapturesPost201Response;
PtsV2PaymentsCapturesPost201Response.discriminator = undefined;
PtsV2PaymentsCapturesPost201Response.attributeTypeMap = [
    {
        "name": "links",
        "baseName": "_links",
        "type": "PtsV2PaymentsCapturesPost201ResponseLinks"
    },
    {
        "name": "id",
        "baseName": "id",
        "type": "string"
    },
    {
        "name": "submitTimeUtc",
        "baseName": "submitTimeUtc",
        "type": "string"
    },
    {
        "name": "status",
        "baseName": "status",
        "type": "string"
    },
    {
        "name": "reconciliationId",
        "baseName": "reconciliationId",
        "type": "string"
    },
    {
        "name": "clientReferenceInformation",
        "baseName": "clientReferenceInformation",
        "type": "PtsV2PaymentsPost201ResponseClientReferenceInformation"
    },
    {
        "name": "processorInformation",
        "baseName": "processorInformation",
        "type": "PtsV2PaymentsCapturesPost201ResponseProcessorInformation"
    },
    {
        "name": "orderInformation",
        "baseName": "orderInformation",
        "type": "PtsV2PaymentsCapturesPost201ResponseOrderInformation"
    },
    {
        "name": "pointOfSaleInformation",
        "baseName": "pointOfSaleInformation",
        "type": "PtsV2PaymentsCapturesPost201ResponsePointOfSaleInformation"
    },
    {
        "name": "processingInformation",
        "baseName": "processingInformation",
        "type": "PtsV2PaymentsCapturesPost201ResponseProcessingInformation"
    },
    {
        "name": "embeddedActions",
        "baseName": "embeddedActions",
        "type": "PtsV2PaymentsCapturesPost201ResponseEmbeddedActions"
    }
];
class PtsV2PaymentsCapturesPost201ResponseEmbeddedActions {
    static getAttributeTypeMap() {
        return PtsV2PaymentsCapturesPost201ResponseEmbeddedActions.attributeTypeMap;
    }
}
exports.PtsV2PaymentsCapturesPost201ResponseEmbeddedActions = PtsV2PaymentsCapturesPost201ResponseEmbeddedActions;
PtsV2PaymentsCapturesPost201ResponseEmbeddedActions.discriminator = undefined;
PtsV2PaymentsCapturesPost201ResponseEmbeddedActions.attributeTypeMap = [
    {
        "name": "apCapture",
        "baseName": "ap_capture",
        "type": "PtsV2PaymentsCapturesPost201ResponseEmbeddedActionsApCapture"
    }
];
class PtsV2PaymentsCapturesPost201ResponseEmbeddedActionsApCapture {
    static getAttributeTypeMap() {
        return PtsV2PaymentsCapturesPost201ResponseEmbeddedActionsApCapture.attributeTypeMap;
    }
}
exports.PtsV2PaymentsCapturesPost201ResponseEmbeddedActionsApCapture = PtsV2PaymentsCapturesPost201ResponseEmbeddedActionsApCapture;
PtsV2PaymentsCapturesPost201ResponseEmbeddedActionsApCapture.discriminator = undefined;
PtsV2PaymentsCapturesPost201ResponseEmbeddedActionsApCapture.attributeTypeMap = [
    {
        "name": "reason",
        "baseName": "reason",
        "type": "string"
    }
];
class PtsV2PaymentsCapturesPost201ResponseLinks {
    static getAttributeTypeMap() {
        return PtsV2PaymentsCapturesPost201ResponseLinks.attributeTypeMap;
    }
}
exports.PtsV2PaymentsCapturesPost201ResponseLinks = PtsV2PaymentsCapturesPost201ResponseLinks;
PtsV2PaymentsCapturesPost201ResponseLinks.discriminator = undefined;
PtsV2PaymentsCapturesPost201ResponseLinks.attributeTypeMap = [
    {
        "name": "self",
        "baseName": "self",
        "type": "PtsV2PaymentsPost201ResponseLinksSelf"
    },
    {
        "name": "_void",
        "baseName": "void",
        "type": "PtsV2PaymentsPost201ResponseLinksSelf"
    },
    {
        "name": "refund",
        "baseName": "refund",
        "type": "PtsV2PaymentsPost201ResponseLinksSelf"
    }
];
class PtsV2PaymentsCapturesPost201ResponseOrderInformation {
    static getAttributeTypeMap() {
        return PtsV2PaymentsCapturesPost201ResponseOrderInformation.attributeTypeMap;
    }
}
exports.PtsV2PaymentsCapturesPost201ResponseOrderInformation = PtsV2PaymentsCapturesPost201ResponseOrderInformation;
PtsV2PaymentsCapturesPost201ResponseOrderInformation.discriminator = undefined;
PtsV2PaymentsCapturesPost201ResponseOrderInformation.attributeTypeMap = [
    {
        "name": "amountDetails",
        "baseName": "amountDetails",
        "type": "PtsV2PaymentsCapturesPost201ResponseOrderInformationAmountDetails"
    },
    {
        "name": "invoiceDetails",
        "baseName": "invoiceDetails",
        "type": "PtsV2PaymentsCapturesPost201ResponseOrderInformationInvoiceDetails"
    }
];
class PtsV2PaymentsCapturesPost201ResponseOrderInformationAmountDetails {
    static getAttributeTypeMap() {
        return PtsV2PaymentsCapturesPost201ResponseOrderInformationAmountDetails.attributeTypeMap;
    }
}
exports.PtsV2PaymentsCapturesPost201ResponseOrderInformationAmountDetails = PtsV2PaymentsCapturesPost201ResponseOrderInformationAmountDetails;
PtsV2PaymentsCapturesPost201ResponseOrderInformationAmountDetails.discriminator = undefined;
PtsV2PaymentsCapturesPost201ResponseOrderInformationAmountDetails.attributeTypeMap = [
    {
        "name": "totalAmount",
        "baseName": "totalAmount",
        "type": "string"
    },
    {
        "name": "currency",
        "baseName": "currency",
        "type": "string"
    },
    {
        "name": "processorTransactionFee",
        "baseName": "processorTransactionFee",
        "type": "string"
    }
];
class PtsV2PaymentsCapturesPost201ResponseOrderInformationInvoiceDetails {
    static getAttributeTypeMap() {
        return PtsV2PaymentsCapturesPost201ResponseOrderInformationInvoiceDetails.attributeTypeMap;
    }
}
exports.PtsV2PaymentsCapturesPost201ResponseOrderInformationInvoiceDetails = PtsV2PaymentsCapturesPost201ResponseOrderInformationInvoiceDetails;
PtsV2PaymentsCapturesPost201ResponseOrderInformationInvoiceDetails.discriminator = undefined;
PtsV2PaymentsCapturesPost201ResponseOrderInformationInvoiceDetails.attributeTypeMap = [
    {
        "name": "level3TransmissionStatus",
        "baseName": "level3TransmissionStatus",
        "type": "boolean"
    }
];
class PtsV2PaymentsCapturesPost201ResponsePointOfSaleInformation {
    static getAttributeTypeMap() {
        return PtsV2PaymentsCapturesPost201ResponsePointOfSaleInformation.attributeTypeMap;
    }
}
exports.PtsV2PaymentsCapturesPost201ResponsePointOfSaleInformation = PtsV2PaymentsCapturesPost201ResponsePointOfSaleInformation;
PtsV2PaymentsCapturesPost201ResponsePointOfSaleInformation.discriminator = undefined;
PtsV2PaymentsCapturesPost201ResponsePointOfSaleInformation.attributeTypeMap = [
    {
        "name": "terminalId",
        "baseName": "terminalId",
        "type": "string"
    }
];
class PtsV2PaymentsCapturesPost201ResponseProcessingInformation {
    static getAttributeTypeMap() {
        return PtsV2PaymentsCapturesPost201ResponseProcessingInformation.attributeTypeMap;
    }
}
exports.PtsV2PaymentsCapturesPost201ResponseProcessingInformation = PtsV2PaymentsCapturesPost201ResponseProcessingInformation;
PtsV2PaymentsCapturesPost201ResponseProcessingInformation.discriminator = undefined;
PtsV2PaymentsCapturesPost201ResponseProcessingInformation.attributeTypeMap = [
    {
        "name": "enhancedDataEnabled",
        "baseName": "enhancedDataEnabled",
        "type": "boolean"
    }
];
class PtsV2PaymentsCapturesPost201ResponseProcessorInformation {
    static getAttributeTypeMap() {
        return PtsV2PaymentsCapturesPost201ResponseProcessorInformation.attributeTypeMap;
    }
}
exports.PtsV2PaymentsCapturesPost201ResponseProcessorInformation = PtsV2PaymentsCapturesPost201ResponseProcessorInformation;
PtsV2PaymentsCapturesPost201ResponseProcessorInformation.discriminator = undefined;
PtsV2PaymentsCapturesPost201ResponseProcessorInformation.attributeTypeMap = [
    {
        "name": "transactionId",
        "baseName": "transactionId",
        "type": "string"
    },
    {
        "name": "networkTransactionId",
        "baseName": "networkTransactionId",
        "type": "string"
    },
    {
        "name": "responseDetails",
        "baseName": "responseDetails",
        "type": "string"
    },
    {
        "name": "responseCode",
        "baseName": "responseCode",
        "type": "string"
    },
    {
        "name": "providerResponse",
        "baseName": "providerResponse",
        "type": "string"
    },
    {
        "name": "updateTimeUtc",
        "baseName": "updateTimeUtc",
        "type": "string"
    }
];
class PtsV2PaymentsCapturesPost400Response {
    static getAttributeTypeMap() {
        return PtsV2PaymentsCapturesPost400Response.attributeTypeMap;
    }
}
exports.PtsV2PaymentsCapturesPost400Response = PtsV2PaymentsCapturesPost400Response;
PtsV2PaymentsCapturesPost400Response.discriminator = undefined;
PtsV2PaymentsCapturesPost400Response.attributeTypeMap = [
    {
        "name": "submitTimeUtc",
        "baseName": "submitTimeUtc",
        "type": "string"
    },
    {
        "name": "status",
        "baseName": "status",
        "type": "string"
    },
    {
        "name": "reason",
        "baseName": "reason",
        "type": "string"
    },
    {
        "name": "message",
        "baseName": "message",
        "type": "string"
    },
    {
        "name": "details",
        "baseName": "details",
        "type": "Array<PtsV2PaymentsPost201ResponseErrorInformationDetails>"
    }
];
class PtsV2PaymentsOrderPost201Response {
    static getAttributeTypeMap() {
        return PtsV2PaymentsOrderPost201Response.attributeTypeMap;
    }
}
exports.PtsV2PaymentsOrderPost201Response = PtsV2PaymentsOrderPost201Response;
PtsV2PaymentsOrderPost201Response.discriminator = undefined;
PtsV2PaymentsOrderPost201Response.attributeTypeMap = [
    {
        "name": "id",
        "baseName": "id",
        "type": "string"
    },
    {
        "name": "clientReferenceInformation",
        "baseName": "clientReferenceInformation",
        "type": "PtsV2IncrementalAuthorizationPatch201ResponseClientReferenceInformation"
    },
    {
        "name": "processorInformation",
        "baseName": "processorInformation",
        "type": "PtsV2PaymentsOrderPost201ResponseProcessorInformation"
    },
    {
        "name": "orderInformation",
        "baseName": "orderInformation",
        "type": "PtsV2PaymentsOrderPost201ResponseOrderInformation"
    },
    {
        "name": "paymentInformation",
        "baseName": "paymentInformation",
        "type": "PtsV2PaymentsOrderPost201ResponsePaymentInformation"
    },
    {
        "name": "processingInformation",
        "baseName": "processingInformation",
        "type": "PtsV2PaymentsOrderPost201ResponseProcessingInformation"
    },
    {
        "name": "buyerInformation",
        "baseName": "buyerInformation",
        "type": "PtsV2PaymentsOrderPost201ResponseBuyerInformation"
    },
    {
        "name": "submitTimeUtc",
        "baseName": "submitTimeUtc",
        "type": "string"
    },
    {
        "name": "status",
        "baseName": "status",
        "type": "string"
    },
    {
        "name": "reconciliationId",
        "baseName": "reconciliationId",
        "type": "string"
    },
    {
        "name": "riskInformation",
        "baseName": "riskInformation",
        "type": "PtsV2PaymentsPost201ResponseRiskInformationProcessorResults"
    }
];
class PtsV2PaymentsOrderPost201ResponseBuyerInformation {
    static getAttributeTypeMap() {
        return PtsV2PaymentsOrderPost201ResponseBuyerInformation.attributeTypeMap;
    }
}
exports.PtsV2PaymentsOrderPost201ResponseBuyerInformation = PtsV2PaymentsOrderPost201ResponseBuyerInformation;
PtsV2PaymentsOrderPost201ResponseBuyerInformation.discriminator = undefined;
PtsV2PaymentsOrderPost201ResponseBuyerInformation.attributeTypeMap = [
    {
        "name": "personalIdentification",
        "baseName": "personalIdentification",
        "type": "Array<PtsV2PaymentsOrderPost201ResponseBuyerInformationPersonalIdentification>"
    }
];
class PtsV2PaymentsOrderPost201ResponseBuyerInformationPersonalIdentification {
    static getAttributeTypeMap() {
        return PtsV2PaymentsOrderPost201ResponseBuyerInformationPersonalIdentification.attributeTypeMap;
    }
}
exports.PtsV2PaymentsOrderPost201ResponseBuyerInformationPersonalIdentification = PtsV2PaymentsOrderPost201ResponseBuyerInformationPersonalIdentification;
PtsV2PaymentsOrderPost201ResponseBuyerInformationPersonalIdentification.discriminator = undefined;
PtsV2PaymentsOrderPost201ResponseBuyerInformationPersonalIdentification.attributeTypeMap = [
    {
        "name": "type",
        "baseName": "type",
        "type": "string"
    },
    {
        "name": "id",
        "baseName": "id",
        "type": "string"
    }
];
class PtsV2PaymentsOrderPost201ResponseOrderInformation {
    static getAttributeTypeMap() {
        return PtsV2PaymentsOrderPost201ResponseOrderInformation.attributeTypeMap;
    }
}
exports.PtsV2PaymentsOrderPost201ResponseOrderInformation = PtsV2PaymentsOrderPost201ResponseOrderInformation;
PtsV2PaymentsOrderPost201ResponseOrderInformation.discriminator = undefined;
PtsV2PaymentsOrderPost201ResponseOrderInformation.attributeTypeMap = [
    {
        "name": "billTo",
        "baseName": "billTo",
        "type": "PtsV2PaymentsOrderPost201ResponseOrderInformationBillTo"
    },
    {
        "name": "shipTo",
        "baseName": "shipTo",
        "type": "PtsV2PaymentsOrderPost201ResponseOrderInformationShipTo"
    },
    {
        "name": "amountDetails",
        "baseName": "amountDetails",
        "type": "PtsV2PaymentsOrderPost201ResponseOrderInformationAmountDetails"
    },
    {
        "name": "shippingDetails",
        "baseName": "shippingDetails",
        "type": "PtsV2PaymentsOrderPost201ResponseOrderInformationShippingDetails"
    }
];
class PtsV2PaymentsOrderPost201ResponseOrderInformationAmountDetails {
    static getAttributeTypeMap() {
        return PtsV2PaymentsOrderPost201ResponseOrderInformationAmountDetails.attributeTypeMap;
    }
}
exports.PtsV2PaymentsOrderPost201ResponseOrderInformationAmountDetails = PtsV2PaymentsOrderPost201ResponseOrderInformationAmountDetails;
PtsV2PaymentsOrderPost201ResponseOrderInformationAmountDetails.discriminator = undefined;
PtsV2PaymentsOrderPost201ResponseOrderInformationAmountDetails.attributeTypeMap = [
    {
        "name": "totalAmount",
        "baseName": "totalAmount",
        "type": "string"
    },
    {
        "name": "currency",
        "baseName": "currency",
        "type": "string"
    }
];
class PtsV2PaymentsOrderPost201ResponseOrderInformationBillTo {
    static getAttributeTypeMap() {
        return PtsV2PaymentsOrderPost201ResponseOrderInformationBillTo.attributeTypeMap;
    }
}
exports.PtsV2PaymentsOrderPost201ResponseOrderInformationBillTo = PtsV2PaymentsOrderPost201ResponseOrderInformationBillTo;
PtsV2PaymentsOrderPost201ResponseOrderInformationBillTo.discriminator = undefined;
PtsV2PaymentsOrderPost201ResponseOrderInformationBillTo.attributeTypeMap = [
    {
        "name": "title",
        "baseName": "title",
        "type": "string"
    },
    {
        "name": "firstName",
        "baseName": "firstName",
        "type": "string"
    },
    {
        "name": "middleName",
        "baseName": "middleName",
        "type": "string"
    },
    {
        "name": "lastName",
        "baseName": "lastName",
        "type": "string"
    },
    {
        "name": "nameSuffix",
        "baseName": "nameSuffix",
        "type": "string"
    },
    {
        "name": "address1",
        "baseName": "address1",
        "type": "string"
    },
    {
        "name": "address2",
        "baseName": "address2",
        "type": "string"
    },
    {
        "name": "locality",
        "baseName": "locality",
        "type": "string"
    },
    {
        "name": "postalCode",
        "baseName": "postalCode",
        "type": "string"
    },
    {
        "name": "administrativeArea",
        "baseName": "administrativeArea",
        "type": "string"
    },
    {
        "name": "country",
        "baseName": "country",
        "type": "string"
    },
    {
        "name": "email",
        "baseName": "email",
        "type": "string"
    },
    {
        "name": "phoneNumber",
        "baseName": "phoneNumber",
        "type": "string"
    },
    {
        "name": "verificationStatus",
        "baseName": "verificationStatus",
        "type": "string"
    }
];
class PtsV2PaymentsOrderPost201ResponseOrderInformationShipTo {
    static getAttributeTypeMap() {
        return PtsV2PaymentsOrderPost201ResponseOrderInformationShipTo.attributeTypeMap;
    }
}
exports.PtsV2PaymentsOrderPost201ResponseOrderInformationShipTo = PtsV2PaymentsOrderPost201ResponseOrderInformationShipTo;
PtsV2PaymentsOrderPost201ResponseOrderInformationShipTo.discriminator = undefined;
PtsV2PaymentsOrderPost201ResponseOrderInformationShipTo.attributeTypeMap = [
    {
        "name": "method",
        "baseName": "method",
        "type": "string"
    },
    {
        "name": "firstName",
        "baseName": "firstName",
        "type": "string"
    },
    {
        "name": "lastName",
        "baseName": "lastName",
        "type": "string"
    },
    {
        "name": "address1",
        "baseName": "address1",
        "type": "string"
    },
    {
        "name": "address2",
        "baseName": "address2",
        "type": "string"
    },
    {
        "name": "locality",
        "baseName": "locality",
        "type": "string"
    },
    {
        "name": "postalCode",
        "baseName": "postalCode",
        "type": "string"
    },
    {
        "name": "administrativeArea",
        "baseName": "administrativeArea",
        "type": "string"
    },
    {
        "name": "country",
        "baseName": "country",
        "type": "string"
    },
    {
        "name": "phoneNumber",
        "baseName": "phoneNumber",
        "type": "string"
    }
];
class PtsV2PaymentsOrderPost201ResponseOrderInformationShippingDetails {
    static getAttributeTypeMap() {
        return PtsV2PaymentsOrderPost201ResponseOrderInformationShippingDetails.attributeTypeMap;
    }
}
exports.PtsV2PaymentsOrderPost201ResponseOrderInformationShippingDetails = PtsV2PaymentsOrderPost201ResponseOrderInformationShippingDetails;
PtsV2PaymentsOrderPost201ResponseOrderInformationShippingDetails.discriminator = undefined;
PtsV2PaymentsOrderPost201ResponseOrderInformationShippingDetails.attributeTypeMap = [
    {
        "name": "shippingMethod",
        "baseName": "shippingMethod",
        "type": "string"
    }
];
class PtsV2PaymentsOrderPost201ResponsePaymentInformation {
    static getAttributeTypeMap() {
        return PtsV2PaymentsOrderPost201ResponsePaymentInformation.attributeTypeMap;
    }
}
exports.PtsV2PaymentsOrderPost201ResponsePaymentInformation = PtsV2PaymentsOrderPost201ResponsePaymentInformation;
PtsV2PaymentsOrderPost201ResponsePaymentInformation.discriminator = undefined;
PtsV2PaymentsOrderPost201ResponsePaymentInformation.attributeTypeMap = [
    {
        "name": "eWallet",
        "baseName": "eWallet",
        "type": "PtsV2PaymentsOrderPost201ResponsePaymentInformationEWallet"
    }
];
class PtsV2PaymentsOrderPost201ResponsePaymentInformationEWallet {
    static getAttributeTypeMap() {
        return PtsV2PaymentsOrderPost201ResponsePaymentInformationEWallet.attributeTypeMap;
    }
}
exports.PtsV2PaymentsOrderPost201ResponsePaymentInformationEWallet = PtsV2PaymentsOrderPost201ResponsePaymentInformationEWallet;
PtsV2PaymentsOrderPost201ResponsePaymentInformationEWallet.discriminator = undefined;
PtsV2PaymentsOrderPost201ResponsePaymentInformationEWallet.attributeTypeMap = [
    {
        "name": "accountId",
        "baseName": "accountId",
        "type": "string"
    },
    {
        "name": "fundingSource",
        "baseName": "fundingSource",
        "type": "string"
    },
    {
        "name": "fundingSourceSale",
        "baseName": "fundingSourceSale",
        "type": "string"
    },
    {
        "name": "userName",
        "baseName": "userName",
        "type": "string"
    }
];
class PtsV2PaymentsOrderPost201ResponseProcessingInformation {
    static getAttributeTypeMap() {
        return PtsV2PaymentsOrderPost201ResponseProcessingInformation.attributeTypeMap;
    }
}
exports.PtsV2PaymentsOrderPost201ResponseProcessingInformation = PtsV2PaymentsOrderPost201ResponseProcessingInformation;
PtsV2PaymentsOrderPost201ResponseProcessingInformation.discriminator = undefined;
PtsV2PaymentsOrderPost201ResponseProcessingInformation.attributeTypeMap = [
    {
        "name": "intentsId",
        "baseName": "intentsId",
        "type": "string"
    }
];
class PtsV2PaymentsOrderPost201ResponseProcessorInformation {
    static getAttributeTypeMap() {
        return PtsV2PaymentsOrderPost201ResponseProcessorInformation.attributeTypeMap;
    }
}
exports.PtsV2PaymentsOrderPost201ResponseProcessorInformation = PtsV2PaymentsOrderPost201ResponseProcessorInformation;
PtsV2PaymentsOrderPost201ResponseProcessorInformation.discriminator = undefined;
PtsV2PaymentsOrderPost201ResponseProcessorInformation.attributeTypeMap = [
    {
        "name": "sellerProtection",
        "baseName": "sellerProtection",
        "type": "PtsV2PaymentsOrderPost201ResponseProcessorInformationSellerProtection"
    },
    {
        "name": "avs",
        "baseName": "avs",
        "type": "PtsV2PaymentsPost201Response1ProcessorInformationAvs"
    },
    {
        "name": "transactionId",
        "baseName": "transactionId",
        "type": "string"
    },
    {
        "name": "responseDetails",
        "baseName": "responseDetails",
        "type": "string"
    }
];
class PtsV2PaymentsOrderPost201ResponseProcessorInformationSellerProtection {
    static getAttributeTypeMap() {
        return PtsV2PaymentsOrderPost201ResponseProcessorInformationSellerProtection.attributeTypeMap;
    }
}
exports.PtsV2PaymentsOrderPost201ResponseProcessorInformationSellerProtection = PtsV2PaymentsOrderPost201ResponseProcessorInformationSellerProtection;
PtsV2PaymentsOrderPost201ResponseProcessorInformationSellerProtection.discriminator = undefined;
PtsV2PaymentsOrderPost201ResponseProcessorInformationSellerProtection.attributeTypeMap = [
    {
        "name": "eligibilty",
        "baseName": "eligibilty",
        "type": "string"
    },
    {
        "name": "type",
        "baseName": "type",
        "type": "string"
    }
];
class PtsV2PaymentsPost201Response {
    static getAttributeTypeMap() {
        return PtsV2PaymentsPost201Response.attributeTypeMap;
    }
}
exports.PtsV2PaymentsPost201Response = PtsV2PaymentsPost201Response;
PtsV2PaymentsPost201Response.discriminator = undefined;
PtsV2PaymentsPost201Response.attributeTypeMap = [
    {
        "name": "links",
        "baseName": "_links",
        "type": "PtsV2PaymentsPost201ResponseLinks"
    },
    {
        "name": "id",
        "baseName": "id",
        "type": "string"
    },
    {
        "name": "message",
        "baseName": "message",
        "type": "string"
    },
    {
        "name": "submitTimeUtc",
        "baseName": "submitTimeUtc",
        "type": "string"
    },
    {
        "name": "status",
        "baseName": "status",
        "type": "string"
    },
    {
        "name": "reconciliationId",
        "baseName": "reconciliationId",
        "type": "string"
    },
    {
        "name": "errorInformation",
        "baseName": "errorInformation",
        "type": "PtsV2PaymentsPost201ResponseErrorInformation"
    },
    {
        "name": "clientReferenceInformation",
        "baseName": "clientReferenceInformation",
        "type": "PtsV2PaymentsPost201ResponseClientReferenceInformation"
    },
    {
        "name": "processingInformation",
        "baseName": "processingInformation",
        "type": "PtsV2PaymentsPost201ResponseProcessingInformation"
    },
    {
        "name": "processorInformation",
        "baseName": "processorInformation",
        "type": "PtsV2PaymentsPost201ResponseProcessorInformation"
    },
    {
        "name": "issuerInformation",
        "baseName": "issuerInformation",
        "type": "PtsV2PaymentsPost201ResponseIssuerInformation"
    },
    {
        "name": "paymentAccountInformation",
        "baseName": "paymentAccountInformation",
        "type": "PtsV2PaymentsPost201ResponsePaymentAccountInformation"
    },
    {
        "name": "paymentInformation",
        "baseName": "paymentInformation",
        "type": "PtsV2PaymentsPost201ResponsePaymentInformation"
    },
    {
        "name": "paymentInsightsInformation",
        "baseName": "paymentInsightsInformation",
        "type": "PtsV2PaymentsPost201ResponsePaymentInsightsInformation"
    },
    {
        "name": "orderInformation",
        "baseName": "orderInformation",
        "type": "PtsV2PaymentsPost201ResponseOrderInformation"
    },
    {
        "name": "pointOfSaleInformation",
        "baseName": "pointOfSaleInformation",
        "type": "PtsV2PaymentsPost201ResponsePointOfSaleInformation"
    },
    {
        "name": "installmentInformation",
        "baseName": "installmentInformation",
        "type": "PtsV2PaymentsPost201ResponseInstallmentInformation"
    },
    {
        "name": "tokenInformation",
        "baseName": "tokenInformation",
        "type": "PtsV2PaymentsPost201ResponseTokenInformation"
    },
    {
        "name": "buyerInformation",
        "baseName": "buyerInformation",
        "type": "PtsV2PaymentsPost201ResponseBuyerInformation"
    },
    {
        "name": "riskInformation",
        "baseName": "riskInformation",
        "type": "PtsV2PaymentsPost201ResponseRiskInformation"
    },
    {
        "name": "consumerAuthenticationInformation",
        "baseName": "consumerAuthenticationInformation",
        "type": "PtsV2PaymentsPost201ResponseConsumerAuthenticationInformation"
    },
    {
        "name": "merchantInformation",
        "baseName": "merchantInformation",
        "type": "PtsV2PaymentsPost201ResponseMerchantInformation"
    },
    {
        "name": "embeddedActions",
        "baseName": "embeddedActions",
        "type": "PtsV2PaymentsPost201ResponseEmbeddedActions"
    },
    {
        "name": "watchlistScreeningInformation",
        "baseName": "watchlistScreeningInformation",
        "type": "PtsV2PaymentsPost201ResponseWatchlistScreeningInformation"
    }
];
class PtsV2PaymentsPost201Response1 {
    static getAttributeTypeMap() {
        return PtsV2PaymentsPost201Response1.attributeTypeMap;
    }
}
exports.PtsV2PaymentsPost201Response1 = PtsV2PaymentsPost201Response1;
PtsV2PaymentsPost201Response1.discriminator = undefined;
PtsV2PaymentsPost201Response1.attributeTypeMap = [
    {
        "name": "id",
        "baseName": "id",
        "type": "string"
    },
    {
        "name": "status",
        "baseName": "status",
        "type": "string"
    },
    {
        "name": "submitTimeUtc",
        "baseName": "submitTimeUtc",
        "type": "string"
    },
    {
        "name": "processorInformation",
        "baseName": "processorInformation",
        "type": "PtsV2PaymentsPost201Response1ProcessorInformation"
    },
    {
        "name": "reconciliationId",
        "baseName": "reconciliationId",
        "type": "string"
    },
    {
        "name": "paymentInformation",
        "baseName": "paymentInformation",
        "type": "PtsV2PaymentsPost201Response1PaymentInformation"
    },
    {
        "name": "orderInformation",
        "baseName": "orderInformation",
        "type": "PtsV2PaymentsPost201Response1OrderInformation"
    },
    {
        "name": "clientReferenceInformation",
        "baseName": "clientReferenceInformation",
        "type": "PtsV2IncrementalAuthorizationPatch201ResponseClientReferenceInformation"
    },
    {
        "name": "issuerInformation",
        "baseName": "issuerInformation",
        "type": "PtsV2PaymentsPost201Response1IssuerInformation"
    },
    {
        "name": "errorInformation",
        "baseName": "errorInformation",
        "type": "PtsV2PaymentsPost201Response1ErrorInformation"
    }
];
class PtsV2PaymentsPost201Response1ErrorInformation {
    static getAttributeTypeMap() {
        return PtsV2PaymentsPost201Response1ErrorInformation.attributeTypeMap;
    }
}
exports.PtsV2PaymentsPost201Response1ErrorInformation = PtsV2PaymentsPost201Response1ErrorInformation;
PtsV2PaymentsPost201Response1ErrorInformation.discriminator = undefined;
PtsV2PaymentsPost201Response1ErrorInformation.attributeTypeMap = [
    {
        "name": "reason",
        "baseName": "reason",
        "type": "string"
    },
    {
        "name": "message",
        "baseName": "message",
        "type": "string"
    },
    {
        "name": "details",
        "baseName": "details",
        "type": "Array<PtsV2PaymentsPost201Response1ErrorInformationDetails>"
    }
];
class PtsV2PaymentsPost201Response1ErrorInformationDetails {
    static getAttributeTypeMap() {
        return PtsV2PaymentsPost201Response1ErrorInformationDetails.attributeTypeMap;
    }
}
exports.PtsV2PaymentsPost201Response1ErrorInformationDetails = PtsV2PaymentsPost201Response1ErrorInformationDetails;
PtsV2PaymentsPost201Response1ErrorInformationDetails.discriminator = undefined;
PtsV2PaymentsPost201Response1ErrorInformationDetails.attributeTypeMap = [
    {
        "name": "reason",
        "baseName": "reason",
        "type": "string"
    }
];
class PtsV2PaymentsPost201Response1IssuerInformation {
    static getAttributeTypeMap() {
        return PtsV2PaymentsPost201Response1IssuerInformation.attributeTypeMap;
    }
}
exports.PtsV2PaymentsPost201Response1IssuerInformation = PtsV2PaymentsPost201Response1IssuerInformation;
PtsV2PaymentsPost201Response1IssuerInformation.discriminator = undefined;
PtsV2PaymentsPost201Response1IssuerInformation.attributeTypeMap = [
    {
        "name": "name",
        "baseName": "name",
        "type": "string"
    },
    {
        "name": "code",
        "baseName": "code",
        "type": "string"
    }
];
class PtsV2PaymentsPost201Response1OrderInformation {
    static getAttributeTypeMap() {
        return PtsV2PaymentsPost201Response1OrderInformation.attributeTypeMap;
    }
}
exports.PtsV2PaymentsPost201Response1OrderInformation = PtsV2PaymentsPost201Response1OrderInformation;
PtsV2PaymentsPost201Response1OrderInformation.discriminator = undefined;
PtsV2PaymentsPost201Response1OrderInformation.attributeTypeMap = [
    {
        "name": "billTo",
        "baseName": "billTo",
        "type": "PtsV2PaymentsPost201Response1OrderInformationBillTo"
    },
    {
        "name": "shipTo",
        "baseName": "shipTo",
        "type": "PtsV2PaymentsPost201Response1OrderInformationShipTo"
    },
    {
        "name": "amountDetails",
        "baseName": "amountDetails",
        "type": "PtsV2PaymentsPost201Response1OrderInformationAmountDetails"
    }
];
class PtsV2PaymentsPost201Response1OrderInformationAmountDetails {
    static getAttributeTypeMap() {
        return PtsV2PaymentsPost201Response1OrderInformationAmountDetails.attributeTypeMap;
    }
}
exports.PtsV2PaymentsPost201Response1OrderInformationAmountDetails = PtsV2PaymentsPost201Response1OrderInformationAmountDetails;
PtsV2PaymentsPost201Response1OrderInformationAmountDetails.discriminator = undefined;
PtsV2PaymentsPost201Response1OrderInformationAmountDetails.attributeTypeMap = [
    {
        "name": "refundBalance",
        "baseName": "refundBalance",
        "type": "string"
    }
];
class PtsV2PaymentsPost201Response1OrderInformationBillTo {
    static getAttributeTypeMap() {
        return PtsV2PaymentsPost201Response1OrderInformationBillTo.attributeTypeMap;
    }
}
exports.PtsV2PaymentsPost201Response1OrderInformationBillTo = PtsV2PaymentsPost201Response1OrderInformationBillTo;
PtsV2PaymentsPost201Response1OrderInformationBillTo.discriminator = undefined;
PtsV2PaymentsPost201Response1OrderInformationBillTo.attributeTypeMap = [
    {
        "name": "firstName",
        "baseName": "firstName",
        "type": "string"
    },
    {
        "name": "lastName",
        "baseName": "lastName",
        "type": "string"
    },
    {
        "name": "nameSuffix",
        "baseName": "nameSuffix",
        "type": "string"
    },
    {
        "name": "address1",
        "baseName": "address1",
        "type": "string"
    },
    {
        "name": "address2",
        "baseName": "address2",
        "type": "string"
    },
    {
        "name": "locality",
        "baseName": "locality",
        "type": "string"
    },
    {
        "name": "administrativeArea",
        "baseName": "administrativeArea",
        "type": "string"
    },
    {
        "name": "postalCode",
        "baseName": "postalCode",
        "type": "string"
    },
    {
        "name": "country",
        "baseName": "country",
        "type": "string"
    },
    {
        "name": "email",
        "baseName": "email",
        "type": "string"
    },
    {
        "name": "verificationStatus",
        "baseName": "verificationStatus",
        "type": "string"
    }
];
class PtsV2PaymentsPost201Response1OrderInformationShipTo {
    static getAttributeTypeMap() {
        return PtsV2PaymentsPost201Response1OrderInformationShipTo.attributeTypeMap;
    }
}
exports.PtsV2PaymentsPost201Response1OrderInformationShipTo = PtsV2PaymentsPost201Response1OrderInformationShipTo;
PtsV2PaymentsPost201Response1OrderInformationShipTo.discriminator = undefined;
PtsV2PaymentsPost201Response1OrderInformationShipTo.attributeTypeMap = [
    {
        "name": "firstName",
        "baseName": "firstName",
        "type": "string"
    },
    {
        "name": "lastName",
        "baseName": "lastName",
        "type": "string"
    },
    {
        "name": "address1",
        "baseName": "address1",
        "type": "string"
    },
    {
        "name": "address2",
        "baseName": "address2",
        "type": "string"
    },
    {
        "name": "locality",
        "baseName": "locality",
        "type": "string"
    },
    {
        "name": "administrativeArea",
        "baseName": "administrativeArea",
        "type": "string"
    },
    {
        "name": "postalCode",
        "baseName": "postalCode",
        "type": "string"
    },
    {
        "name": "country",
        "baseName": "country",
        "type": "string"
    },
    {
        "name": "phoneNumber",
        "baseName": "phoneNumber",
        "type": "string"
    }
];
class PtsV2PaymentsPost201Response1PaymentInformation {
    static getAttributeTypeMap() {
        return PtsV2PaymentsPost201Response1PaymentInformation.attributeTypeMap;
    }
}
exports.PtsV2PaymentsPost201Response1PaymentInformation = PtsV2PaymentsPost201Response1PaymentInformation;
PtsV2PaymentsPost201Response1PaymentInformation.discriminator = undefined;
PtsV2PaymentsPost201Response1PaymentInformation.attributeTypeMap = [
    {
        "name": "paymentType",
        "baseName": "paymentType",
        "type": "PtsV2PaymentsPost201Response1PaymentInformationPaymentType"
    },
    {
        "name": "eWallet",
        "baseName": "eWallet",
        "type": "PtsV2PaymentsPost201Response1PaymentInformationEWallet"
    },
    {
        "name": "customer",
        "baseName": "customer",
        "type": "Ptsv2refreshpaymentstatusidPaymentInformationCustomer"
    },
    {
        "name": "bank",
        "baseName": "bank",
        "type": "PtsV2PaymentsPost201Response1PaymentInformationBank"
    }
];
class PtsV2PaymentsPost201Response1PaymentInformationBank {
    static getAttributeTypeMap() {
        return PtsV2PaymentsPost201Response1PaymentInformationBank.attributeTypeMap;
    }
}
exports.PtsV2PaymentsPost201Response1PaymentInformationBank = PtsV2PaymentsPost201Response1PaymentInformationBank;
PtsV2PaymentsPost201Response1PaymentInformationBank.discriminator = undefined;
PtsV2PaymentsPost201Response1PaymentInformationBank.attributeTypeMap = [
    {
        "name": "account",
        "baseName": "account",
        "type": "PtsV2PaymentsPost201Response1PaymentInformationBankAccount"
    }
];
class PtsV2PaymentsPost201Response1PaymentInformationBankAccount {
    static getAttributeTypeMap() {
        return PtsV2PaymentsPost201Response1PaymentInformationBankAccount.attributeTypeMap;
    }
}
exports.PtsV2PaymentsPost201Response1PaymentInformationBankAccount = PtsV2PaymentsPost201Response1PaymentInformationBankAccount;
PtsV2PaymentsPost201Response1PaymentInformationBankAccount.discriminator = undefined;
PtsV2PaymentsPost201Response1PaymentInformationBankAccount.attributeTypeMap = [
    {
        "name": "ibanSuffix",
        "baseName": "ibanSuffix",
        "type": "string"
    }
];
class PtsV2PaymentsPost201Response1PaymentInformationEWallet {
    static getAttributeTypeMap() {
        return PtsV2PaymentsPost201Response1PaymentInformationEWallet.attributeTypeMap;
    }
}
exports.PtsV2PaymentsPost201Response1PaymentInformationEWallet = PtsV2PaymentsPost201Response1PaymentInformationEWallet;
PtsV2PaymentsPost201Response1PaymentInformationEWallet.discriminator = undefined;
PtsV2PaymentsPost201Response1PaymentInformationEWallet.attributeTypeMap = [
    {
        "name": "name",
        "baseName": "name",
        "type": "string"
    },
    {
        "name": "fundingSource",
        "baseName": "fundingSource",
        "type": "string"
    }
];
class PtsV2PaymentsPost201Response1PaymentInformationPaymentType {
    static getAttributeTypeMap() {
        return PtsV2PaymentsPost201Response1PaymentInformationPaymentType.attributeTypeMap;
    }
}
exports.PtsV2PaymentsPost201Response1PaymentInformationPaymentType = PtsV2PaymentsPost201Response1PaymentInformationPaymentType;
PtsV2PaymentsPost201Response1PaymentInformationPaymentType.discriminator = undefined;
PtsV2PaymentsPost201Response1PaymentInformationPaymentType.attributeTypeMap = [
    {
        "name": "method",
        "baseName": "method",
        "type": "PtsV2PaymentsPost201Response1PaymentInformationPaymentTypeMethod"
    }
];
class PtsV2PaymentsPost201Response1PaymentInformationPaymentTypeMethod {
    static getAttributeTypeMap() {
        return PtsV2PaymentsPost201Response1PaymentInformationPaymentTypeMethod.attributeTypeMap;
    }
}
exports.PtsV2PaymentsPost201Response1PaymentInformationPaymentTypeMethod = PtsV2PaymentsPost201Response1PaymentInformationPaymentTypeMethod;
PtsV2PaymentsPost201Response1PaymentInformationPaymentTypeMethod.discriminator = undefined;
PtsV2PaymentsPost201Response1PaymentInformationPaymentTypeMethod.attributeTypeMap = [
    {
        "name": "type",
        "baseName": "type",
        "type": "string"
    }
];
class PtsV2PaymentsPost201Response1ProcessorInformation {
    static getAttributeTypeMap() {
        return PtsV2PaymentsPost201Response1ProcessorInformation.attributeTypeMap;
    }
}
exports.PtsV2PaymentsPost201Response1ProcessorInformation = PtsV2PaymentsPost201Response1ProcessorInformation;
PtsV2PaymentsPost201Response1ProcessorInformation.discriminator = undefined;
PtsV2PaymentsPost201Response1ProcessorInformation.attributeTypeMap = [
    {
        "name": "transactionId",
        "baseName": "transactionId",
        "type": "string"
    },
    {
        "name": "tradeNumber",
        "baseName": "tradeNumber",
        "type": "string"
    },
    {
        "name": "rawResponse",
        "baseName": "rawResponse",
        "type": "string"
    },
    {
        "name": "rawResponseLocal",
        "baseName": "rawResponseLocal",
        "type": "string"
    },
    {
        "name": "responseDetails",
        "baseName": "responseDetails",
        "type": "string"
    },
    {
        "name": "responseCode",
        "baseName": "responseCode",
        "type": "string"
    },
    {
        "name": "sellerProtection",
        "baseName": "sellerProtection",
        "type": "PtsV2PaymentsPost201ResponseProcessorInformationSellerProtection"
    },
    {
        "name": "avs",
        "baseName": "avs",
        "type": "PtsV2PaymentsPost201Response1ProcessorInformationAvs"
    }
];
class PtsV2PaymentsPost201Response1ProcessorInformationAvs {
    static getAttributeTypeMap() {
        return PtsV2PaymentsPost201Response1ProcessorInformationAvs.attributeTypeMap;
    }
}
exports.PtsV2PaymentsPost201Response1ProcessorInformationAvs = PtsV2PaymentsPost201Response1ProcessorInformationAvs;
PtsV2PaymentsPost201Response1ProcessorInformationAvs.discriminator = undefined;
PtsV2PaymentsPost201Response1ProcessorInformationAvs.attributeTypeMap = [
    {
        "name": "codeRaw",
        "baseName": "codeRaw",
        "type": "string"
    }
];
class PtsV2PaymentsPost201Response2 {
    static getAttributeTypeMap() {
        return PtsV2PaymentsPost201Response2.attributeTypeMap;
    }
}
exports.PtsV2PaymentsPost201Response2 = PtsV2PaymentsPost201Response2;
PtsV2PaymentsPost201Response2.discriminator = undefined;
PtsV2PaymentsPost201Response2.attributeTypeMap = [
    {
        "name": "links",
        "baseName": "_links",
        "type": "PtsV2PaymentsPost201ResponseLinks"
    },
    {
        "name": "id",
        "baseName": "id",
        "type": "string"
    },
    {
        "name": "submitTimeUtc",
        "baseName": "submitTimeUtc",
        "type": "string"
    },
    {
        "name": "status",
        "baseName": "status",
        "type": "string"
    },
    {
        "name": "reconciliationId",
        "baseName": "reconciliationId",
        "type": "string"
    },
    {
        "name": "errorInformation",
        "baseName": "errorInformation",
        "type": "PtsV2PaymentsPost201ResponseErrorInformation"
    },
    {
        "name": "clientReferenceInformation",
        "baseName": "clientReferenceInformation",
        "type": "PtsV2PaymentsPost201ResponseClientReferenceInformation"
    },
    {
        "name": "processorInformation",
        "baseName": "processorInformation",
        "type": "PtsV2PaymentsPost201Response2ProcessorInformation"
    },
    {
        "name": "paymentInformation",
        "baseName": "paymentInformation",
        "type": "PtsV2PaymentsPost201Response2PaymentInformation"
    },
    {
        "name": "orderInformation",
        "baseName": "orderInformation",
        "type": "PtsV2PaymentsPost201Response2OrderInformation"
    }
];
class PtsV2PaymentsPost201Response2OrderInformation {
    static getAttributeTypeMap() {
        return PtsV2PaymentsPost201Response2OrderInformation.attributeTypeMap;
    }
}
exports.PtsV2PaymentsPost201Response2OrderInformation = PtsV2PaymentsPost201Response2OrderInformation;
PtsV2PaymentsPost201Response2OrderInformation.discriminator = undefined;
PtsV2PaymentsPost201Response2OrderInformation.attributeTypeMap = [
    {
        "name": "amountDetails",
        "baseName": "amountDetails",
        "type": "PtsV2PaymentsPost201Response2OrderInformationAmountDetails"
    }
];
class PtsV2PaymentsPost201Response2OrderInformationAmountDetails {
    static getAttributeTypeMap() {
        return PtsV2PaymentsPost201Response2OrderInformationAmountDetails.attributeTypeMap;
    }
}
exports.PtsV2PaymentsPost201Response2OrderInformationAmountDetails = PtsV2PaymentsPost201Response2OrderInformationAmountDetails;
PtsV2PaymentsPost201Response2OrderInformationAmountDetails.discriminator = undefined;
PtsV2PaymentsPost201Response2OrderInformationAmountDetails.attributeTypeMap = [
    {
        "name": "totalAmount",
        "baseName": "totalAmount",
        "type": "string"
    }
];
class PtsV2PaymentsPost201Response2PaymentInformation {
    static getAttributeTypeMap() {
        return PtsV2PaymentsPost201Response2PaymentInformation.attributeTypeMap;
    }
}
exports.PtsV2PaymentsPost201Response2PaymentInformation = PtsV2PaymentsPost201Response2PaymentInformation;
PtsV2PaymentsPost201Response2PaymentInformation.discriminator = undefined;
PtsV2PaymentsPost201Response2PaymentInformation.attributeTypeMap = [
    {
        "name": "eWallet",
        "baseName": "eWallet",
        "type": "PtsV2PaymentsPost201Response2PaymentInformationEWallet"
    }
];
class PtsV2PaymentsPost201Response2PaymentInformationEWallet {
    static getAttributeTypeMap() {
        return PtsV2PaymentsPost201Response2PaymentInformationEWallet.attributeTypeMap;
    }
}
exports.PtsV2PaymentsPost201Response2PaymentInformationEWallet = PtsV2PaymentsPost201Response2PaymentInformationEWallet;
PtsV2PaymentsPost201Response2PaymentInformationEWallet.discriminator = undefined;
PtsV2PaymentsPost201Response2PaymentInformationEWallet.attributeTypeMap = [
    {
        "name": "fundingSource",
        "baseName": "fundingSource",
        "type": "string"
    }
];
class PtsV2PaymentsPost201Response2ProcessorInformation {
    static getAttributeTypeMap() {
        return PtsV2PaymentsPost201Response2ProcessorInformation.attributeTypeMap;
    }
}
exports.PtsV2PaymentsPost201Response2ProcessorInformation = PtsV2PaymentsPost201Response2ProcessorInformation;
PtsV2PaymentsPost201Response2ProcessorInformation.discriminator = undefined;
PtsV2PaymentsPost201Response2ProcessorInformation.attributeTypeMap = [
    {
        "name": "transactionId",
        "baseName": "transactionId",
        "type": "string"
    },
    {
        "name": "paymentUrl",
        "baseName": "paymentUrl",
        "type": "string"
    },
    {
        "name": "responseDetails",
        "baseName": "responseDetails",
        "type": "string"
    },
    {
        "name": "token",
        "baseName": "token",
        "type": "string"
    },
    {
        "name": "responseCode",
        "baseName": "responseCode",
        "type": "string"
    }
];
class PtsV2PaymentsPost201ResponseBuyerInformation {
    static getAttributeTypeMap() {
        return PtsV2PaymentsPost201ResponseBuyerInformation.attributeTypeMap;
    }
}
exports.PtsV2PaymentsPost201ResponseBuyerInformation = PtsV2PaymentsPost201ResponseBuyerInformation;
PtsV2PaymentsPost201ResponseBuyerInformation.discriminator = undefined;
PtsV2PaymentsPost201ResponseBuyerInformation.attributeTypeMap = [
    {
        "name": "merchantCustomerId",
        "baseName": "merchantCustomerId",
        "type": "string"
    },
    {
        "name": "dateOfBirth",
        "baseName": "dateOfBirth",
        "type": "string"
    },
    {
        "name": "vatRegistrationNumber",
        "baseName": "vatRegistrationNumber",
        "type": "string"
    },
    {
        "name": "personalIdentification",
        "baseName": "personalIdentification",
        "type": "Array<Ptsv2paymentsBuyerInformationPersonalIdentification>"
    },
    {
        "name": "taxId",
        "baseName": "taxId",
        "type": "string"
    },
    {
        "name": "loginId",
        "baseName": "loginId",
        "type": "string"
    }
];
class PtsV2PaymentsPost201ResponseClientReferenceInformation {
    static getAttributeTypeMap() {
        return PtsV2PaymentsPost201ResponseClientReferenceInformation.attributeTypeMap;
    }
}
exports.PtsV2PaymentsPost201ResponseClientReferenceInformation = PtsV2PaymentsPost201ResponseClientReferenceInformation;
PtsV2PaymentsPost201ResponseClientReferenceInformation.discriminator = undefined;
PtsV2PaymentsPost201ResponseClientReferenceInformation.attributeTypeMap = [
    {
        "name": "code",
        "baseName": "code",
        "type": "string"
    },
    {
        "name": "submitLocalDateTime",
        "baseName": "submitLocalDateTime",
        "type": "string"
    },
    {
        "name": "ownerMerchantId",
        "baseName": "ownerMerchantId",
        "type": "string"
    }
];
class PtsV2PaymentsPost201ResponseConsumerAuthenticationInformation {
    static getAttributeTypeMap() {
        return PtsV2PaymentsPost201ResponseConsumerAuthenticationInformation.attributeTypeMap;
    }
}
exports.PtsV2PaymentsPost201ResponseConsumerAuthenticationInformation = PtsV2PaymentsPost201ResponseConsumerAuthenticationInformation;
PtsV2PaymentsPost201ResponseConsumerAuthenticationInformation.discriminator = undefined;
PtsV2PaymentsPost201ResponseConsumerAuthenticationInformation.attributeTypeMap = [
    {
        "name": "accessToken",
        "baseName": "accessToken",
        "type": "string"
    },
    {
        "name": "acsRenderingType",
        "baseName": "acsRenderingType",
        "type": "string"
    },
    {
        "name": "acsTransactionId",
        "baseName": "acsTransactionId",
        "type": "string"
    },
    {
        "name": "acsUrl",
        "baseName": "acsUrl",
        "type": "string"
    },
    {
        "name": "authenticationPath",
        "baseName": "authenticationPath",
        "type": "string"
    },
    {
        "name": "authorizationPayload",
        "baseName": "authorizationPayload",
        "type": "string"
    },
    {
        "name": "authenticationTransactionId",
        "baseName": "authenticationTransactionId",
        "type": "string"
    },
    {
        "name": "cardholderMessage",
        "baseName": "cardholderMessage",
        "type": "string"
    },
    {
        "name": "cavv",
        "baseName": "cavv",
        "type": "string"
    },
    {
        "name": "cavvAlgorithm",
        "baseName": "cavvAlgorithm",
        "type": "string"
    },
    {
        "name": "challengeCancelCode",
        "baseName": "challengeCancelCode",
        "type": "string"
    },
    {
        "name": "challengeRequired",
        "baseName": "challengeRequired",
        "type": "string"
    },
    {
        "name": "decoupledAuthenticationIndicator",
        "baseName": "decoupledAuthenticationIndicator",
        "type": "string"
    },
    {
        "name": "directoryServerErrorCode",
        "baseName": "directoryServerErrorCode",
        "type": "string"
    },
    {
        "name": "directoryServerErrorDescription",
        "baseName": "directoryServerErrorDescription",
        "type": "string"
    },
    {
        "name": "ecommerceIndicator",
        "baseName": "ecommerceIndicator",
        "type": "string"
    },
    {
        "name": "eci",
        "baseName": "eci",
        "type": "string"
    },
    {
        "name": "eciRaw",
        "baseName": "eciRaw",
        "type": "string"
    },
    {
        "name": "effectiveAuthenticationType",
        "baseName": "effectiveAuthenticationType",
        "type": "string"
    },
    {
        "name": "ivr",
        "baseName": "ivr",
        "type": "PtsV2PaymentsPost201ResponseConsumerAuthenticationInformationIvr"
    },
    {
        "name": "strongAuthentication",
        "baseName": "strongAuthentication",
        "type": "PtsV2PaymentsPost201ResponseConsumerAuthenticationInformationStrongAuthentication"
    },
    {
        "name": "networkScore",
        "baseName": "networkScore",
        "type": "string"
    },
    {
        "name": "pareq",
        "baseName": "pareq",
        "type": "string"
    },
    {
        "name": "paresStatus",
        "baseName": "paresStatus",
        "type": "string"
    },
    {
        "name": "proofXml",
        "baseName": "proofXml",
        "type": "string"
    },
    {
        "name": "proxyPan",
        "baseName": "proxyPan",
        "type": "string"
    },
    {
        "name": "sdkTransactionId",
        "baseName": "sdkTransactionId",
        "type": "string"
    },
    {
        "name": "signedParesStatusReason",
        "baseName": "signedParesStatusReason",
        "type": "string"
    },
    {
        "name": "specificationVersion",
        "baseName": "specificationVersion",
        "type": "string"
    },
    {
        "name": "stepUpUrl",
        "baseName": "stepUpUrl",
        "type": "string"
    },
    {
        "name": "threeDSServerTransactionId",
        "baseName": "threeDSServerTransactionId",
        "type": "string"
    },
    {
        "name": "ucafAuthenticationData",
        "baseName": "ucafAuthenticationData",
        "type": "string"
    },
    {
        "name": "ucafCollectionIndicator",
        "baseName": "ucafCollectionIndicator",
        "type": "string"
    },
    {
        "name": "veresEnrolled",
        "baseName": "veresEnrolled",
        "type": "string"
    },
    {
        "name": "whiteListStatusSource",
        "baseName": "whiteListStatusSource",
        "type": "string"
    },
    {
        "name": "xid",
        "baseName": "xid",
        "type": "string"
    },
    {
        "name": "directoryServerTransactionId",
        "baseName": "directoryServerTransactionId",
        "type": "string"
    },
    {
        "name": "dataQualityIndicator",
        "baseName": "dataQualityIndicator",
        "type": "string"
    },
    {
        "name": "authenticationResult",
        "baseName": "authenticationResult",
        "type": "string"
    },
    {
        "name": "authenticationStatusMsg",
        "baseName": "authenticationStatusMsg",
        "type": "string"
    },
    {
        "name": "indicator",
        "baseName": "indicator",
        "type": "string"
    },
    {
        "name": "interactionCounter",
        "baseName": "interactionCounter",
        "type": "string"
    },
    {
        "name": "whiteListStatus",
        "baseName": "whiteListStatus",
        "type": "string"
    }
];
class PtsV2PaymentsPost201ResponseConsumerAuthenticationInformationIvr {
    static getAttributeTypeMap() {
        return PtsV2PaymentsPost201ResponseConsumerAuthenticationInformationIvr.attributeTypeMap;
    }
}
exports.PtsV2PaymentsPost201ResponseConsumerAuthenticationInformationIvr = PtsV2PaymentsPost201ResponseConsumerAuthenticationInformationIvr;
PtsV2PaymentsPost201ResponseConsumerAuthenticationInformationIvr.discriminator = undefined;
PtsV2PaymentsPost201ResponseConsumerAuthenticationInformationIvr.attributeTypeMap = [
    {
        "name": "enabledMessage",
        "baseName": "enabledMessage",
        "type": "boolean"
    },
    {
        "name": "encryptionKey",
        "baseName": "encryptionKey",
        "type": "string"
    },
    {
        "name": "encryptionMandatory",
        "baseName": "encryptionMandatory",
        "type": "boolean"
    },
    {
        "name": "encryptionType",
        "baseName": "encryptionType",
        "type": "string"
    },
    {
        "name": "label",
        "baseName": "label",
        "type": "string"
    },
    {
        "name": "prompt",
        "baseName": "prompt",
        "type": "string"
    },
    {
        "name": "statusMessage",
        "baseName": "statusMessage",
        "type": "string"
    }
];
class PtsV2PaymentsPost201ResponseConsumerAuthenticationInformationStrongAuthentication {
    static getAttributeTypeMap() {
        return PtsV2PaymentsPost201ResponseConsumerAuthenticationInformationStrongAuthentication.attributeTypeMap;
    }
}
exports.PtsV2PaymentsPost201ResponseConsumerAuthenticationInformationStrongAuthentication = PtsV2PaymentsPost201ResponseConsumerAuthenticationInformationStrongAuthentication;
PtsV2PaymentsPost201ResponseConsumerAuthenticationInformationStrongAuthentication.discriminator = undefined;
PtsV2PaymentsPost201ResponseConsumerAuthenticationInformationStrongAuthentication.attributeTypeMap = [
    {
        "name": "issuerInformation",
        "baseName": "issuerInformation",
        "type": "PaymentsStrongAuthIssuerInformation"
    }
];
/**
* Contains embedded actions, that includes status and response for every actions in the list.
*/
class PtsV2PaymentsPost201ResponseEmbeddedActions {
    static getAttributeTypeMap() {
        return PtsV2PaymentsPost201ResponseEmbeddedActions.attributeTypeMap;
    }
}
exports.PtsV2PaymentsPost201ResponseEmbeddedActions = PtsV2PaymentsPost201ResponseEmbeddedActions;
PtsV2PaymentsPost201ResponseEmbeddedActions.discriminator = undefined;
PtsV2PaymentsPost201ResponseEmbeddedActions.attributeTypeMap = [
    {
        "name": "CAPTURE",
        "baseName": "CAPTURE",
        "type": "PtsV2PaymentsPost201ResponseEmbeddedActionsCAPTURE"
    },
    {
        "name": "DECISION",
        "baseName": "DECISION",
        "type": "PtsV2PaymentsPost201ResponseEmbeddedActionsDECISION"
    },
    {
        "name": "CONSUMER_AUTHENTICATION",
        "baseName": "CONSUMER_AUTHENTICATION",
        "type": "PtsV2PaymentsPost201ResponseEmbeddedActionsCONSUMERAUTHENTICATION"
    },
    {
        "name": "VALIDATE_CONSUMER_AUTHENTICATION",
        "baseName": "VALIDATE_CONSUMER_AUTHENTICATION",
        "type": "PtsV2PaymentsPost201ResponseEmbeddedActionsCONSUMERAUTHENTICATION"
    },
    {
        "name": "WATCHLIST_SCREENING",
        "baseName": "WATCHLIST_SCREENING",
        "type": "PtsV2PaymentsPost201ResponseEmbeddedActionsWATCHLISTSCREENING"
    },
    {
        "name": "TOKEN_CREATE",
        "baseName": "TOKEN_CREATE",
        "type": "PtsV2PaymentsPost201ResponseEmbeddedActionsTOKENCREATE"
    },
    {
        "name": "TOKEN_UPDATE",
        "baseName": "TOKEN_UPDATE",
        "type": "PtsV2PaymentsPost201ResponseEmbeddedActionsTOKENUPDATE"
    }
];
class PtsV2PaymentsPost201ResponseEmbeddedActionsCAPTURE {
    static getAttributeTypeMap() {
        return PtsV2PaymentsPost201ResponseEmbeddedActionsCAPTURE.attributeTypeMap;
    }
}
exports.PtsV2PaymentsPost201ResponseEmbeddedActionsCAPTURE = PtsV2PaymentsPost201ResponseEmbeddedActionsCAPTURE;
PtsV2PaymentsPost201ResponseEmbeddedActionsCAPTURE.discriminator = undefined;
PtsV2PaymentsPost201ResponseEmbeddedActionsCAPTURE.attributeTypeMap = [
    {
        "name": "status",
        "baseName": "status",
        "type": "string"
    },
    {
        "name": "reason",
        "baseName": "reason",
        "type": "string"
    },
    {
        "name": "message",
        "baseName": "message",
        "type": "string"
    }
];
class PtsV2PaymentsPost201ResponseEmbeddedActionsCONSUMERAUTHENTICATION {
    static getAttributeTypeMap() {
        return PtsV2PaymentsPost201ResponseEmbeddedActionsCONSUMERAUTHENTICATION.attributeTypeMap;
    }
}
exports.PtsV2PaymentsPost201ResponseEmbeddedActionsCONSUMERAUTHENTICATION = PtsV2PaymentsPost201ResponseEmbeddedActionsCONSUMERAUTHENTICATION;
PtsV2PaymentsPost201ResponseEmbeddedActionsCONSUMERAUTHENTICATION.discriminator = undefined;
PtsV2PaymentsPost201ResponseEmbeddedActionsCONSUMERAUTHENTICATION.attributeTypeMap = [
    {
        "name": "status",
        "baseName": "status",
        "type": "string"
    },
    {
        "name": "reason",
        "baseName": "reason",
        "type": "string"
    },
    {
        "name": "message",
        "baseName": "message",
        "type": "string"
    }
];
class PtsV2PaymentsPost201ResponseEmbeddedActionsDECISION {
    static getAttributeTypeMap() {
        return PtsV2PaymentsPost201ResponseEmbeddedActionsDECISION.attributeTypeMap;
    }
}
exports.PtsV2PaymentsPost201ResponseEmbeddedActionsDECISION = PtsV2PaymentsPost201ResponseEmbeddedActionsDECISION;
PtsV2PaymentsPost201ResponseEmbeddedActionsDECISION.discriminator = undefined;
PtsV2PaymentsPost201ResponseEmbeddedActionsDECISION.attributeTypeMap = [
    {
        "name": "status",
        "baseName": "status",
        "type": "string"
    },
    {
        "name": "reason",
        "baseName": "reason",
        "type": "string"
    },
    {
        "name": "message",
        "baseName": "message",
        "type": "string"
    }
];
class PtsV2PaymentsPost201ResponseEmbeddedActionsTOKENCREATE {
    static getAttributeTypeMap() {
        return PtsV2PaymentsPost201ResponseEmbeddedActionsTOKENCREATE.attributeTypeMap;
    }
}
exports.PtsV2PaymentsPost201ResponseEmbeddedActionsTOKENCREATE = PtsV2PaymentsPost201ResponseEmbeddedActionsTOKENCREATE;
PtsV2PaymentsPost201ResponseEmbeddedActionsTOKENCREATE.discriminator = undefined;
PtsV2PaymentsPost201ResponseEmbeddedActionsTOKENCREATE.attributeTypeMap = [
    {
        "name": "status",
        "baseName": "status",
        "type": "string"
    },
    {
        "name": "reason",
        "baseName": "reason",
        "type": "string"
    },
    {
        "name": "message",
        "baseName": "message",
        "type": "string"
    }
];
class PtsV2PaymentsPost201ResponseEmbeddedActionsTOKENUPDATE {
    static getAttributeTypeMap() {
        return PtsV2PaymentsPost201ResponseEmbeddedActionsTOKENUPDATE.attributeTypeMap;
    }
}
exports.PtsV2PaymentsPost201ResponseEmbeddedActionsTOKENUPDATE = PtsV2PaymentsPost201ResponseEmbeddedActionsTOKENUPDATE;
PtsV2PaymentsPost201ResponseEmbeddedActionsTOKENUPDATE.discriminator = undefined;
PtsV2PaymentsPost201ResponseEmbeddedActionsTOKENUPDATE.attributeTypeMap = [
    {
        "name": "status",
        "baseName": "status",
        "type": "string"
    },
    {
        "name": "reason",
        "baseName": "reason",
        "type": "string"
    },
    {
        "name": "message",
        "baseName": "message",
        "type": "string"
    }
];
class PtsV2PaymentsPost201ResponseEmbeddedActionsWATCHLISTSCREENING {
    static getAttributeTypeMap() {
        return PtsV2PaymentsPost201ResponseEmbeddedActionsWATCHLISTSCREENING.attributeTypeMap;
    }
}
exports.PtsV2PaymentsPost201ResponseEmbeddedActionsWATCHLISTSCREENING = PtsV2PaymentsPost201ResponseEmbeddedActionsWATCHLISTSCREENING;
PtsV2PaymentsPost201ResponseEmbeddedActionsWATCHLISTSCREENING.discriminator = undefined;
PtsV2PaymentsPost201ResponseEmbeddedActionsWATCHLISTSCREENING.attributeTypeMap = [
    {
        "name": "status",
        "baseName": "status",
        "type": "string"
    },
    {
        "name": "reason",
        "baseName": "reason",
        "type": "string"
    },
    {
        "name": "message",
        "baseName": "message",
        "type": "string"
    }
];
class PtsV2PaymentsPost201ResponseErrorInformation {
    static getAttributeTypeMap() {
        return PtsV2PaymentsPost201ResponseErrorInformation.attributeTypeMap;
    }
}
exports.PtsV2PaymentsPost201ResponseErrorInformation = PtsV2PaymentsPost201ResponseErrorInformation;
PtsV2PaymentsPost201ResponseErrorInformation.discriminator = undefined;
PtsV2PaymentsPost201ResponseErrorInformation.attributeTypeMap = [
    {
        "name": "reason",
        "baseName": "reason",
        "type": "string"
    },
    {
        "name": "message",
        "baseName": "message",
        "type": "string"
    },
    {
        "name": "details",
        "baseName": "details",
        "type": "Array<PtsV2PaymentsPost201ResponseErrorInformationDetails>"
    }
];
class PtsV2PaymentsPost201ResponseErrorInformationDetails {
    static getAttributeTypeMap() {
        return PtsV2PaymentsPost201ResponseErrorInformationDetails.attributeTypeMap;
    }
}
exports.PtsV2PaymentsPost201ResponseErrorInformationDetails = PtsV2PaymentsPost201ResponseErrorInformationDetails;
PtsV2PaymentsPost201ResponseErrorInformationDetails.discriminator = undefined;
PtsV2PaymentsPost201ResponseErrorInformationDetails.attributeTypeMap = [
    {
        "name": "field",
        "baseName": "field",
        "type": "string"
    },
    {
        "name": "reason",
        "baseName": "reason",
        "type": "string"
    }
];
class PtsV2PaymentsPost201ResponseInstallmentInformation {
    static getAttributeTypeMap() {
        return PtsV2PaymentsPost201ResponseInstallmentInformation.attributeTypeMap;
    }
}
exports.PtsV2PaymentsPost201ResponseInstallmentInformation = PtsV2PaymentsPost201ResponseInstallmentInformation;
PtsV2PaymentsPost201ResponseInstallmentInformation.discriminator = undefined;
PtsV2PaymentsPost201ResponseInstallmentInformation.attributeTypeMap = [
    {
        "name": "additionalCosts",
        "baseName": "additionalCosts",
        "type": "string"
    },
    {
        "name": "additionalCostsPercentage",
        "baseName": "additionalCostsPercentage",
        "type": "string"
    },
    {
        "name": "amount",
        "baseName": "amount",
        "type": "string"
    },
    {
        "name": "amountFunded",
        "baseName": "amountFunded",
        "type": "string"
    },
    {
        "name": "amountRequestedPercentage",
        "baseName": "amountRequestedPercentage",
        "type": "string"
    },
    {
        "name": "annualFinancingCost",
        "baseName": "annualFinancingCost",
        "type": "string"
    },
    {
        "name": "annualInterestRate",
        "baseName": "annualInterestRate",
        "type": "string"
    },
    {
        "name": "expenses",
        "baseName": "expenses",
        "type": "string"
    },
    {
        "name": "expensesPercentage",
        "baseName": "expensesPercentage",
        "type": "string"
    },
    {
        "name": "fees",
        "baseName": "fees",
        "type": "string"
    },
    {
        "name": "feesPercentage",
        "baseName": "feesPercentage",
        "type": "string"
    },
    {
        "name": "frequency",
        "baseName": "frequency",
        "type": "string"
    },
    {
        "name": "insurance",
        "baseName": "insurance",
        "type": "string"
    },
    {
        "name": "insurancePercentage",
        "baseName": "insurancePercentage",
        "type": "string"
    },
    {
        "name": "invoiceData",
        "baseName": "invoiceData",
        "type": "string"
    },
    {
        "name": "monthlyInterestRate",
        "baseName": "monthlyInterestRate",
        "type": "string"
    },
    {
        "name": "planType",
        "baseName": "planType",
        "type": "string"
    },
    {
        "name": "sequence",
        "baseName": "sequence",
        "type": "number"
    },
    {
        "name": "taxes",
        "baseName": "taxes",
        "type": "string"
    },
    {
        "name": "taxesPercentage",
        "baseName": "taxesPercentage",
        "type": "string"
    },
    {
        "name": "totalAmount",
        "baseName": "totalAmount",
        "type": "string"
    },
    {
        "name": "totalCount",
        "baseName": "totalCount",
        "type": "number"
    },
    {
        "name": "minimumTotalCount",
        "baseName": "minimumTotalCount",
        "type": "string"
    },
    {
        "name": "maximumTotalCount",
        "baseName": "maximumTotalCount",
        "type": "string"
    },
    {
        "name": "firstInstallmentAmount",
        "baseName": "firstInstallmentAmount",
        "type": "string"
    },
    {
        "name": "firstInstallmentDate",
        "baseName": "firstInstallmentDate",
        "type": "string"
    }
];
class PtsV2PaymentsPost201ResponseIssuerInformation {
    static getAttributeTypeMap() {
        return PtsV2PaymentsPost201ResponseIssuerInformation.attributeTypeMap;
    }
}
exports.PtsV2PaymentsPost201ResponseIssuerInformation = PtsV2PaymentsPost201ResponseIssuerInformation;
PtsV2PaymentsPost201ResponseIssuerInformation.discriminator = undefined;
PtsV2PaymentsPost201ResponseIssuerInformation.attributeTypeMap = [
    {
        "name": "country",
        "baseName": "country",
        "type": "string"
    },
    {
        "name": "discretionaryData",
        "baseName": "discretionaryData",
        "type": "string"
    },
    {
        "name": "countrySpecificDiscretionaryData",
        "baseName": "countrySpecificDiscretionaryData",
        "type": "string"
    },
    {
        "name": "responseCode",
        "baseName": "responseCode",
        "type": "string"
    },
    {
        "name": "pinRequestIndicator",
        "baseName": "pinRequestIndicator",
        "type": "string"
    }
];
class PtsV2PaymentsPost201ResponseLinks {
    static getAttributeTypeMap() {
        return PtsV2PaymentsPost201ResponseLinks.attributeTypeMap;
    }
}
exports.PtsV2PaymentsPost201ResponseLinks = PtsV2PaymentsPost201ResponseLinks;
PtsV2PaymentsPost201ResponseLinks.discriminator = undefined;
PtsV2PaymentsPost201ResponseLinks.attributeTypeMap = [
    {
        "name": "self",
        "baseName": "self",
        "type": "PtsV2PaymentsPost201ResponseLinksSelf"
    },
    {
        "name": "reversal",
        "baseName": "reversal",
        "type": "PtsV2PaymentsPost201ResponseLinksSelf"
    },
    {
        "name": "capture",
        "baseName": "capture",
        "type": "PtsV2PaymentsPost201ResponseLinksSelf"
    },
    {
        "name": "customer",
        "baseName": "customer",
        "type": "PtsV2PaymentsPost201ResponseLinksSelf"
    },
    {
        "name": "paymentInstrument",
        "baseName": "paymentInstrument",
        "type": "PtsV2PaymentsPost201ResponseLinksSelf"
    },
    {
        "name": "shippingAddress",
        "baseName": "shippingAddress",
        "type": "PtsV2PaymentsPost201ResponseLinksSelf"
    },
    {
        "name": "instrumentIdentifier",
        "baseName": "instrumentIdentifier",
        "type": "PtsV2PaymentsPost201ResponseLinksSelf"
    }
];
class PtsV2PaymentsPost201ResponseLinksSelf {
    static getAttributeTypeMap() {
        return PtsV2PaymentsPost201ResponseLinksSelf.attributeTypeMap;
    }
}
exports.PtsV2PaymentsPost201ResponseLinksSelf = PtsV2PaymentsPost201ResponseLinksSelf;
PtsV2PaymentsPost201ResponseLinksSelf.discriminator = undefined;
PtsV2PaymentsPost201ResponseLinksSelf.attributeTypeMap = [
    {
        "name": "href",
        "baseName": "href",
        "type": "string"
    },
    {
        "name": "method",
        "baseName": "method",
        "type": "string"
    }
];
class PtsV2PaymentsPost201ResponseMerchantInformation {
    static getAttributeTypeMap() {
        return PtsV2PaymentsPost201ResponseMerchantInformation.attributeTypeMap;
    }
}
exports.PtsV2PaymentsPost201ResponseMerchantInformation = PtsV2PaymentsPost201ResponseMerchantInformation;
PtsV2PaymentsPost201ResponseMerchantInformation.discriminator = undefined;
PtsV2PaymentsPost201ResponseMerchantInformation.attributeTypeMap = [
    {
        "name": "merchantName",
        "baseName": "merchantName",
        "type": "string"
    },
    {
        "name": "merchantDescriptor",
        "baseName": "merchantDescriptor",
        "type": "PtsV2PaymentsPost201ResponseMerchantInformationMerchantDescriptor"
    },
    {
        "name": "returnUrl",
        "baseName": "returnUrl",
        "type": "string"
    }
];
class PtsV2PaymentsPost201ResponseMerchantInformationMerchantDescriptor {
    static getAttributeTypeMap() {
        return PtsV2PaymentsPost201ResponseMerchantInformationMerchantDescriptor.attributeTypeMap;
    }
}
exports.PtsV2PaymentsPost201ResponseMerchantInformationMerchantDescriptor = PtsV2PaymentsPost201ResponseMerchantInformationMerchantDescriptor;
PtsV2PaymentsPost201ResponseMerchantInformationMerchantDescriptor.discriminator = undefined;
PtsV2PaymentsPost201ResponseMerchantInformationMerchantDescriptor.attributeTypeMap = [
    {
        "name": "storeId",
        "baseName": "storeId",
        "type": "string"
    },
    {
        "name": "storeName",
        "baseName": "storeName",
        "type": "string"
    }
];
class PtsV2PaymentsPost201ResponseOrderInformation {
    static getAttributeTypeMap() {
        return PtsV2PaymentsPost201ResponseOrderInformation.attributeTypeMap;
    }
}
exports.PtsV2PaymentsPost201ResponseOrderInformation = PtsV2PaymentsPost201ResponseOrderInformation;
PtsV2PaymentsPost201ResponseOrderInformation.discriminator = undefined;
PtsV2PaymentsPost201ResponseOrderInformation.attributeTypeMap = [
    {
        "name": "amountDetails",
        "baseName": "amountDetails",
        "type": "PtsV2PaymentsPost201ResponseOrderInformationAmountDetails"
    },
    {
        "name": "invoiceDetails",
        "baseName": "invoiceDetails",
        "type": "PtsV2PaymentsPost201ResponseOrderInformationInvoiceDetails"
    },
    {
        "name": "rewardPointsDetails",
        "baseName": "rewardPointsDetails",
        "type": "PtsV2PaymentsPost201ResponseOrderInformationRewardPointsDetails"
    },
    {
        "name": "billTo",
        "baseName": "billTo",
        "type": "PtsV2PaymentsPost201ResponseOrderInformationBillTo"
    },
    {
        "name": "shipTo",
        "baseName": "shipTo",
        "type": "PtsV2PaymentsPost201ResponseOrderInformationShipTo"
    }
];
class PtsV2PaymentsPost201ResponseOrderInformationAmountDetails {
    static getAttributeTypeMap() {
        return PtsV2PaymentsPost201ResponseOrderInformationAmountDetails.attributeTypeMap;
    }
}
exports.PtsV2PaymentsPost201ResponseOrderInformationAmountDetails = PtsV2PaymentsPost201ResponseOrderInformationAmountDetails;
PtsV2PaymentsPost201ResponseOrderInformationAmountDetails.discriminator = undefined;
PtsV2PaymentsPost201ResponseOrderInformationAmountDetails.attributeTypeMap = [
    {
        "name": "totalAmount",
        "baseName": "totalAmount",
        "type": "string"
    },
    {
        "name": "authorizedAmount",
        "baseName": "authorizedAmount",
        "type": "string"
    },
    {
        "name": "currency",
        "baseName": "currency",
        "type": "string"
    },
    {
        "name": "settlementAmount",
        "baseName": "settlementAmount",
        "type": "string"
    },
    {
        "name": "settlementCurrency",
        "baseName": "settlementCurrency",
        "type": "string"
    },
    {
        "name": "originalAmount",
        "baseName": "originalAmount",
        "type": "string"
    },
    {
        "name": "originalCurrency",
        "baseName": "originalCurrency",
        "type": "string"
    },
    {
        "name": "processorTransactionFee",
        "baseName": "processorTransactionFee",
        "type": "string"
    },
    {
        "name": "exchangeRate",
        "baseName": "exchangeRate",
        "type": "string"
    },
    {
        "name": "foreignCurrency",
        "baseName": "foreignCurrency",
        "type": "string"
    },
    {
        "name": "foreignAmount",
        "baseName": "foreignAmount",
        "type": "string"
    },
    {
        "name": "discountAmount",
        "baseName": "discountAmount",
        "type": "string"
    }
];
class PtsV2PaymentsPost201ResponseOrderInformationBillTo {
    static getAttributeTypeMap() {
        return PtsV2PaymentsPost201ResponseOrderInformationBillTo.attributeTypeMap;
    }
}
exports.PtsV2PaymentsPost201ResponseOrderInformationBillTo = PtsV2PaymentsPost201ResponseOrderInformationBillTo;
PtsV2PaymentsPost201ResponseOrderInformationBillTo.discriminator = undefined;
PtsV2PaymentsPost201ResponseOrderInformationBillTo.attributeTypeMap = [
    {
        "name": "firstName",
        "baseName": "firstName",
        "type": "string"
    },
    {
        "name": "lastName",
        "baseName": "lastName",
        "type": "string"
    },
    {
        "name": "address1",
        "baseName": "address1",
        "type": "string"
    },
    {
        "name": "address2",
        "baseName": "address2",
        "type": "string"
    },
    {
        "name": "locality",
        "baseName": "locality",
        "type": "string"
    },
    {
        "name": "postalCode",
        "baseName": "postalCode",
        "type": "string"
    },
    {
        "name": "administrativeArea",
        "baseName": "administrativeArea",
        "type": "string"
    },
    {
        "name": "country",
        "baseName": "country",
        "type": "string"
    },
    {
        "name": "email",
        "baseName": "email",
        "type": "string"
    },
    {
        "name": "alternatePhoneNumberVerificationStatus",
        "baseName": "alternatePhoneNumberVerificationStatus",
        "type": "string"
    },
    {
        "name": "alternateEmailVerificationStatus",
        "baseName": "alternateEmailVerificationStatus",
        "type": "string"
    },
    {
        "name": "phoneNumber",
        "baseName": "phoneNumber",
        "type": "string"
    },
    {
        "name": "nameSuffix",
        "baseName": "nameSuffix",
        "type": "string"
    }
];
class PtsV2PaymentsPost201ResponseOrderInformationInvoiceDetails {
    static getAttributeTypeMap() {
        return PtsV2PaymentsPost201ResponseOrderInformationInvoiceDetails.attributeTypeMap;
    }
}
exports.PtsV2PaymentsPost201ResponseOrderInformationInvoiceDetails = PtsV2PaymentsPost201ResponseOrderInformationInvoiceDetails;
PtsV2PaymentsPost201ResponseOrderInformationInvoiceDetails.discriminator = undefined;
PtsV2PaymentsPost201ResponseOrderInformationInvoiceDetails.attributeTypeMap = [
    {
        "name": "level3TransmissionStatus",
        "baseName": "level3TransmissionStatus",
        "type": "boolean"
    },
    {
        "name": "salesSlipNumber",
        "baseName": "salesSlipNumber",
        "type": "number"
    }
];
class PtsV2PaymentsPost201ResponseOrderInformationRewardPointsDetails {
    static getAttributeTypeMap() {
        return PtsV2PaymentsPost201ResponseOrderInformationRewardPointsDetails.attributeTypeMap;
    }
}
exports.PtsV2PaymentsPost201ResponseOrderInformationRewardPointsDetails = PtsV2PaymentsPost201ResponseOrderInformationRewardPointsDetails;
PtsV2PaymentsPost201ResponseOrderInformationRewardPointsDetails.discriminator = undefined;
PtsV2PaymentsPost201ResponseOrderInformationRewardPointsDetails.attributeTypeMap = [
    {
        "name": "pointsBeforeRedemption",
        "baseName": "pointsBeforeRedemption",
        "type": "string"
    },
    {
        "name": "pointsValueBeforeRedemption",
        "baseName": "pointsValueBeforeRedemption",
        "type": "string"
    },
    {
        "name": "pointsRedeemed",
        "baseName": "pointsRedeemed",
        "type": "string"
    },
    {
        "name": "pointsValueRedeemed",
        "baseName": "pointsValueRedeemed",
        "type": "string"
    },
    {
        "name": "pointsAfterRedemption",
        "baseName": "pointsAfterRedemption",
        "type": "string"
    },
    {
        "name": "pointsValueAfterRedemption",
        "baseName": "pointsValueAfterRedemption",
        "type": "string"
    }
];
class PtsV2PaymentsPost201ResponseOrderInformationShipTo {
    static getAttributeTypeMap() {
        return PtsV2PaymentsPost201ResponseOrderInformationShipTo.attributeTypeMap;
    }
}
exports.PtsV2PaymentsPost201ResponseOrderInformationShipTo = PtsV2PaymentsPost201ResponseOrderInformationShipTo;
PtsV2PaymentsPost201ResponseOrderInformationShipTo.discriminator = undefined;
PtsV2PaymentsPost201ResponseOrderInformationShipTo.attributeTypeMap = [
    {
        "name": "firstname",
        "baseName": "firstname",
        "type": "string"
    },
    {
        "name": "lastname",
        "baseName": "lastname",
        "type": "string"
    },
    {
        "name": "address1",
        "baseName": "address1",
        "type": "string"
    },
    {
        "name": "address2",
        "baseName": "address2",
        "type": "string"
    },
    {
        "name": "locality",
        "baseName": "locality",
        "type": "string"
    },
    {
        "name": "administrativeArea",
        "baseName": "administrativeArea",
        "type": "string"
    },
    {
        "name": "postalCode",
        "baseName": "postalCode",
        "type": "string"
    },
    {
        "name": "country",
        "baseName": "country",
        "type": "string"
    },
    {
        "name": "phoneNumber",
        "baseName": "phoneNumber",
        "type": "string"
    }
];
class PtsV2PaymentsPost201ResponsePaymentAccountInformation {
    static getAttributeTypeMap() {
        return PtsV2PaymentsPost201ResponsePaymentAccountInformation.attributeTypeMap;
    }
}
exports.PtsV2PaymentsPost201ResponsePaymentAccountInformation = PtsV2PaymentsPost201ResponsePaymentAccountInformation;
PtsV2PaymentsPost201ResponsePaymentAccountInformation.discriminator = undefined;
PtsV2PaymentsPost201ResponsePaymentAccountInformation.attributeTypeMap = [
    {
        "name": "card",
        "baseName": "card",
        "type": "PtsV2PaymentsPost201ResponsePaymentAccountInformationCard"
    }
];
class PtsV2PaymentsPost201ResponsePaymentAccountInformationCard {
    static getAttributeTypeMap() {
        return PtsV2PaymentsPost201ResponsePaymentAccountInformationCard.attributeTypeMap;
    }
}
exports.PtsV2PaymentsPost201ResponsePaymentAccountInformationCard = PtsV2PaymentsPost201ResponsePaymentAccountInformationCard;
PtsV2PaymentsPost201ResponsePaymentAccountInformationCard.discriminator = undefined;
PtsV2PaymentsPost201ResponsePaymentAccountInformationCard.attributeTypeMap = [
    {
        "name": "suffix",
        "baseName": "suffix",
        "type": "string"
    },
    {
        "name": "expirationMonth",
        "baseName": "expirationMonth",
        "type": "string"
    },
    {
        "name": "expirationYear",
        "baseName": "expirationYear",
        "type": "string"
    },
    {
        "name": "type",
        "baseName": "type",
        "type": "string"
    },
    {
        "name": "prefix",
        "baseName": "prefix",
        "type": "string"
    },
    {
        "name": "hashedNumber",
        "baseName": "hashedNumber",
        "type": "string"
    }
];
class PtsV2PaymentsPost201ResponsePaymentInformation {
    static getAttributeTypeMap() {
        return PtsV2PaymentsPost201ResponsePaymentInformation.attributeTypeMap;
    }
}
exports.PtsV2PaymentsPost201ResponsePaymentInformation = PtsV2PaymentsPost201ResponsePaymentInformation;
PtsV2PaymentsPost201ResponsePaymentInformation.discriminator = undefined;
PtsV2PaymentsPost201ResponsePaymentInformation.attributeTypeMap = [
    {
        "name": "card",
        "baseName": "card",
        "type": "PtsV2PaymentsPost201ResponsePaymentAccountInformationCard"
    },
    {
        "name": "tokenizedCard",
        "baseName": "tokenizedCard",
        "type": "PtsV2PaymentsPost201ResponsePaymentInformationTokenizedCard"
    },
    {
        "name": "tokenizedPaymentMethod",
        "baseName": "tokenizedPaymentMethod",
        "type": "PtsV2PaymentsPost201ResponsePaymentInformationTokenizedPaymentMethod"
    },
    {
        "name": "accountFeatures",
        "baseName": "accountFeatures",
        "type": "PtsV2PaymentsPost201ResponsePaymentInformationAccountFeatures"
    },
    {
        "name": "bank",
        "baseName": "bank",
        "type": "PtsV2PaymentsPost201ResponsePaymentInformationBank"
    },
    {
        "name": "customer",
        "baseName": "customer",
        "type": "Ptsv2paymentsPaymentInformationCustomer"
    },
    {
        "name": "paymentInstrument",
        "baseName": "paymentInstrument",
        "type": "Ptsv2paymentsPaymentInformationPaymentInstrument"
    },
    {
        "name": "instrumentIdentifier",
        "baseName": "instrumentIdentifier",
        "type": "PtsV2PaymentsPost201ResponsePaymentInformationInstrumentIdentifier"
    },
    {
        "name": "shippingAddress",
        "baseName": "shippingAddress",
        "type": "Ptsv2paymentsPaymentInformationShippingAddress"
    },
    {
        "name": "scheme",
        "baseName": "scheme",
        "type": "string"
    },
    {
        "name": "bin",
        "baseName": "bin",
        "type": "string"
    },
    {
        "name": "accountType",
        "baseName": "accountType",
        "type": "string"
    },
    {
        "name": "issuer",
        "baseName": "issuer",
        "type": "string"
    },
    {
        "name": "binCountry",
        "baseName": "binCountry",
        "type": "string"
    },
    {
        "name": "eWallet",
        "baseName": "eWallet",
        "type": "PtsV2PaymentsPost201ResponsePaymentInformationEWallet"
    }
];
class PtsV2PaymentsPost201ResponsePaymentInformationAccountFeatures {
    static getAttributeTypeMap() {
        return PtsV2PaymentsPost201ResponsePaymentInformationAccountFeatures.attributeTypeMap;
    }
}
exports.PtsV2PaymentsPost201ResponsePaymentInformationAccountFeatures = PtsV2PaymentsPost201ResponsePaymentInformationAccountFeatures;
PtsV2PaymentsPost201ResponsePaymentInformationAccountFeatures.discriminator = undefined;
PtsV2PaymentsPost201ResponsePaymentInformationAccountFeatures.attributeTypeMap = [
    {
        "name": "accountType",
        "baseName": "accountType",
        "type": "string"
    },
    {
        "name": "accountStatus",
        "baseName": "accountStatus",
        "type": "string"
    },
    {
        "name": "balances",
        "baseName": "balances",
        "type": "Array<PtsV2PaymentsPost201ResponsePaymentInformationAccountFeaturesBalances>"
    },
    {
        "name": "balanceAmount",
        "baseName": "balanceAmount",
        "type": "string"
    },
    {
        "name": "balanceAmountType",
        "baseName": "balanceAmountType",
        "type": "string"
    },
    {
        "name": "currency",
        "baseName": "currency",
        "type": "string"
    },
    {
        "name": "balanceSign",
        "baseName": "balanceSign",
        "type": "string"
    },
    {
        "name": "affluenceIndicator",
        "baseName": "affluenceIndicator",
        "type": "string"
    },
    {
        "name": "category",
        "baseName": "category",
        "type": "string"
    },
    {
        "name": "commercial",
        "baseName": "commercial",
        "type": "string"
    },
    {
        "name": "group",
        "baseName": "group",
        "type": "string"
    },
    {
        "name": "healthCare",
        "baseName": "healthCare",
        "type": "string"
    },
    {
        "name": "payroll",
        "baseName": "payroll",
        "type": "string"
    },
    {
        "name": "level3Eligible",
        "baseName": "level3Eligible",
        "type": "string"
    },
    {
        "name": "pinlessDebit",
        "baseName": "pinlessDebit",
        "type": "string"
    },
    {
        "name": "signatureDebit",
        "baseName": "signatureDebit",
        "type": "string"
    },
    {
        "name": "prepaid",
        "baseName": "prepaid",
        "type": "string"
    },
    {
        "name": "regulated",
        "baseName": "regulated",
        "type": "string"
    },
    {
        "name": "accountHolderType",
        "baseName": "accountHolderType",
        "type": "string"
    }
];
class PtsV2PaymentsPost201ResponsePaymentInformationAccountFeaturesBalances {
    static getAttributeTypeMap() {
        return PtsV2PaymentsPost201ResponsePaymentInformationAccountFeaturesBalances.attributeTypeMap;
    }
}
exports.PtsV2PaymentsPost201ResponsePaymentInformationAccountFeaturesBalances = PtsV2PaymentsPost201ResponsePaymentInformationAccountFeaturesBalances;
PtsV2PaymentsPost201ResponsePaymentInformationAccountFeaturesBalances.discriminator = undefined;
PtsV2PaymentsPost201ResponsePaymentInformationAccountFeaturesBalances.attributeTypeMap = [
    {
        "name": "accountType",
        "baseName": "accountType",
        "type": "string"
    },
    {
        "name": "amount",
        "baseName": "amount",
        "type": "string"
    },
    {
        "name": "amountType",
        "baseName": "amountType",
        "type": "string"
    },
    {
        "name": "currency",
        "baseName": "currency",
        "type": "string"
    }
];
class PtsV2PaymentsPost201ResponsePaymentInformationBank {
    static getAttributeTypeMap() {
        return PtsV2PaymentsPost201ResponsePaymentInformationBank.attributeTypeMap;
    }
}
exports.PtsV2PaymentsPost201ResponsePaymentInformationBank = PtsV2PaymentsPost201ResponsePaymentInformationBank;
PtsV2PaymentsPost201ResponsePaymentInformationBank.discriminator = undefined;
PtsV2PaymentsPost201ResponsePaymentInformationBank.attributeTypeMap = [
    {
        "name": "account",
        "baseName": "account",
        "type": "PtsV2PaymentsPost201ResponsePaymentInformationBankAccount"
    },
    {
        "name": "correctedRoutingNumber",
        "baseName": "correctedRoutingNumber",
        "type": "string"
    }
];
class PtsV2PaymentsPost201ResponsePaymentInformationBankAccount {
    static getAttributeTypeMap() {
        return PtsV2PaymentsPost201ResponsePaymentInformationBankAccount.attributeTypeMap;
    }
}
exports.PtsV2PaymentsPost201ResponsePaymentInformationBankAccount = PtsV2PaymentsPost201ResponsePaymentInformationBankAccount;
PtsV2PaymentsPost201ResponsePaymentInformationBankAccount.discriminator = undefined;
PtsV2PaymentsPost201ResponsePaymentInformationBankAccount.attributeTypeMap = [
    {
        "name": "correctedAccountNumber",
        "baseName": "correctedAccountNumber",
        "type": "string"
    }
];
class PtsV2PaymentsPost201ResponsePaymentInformationEWallet {
    static getAttributeTypeMap() {
        return PtsV2PaymentsPost201ResponsePaymentInformationEWallet.attributeTypeMap;
    }
}
exports.PtsV2PaymentsPost201ResponsePaymentInformationEWallet = PtsV2PaymentsPost201ResponsePaymentInformationEWallet;
PtsV2PaymentsPost201ResponsePaymentInformationEWallet.discriminator = undefined;
PtsV2PaymentsPost201ResponsePaymentInformationEWallet.attributeTypeMap = [
    {
        "name": "fundingSource",
        "baseName": "fundingSource",
        "type": "string"
    },
    {
        "name": "accountId",
        "baseName": "accountId",
        "type": "string"
    }
];
class PtsV2PaymentsPost201ResponsePaymentInformationInstrumentIdentifier {
    static getAttributeTypeMap() {
        return PtsV2PaymentsPost201ResponsePaymentInformationInstrumentIdentifier.attributeTypeMap;
    }
}
exports.PtsV2PaymentsPost201ResponsePaymentInformationInstrumentIdentifier = PtsV2PaymentsPost201ResponsePaymentInformationInstrumentIdentifier;
PtsV2PaymentsPost201ResponsePaymentInformationInstrumentIdentifier.discriminator = undefined;
PtsV2PaymentsPost201ResponsePaymentInformationInstrumentIdentifier.attributeTypeMap = [
    {
        "name": "id",
        "baseName": "id",
        "type": "string"
    },
    {
        "name": "state",
        "baseName": "state",
        "type": "string"
    }
];
class PtsV2PaymentsPost201ResponsePaymentInformationTokenizedCard {
    static getAttributeTypeMap() {
        return PtsV2PaymentsPost201ResponsePaymentInformationTokenizedCard.attributeTypeMap;
    }
}
exports.PtsV2PaymentsPost201ResponsePaymentInformationTokenizedCard = PtsV2PaymentsPost201ResponsePaymentInformationTokenizedCard;
PtsV2PaymentsPost201ResponsePaymentInformationTokenizedCard.discriminator = undefined;
PtsV2PaymentsPost201ResponsePaymentInformationTokenizedCard.attributeTypeMap = [
    {
        "name": "prefix",
        "baseName": "prefix",
        "type": "string"
    },
    {
        "name": "suffix",
        "baseName": "suffix",
        "type": "string"
    },
    {
        "name": "type",
        "baseName": "type",
        "type": "string"
    },
    {
        "name": "assuranceLevel",
        "baseName": "assuranceLevel",
        "type": "string"
    },
    {
        "name": "expirationMonth",
        "baseName": "expirationMonth",
        "type": "string"
    },
    {
        "name": "expirationYear",
        "baseName": "expirationYear",
        "type": "string"
    },
    {
        "name": "requestorId",
        "baseName": "requestorId",
        "type": "string"
    },
    {
        "name": "assuranceMethod",
        "baseName": "assuranceMethod",
        "type": "string"
    }
];
class PtsV2PaymentsPost201ResponsePaymentInformationTokenizedPaymentMethod {
    static getAttributeTypeMap() {
        return PtsV2PaymentsPost201ResponsePaymentInformationTokenizedPaymentMethod.attributeTypeMap;
    }
}
exports.PtsV2PaymentsPost201ResponsePaymentInformationTokenizedPaymentMethod = PtsV2PaymentsPost201ResponsePaymentInformationTokenizedPaymentMethod;
PtsV2PaymentsPost201ResponsePaymentInformationTokenizedPaymentMethod.discriminator = undefined;
PtsV2PaymentsPost201ResponsePaymentInformationTokenizedPaymentMethod.attributeTypeMap = [
    {
        "name": "id",
        "baseName": "id",
        "type": "string"
    },
    {
        "name": "status",
        "baseName": "status",
        "type": "string"
    }
];
class PtsV2PaymentsPost201ResponsePaymentInsightsInformation {
    static getAttributeTypeMap() {
        return PtsV2PaymentsPost201ResponsePaymentInsightsInformation.attributeTypeMap;
    }
}
exports.PtsV2PaymentsPost201ResponsePaymentInsightsInformation = PtsV2PaymentsPost201ResponsePaymentInsightsInformation;
PtsV2PaymentsPost201ResponsePaymentInsightsInformation.discriminator = undefined;
PtsV2PaymentsPost201ResponsePaymentInsightsInformation.attributeTypeMap = [
    {
        "name": "responseInsights",
        "baseName": "responseInsights",
        "type": "PtsV2PaymentsPost201ResponsePaymentInsightsInformationResponseInsights"
    },
    {
        "name": "orchestration",
        "baseName": "orchestration",
        "type": "PtsV2PaymentsPost201ResponsePaymentInsightsInformationOrchestration"
    }
];
class PtsV2PaymentsPost201ResponsePaymentInsightsInformationOrchestration {
    static getAttributeTypeMap() {
        return PtsV2PaymentsPost201ResponsePaymentInsightsInformationOrchestration.attributeTypeMap;
    }
}
exports.PtsV2PaymentsPost201ResponsePaymentInsightsInformationOrchestration = PtsV2PaymentsPost201ResponsePaymentInsightsInformationOrchestration;
PtsV2PaymentsPost201ResponsePaymentInsightsInformationOrchestration.discriminator = undefined;
PtsV2PaymentsPost201ResponsePaymentInsightsInformationOrchestration.attributeTypeMap = [
    {
        "name": "infoCodes",
        "baseName": "infoCodes",
        "type": "Array<string>"
    }
];
class PtsV2PaymentsPost201ResponsePaymentInsightsInformationResponseInsights {
    static getAttributeTypeMap() {
        return PtsV2PaymentsPost201ResponsePaymentInsightsInformationResponseInsights.attributeTypeMap;
    }
}
exports.PtsV2PaymentsPost201ResponsePaymentInsightsInformationResponseInsights = PtsV2PaymentsPost201ResponsePaymentInsightsInformationResponseInsights;
PtsV2PaymentsPost201ResponsePaymentInsightsInformationResponseInsights.discriminator = undefined;
PtsV2PaymentsPost201ResponsePaymentInsightsInformationResponseInsights.attributeTypeMap = [
    {
        "name": "category",
        "baseName": "category",
        "type": "string"
    },
    {
        "name": "categoryCode",
        "baseName": "categoryCode",
        "type": "string"
    },
    {
        "name": "processorRawName",
        "baseName": "processorRawName",
        "type": "string"
    }
];
class PtsV2PaymentsPost201ResponsePointOfSaleInformation {
    static getAttributeTypeMap() {
        return PtsV2PaymentsPost201ResponsePointOfSaleInformation.attributeTypeMap;
    }
}
exports.PtsV2PaymentsPost201ResponsePointOfSaleInformation = PtsV2PaymentsPost201ResponsePointOfSaleInformation;
PtsV2PaymentsPost201ResponsePointOfSaleInformation.discriminator = undefined;
PtsV2PaymentsPost201ResponsePointOfSaleInformation.attributeTypeMap = [
    {
        "name": "emv",
        "baseName": "emv",
        "type": "PtsV2PaymentsPost201ResponsePointOfSaleInformationEmv"
    },
    {
        "name": "amexCapnData",
        "baseName": "amexCapnData",
        "type": "string"
    },
    {
        "name": "terminalId",
        "baseName": "terminalId",
        "type": "string"
    }
];
class PtsV2PaymentsPost201ResponsePointOfSaleInformationEmv {
    static getAttributeTypeMap() {
        return PtsV2PaymentsPost201ResponsePointOfSaleInformationEmv.attributeTypeMap;
    }
}
exports.PtsV2PaymentsPost201ResponsePointOfSaleInformationEmv = PtsV2PaymentsPost201ResponsePointOfSaleInformationEmv;
PtsV2PaymentsPost201ResponsePointOfSaleInformationEmv.discriminator = undefined;
PtsV2PaymentsPost201ResponsePointOfSaleInformationEmv.attributeTypeMap = [
    {
        "name": "tags",
        "baseName": "tags",
        "type": "string"
    },
    {
        "name": "chipValidationType",
        "baseName": "chipValidationType",
        "type": "string"
    },
    {
        "name": "chipValidationResult",
        "baseName": "chipValidationResult",
        "type": "string"
    }
];
class PtsV2PaymentsPost201ResponseProcessingInformation {
    static getAttributeTypeMap() {
        return PtsV2PaymentsPost201ResponseProcessingInformation.attributeTypeMap;
    }
}
exports.PtsV2PaymentsPost201ResponseProcessingInformation = PtsV2PaymentsPost201ResponseProcessingInformation;
PtsV2PaymentsPost201ResponseProcessingInformation.discriminator = undefined;
PtsV2PaymentsPost201ResponseProcessingInformation.attributeTypeMap = [
    {
        "name": "bankTransferOptions",
        "baseName": "bankTransferOptions",
        "type": "PtsV2PaymentsPost201ResponseProcessingInformationBankTransferOptions"
    },
    {
        "name": "paymentSolution",
        "baseName": "paymentSolution",
        "type": "string"
    },
    {
        "name": "enhancedDataEnabled",
        "baseName": "enhancedDataEnabled",
        "type": "boolean"
    },
    {
        "name": "captureOptions",
        "baseName": "captureOptions",
        "type": "PtsV2PaymentsPost201ResponseProcessingInformationCaptureOptions"
    },
    {
        "name": "authorizationOptions",
        "baseName": "authorizationOptions",
        "type": "PtsV2PaymentsPost201ResponseProcessingInformationAuthorizationOptions"
    },
    {
        "name": "purchaseOptions",
        "baseName": "purchaseOptions",
        "type": "PtsV2PaymentsPost201ResponseProcessingInformationPurchaseOptions"
    }
];
class PtsV2PaymentsPost201ResponseProcessingInformationAuthorizationOptions {
    static getAttributeTypeMap() {
        return PtsV2PaymentsPost201ResponseProcessingInformationAuthorizationOptions.attributeTypeMap;
    }
}
exports.PtsV2PaymentsPost201ResponseProcessingInformationAuthorizationOptions = PtsV2PaymentsPost201ResponseProcessingInformationAuthorizationOptions;
PtsV2PaymentsPost201ResponseProcessingInformationAuthorizationOptions.discriminator = undefined;
PtsV2PaymentsPost201ResponseProcessingInformationAuthorizationOptions.attributeTypeMap = [
    {
        "name": "serviceType",
        "baseName": "serviceType",
        "type": "string"
    }
];
class PtsV2PaymentsPost201ResponseProcessingInformationBankTransferOptions {
    static getAttributeTypeMap() {
        return PtsV2PaymentsPost201ResponseProcessingInformationBankTransferOptions.attributeTypeMap;
    }
}
exports.PtsV2PaymentsPost201ResponseProcessingInformationBankTransferOptions = PtsV2PaymentsPost201ResponseProcessingInformationBankTransferOptions;
PtsV2PaymentsPost201ResponseProcessingInformationBankTransferOptions.discriminator = undefined;
PtsV2PaymentsPost201ResponseProcessingInformationBankTransferOptions.attributeTypeMap = [
    {
        "name": "settlementMethod",
        "baseName": "settlementMethod",
        "type": "string"
    },
    {
        "name": "fraudScreeningLevel",
        "baseName": "fraudScreeningLevel",
        "type": "string"
    }
];
class PtsV2PaymentsPost201ResponseProcessingInformationCaptureOptions {
    static getAttributeTypeMap() {
        return PtsV2PaymentsPost201ResponseProcessingInformationCaptureOptions.attributeTypeMap;
    }
}
exports.PtsV2PaymentsPost201ResponseProcessingInformationCaptureOptions = PtsV2PaymentsPost201ResponseProcessingInformationCaptureOptions;
PtsV2PaymentsPost201ResponseProcessingInformationCaptureOptions.discriminator = undefined;
PtsV2PaymentsPost201ResponseProcessingInformationCaptureOptions.attributeTypeMap = [
    {
        "name": "finalCapture",
        "baseName": "finalCapture",
        "type": "string"
    }
];
class PtsV2PaymentsPost201ResponseProcessingInformationPurchaseOptions {
    static getAttributeTypeMap() {
        return PtsV2PaymentsPost201ResponseProcessingInformationPurchaseOptions.attributeTypeMap;
    }
}
exports.PtsV2PaymentsPost201ResponseProcessingInformationPurchaseOptions = PtsV2PaymentsPost201ResponseProcessingInformationPurchaseOptions;
PtsV2PaymentsPost201ResponseProcessingInformationPurchaseOptions.discriminator = undefined;
PtsV2PaymentsPost201ResponseProcessingInformationPurchaseOptions.attributeTypeMap = [
    {
        "name": "eligibilityIndicator",
        "baseName": "eligibilityIndicator",
        "type": "string"
    },
    {
        "name": "type",
        "baseName": "type",
        "type": "string"
    },
    {
        "name": "benefitAmount",
        "baseName": "benefitAmount",
        "type": "string"
    },
    {
        "name": "benefitType",
        "baseName": "benefitType",
        "type": "string"
    }
];
class PtsV2PaymentsPost201ResponseProcessorInformation {
    static getAttributeTypeMap() {
        return PtsV2PaymentsPost201ResponseProcessorInformation.attributeTypeMap;
    }
}
exports.PtsV2PaymentsPost201ResponseProcessorInformation = PtsV2PaymentsPost201ResponseProcessorInformation;
PtsV2PaymentsPost201ResponseProcessorInformation.discriminator = undefined;
PtsV2PaymentsPost201ResponseProcessorInformation.attributeTypeMap = [
    {
        "name": "authIndicator",
        "baseName": "authIndicator",
        "type": "string"
    },
    {
        "name": "approvalCode",
        "baseName": "approvalCode",
        "type": "string"
    },
    {
        "name": "cardReferenceData",
        "baseName": "cardReferenceData",
        "type": "string"
    },
    {
        "name": "transactionId",
        "baseName": "transactionId",
        "type": "string"
    },
    {
        "name": "networkTransactionId",
        "baseName": "networkTransactionId",
        "type": "string"
    },
    {
        "name": "responseCode",
        "baseName": "responseCode",
        "type": "string"
    },
    {
        "name": "responseCodeSource",
        "baseName": "responseCodeSource",
        "type": "string"
    },
    {
        "name": "responseDetails",
        "baseName": "responseDetails",
        "type": "string"
    },
    {
        "name": "responseCategoryCode",
        "baseName": "responseCategoryCode",
        "type": "string"
    },
    {
        "name": "forwardedAcquirerCode",
        "baseName": "forwardedAcquirerCode",
        "type": "string"
    },
    {
        "name": "settlementDate",
        "baseName": "settlementDate",
        "type": "string"
    },
    {
        "name": "sequenceNumber",
        "baseName": "sequenceNumber",
        "type": "string"
    },
    {
        "name": "avs",
        "baseName": "avs",
        "type": "PtsV2PaymentsPost201ResponseProcessorInformationAvs"
    },
    {
        "name": "cardVerification",
        "baseName": "cardVerification",
        "type": "PtsV2PaymentsPost201ResponseProcessorInformationCardVerification"
    },
    {
        "name": "merchantAdvice",
        "baseName": "merchantAdvice",
        "type": "PtsV2PaymentsPost201ResponseProcessorInformationMerchantAdvice"
    },
    {
        "name": "electronicVerificationResults",
        "baseName": "electronicVerificationResults",
        "type": "PtsV2PaymentsPost201ResponseProcessorInformationElectronicVerificationResults"
    },
    {
        "name": "achVerification",
        "baseName": "achVerification",
        "type": "PtsV2PaymentsPost201ResponseProcessorInformationAchVerification"
    },
    {
        "name": "customer",
        "baseName": "customer",
        "type": "PtsV2PaymentsPost201ResponseProcessorInformationCustomer"
    },
    {
        "name": "consumerAuthenticationResponse",
        "baseName": "consumerAuthenticationResponse",
        "type": "PtsV2PaymentsPost201ResponseProcessorInformationConsumerAuthenticationResponse"
    },
    {
        "name": "systemTraceAuditNumber",
        "baseName": "systemTraceAuditNumber",
        "type": "string"
    },
    {
        "name": "paymentAccountReferenceNumber",
        "baseName": "paymentAccountReferenceNumber",
        "type": "string"
    },
    {
        "name": "transactionIntegrityCode",
        "baseName": "transactionIntegrityCode",
        "type": "string"
    },
    {
        "name": "amexVerbalAuthReferenceNumber",
        "baseName": "amexVerbalAuthReferenceNumber",
        "type": "string"
    },
    {
        "name": "masterCardServiceCode",
        "baseName": "masterCardServiceCode",
        "type": "string"
    },
    {
        "name": "masterCardServiceReplyCode",
        "baseName": "masterCardServiceReplyCode",
        "type": "string"
    },
    {
        "name": "masterCardAuthenticationType",
        "baseName": "masterCardAuthenticationType",
        "type": "string"
    },
    {
        "name": "name",
        "baseName": "name",
        "type": "string"
    },
    {
        "name": "routing",
        "baseName": "routing",
        "type": "PtsV2PaymentsPost201ResponseProcessorInformationRouting"
    },
    {
        "name": "merchantNumber",
        "baseName": "merchantNumber",
        "type": "string"
    },
    {
        "name": "retrievalReferenceNumber",
        "baseName": "retrievalReferenceNumber",
        "type": "string"
    },
    {
        "name": "paymentUrl",
        "baseName": "paymentUrl",
        "type": "string"
    },
    {
        "name": "completeUrl",
        "baseName": "completeUrl",
        "type": "string"
    },
    {
        "name": "signature",
        "baseName": "signature",
        "type": "string"
    },
    {
        "name": "publicKey",
        "baseName": "publicKey",
        "type": "string"
    },
    {
        "name": "sellerProtection",
        "baseName": "sellerProtection",
        "type": "PtsV2PaymentsPost201ResponseProcessorInformationSellerProtection"
    },
    {
        "name": "transactionExpiryDate",
        "baseName": "transactionExpiryDate",
        "type": "string"
    },
    {
        "name": "customUrl",
        "baseName": "customUrl",
        "type": "string"
    },
    {
        "name": "schemeAssignedId",
        "baseName": "schemeAssignedId",
        "type": "string"
    },
    {
        "name": "deviceUrl",
        "baseName": "deviceUrl",
        "type": "string"
    },
    {
        "name": "disbursementMode",
        "baseName": "disbursementMode",
        "type": "string"
    },
    {
        "name": "updateTimeUtc",
        "baseName": "updateTimeUtc",
        "type": "string"
    },
    {
        "name": "expirationTimeUtc",
        "baseName": "expirationTimeUtc",
        "type": "string"
    },
    {
        "name": "orderId",
        "baseName": "orderId",
        "type": "string"
    },
    {
        "name": "orderStatus",
        "baseName": "orderStatus",
        "type": "string"
    },
    {
        "name": "merchantRiskPrediction",
        "baseName": "merchantRiskPrediction",
        "type": "string"
    }
];
class PtsV2PaymentsPost201ResponseProcessorInformationAchVerification {
    static getAttributeTypeMap() {
        return PtsV2PaymentsPost201ResponseProcessorInformationAchVerification.attributeTypeMap;
    }
}
exports.PtsV2PaymentsPost201ResponseProcessorInformationAchVerification = PtsV2PaymentsPost201ResponseProcessorInformationAchVerification;
PtsV2PaymentsPost201ResponseProcessorInformationAchVerification.discriminator = undefined;
PtsV2PaymentsPost201ResponseProcessorInformationAchVerification.attributeTypeMap = [
    {
        "name": "resultCode",
        "baseName": "resultCode",
        "type": "string"
    },
    {
        "name": "resultCodeRaw",
        "baseName": "resultCodeRaw",
        "type": "string"
    }
];
class PtsV2PaymentsPost201ResponseProcessorInformationAvs {
    static getAttributeTypeMap() {
        return PtsV2PaymentsPost201ResponseProcessorInformationAvs.attributeTypeMap;
    }
}
exports.PtsV2PaymentsPost201ResponseProcessorInformationAvs = PtsV2PaymentsPost201ResponseProcessorInformationAvs;
PtsV2PaymentsPost201ResponseProcessorInformationAvs.discriminator = undefined;
PtsV2PaymentsPost201ResponseProcessorInformationAvs.attributeTypeMap = [
    {
        "name": "code",
        "baseName": "code",
        "type": "string"
    },
    {
        "name": "codeRaw",
        "baseName": "codeRaw",
        "type": "string"
    }
];
class PtsV2PaymentsPost201ResponseProcessorInformationCardVerification {
    static getAttributeTypeMap() {
        return PtsV2PaymentsPost201ResponseProcessorInformationCardVerification.attributeTypeMap;
    }
}
exports.PtsV2PaymentsPost201ResponseProcessorInformationCardVerification = PtsV2PaymentsPost201ResponseProcessorInformationCardVerification;
PtsV2PaymentsPost201ResponseProcessorInformationCardVerification.discriminator = undefined;
PtsV2PaymentsPost201ResponseProcessorInformationCardVerification.attributeTypeMap = [
    {
        "name": "resultCode",
        "baseName": "resultCode",
        "type": "string"
    },
    {
        "name": "resultCodeRaw",
        "baseName": "resultCodeRaw",
        "type": "string"
    }
];
class PtsV2PaymentsPost201ResponseProcessorInformationConsumerAuthenticationResponse {
    static getAttributeTypeMap() {
        return PtsV2PaymentsPost201ResponseProcessorInformationConsumerAuthenticationResponse.attributeTypeMap;
    }
}
exports.PtsV2PaymentsPost201ResponseProcessorInformationConsumerAuthenticationResponse = PtsV2PaymentsPost201ResponseProcessorInformationConsumerAuthenticationResponse;
PtsV2PaymentsPost201ResponseProcessorInformationConsumerAuthenticationResponse.discriminator = undefined;
PtsV2PaymentsPost201ResponseProcessorInformationConsumerAuthenticationResponse.attributeTypeMap = [
    {
        "name": "code",
        "baseName": "code",
        "type": "string"
    },
    {
        "name": "codeRaw",
        "baseName": "codeRaw",
        "type": "string"
    }
];
class PtsV2PaymentsPost201ResponseProcessorInformationCustomer {
    static getAttributeTypeMap() {
        return PtsV2PaymentsPost201ResponseProcessorInformationCustomer.attributeTypeMap;
    }
}
exports.PtsV2PaymentsPost201ResponseProcessorInformationCustomer = PtsV2PaymentsPost201ResponseProcessorInformationCustomer;
PtsV2PaymentsPost201ResponseProcessorInformationCustomer.discriminator = undefined;
PtsV2PaymentsPost201ResponseProcessorInformationCustomer.attributeTypeMap = [
    {
        "name": "personalIdResult",
        "baseName": "personalIdResult",
        "type": "string"
    }
];
class PtsV2PaymentsPost201ResponseProcessorInformationElectronicVerificationResults {
    static getAttributeTypeMap() {
        return PtsV2PaymentsPost201ResponseProcessorInformationElectronicVerificationResults.attributeTypeMap;
    }
}
exports.PtsV2PaymentsPost201ResponseProcessorInformationElectronicVerificationResults = PtsV2PaymentsPost201ResponseProcessorInformationElectronicVerificationResults;
PtsV2PaymentsPost201ResponseProcessorInformationElectronicVerificationResults.discriminator = undefined;
PtsV2PaymentsPost201ResponseProcessorInformationElectronicVerificationResults.attributeTypeMap = [
    {
        "name": "code",
        "baseName": "code",
        "type": "string"
    },
    {
        "name": "codeRaw",
        "baseName": "codeRaw",
        "type": "string"
    },
    {
        "name": "email",
        "baseName": "email",
        "type": "string"
    },
    {
        "name": "emailRaw",
        "baseName": "emailRaw",
        "type": "string"
    },
    {
        "name": "phoneNumber",
        "baseName": "phoneNumber",
        "type": "string"
    },
    {
        "name": "phoneNumberRaw",
        "baseName": "phoneNumberRaw",
        "type": "string"
    },
    {
        "name": "postalCode",
        "baseName": "postalCode",
        "type": "string"
    },
    {
        "name": "postalCodeRaw",
        "baseName": "postalCodeRaw",
        "type": "string"
    },
    {
        "name": "street",
        "baseName": "street",
        "type": "string"
    },
    {
        "name": "streetRaw",
        "baseName": "streetRaw",
        "type": "string"
    },
    {
        "name": "name",
        "baseName": "name",
        "type": "string"
    },
    {
        "name": "nameRaw",
        "baseName": "nameRaw",
        "type": "string"
    },
    {
        "name": "firstNameRaw",
        "baseName": "firstNameRaw",
        "type": "string"
    },
    {
        "name": "firstName",
        "baseName": "firstName",
        "type": "string"
    },
    {
        "name": "middleNameRaw",
        "baseName": "middleNameRaw",
        "type": "string"
    },
    {
        "name": "middleName",
        "baseName": "middleName",
        "type": "string"
    },
    {
        "name": "lastNameRaw",
        "baseName": "lastNameRaw",
        "type": "string"
    },
    {
        "name": "lastName",
        "baseName": "lastName",
        "type": "string"
    }
];
class PtsV2PaymentsPost201ResponseProcessorInformationMerchantAdvice {
    static getAttributeTypeMap() {
        return PtsV2PaymentsPost201ResponseProcessorInformationMerchantAdvice.attributeTypeMap;
    }
}
exports.PtsV2PaymentsPost201ResponseProcessorInformationMerchantAdvice = PtsV2PaymentsPost201ResponseProcessorInformationMerchantAdvice;
PtsV2PaymentsPost201ResponseProcessorInformationMerchantAdvice.discriminator = undefined;
PtsV2PaymentsPost201ResponseProcessorInformationMerchantAdvice.attributeTypeMap = [
    {
        "name": "code",
        "baseName": "code",
        "type": "string"
    },
    {
        "name": "codeRaw",
        "baseName": "codeRaw",
        "type": "string"
    },
    {
        "name": "nameMatch",
        "baseName": "nameMatch",
        "type": "string"
    }
];
class PtsV2PaymentsPost201ResponseProcessorInformationRouting {
    static getAttributeTypeMap() {
        return PtsV2PaymentsPost201ResponseProcessorInformationRouting.attributeTypeMap;
    }
}
exports.PtsV2PaymentsPost201ResponseProcessorInformationRouting = PtsV2PaymentsPost201ResponseProcessorInformationRouting;
PtsV2PaymentsPost201ResponseProcessorInformationRouting.discriminator = undefined;
PtsV2PaymentsPost201ResponseProcessorInformationRouting.attributeTypeMap = [
    {
        "name": "network",
        "baseName": "network",
        "type": "string"
    },
    {
        "name": "networkName",
        "baseName": "networkName",
        "type": "string"
    },
    {
        "name": "customerSignatureRequired",
        "baseName": "customerSignatureRequired",
        "type": "string"
    }
];
class PtsV2PaymentsPost201ResponseProcessorInformationSellerProtection {
    static getAttributeTypeMap() {
        return PtsV2PaymentsPost201ResponseProcessorInformationSellerProtection.attributeTypeMap;
    }
}
exports.PtsV2PaymentsPost201ResponseProcessorInformationSellerProtection = PtsV2PaymentsPost201ResponseProcessorInformationSellerProtection;
PtsV2PaymentsPost201ResponseProcessorInformationSellerProtection.discriminator = undefined;
PtsV2PaymentsPost201ResponseProcessorInformationSellerProtection.attributeTypeMap = [
    {
        "name": "type",
        "baseName": "type",
        "type": "string"
    },
    {
        "name": "eligibility",
        "baseName": "eligibility",
        "type": "string"
    },
    {
        "name": "disputeCategories",
        "baseName": "disputeCategories",
        "type": "Array<string>"
    },
    {
        "name": "eligibilityType",
        "baseName": "eligibilityType",
        "type": "string"
    }
];
/**
* Contains the result of risk assessment.
*/
class PtsV2PaymentsPost201ResponseRiskInformation {
    static getAttributeTypeMap() {
        return PtsV2PaymentsPost201ResponseRiskInformation.attributeTypeMap;
    }
}
exports.PtsV2PaymentsPost201ResponseRiskInformation = PtsV2PaymentsPost201ResponseRiskInformation;
PtsV2PaymentsPost201ResponseRiskInformation.discriminator = undefined;
PtsV2PaymentsPost201ResponseRiskInformation.attributeTypeMap = [
    {
        "name": "profile",
        "baseName": "profile",
        "type": "PtsV2PaymentsPost201ResponseRiskInformationProfile"
    },
    {
        "name": "rules",
        "baseName": "rules",
        "type": "Array<PtsV2PaymentsPost201ResponseRiskInformationRules>"
    },
    {
        "name": "infoCodes",
        "baseName": "infoCodes",
        "type": "PtsV2PaymentsPost201ResponseRiskInformationInfoCodes"
    },
    {
        "name": "velocity",
        "baseName": "velocity",
        "type": "PtsV2PaymentsPost201ResponseRiskInformationVelocity"
    },
    {
        "name": "casePriority",
        "baseName": "casePriority",
        "type": "number"
    },
    {
        "name": "localTime",
        "baseName": "localTime",
        "type": "string"
    },
    {
        "name": "score",
        "baseName": "score",
        "type": "PtsV2PaymentsPost201ResponseRiskInformationScore"
    },
    {
        "name": "ipAddress",
        "baseName": "ipAddress",
        "type": "PtsV2PaymentsPost201ResponseRiskInformationIpAddress"
    },
    {
        "name": "providers",
        "baseName": "providers",
        "type": "{ [key: string]: { [key: string]: string; }; }"
    },
    {
        "name": "travel",
        "baseName": "travel",
        "type": "PtsV2PaymentsPost201ResponseRiskInformationTravel"
    },
    {
        "name": "processorResults",
        "baseName": "processorResults",
        "type": "PtsV2PaymentsPost201ResponseRiskInformationProcessorResults"
    }
];
class PtsV2PaymentsPost201ResponseRiskInformationInfoCodes {
    static getAttributeTypeMap() {
        return PtsV2PaymentsPost201ResponseRiskInformationInfoCodes.attributeTypeMap;
    }
}
exports.PtsV2PaymentsPost201ResponseRiskInformationInfoCodes = PtsV2PaymentsPost201ResponseRiskInformationInfoCodes;
PtsV2PaymentsPost201ResponseRiskInformationInfoCodes.discriminator = undefined;
PtsV2PaymentsPost201ResponseRiskInformationInfoCodes.attributeTypeMap = [
    {
        "name": "velocity",
        "baseName": "velocity",
        "type": "Array<string>"
    },
    {
        "name": "address",
        "baseName": "address",
        "type": "Array<string>"
    },
    {
        "name": "customerList",
        "baseName": "customerList",
        "type": "Array<string>"
    },
    {
        "name": "deviceBehavior",
        "baseName": "deviceBehavior",
        "type": "Array<string>"
    },
    {
        "name": "identityChange",
        "baseName": "identityChange",
        "type": "Array<string>"
    },
    {
        "name": "internet",
        "baseName": "internet",
        "type": "Array<string>"
    },
    {
        "name": "phone",
        "baseName": "phone",
        "type": "Array<string>"
    },
    {
        "name": "suspicious",
        "baseName": "suspicious",
        "type": "Array<string>"
    },
    {
        "name": "globalVelocity",
        "baseName": "globalVelocity",
        "type": "Array<string>"
    }
];
/**
* Contains detailed response information about the customer's IP address.
*/
class PtsV2PaymentsPost201ResponseRiskInformationIpAddress {
    static getAttributeTypeMap() {
        return PtsV2PaymentsPost201ResponseRiskInformationIpAddress.attributeTypeMap;
    }
}
exports.PtsV2PaymentsPost201ResponseRiskInformationIpAddress = PtsV2PaymentsPost201ResponseRiskInformationIpAddress;
PtsV2PaymentsPost201ResponseRiskInformationIpAddress.discriminator = undefined;
PtsV2PaymentsPost201ResponseRiskInformationIpAddress.attributeTypeMap = [
    {
        "name": "anonymizerStatus",
        "baseName": "anonymizerStatus",
        "type": "string"
    },
    {
        "name": "locality",
        "baseName": "locality",
        "type": "string"
    },
    {
        "name": "country",
        "baseName": "country",
        "type": "string"
    },
    {
        "name": "administrativeArea",
        "baseName": "administrativeArea",
        "type": "string"
    },
    {
        "name": "routingMethod",
        "baseName": "routingMethod",
        "type": "string"
    },
    {
        "name": "carrier",
        "baseName": "carrier",
        "type": "string"
    },
    {
        "name": "organization",
        "baseName": "organization",
        "type": "string"
    }
];
class PtsV2PaymentsPost201ResponseRiskInformationProcessorResults {
    static getAttributeTypeMap() {
        return PtsV2PaymentsPost201ResponseRiskInformationProcessorResults.attributeTypeMap;
    }
}
exports.PtsV2PaymentsPost201ResponseRiskInformationProcessorResults = PtsV2PaymentsPost201ResponseRiskInformationProcessorResults;
PtsV2PaymentsPost201ResponseRiskInformationProcessorResults.discriminator = undefined;
PtsV2PaymentsPost201ResponseRiskInformationProcessorResults.attributeTypeMap = [
    {
        "name": "fraudDecision",
        "baseName": "fraudDecision",
        "type": "string"
    },
    {
        "name": "fraudDecisionReason",
        "baseName": "fraudDecisionReason",
        "type": "string"
    }
];
class PtsV2PaymentsPost201ResponseRiskInformationProfile {
    static getAttributeTypeMap() {
        return PtsV2PaymentsPost201ResponseRiskInformationProfile.attributeTypeMap;
    }
}
exports.PtsV2PaymentsPost201ResponseRiskInformationProfile = PtsV2PaymentsPost201ResponseRiskInformationProfile;
PtsV2PaymentsPost201ResponseRiskInformationProfile.discriminator = undefined;
PtsV2PaymentsPost201ResponseRiskInformationProfile.attributeTypeMap = [
    {
        "name": "name",
        "baseName": "name",
        "type": "string"
    },
    {
        "name": "desinationQueue",
        "baseName": "desinationQueue",
        "type": "string"
    },
    {
        "name": "selectorRule",
        "baseName": "selectorRule",
        "type": "string"
    }
];
class PtsV2PaymentsPost201ResponseRiskInformationRules {
    static getAttributeTypeMap() {
        return PtsV2PaymentsPost201ResponseRiskInformationRules.attributeTypeMap;
    }
}
exports.PtsV2PaymentsPost201ResponseRiskInformationRules = PtsV2PaymentsPost201ResponseRiskInformationRules;
PtsV2PaymentsPost201ResponseRiskInformationRules.discriminator = undefined;
PtsV2PaymentsPost201ResponseRiskInformationRules.attributeTypeMap = [
    {
        "name": "name",
        "baseName": "name",
        "type": "string"
    },
    {
        "name": "decision",
        "baseName": "decision",
        "type": "string"
    }
];
class PtsV2PaymentsPost201ResponseRiskInformationScore {
    static getAttributeTypeMap() {
        return PtsV2PaymentsPost201ResponseRiskInformationScore.attributeTypeMap;
    }
}
exports.PtsV2PaymentsPost201ResponseRiskInformationScore = PtsV2PaymentsPost201ResponseRiskInformationScore;
PtsV2PaymentsPost201ResponseRiskInformationScore.discriminator = undefined;
PtsV2PaymentsPost201ResponseRiskInformationScore.attributeTypeMap = [
    {
        "name": "factorCodes",
        "baseName": "factorCodes",
        "type": "Array<string>"
    },
    {
        "name": "modelUsed",
        "baseName": "modelUsed",
        "type": "string"
    },
    {
        "name": "result",
        "baseName": "result",
        "type": "string"
    }
];
class PtsV2PaymentsPost201ResponseRiskInformationTravel {
    static getAttributeTypeMap() {
        return PtsV2PaymentsPost201ResponseRiskInformationTravel.attributeTypeMap;
    }
}
exports.PtsV2PaymentsPost201ResponseRiskInformationTravel = PtsV2PaymentsPost201ResponseRiskInformationTravel;
PtsV2PaymentsPost201ResponseRiskInformationTravel.discriminator = undefined;
PtsV2PaymentsPost201ResponseRiskInformationTravel.attributeTypeMap = [
    {
        "name": "actualFinalDestination",
        "baseName": "actualFinalDestination",
        "type": "PtsV2PaymentsPost201ResponseRiskInformationTravelActualFinalDestination"
    },
    {
        "name": "firstDeparture",
        "baseName": "firstDeparture",
        "type": "PtsV2PaymentsPost201ResponseRiskInformationTravelFirstDeparture"
    },
    {
        "name": "firstDestination",
        "baseName": "firstDestination",
        "type": "PtsV2PaymentsPost201ResponseRiskInformationTravelFirstDestination"
    },
    {
        "name": "lastDestination",
        "baseName": "lastDestination",
        "type": "PtsV2PaymentsPost201ResponseRiskInformationTravelLastDestination"
    }
];
class PtsV2PaymentsPost201ResponseRiskInformationTravelActualFinalDestination {
    static getAttributeTypeMap() {
        return PtsV2PaymentsPost201ResponseRiskInformationTravelActualFinalDestination.attributeTypeMap;
    }
}
exports.PtsV2PaymentsPost201ResponseRiskInformationTravelActualFinalDestination = PtsV2PaymentsPost201ResponseRiskInformationTravelActualFinalDestination;
PtsV2PaymentsPost201ResponseRiskInformationTravelActualFinalDestination.discriminator = undefined;
PtsV2PaymentsPost201ResponseRiskInformationTravelActualFinalDestination.attributeTypeMap = [
    {
        "name": "country",
        "baseName": "country",
        "type": "string"
    },
    {
        "name": "locality",
        "baseName": "locality",
        "type": "string"
    },
    {
        "name": "latitude",
        "baseName": "latitude",
        "type": "string"
    },
    {
        "name": "longitude",
        "baseName": "longitude",
        "type": "string"
    }
];
class PtsV2PaymentsPost201ResponseRiskInformationTravelFirstDeparture {
    static getAttributeTypeMap() {
        return PtsV2PaymentsPost201ResponseRiskInformationTravelFirstDeparture.attributeTypeMap;
    }
}
exports.PtsV2PaymentsPost201ResponseRiskInformationTravelFirstDeparture = PtsV2PaymentsPost201ResponseRiskInformationTravelFirstDeparture;
PtsV2PaymentsPost201ResponseRiskInformationTravelFirstDeparture.discriminator = undefined;
PtsV2PaymentsPost201ResponseRiskInformationTravelFirstDeparture.attributeTypeMap = [
    {
        "name": "country",
        "baseName": "country",
        "type": "string"
    },
    {
        "name": "locality",
        "baseName": "locality",
        "type": "string"
    },
    {
        "name": "latitude",
        "baseName": "latitude",
        "type": "string"
    },
    {
        "name": "longitude",
        "baseName": "longitude",
        "type": "string"
    }
];
class PtsV2PaymentsPost201ResponseRiskInformationTravelFirstDestination {
    static getAttributeTypeMap() {
        return PtsV2PaymentsPost201ResponseRiskInformationTravelFirstDestination.attributeTypeMap;
    }
}
exports.PtsV2PaymentsPost201ResponseRiskInformationTravelFirstDestination = PtsV2PaymentsPost201ResponseRiskInformationTravelFirstDestination;
PtsV2PaymentsPost201ResponseRiskInformationTravelFirstDestination.discriminator = undefined;
PtsV2PaymentsPost201ResponseRiskInformationTravelFirstDestination.attributeTypeMap = [
    {
        "name": "country",
        "baseName": "country",
        "type": "string"
    },
    {
        "name": "locality",
        "baseName": "locality",
        "type": "string"
    },
    {
        "name": "latitude",
        "baseName": "latitude",
        "type": "string"
    },
    {
        "name": "longitude",
        "baseName": "longitude",
        "type": "string"
    }
];
class PtsV2PaymentsPost201ResponseRiskInformationTravelLastDestination {
    static getAttributeTypeMap() {
        return PtsV2PaymentsPost201ResponseRiskInformationTravelLastDestination.attributeTypeMap;
    }
}
exports.PtsV2PaymentsPost201ResponseRiskInformationTravelLastDestination = PtsV2PaymentsPost201ResponseRiskInformationTravelLastDestination;
PtsV2PaymentsPost201ResponseRiskInformationTravelLastDestination.discriminator = undefined;
PtsV2PaymentsPost201ResponseRiskInformationTravelLastDestination.attributeTypeMap = [
    {
        "name": "country",
        "baseName": "country",
        "type": "string"
    },
    {
        "name": "locality",
        "baseName": "locality",
        "type": "string"
    },
    {
        "name": "latitude",
        "baseName": "latitude",
        "type": "string"
    },
    {
        "name": "longitude",
        "baseName": "longitude",
        "type": "string"
    }
];
class PtsV2PaymentsPost201ResponseRiskInformationVelocity {
    static getAttributeTypeMap() {
        return PtsV2PaymentsPost201ResponseRiskInformationVelocity.attributeTypeMap;
    }
}
exports.PtsV2PaymentsPost201ResponseRiskInformationVelocity = PtsV2PaymentsPost201ResponseRiskInformationVelocity;
PtsV2PaymentsPost201ResponseRiskInformationVelocity.discriminator = undefined;
PtsV2PaymentsPost201ResponseRiskInformationVelocity.attributeTypeMap = [
    {
        "name": "morphing",
        "baseName": "morphing",
        "type": "Array<PtsV2PaymentsPost201ResponseRiskInformationVelocityMorphing>"
    },
    {
        "name": "address",
        "baseName": "address",
        "type": "Array<string>"
    }
];
class PtsV2PaymentsPost201ResponseRiskInformationVelocityMorphing {
    static getAttributeTypeMap() {
        return PtsV2PaymentsPost201ResponseRiskInformationVelocityMorphing.attributeTypeMap;
    }
}
exports.PtsV2PaymentsPost201ResponseRiskInformationVelocityMorphing = PtsV2PaymentsPost201ResponseRiskInformationVelocityMorphing;
PtsV2PaymentsPost201ResponseRiskInformationVelocityMorphing.discriminator = undefined;
PtsV2PaymentsPost201ResponseRiskInformationVelocityMorphing.attributeTypeMap = [
    {
        "name": "count",
        "baseName": "count",
        "type": "number"
    },
    {
        "name": "fieldName",
        "baseName": "fieldName",
        "type": "string"
    },
    {
        "name": "informationCode",
        "baseName": "informationCode",
        "type": "string"
    }
];
class PtsV2PaymentsPost201ResponseTokenInformation {
    static getAttributeTypeMap() {
        return PtsV2PaymentsPost201ResponseTokenInformation.attributeTypeMap;
    }
}
exports.PtsV2PaymentsPost201ResponseTokenInformation = PtsV2PaymentsPost201ResponseTokenInformation;
PtsV2PaymentsPost201ResponseTokenInformation.discriminator = undefined;
PtsV2PaymentsPost201ResponseTokenInformation.attributeTypeMap = [
    {
        "name": "instrumentidentifierNew",
        "baseName": "instrumentidentifierNew",
        "type": "boolean"
    },
    {
        "name": "customer",
        "baseName": "customer",
        "type": "PtsV2PaymentsPost201ResponseTokenInformationCustomer"
    },
    {
        "name": "paymentInstrument",
        "baseName": "paymentInstrument",
        "type": "PtsV2PaymentsPost201ResponseTokenInformationPaymentInstrument"
    },
    {
        "name": "shippingAddress",
        "baseName": "shippingAddress",
        "type": "PtsV2PaymentsPost201ResponseTokenInformationShippingAddress"
    },
    {
        "name": "instrumentIdentifier",
        "baseName": "instrumentIdentifier",
        "type": "PtsV2PaymentsPost201ResponseTokenInformationInstrumentIdentifier"
    }
];
class PtsV2PaymentsPost201ResponseTokenInformationCustomer {
    static getAttributeTypeMap() {
        return PtsV2PaymentsPost201ResponseTokenInformationCustomer.attributeTypeMap;
    }
}
exports.PtsV2PaymentsPost201ResponseTokenInformationCustomer = PtsV2PaymentsPost201ResponseTokenInformationCustomer;
PtsV2PaymentsPost201ResponseTokenInformationCustomer.discriminator = undefined;
PtsV2PaymentsPost201ResponseTokenInformationCustomer.attributeTypeMap = [
    {
        "name": "id",
        "baseName": "id",
        "type": "string"
    }
];
class PtsV2PaymentsPost201ResponseTokenInformationInstrumentIdentifier {
    static getAttributeTypeMap() {
        return PtsV2PaymentsPost201ResponseTokenInformationInstrumentIdentifier.attributeTypeMap;
    }
}
exports.PtsV2PaymentsPost201ResponseTokenInformationInstrumentIdentifier = PtsV2PaymentsPost201ResponseTokenInformationInstrumentIdentifier;
PtsV2PaymentsPost201ResponseTokenInformationInstrumentIdentifier.discriminator = undefined;
PtsV2PaymentsPost201ResponseTokenInformationInstrumentIdentifier.attributeTypeMap = [
    {
        "name": "id",
        "baseName": "id",
        "type": "string"
    },
    {
        "name": "state",
        "baseName": "state",
        "type": "string"
    }
];
class PtsV2PaymentsPost201ResponseTokenInformationPaymentInstrument {
    static getAttributeTypeMap() {
        return PtsV2PaymentsPost201ResponseTokenInformationPaymentInstrument.attributeTypeMap;
    }
}
exports.PtsV2PaymentsPost201ResponseTokenInformationPaymentInstrument = PtsV2PaymentsPost201ResponseTokenInformationPaymentInstrument;
PtsV2PaymentsPost201ResponseTokenInformationPaymentInstrument.discriminator = undefined;
PtsV2PaymentsPost201ResponseTokenInformationPaymentInstrument.attributeTypeMap = [
    {
        "name": "id",
        "baseName": "id",
        "type": "string"
    }
];
class PtsV2PaymentsPost201ResponseTokenInformationShippingAddress {
    static getAttributeTypeMap() {
        return PtsV2PaymentsPost201ResponseTokenInformationShippingAddress.attributeTypeMap;
    }
}
exports.PtsV2PaymentsPost201ResponseTokenInformationShippingAddress = PtsV2PaymentsPost201ResponseTokenInformationShippingAddress;
PtsV2PaymentsPost201ResponseTokenInformationShippingAddress.discriminator = undefined;
PtsV2PaymentsPost201ResponseTokenInformationShippingAddress.attributeTypeMap = [
    {
        "name": "id",
        "baseName": "id",
        "type": "string"
    }
];
class PtsV2PaymentsPost201ResponseWatchlistScreeningInformation {
    static getAttributeTypeMap() {
        return PtsV2PaymentsPost201ResponseWatchlistScreeningInformation.attributeTypeMap;
    }
}
exports.PtsV2PaymentsPost201ResponseWatchlistScreeningInformation = PtsV2PaymentsPost201ResponseWatchlistScreeningInformation;
PtsV2PaymentsPost201ResponseWatchlistScreeningInformation.discriminator = undefined;
PtsV2PaymentsPost201ResponseWatchlistScreeningInformation.attributeTypeMap = [
    {
        "name": "ipCountryConfidence",
        "baseName": "ipCountryConfidence",
        "type": "number"
    },
    {
        "name": "infoCodes",
        "baseName": "infoCodes",
        "type": "Array<string>"
    },
    {
        "name": "watchList",
        "baseName": "watchList",
        "type": "PtsV2PaymentsPost201ResponseWatchlistScreeningInformationWatchList"
    }
];
class PtsV2PaymentsPost201ResponseWatchlistScreeningInformationWatchList {
    static getAttributeTypeMap() {
        return PtsV2PaymentsPost201ResponseWatchlistScreeningInformationWatchList.attributeTypeMap;
    }
}
exports.PtsV2PaymentsPost201ResponseWatchlistScreeningInformationWatchList = PtsV2PaymentsPost201ResponseWatchlistScreeningInformationWatchList;
PtsV2PaymentsPost201ResponseWatchlistScreeningInformationWatchList.discriminator = undefined;
PtsV2PaymentsPost201ResponseWatchlistScreeningInformationWatchList.attributeTypeMap = [
    {
        "name": "matches",
        "baseName": "matches",
        "type": "Array<PtsV2PaymentsPost201ResponseWatchlistScreeningInformationWatchListMatches>"
    }
];
class PtsV2PaymentsPost201ResponseWatchlistScreeningInformationWatchListMatches {
    static getAttributeTypeMap() {
        return PtsV2PaymentsPost201ResponseWatchlistScreeningInformationWatchListMatches.attributeTypeMap;
    }
}
exports.PtsV2PaymentsPost201ResponseWatchlistScreeningInformationWatchListMatches = PtsV2PaymentsPost201ResponseWatchlistScreeningInformationWatchListMatches;
PtsV2PaymentsPost201ResponseWatchlistScreeningInformationWatchListMatches.discriminator = undefined;
PtsV2PaymentsPost201ResponseWatchlistScreeningInformationWatchListMatches.attributeTypeMap = [
    {
        "name": "addresses",
        "baseName": "addresses",
        "type": "Array<string>"
    },
    {
        "name": "sanctionList",
        "baseName": "sanctionList",
        "type": "string"
    },
    {
        "name": "aliases",
        "baseName": "aliases",
        "type": "Array<string>"
    },
    {
        "name": "programs",
        "baseName": "programs",
        "type": "Array<string>"
    }
];
class PtsV2PaymentsPost400Response {
    static getAttributeTypeMap() {
        return PtsV2PaymentsPost400Response.attributeTypeMap;
    }
}
exports.PtsV2PaymentsPost400Response = PtsV2PaymentsPost400Response;
PtsV2PaymentsPost400Response.discriminator = undefined;
PtsV2PaymentsPost400Response.attributeTypeMap = [
    {
        "name": "submitTimeUtc",
        "baseName": "submitTimeUtc",
        "type": "string"
    },
    {
        "name": "status",
        "baseName": "status",
        "type": "string"
    },
    {
        "name": "reason",
        "baseName": "reason",
        "type": "string"
    },
    {
        "name": "message",
        "baseName": "message",
        "type": "string"
    },
    {
        "name": "details",
        "baseName": "details",
        "type": "Array<PtsV2PaymentsPost201ResponseErrorInformationDetails>"
    }
];
class PtsV2PaymentsPost502Response {
    static getAttributeTypeMap() {
        return PtsV2PaymentsPost502Response.attributeTypeMap;
    }
}
exports.PtsV2PaymentsPost502Response = PtsV2PaymentsPost502Response;
PtsV2PaymentsPost502Response.discriminator = undefined;
PtsV2PaymentsPost502Response.attributeTypeMap = [
    {
        "name": "submitTimeUtc",
        "baseName": "submitTimeUtc",
        "type": "string"
    },
    {
        "name": "status",
        "baseName": "status",
        "type": "string"
    },
    {
        "name": "reason",
        "baseName": "reason",
        "type": "string"
    },
    {
        "name": "message",
        "baseName": "message",
        "type": "string"
    }
];
class PtsV2PaymentsRefundPost201Response {
    static getAttributeTypeMap() {
        return PtsV2PaymentsRefundPost201Response.attributeTypeMap;
    }
}
exports.PtsV2PaymentsRefundPost201Response = PtsV2PaymentsRefundPost201Response;
PtsV2PaymentsRefundPost201Response.discriminator = undefined;
PtsV2PaymentsRefundPost201Response.attributeTypeMap = [
    {
        "name": "links",
        "baseName": "_links",
        "type": "PtsV2PaymentsRefundPost201ResponseLinks"
    },
    {
        "name": "id",
        "baseName": "id",
        "type": "string"
    },
    {
        "name": "submitTimeUtc",
        "baseName": "submitTimeUtc",
        "type": "string"
    },
    {
        "name": "status",
        "baseName": "status",
        "type": "string"
    },
    {
        "name": "reconciliationId",
        "baseName": "reconciliationId",
        "type": "string"
    },
    {
        "name": "clientReferenceInformation",
        "baseName": "clientReferenceInformation",
        "type": "PtsV2PaymentsRefundPost201ResponseClientReferenceInformation"
    },
    {
        "name": "refundAmountDetails",
        "baseName": "refundAmountDetails",
        "type": "PtsV2PaymentsRefundPost201ResponseRefundAmountDetails"
    },
    {
        "name": "processingInformation",
        "baseName": "processingInformation",
        "type": "PtsV2PaymentsCapturesPost201ResponseProcessingInformation"
    },
    {
        "name": "processorInformation",
        "baseName": "processorInformation",
        "type": "PtsV2PaymentsRefundPost201ResponseProcessorInformation"
    },
    {
        "name": "orderInformation",
        "baseName": "orderInformation",
        "type": "PtsV2PaymentsRefundPost201ResponseOrderInformation"
    },
    {
        "name": "pointOfSaleInformation",
        "baseName": "pointOfSaleInformation",
        "type": "PtsV2PaymentsCapturesPost201ResponsePointOfSaleInformation"
    }
];
class PtsV2PaymentsRefundPost201ResponseClientReferenceInformation {
    static getAttributeTypeMap() {
        return PtsV2PaymentsRefundPost201ResponseClientReferenceInformation.attributeTypeMap;
    }
}
exports.PtsV2PaymentsRefundPost201ResponseClientReferenceInformation = PtsV2PaymentsRefundPost201ResponseClientReferenceInformation;
PtsV2PaymentsRefundPost201ResponseClientReferenceInformation.discriminator = undefined;
PtsV2PaymentsRefundPost201ResponseClientReferenceInformation.attributeTypeMap = [
    {
        "name": "code",
        "baseName": "code",
        "type": "string"
    },
    {
        "name": "submitLocalDateTime",
        "baseName": "submitLocalDateTime",
        "type": "string"
    },
    {
        "name": "ownerMerchantId",
        "baseName": "ownerMerchantId",
        "type": "string"
    },
    {
        "name": "returnReconciliationId",
        "baseName": "returnReconciliationId",
        "type": "string"
    }
];
class PtsV2PaymentsRefundPost201ResponseLinks {
    static getAttributeTypeMap() {
        return PtsV2PaymentsRefundPost201ResponseLinks.attributeTypeMap;
    }
}
exports.PtsV2PaymentsRefundPost201ResponseLinks = PtsV2PaymentsRefundPost201ResponseLinks;
PtsV2PaymentsRefundPost201ResponseLinks.discriminator = undefined;
PtsV2PaymentsRefundPost201ResponseLinks.attributeTypeMap = [
    {
        "name": "self",
        "baseName": "self",
        "type": "PtsV2PaymentsPost201ResponseLinksSelf"
    },
    {
        "name": "_void",
        "baseName": "void",
        "type": "PtsV2PaymentsPost201ResponseLinksSelf"
    }
];
class PtsV2PaymentsRefundPost201ResponseOrderInformation {
    static getAttributeTypeMap() {
        return PtsV2PaymentsRefundPost201ResponseOrderInformation.attributeTypeMap;
    }
}
exports.PtsV2PaymentsRefundPost201ResponseOrderInformation = PtsV2PaymentsRefundPost201ResponseOrderInformation;
PtsV2PaymentsRefundPost201ResponseOrderInformation.discriminator = undefined;
PtsV2PaymentsRefundPost201ResponseOrderInformation.attributeTypeMap = [
    {
        "name": "amountDetails",
        "baseName": "amountDetails",
        "type": "PtsV2PaymentsRefundPost201ResponseOrderInformationAmountDetails"
    },
    {
        "name": "invoiceDetails",
        "baseName": "invoiceDetails",
        "type": "PtsV2PaymentsCapturesPost201ResponseOrderInformationInvoiceDetails"
    }
];
class PtsV2PaymentsRefundPost201ResponseOrderInformationAmountDetails {
    static getAttributeTypeMap() {
        return PtsV2PaymentsRefundPost201ResponseOrderInformationAmountDetails.attributeTypeMap;
    }
}
exports.PtsV2PaymentsRefundPost201ResponseOrderInformationAmountDetails = PtsV2PaymentsRefundPost201ResponseOrderInformationAmountDetails;
PtsV2PaymentsRefundPost201ResponseOrderInformationAmountDetails.discriminator = undefined;
PtsV2PaymentsRefundPost201ResponseOrderInformationAmountDetails.attributeTypeMap = [
    {
        "name": "settlementAmount",
        "baseName": "settlementAmount",
        "type": "string"
    },
    {
        "name": "settlementCurrency",
        "baseName": "settlementCurrency",
        "type": "string"
    },
    {
        "name": "exchangeRate",
        "baseName": "exchangeRate",
        "type": "string"
    },
    {
        "name": "foreignAmount",
        "baseName": "foreignAmount",
        "type": "string"
    },
    {
        "name": "foreignCurrency",
        "baseName": "foreignCurrency",
        "type": "string"
    }
];
class PtsV2PaymentsRefundPost201ResponseProcessorInformation {
    static getAttributeTypeMap() {
        return PtsV2PaymentsRefundPost201ResponseProcessorInformation.attributeTypeMap;
    }
}
exports.PtsV2PaymentsRefundPost201ResponseProcessorInformation = PtsV2PaymentsRefundPost201ResponseProcessorInformation;
PtsV2PaymentsRefundPost201ResponseProcessorInformation.discriminator = undefined;
PtsV2PaymentsRefundPost201ResponseProcessorInformation.attributeTypeMap = [
    {
        "name": "approvalCode",
        "baseName": "approvalCode",
        "type": "string"
    },
    {
        "name": "transactionId",
        "baseName": "transactionId",
        "type": "string"
    },
    {
        "name": "forwardedAcquirerCode",
        "baseName": "forwardedAcquirerCode",
        "type": "string"
    },
    {
        "name": "merchantNumber",
        "baseName": "merchantNumber",
        "type": "string"
    },
    {
        "name": "responseCode",
        "baseName": "responseCode",
        "type": "string"
    },
    {
        "name": "achVerification",
        "baseName": "achVerification",
        "type": "PtsV2PaymentsPost201ResponseProcessorInformationAchVerification"
    },
    {
        "name": "networkTransactionId",
        "baseName": "networkTransactionId",
        "type": "string"
    },
    {
        "name": "settlementDate",
        "baseName": "settlementDate",
        "type": "string"
    },
    {
        "name": "updateTimeUtc",
        "baseName": "updateTimeUtc",
        "type": "string"
    }
];
class PtsV2PaymentsRefundPost201ResponseRefundAmountDetails {
    static getAttributeTypeMap() {
        return PtsV2PaymentsRefundPost201ResponseRefundAmountDetails.attributeTypeMap;
    }
}
exports.PtsV2PaymentsRefundPost201ResponseRefundAmountDetails = PtsV2PaymentsRefundPost201ResponseRefundAmountDetails;
PtsV2PaymentsRefundPost201ResponseRefundAmountDetails.discriminator = undefined;
PtsV2PaymentsRefundPost201ResponseRefundAmountDetails.attributeTypeMap = [
    {
        "name": "refundAmount",
        "baseName": "refundAmount",
        "type": "string"
    },
    {
        "name": "creditAmount",
        "baseName": "creditAmount",
        "type": "string"
    },
    {
        "name": "currency",
        "baseName": "currency",
        "type": "string"
    }
];
class PtsV2PaymentsRefundPost400Response {
    static getAttributeTypeMap() {
        return PtsV2PaymentsRefundPost400Response.attributeTypeMap;
    }
}
exports.PtsV2PaymentsRefundPost400Response = PtsV2PaymentsRefundPost400Response;
PtsV2PaymentsRefundPost400Response.discriminator = undefined;
PtsV2PaymentsRefundPost400Response.attributeTypeMap = [
    {
        "name": "submitTimeUtc",
        "baseName": "submitTimeUtc",
        "type": "string"
    },
    {
        "name": "status",
        "baseName": "status",
        "type": "string"
    },
    {
        "name": "reason",
        "baseName": "reason",
        "type": "string"
    },
    {
        "name": "message",
        "baseName": "message",
        "type": "string"
    },
    {
        "name": "details",
        "baseName": "details",
        "type": "Array<PtsV2PaymentsPost201ResponseErrorInformationDetails>"
    }
];
class PtsV2PaymentsReversalsPost201Response {
    static getAttributeTypeMap() {
        return PtsV2PaymentsReversalsPost201Response.attributeTypeMap;
    }
}
exports.PtsV2PaymentsReversalsPost201Response = PtsV2PaymentsReversalsPost201Response;
PtsV2PaymentsReversalsPost201Response.discriminator = undefined;
PtsV2PaymentsReversalsPost201Response.attributeTypeMap = [
    {
        "name": "links",
        "baseName": "_links",
        "type": "PtsV2IncrementalAuthorizationPatch201ResponseLinks"
    },
    {
        "name": "id",
        "baseName": "id",
        "type": "string"
    },
    {
        "name": "submitTimeUtc",
        "baseName": "submitTimeUtc",
        "type": "string"
    },
    {
        "name": "status",
        "baseName": "status",
        "type": "string"
    },
    {
        "name": "reconciliationId",
        "baseName": "reconciliationId",
        "type": "string"
    },
    {
        "name": "clientReferenceInformation",
        "baseName": "clientReferenceInformation",
        "type": "PtsV2PaymentsPost201ResponseClientReferenceInformation"
    },
    {
        "name": "reversalAmountDetails",
        "baseName": "reversalAmountDetails",
        "type": "PtsV2PaymentsReversalsPost201ResponseReversalAmountDetails"
    },
    {
        "name": "processorInformation",
        "baseName": "processorInformation",
        "type": "PtsV2PaymentsReversalsPost201ResponseProcessorInformation"
    },
    {
        "name": "issuerInformation",
        "baseName": "issuerInformation",
        "type": "PtsV2PaymentsReversalsPost201ResponseIssuerInformation"
    },
    {
        "name": "authorizationInformation",
        "baseName": "authorizationInformation",
        "type": "PtsV2PaymentsReversalsPost201ResponseAuthorizationInformation"
    },
    {
        "name": "pointOfSaleInformation",
        "baseName": "pointOfSaleInformation",
        "type": "Ptsv2paymentsidreversalsPointOfSaleInformation"
    }
];
class PtsV2PaymentsReversalsPost201ResponseAuthorizationInformation {
    static getAttributeTypeMap() {
        return PtsV2PaymentsReversalsPost201ResponseAuthorizationInformation.attributeTypeMap;
    }
}
exports.PtsV2PaymentsReversalsPost201ResponseAuthorizationInformation = PtsV2PaymentsReversalsPost201ResponseAuthorizationInformation;
PtsV2PaymentsReversalsPost201ResponseAuthorizationInformation.discriminator = undefined;
PtsV2PaymentsReversalsPost201ResponseAuthorizationInformation.attributeTypeMap = [
    {
        "name": "approvalCode",
        "baseName": "approvalCode",
        "type": "string"
    },
    {
        "name": "reasonCode",
        "baseName": "reasonCode",
        "type": "string"
    },
    {
        "name": "reversalSubmitted",
        "baseName": "reversalSubmitted",
        "type": "string"
    }
];
class PtsV2PaymentsReversalsPost201ResponseIssuerInformation {
    static getAttributeTypeMap() {
        return PtsV2PaymentsReversalsPost201ResponseIssuerInformation.attributeTypeMap;
    }
}
exports.PtsV2PaymentsReversalsPost201ResponseIssuerInformation = PtsV2PaymentsReversalsPost201ResponseIssuerInformation;
PtsV2PaymentsReversalsPost201ResponseIssuerInformation.discriminator = undefined;
PtsV2PaymentsReversalsPost201ResponseIssuerInformation.attributeTypeMap = [
    {
        "name": "responseCode",
        "baseName": "responseCode",
        "type": "string"
    }
];
class PtsV2PaymentsReversalsPost201ResponseProcessorInformation {
    static getAttributeTypeMap() {
        return PtsV2PaymentsReversalsPost201ResponseProcessorInformation.attributeTypeMap;
    }
}
exports.PtsV2PaymentsReversalsPost201ResponseProcessorInformation = PtsV2PaymentsReversalsPost201ResponseProcessorInformation;
PtsV2PaymentsReversalsPost201ResponseProcessorInformation.discriminator = undefined;
PtsV2PaymentsReversalsPost201ResponseProcessorInformation.attributeTypeMap = [
    {
        "name": "transactionId",
        "baseName": "transactionId",
        "type": "string"
    },
    {
        "name": "responseCode",
        "baseName": "responseCode",
        "type": "string"
    },
    {
        "name": "networkTransactionId",
        "baseName": "networkTransactionId",
        "type": "string"
    },
    {
        "name": "responseCategoryCode",
        "baseName": "responseCategoryCode",
        "type": "string"
    },
    {
        "name": "forwardedAcquirerCode",
        "baseName": "forwardedAcquirerCode",
        "type": "string"
    },
    {
        "name": "masterCardServiceCode",
        "baseName": "masterCardServiceCode",
        "type": "string"
    },
    {
        "name": "masterCardServiceReplyCode",
        "baseName": "masterCardServiceReplyCode",
        "type": "string"
    },
    {
        "name": "responseDetails",
        "baseName": "responseDetails",
        "type": "string"
    },
    {
        "name": "providerResponse",
        "baseName": "providerResponse",
        "type": "string"
    }
];
class PtsV2PaymentsReversalsPost201ResponseReversalAmountDetails {
    static getAttributeTypeMap() {
        return PtsV2PaymentsReversalsPost201ResponseReversalAmountDetails.attributeTypeMap;
    }
}
exports.PtsV2PaymentsReversalsPost201ResponseReversalAmountDetails = PtsV2PaymentsReversalsPost201ResponseReversalAmountDetails;
PtsV2PaymentsReversalsPost201ResponseReversalAmountDetails.discriminator = undefined;
PtsV2PaymentsReversalsPost201ResponseReversalAmountDetails.attributeTypeMap = [
    {
        "name": "reversedAmount",
        "baseName": "reversedAmount",
        "type": "string"
    },
    {
        "name": "originalTransactionAmount",
        "baseName": "originalTransactionAmount",
        "type": "string"
    },
    {
        "name": "currency",
        "baseName": "currency",
        "type": "string"
    }
];
class PtsV2PaymentsReversalsPost400Response {
    static getAttributeTypeMap() {
        return PtsV2PaymentsReversalsPost400Response.attributeTypeMap;
    }
}
exports.PtsV2PaymentsReversalsPost400Response = PtsV2PaymentsReversalsPost400Response;
PtsV2PaymentsReversalsPost400Response.discriminator = undefined;
PtsV2PaymentsReversalsPost400Response.attributeTypeMap = [
    {
        "name": "submitTimeUtc",
        "baseName": "submitTimeUtc",
        "type": "string"
    },
    {
        "name": "status",
        "baseName": "status",
        "type": "string"
    },
    {
        "name": "reason",
        "baseName": "reason",
        "type": "string"
    },
    {
        "name": "message",
        "baseName": "message",
        "type": "string"
    },
    {
        "name": "details",
        "baseName": "details",
        "type": "Array<PtsV2PaymentsPost201ResponseErrorInformationDetails>"
    }
];
class PtsV2PaymentsVoidsPost201Response {
    static getAttributeTypeMap() {
        return PtsV2PaymentsVoidsPost201Response.attributeTypeMap;
    }
}
exports.PtsV2PaymentsVoidsPost201Response = PtsV2PaymentsVoidsPost201Response;
PtsV2PaymentsVoidsPost201Response.discriminator = undefined;
PtsV2PaymentsVoidsPost201Response.attributeTypeMap = [
    {
        "name": "links",
        "baseName": "_links",
        "type": "PtsV2IncrementalAuthorizationPatch201ResponseLinks"
    },
    {
        "name": "id",
        "baseName": "id",
        "type": "string"
    },
    {
        "name": "submitTimeUtc",
        "baseName": "submitTimeUtc",
        "type": "string"
    },
    {
        "name": "status",
        "baseName": "status",
        "type": "string"
    },
    {
        "name": "clientReferenceInformation",
        "baseName": "clientReferenceInformation",
        "type": "PtsV2PaymentsPost201ResponseClientReferenceInformation"
    },
    {
        "name": "voidAmountDetails",
        "baseName": "voidAmountDetails",
        "type": "PtsV2PaymentsVoidsPost201ResponseVoidAmountDetails"
    },
    {
        "name": "processorInformation",
        "baseName": "processorInformation",
        "type": "PtsV2PaymentsVoidsPost201ResponseProcessorInformation"
    },
    {
        "name": "reconciliationId",
        "baseName": "reconciliationId",
        "type": "string"
    }
];
class PtsV2PaymentsVoidsPost201ResponseProcessorInformation {
    static getAttributeTypeMap() {
        return PtsV2PaymentsVoidsPost201ResponseProcessorInformation.attributeTypeMap;
    }
}
exports.PtsV2PaymentsVoidsPost201ResponseProcessorInformation = PtsV2PaymentsVoidsPost201ResponseProcessorInformation;
PtsV2PaymentsVoidsPost201ResponseProcessorInformation.discriminator = undefined;
PtsV2PaymentsVoidsPost201ResponseProcessorInformation.attributeTypeMap = [
    {
        "name": "responseCode",
        "baseName": "responseCode",
        "type": "string"
    },
    {
        "name": "responseDetails",
        "baseName": "responseDetails",
        "type": "string"
    },
    {
        "name": "transactionId",
        "baseName": "transactionId",
        "type": "string"
    }
];
class PtsV2PaymentsVoidsPost201ResponseVoidAmountDetails {
    static getAttributeTypeMap() {
        return PtsV2PaymentsVoidsPost201ResponseVoidAmountDetails.attributeTypeMap;
    }
}
exports.PtsV2PaymentsVoidsPost201ResponseVoidAmountDetails = PtsV2PaymentsVoidsPost201ResponseVoidAmountDetails;
PtsV2PaymentsVoidsPost201ResponseVoidAmountDetails.discriminator = undefined;
PtsV2PaymentsVoidsPost201ResponseVoidAmountDetails.attributeTypeMap = [
    {
        "name": "voidAmount",
        "baseName": "voidAmount",
        "type": "string"
    },
    {
        "name": "originalTransactionAmount",
        "baseName": "originalTransactionAmount",
        "type": "string"
    },
    {
        "name": "currency",
        "baseName": "currency",
        "type": "string"
    }
];
class PtsV2PaymentsVoidsPost400Response {
    static getAttributeTypeMap() {
        return PtsV2PaymentsVoidsPost400Response.attributeTypeMap;
    }
}
exports.PtsV2PaymentsVoidsPost400Response = PtsV2PaymentsVoidsPost400Response;
PtsV2PaymentsVoidsPost400Response.discriminator = undefined;
PtsV2PaymentsVoidsPost400Response.attributeTypeMap = [
    {
        "name": "submitTimeUtc",
        "baseName": "submitTimeUtc",
        "type": "string"
    },
    {
        "name": "status",
        "baseName": "status",
        "type": "string"
    },
    {
        "name": "reason",
        "baseName": "reason",
        "type": "string"
    },
    {
        "name": "message",
        "baseName": "message",
        "type": "string"
    },
    {
        "name": "details",
        "baseName": "details",
        "type": "Array<PtsV2PaymentsPost201ResponseErrorInformationDetails>"
    }
];
class PtsV2PayoutsPost201Response {
    static getAttributeTypeMap() {
        return PtsV2PayoutsPost201Response.attributeTypeMap;
    }
}
exports.PtsV2PayoutsPost201Response = PtsV2PayoutsPost201Response;
PtsV2PayoutsPost201Response.discriminator = undefined;
PtsV2PayoutsPost201Response.attributeTypeMap = [
    {
        "name": "links",
        "baseName": "_links",
        "type": "PtsV2IncrementalAuthorizationPatch201ResponseLinks"
    },
    {
        "name": "id",
        "baseName": "id",
        "type": "string"
    },
    {
        "name": "submitTimeUtc",
        "baseName": "submitTimeUtc",
        "type": "string"
    },
    {
        "name": "status",
        "baseName": "status",
        "type": "string"
    },
    {
        "name": "reconciliationId",
        "baseName": "reconciliationId",
        "type": "string"
    },
    {
        "name": "errorInformation",
        "baseName": "errorInformation",
        "type": "PtsV2PayoutsPost201ResponseErrorInformation"
    },
    {
        "name": "clientReferenceInformation",
        "baseName": "clientReferenceInformation",
        "type": "PtsV2PaymentsPost201ResponseClientReferenceInformation"
    },
    {
        "name": "merchantInformation",
        "baseName": "merchantInformation",
        "type": "PtsV2PayoutsPost201ResponseMerchantInformation"
    },
    {
        "name": "orderInformation",
        "baseName": "orderInformation",
        "type": "PtsV2PayoutsPost201ResponseOrderInformation"
    },
    {
        "name": "processorInformation",
        "baseName": "processorInformation",
        "type": "PtsV2PayoutsPost201ResponseProcessorInformation"
    },
    {
        "name": "recipientInformation",
        "baseName": "recipientInformation",
        "type": "PtsV2PayoutsPost201ResponseRecipientInformation"
    },
    {
        "name": "issuerInformation",
        "baseName": "issuerInformation",
        "type": "PtsV2PayoutsPost201ResponseIssuerInformation"
    },
    {
        "name": "tokenInformation",
        "baseName": "tokenInformation",
        "type": "PtsV2PaymentsPost201ResponseTokenInformation"
    },
    {
        "name": "processingInformation",
        "baseName": "processingInformation",
        "type": "PtsV2PayoutsPost201ResponseProcessingInformation"
    }
];
class PtsV2PayoutsPost201ResponseErrorInformation {
    static getAttributeTypeMap() {
        return PtsV2PayoutsPost201ResponseErrorInformation.attributeTypeMap;
    }
}
exports.PtsV2PayoutsPost201ResponseErrorInformation = PtsV2PayoutsPost201ResponseErrorInformation;
PtsV2PayoutsPost201ResponseErrorInformation.discriminator = undefined;
PtsV2PayoutsPost201ResponseErrorInformation.attributeTypeMap = [
    {
        "name": "reason",
        "baseName": "reason",
        "type": "string"
    },
    {
        "name": "message",
        "baseName": "message",
        "type": "string"
    },
    {
        "name": "details",
        "baseName": "details",
        "type": "Array<PtsV2PaymentsPost201ResponseErrorInformationDetails>"
    }
];
class PtsV2PayoutsPost201ResponseIssuerInformation {
    static getAttributeTypeMap() {
        return PtsV2PayoutsPost201ResponseIssuerInformation.attributeTypeMap;
    }
}
exports.PtsV2PayoutsPost201ResponseIssuerInformation = PtsV2PayoutsPost201ResponseIssuerInformation;
PtsV2PayoutsPost201ResponseIssuerInformation.discriminator = undefined;
PtsV2PayoutsPost201ResponseIssuerInformation.attributeTypeMap = [
    {
        "name": "serviceProcessingType",
        "baseName": "serviceProcessingType",
        "type": "string"
    }
];
class PtsV2PayoutsPost201ResponseMerchantInformation {
    static getAttributeTypeMap() {
        return PtsV2PayoutsPost201ResponseMerchantInformation.attributeTypeMap;
    }
}
exports.PtsV2PayoutsPost201ResponseMerchantInformation = PtsV2PayoutsPost201ResponseMerchantInformation;
PtsV2PayoutsPost201ResponseMerchantInformation.discriminator = undefined;
PtsV2PayoutsPost201ResponseMerchantInformation.attributeTypeMap = [
    {
        "name": "merchantDescriptor",
        "baseName": "merchantDescriptor",
        "type": "PtsV2PayoutsPost201ResponseMerchantInformationMerchantDescriptor"
    }
];
class PtsV2PayoutsPost201ResponseMerchantInformationMerchantDescriptor {
    static getAttributeTypeMap() {
        return PtsV2PayoutsPost201ResponseMerchantInformationMerchantDescriptor.attributeTypeMap;
    }
}
exports.PtsV2PayoutsPost201ResponseMerchantInformationMerchantDescriptor = PtsV2PayoutsPost201ResponseMerchantInformationMerchantDescriptor;
PtsV2PayoutsPost201ResponseMerchantInformationMerchantDescriptor.discriminator = undefined;
PtsV2PayoutsPost201ResponseMerchantInformationMerchantDescriptor.attributeTypeMap = [
    {
        "name": "name",
        "baseName": "name",
        "type": "string"
    },
    {
        "name": "locality",
        "baseName": "locality",
        "type": "string"
    },
    {
        "name": "country",
        "baseName": "country",
        "type": "string"
    }
];
class PtsV2PayoutsPost201ResponseOrderInformation {
    static getAttributeTypeMap() {
        return PtsV2PayoutsPost201ResponseOrderInformation.attributeTypeMap;
    }
}
exports.PtsV2PayoutsPost201ResponseOrderInformation = PtsV2PayoutsPost201ResponseOrderInformation;
PtsV2PayoutsPost201ResponseOrderInformation.discriminator = undefined;
PtsV2PayoutsPost201ResponseOrderInformation.attributeTypeMap = [
    {
        "name": "amountDetails",
        "baseName": "amountDetails",
        "type": "PtsV2PayoutsPost201ResponseOrderInformationAmountDetails"
    }
];
class PtsV2PayoutsPost201ResponseOrderInformationAmountDetails {
    static getAttributeTypeMap() {
        return PtsV2PayoutsPost201ResponseOrderInformationAmountDetails.attributeTypeMap;
    }
}
exports.PtsV2PayoutsPost201ResponseOrderInformationAmountDetails = PtsV2PayoutsPost201ResponseOrderInformationAmountDetails;
PtsV2PayoutsPost201ResponseOrderInformationAmountDetails.discriminator = undefined;
PtsV2PayoutsPost201ResponseOrderInformationAmountDetails.attributeTypeMap = [
    {
        "name": "totalAmount",
        "baseName": "totalAmount",
        "type": "string"
    },
    {
        "name": "currency",
        "baseName": "currency",
        "type": "string"
    },
    {
        "name": "settlementAmount",
        "baseName": "settlementAmount",
        "type": "string"
    },
    {
        "name": "settlementCurrency",
        "baseName": "settlementCurrency",
        "type": "string"
    }
];
class PtsV2PayoutsPost201ResponseProcessingInformation {
    static getAttributeTypeMap() {
        return PtsV2PayoutsPost201ResponseProcessingInformation.attributeTypeMap;
    }
}
exports.PtsV2PayoutsPost201ResponseProcessingInformation = PtsV2PayoutsPost201ResponseProcessingInformation;
PtsV2PayoutsPost201ResponseProcessingInformation.discriminator = undefined;
PtsV2PayoutsPost201ResponseProcessingInformation.attributeTypeMap = [
    {
        "name": "purchaseOptions",
        "baseName": "purchaseOptions",
        "type": "Ptsv2payoutsProcessingInformationPurchaseOptions"
    }
];
class PtsV2PayoutsPost201ResponseProcessorInformation {
    static getAttributeTypeMap() {
        return PtsV2PayoutsPost201ResponseProcessorInformation.attributeTypeMap;
    }
}
exports.PtsV2PayoutsPost201ResponseProcessorInformation = PtsV2PayoutsPost201ResponseProcessorInformation;
PtsV2PayoutsPost201ResponseProcessorInformation.discriminator = undefined;
PtsV2PayoutsPost201ResponseProcessorInformation.attributeTypeMap = [
    {
        "name": "approvalCode",
        "baseName": "approvalCode",
        "type": "string"
    },
    {
        "name": "responseCode",
        "baseName": "responseCode",
        "type": "string"
    },
    {
        "name": "transactionId",
        "baseName": "transactionId",
        "type": "string"
    },
    {
        "name": "systemTraceAuditNumber",
        "baseName": "systemTraceAuditNumber",
        "type": "string"
    },
    {
        "name": "responseCodeSource",
        "baseName": "responseCodeSource",
        "type": "string"
    }
];
class PtsV2PayoutsPost201ResponseRecipientInformation {
    static getAttributeTypeMap() {
        return PtsV2PayoutsPost201ResponseRecipientInformation.attributeTypeMap;
    }
}
exports.PtsV2PayoutsPost201ResponseRecipientInformation = PtsV2PayoutsPost201ResponseRecipientInformation;
PtsV2PayoutsPost201ResponseRecipientInformation.discriminator = undefined;
PtsV2PayoutsPost201ResponseRecipientInformation.attributeTypeMap = [
    {
        "name": "card",
        "baseName": "card",
        "type": "PtsV2PayoutsPost201ResponseRecipientInformationCard"
    }
];
class PtsV2PayoutsPost201ResponseRecipientInformationCard {
    static getAttributeTypeMap() {
        return PtsV2PayoutsPost201ResponseRecipientInformationCard.attributeTypeMap;
    }
}
exports.PtsV2PayoutsPost201ResponseRecipientInformationCard = PtsV2PayoutsPost201ResponseRecipientInformationCard;
PtsV2PayoutsPost201ResponseRecipientInformationCard.discriminator = undefined;
PtsV2PayoutsPost201ResponseRecipientInformationCard.attributeTypeMap = [
    {
        "name": "balance",
        "baseName": "balance",
        "type": "string"
    },
    {
        "name": "currency",
        "baseName": "currency",
        "type": "string"
    }
];
class PtsV2PayoutsPost400Response {
    static getAttributeTypeMap() {
        return PtsV2PayoutsPost400Response.attributeTypeMap;
    }
}
exports.PtsV2PayoutsPost400Response = PtsV2PayoutsPost400Response;
PtsV2PayoutsPost400Response.discriminator = undefined;
PtsV2PayoutsPost400Response.attributeTypeMap = [
    {
        "name": "submitTimeUtc",
        "baseName": "submitTimeUtc",
        "type": "string"
    },
    {
        "name": "status",
        "baseName": "status",
        "type": "string"
    },
    {
        "name": "reason",
        "baseName": "reason",
        "type": "string"
    },
    {
        "name": "message",
        "baseName": "message",
        "type": "string"
    },
    {
        "name": "details",
        "baseName": "details",
        "type": "Array<PtsV2PaymentsPost201ResponseErrorInformationDetails>"
    }
];
class PtsV2RetrievePaymentTokenGet400Response {
    static getAttributeTypeMap() {
        return PtsV2RetrievePaymentTokenGet400Response.attributeTypeMap;
    }
}
exports.PtsV2RetrievePaymentTokenGet400Response = PtsV2RetrievePaymentTokenGet400Response;
PtsV2RetrievePaymentTokenGet400Response.discriminator = undefined;
PtsV2RetrievePaymentTokenGet400Response.attributeTypeMap = [
    {
        "name": "id",
        "baseName": "id",
        "type": "string"
    },
    {
        "name": "submitTimeUtc",
        "baseName": "submitTimeUtc",
        "type": "string"
    },
    {
        "name": "status",
        "baseName": "status",
        "type": "string"
    },
    {
        "name": "reason",
        "baseName": "reason",
        "type": "string"
    },
    {
        "name": "message",
        "baseName": "message",
        "type": "string"
    },
    {
        "name": "details",
        "baseName": "details",
        "type": "Array<PtsV2PaymentsPost201ResponseErrorInformationDetails>"
    }
];
class PtsV2RetrievePaymentTokenGet502Response {
    static getAttributeTypeMap() {
        return PtsV2RetrievePaymentTokenGet502Response.attributeTypeMap;
    }
}
exports.PtsV2RetrievePaymentTokenGet502Response = PtsV2RetrievePaymentTokenGet502Response;
PtsV2RetrievePaymentTokenGet502Response.discriminator = undefined;
PtsV2RetrievePaymentTokenGet502Response.attributeTypeMap = [
    {
        "name": "submitTimeUtc",
        "baseName": "submitTimeUtc",
        "type": "string"
    },
    {
        "name": "status",
        "baseName": "status",
        "type": "string"
    },
    {
        "name": "reason",
        "baseName": "reason",
        "type": "string"
    },
    {
        "name": "message",
        "baseName": "message",
        "type": "string"
    },
    {
        "name": "id",
        "baseName": "id",
        "type": "string"
    }
];
class PtsV2UpdateOrderPatch201Response {
    static getAttributeTypeMap() {
        return PtsV2UpdateOrderPatch201Response.attributeTypeMap;
    }
}
exports.PtsV2UpdateOrderPatch201Response = PtsV2UpdateOrderPatch201Response;
PtsV2UpdateOrderPatch201Response.discriminator = undefined;
PtsV2UpdateOrderPatch201Response.attributeTypeMap = [
    {
        "name": "status",
        "baseName": "status",
        "type": "string"
    },
    {
        "name": "processorInformation",
        "baseName": "processorInformation",
        "type": "PtsV2CreateOrderPost201ResponseProcessorInformation"
    }
];
class Ptsv2billingagreementsAggregatorInformation {
    static getAttributeTypeMap() {
        return Ptsv2billingagreementsAggregatorInformation.attributeTypeMap;
    }
}
exports.Ptsv2billingagreementsAggregatorInformation = Ptsv2billingagreementsAggregatorInformation;
Ptsv2billingagreementsAggregatorInformation.discriminator = undefined;
Ptsv2billingagreementsAggregatorInformation.attributeTypeMap = [
    {
        "name": "name",
        "baseName": "name",
        "type": "string"
    },
    {
        "name": "subMerchant",
        "baseName": "subMerchant",
        "type": "Ptsv2paymentsAggregatorInformationSubMerchant"
    }
];
class Ptsv2billingagreementsAgreementInformation {
    static getAttributeTypeMap() {
        return Ptsv2billingagreementsAgreementInformation.attributeTypeMap;
    }
}
exports.Ptsv2billingagreementsAgreementInformation = Ptsv2billingagreementsAgreementInformation;
Ptsv2billingagreementsAgreementInformation.discriminator = undefined;
Ptsv2billingagreementsAgreementInformation.attributeTypeMap = [
    {
        "name": "id",
        "baseName": "id",
        "type": "string"
    },
    {
        "name": "dateSigned",
        "baseName": "dateSigned",
        "type": "string"
    }
];
class Ptsv2billingagreementsBuyerInformation {
    static getAttributeTypeMap() {
        return Ptsv2billingagreementsBuyerInformation.attributeTypeMap;
    }
}
exports.Ptsv2billingagreementsBuyerInformation = Ptsv2billingagreementsBuyerInformation;
Ptsv2billingagreementsBuyerInformation.discriminator = undefined;
Ptsv2billingagreementsBuyerInformation.attributeTypeMap = [
    {
        "name": "merchantCustomerId",
        "baseName": "merchantCustomerId",
        "type": "string"
    },
    {
        "name": "dateOfBirth",
        "baseName": "dateOfBirth",
        "type": "string"
    },
    {
        "name": "gender",
        "baseName": "gender",
        "type": "string"
    },
    {
        "name": "language",
        "baseName": "language",
        "type": "string"
    }
];
class Ptsv2billingagreementsClientReferenceInformation {
    static getAttributeTypeMap() {
        return Ptsv2billingagreementsClientReferenceInformation.attributeTypeMap;
    }
}
exports.Ptsv2billingagreementsClientReferenceInformation = Ptsv2billingagreementsClientReferenceInformation;
Ptsv2billingagreementsClientReferenceInformation.discriminator = undefined;
Ptsv2billingagreementsClientReferenceInformation.attributeTypeMap = [
    {
        "name": "code",
        "baseName": "code",
        "type": "string"
    },
    {
        "name": "reconciliationId",
        "baseName": "reconciliationId",
        "type": "string"
    },
    {
        "name": "pausedRequestId",
        "baseName": "pausedRequestId",
        "type": "string"
    },
    {
        "name": "transactionId",
        "baseName": "transactionId",
        "type": "string"
    },
    {
        "name": "comments",
        "baseName": "comments",
        "type": "string"
    },
    {
        "name": "partner",
        "baseName": "partner",
        "type": "Ptsv2paymentsClientReferenceInformationPartner"
    },
    {
        "name": "applicationName",
        "baseName": "applicationName",
        "type": "string"
    },
    {
        "name": "applicationVersion",
        "baseName": "applicationVersion",
        "type": "string"
    },
    {
        "name": "applicationUser",
        "baseName": "applicationUser",
        "type": "string"
    }
];
class Ptsv2billingagreementsConsumerAuthenticationInformation {
    static getAttributeTypeMap() {
        return Ptsv2billingagreementsConsumerAuthenticationInformation.attributeTypeMap;
    }
}
exports.Ptsv2billingagreementsConsumerAuthenticationInformation = Ptsv2billingagreementsConsumerAuthenticationInformation;
Ptsv2billingagreementsConsumerAuthenticationInformation.discriminator = undefined;
Ptsv2billingagreementsConsumerAuthenticationInformation.attributeTypeMap = [
    {
        "name": "authenticationTransactionContextId",
        "baseName": "authenticationTransactionContextId",
        "type": "string"
    },
    {
        "name": "cavv",
        "baseName": "cavv",
        "type": "string"
    },
    {
        "name": "transactionToken",
        "baseName": "transactionToken",
        "type": "string"
    },
    {
        "name": "xid",
        "baseName": "xid",
        "type": "string"
    }
];
class Ptsv2billingagreementsDeviceInformation {
    static getAttributeTypeMap() {
        return Ptsv2billingagreementsDeviceInformation.attributeTypeMap;
    }
}
exports.Ptsv2billingagreementsDeviceInformation = Ptsv2billingagreementsDeviceInformation;
Ptsv2billingagreementsDeviceInformation.discriminator = undefined;
Ptsv2billingagreementsDeviceInformation.attributeTypeMap = [
    {
        "name": "httpAcceptBrowserValue",
        "baseName": "httpAcceptBrowserValue",
        "type": "string"
    },
    {
        "name": "ipAddress",
        "baseName": "ipAddress",
        "type": "string"
    },
    {
        "name": "userAgentBrowserValue",
        "baseName": "userAgentBrowserValue",
        "type": "string"
    }
];
class Ptsv2billingagreementsInstallmentInformation {
    static getAttributeTypeMap() {
        return Ptsv2billingagreementsInstallmentInformation.attributeTypeMap;
    }
}
exports.Ptsv2billingagreementsInstallmentInformation = Ptsv2billingagreementsInstallmentInformation;
Ptsv2billingagreementsInstallmentInformation.discriminator = undefined;
Ptsv2billingagreementsInstallmentInformation.attributeTypeMap = [
    {
        "name": "alertPreference",
        "baseName": "alertPreference",
        "type": "string"
    },
    {
        "name": "firstInstallmentDate",
        "baseName": "firstInstallmentDate",
        "type": "string"
    },
    {
        "name": "identifier",
        "baseName": "identifier",
        "type": "string"
    },
    {
        "name": "lastInstallmentDate",
        "baseName": "lastInstallmentDate",
        "type": "string"
    },
    {
        "name": "maxAmount",
        "baseName": "maxAmount",
        "type": "string"
    },
    {
        "name": "minAmount",
        "baseName": "minAmount",
        "type": "string"
    },
    {
        "name": "paymentType",
        "baseName": "paymentType",
        "type": "string"
    },
    {
        "name": "preferredDay",
        "baseName": "preferredDay",
        "type": "string"
    },
    {
        "name": "sequence",
        "baseName": "sequence",
        "type": "number"
    }
];
class Ptsv2billingagreementsMerchantInformation {
    static getAttributeTypeMap() {
        return Ptsv2billingagreementsMerchantInformation.attributeTypeMap;
    }
}
exports.Ptsv2billingagreementsMerchantInformation = Ptsv2billingagreementsMerchantInformation;
Ptsv2billingagreementsMerchantInformation.discriminator = undefined;
Ptsv2billingagreementsMerchantInformation.attributeTypeMap = [
    {
        "name": "merchantDescriptor",
        "baseName": "merchantDescriptor",
        "type": "Ptsv2billingagreementsMerchantInformationMerchantDescriptor"
    },
    {
        "name": "categoryCode",
        "baseName": "categoryCode",
        "type": "number"
    },
    {
        "name": "administrativeArea",
        "baseName": "administrativeArea",
        "type": "string"
    },
    {
        "name": "transactionLocalDateTime",
        "baseName": "transactionLocalDateTime",
        "type": "string"
    },
    {
        "name": "cancelUrl",
        "baseName": "cancelUrl",
        "type": "string"
    },
    {
        "name": "successUrl",
        "baseName": "successUrl",
        "type": "string"
    },
    {
        "name": "failureUrl",
        "baseName": "failureUrl",
        "type": "string"
    }
];
class Ptsv2billingagreementsMerchantInformationMerchantDescriptor {
    static getAttributeTypeMap() {
        return Ptsv2billingagreementsMerchantInformationMerchantDescriptor.attributeTypeMap;
    }
}
exports.Ptsv2billingagreementsMerchantInformationMerchantDescriptor = Ptsv2billingagreementsMerchantInformationMerchantDescriptor;
Ptsv2billingagreementsMerchantInformationMerchantDescriptor.discriminator = undefined;
Ptsv2billingagreementsMerchantInformationMerchantDescriptor.attributeTypeMap = [
    {
        "name": "postalCode",
        "baseName": "postalCode",
        "type": "string"
    },
    {
        "name": "contact",
        "baseName": "contact",
        "type": "string"
    },
    {
        "name": "locality",
        "baseName": "locality",
        "type": "string"
    },
    {
        "name": "name",
        "baseName": "name",
        "type": "string"
    }
];
class Ptsv2billingagreementsOrderInformation {
    static getAttributeTypeMap() {
        return Ptsv2billingagreementsOrderInformation.attributeTypeMap;
    }
}
exports.Ptsv2billingagreementsOrderInformation = Ptsv2billingagreementsOrderInformation;
Ptsv2billingagreementsOrderInformation.discriminator = undefined;
Ptsv2billingagreementsOrderInformation.attributeTypeMap = [
    {
        "name": "amountDetails",
        "baseName": "amountDetails",
        "type": "Ptsv2paymentsidreversalsReversalInformationAmountDetails"
    },
    {
        "name": "billTo",
        "baseName": "billTo",
        "type": "Ptsv2billingagreementsOrderInformationBillTo"
    }
];
class Ptsv2billingagreementsOrderInformationBillTo {
    static getAttributeTypeMap() {
        return Ptsv2billingagreementsOrderInformationBillTo.attributeTypeMap;
    }
}
exports.Ptsv2billingagreementsOrderInformationBillTo = Ptsv2billingagreementsOrderInformationBillTo;
Ptsv2billingagreementsOrderInformationBillTo.discriminator = undefined;
Ptsv2billingagreementsOrderInformationBillTo.attributeTypeMap = [
    {
        "name": "address1",
        "baseName": "address1",
        "type": "string"
    },
    {
        "name": "address2",
        "baseName": "address2",
        "type": "string"
    },
    {
        "name": "administrativeArea",
        "baseName": "administrativeArea",
        "type": "string"
    },
    {
        "name": "buildingNumber",
        "baseName": "buildingNumber",
        "type": "string"
    },
    {
        "name": "company",
        "baseName": "company",
        "type": "string"
    },
    {
        "name": "country",
        "baseName": "country",
        "type": "string"
    },
    {
        "name": "county",
        "baseName": "county",
        "type": "string"
    },
    {
        "name": "district",
        "baseName": "district",
        "type": "string"
    },
    {
        "name": "email",
        "baseName": "email",
        "type": "string"
    },
    {
        "name": "firstName",
        "baseName": "firstName",
        "type": "string"
    },
    {
        "name": "middleName",
        "baseName": "middleName",
        "type": "string"
    },
    {
        "name": "lastName",
        "baseName": "lastName",
        "type": "string"
    },
    {
        "name": "locality",
        "baseName": "locality",
        "type": "string"
    },
    {
        "name": "phoneNumber",
        "baseName": "phoneNumber",
        "type": "string"
    },
    {
        "name": "postalCode",
        "baseName": "postalCode",
        "type": "string"
    },
    {
        "name": "title",
        "baseName": "title",
        "type": "string"
    }
];
class Ptsv2billingagreementsPaymentInformation {
    static getAttributeTypeMap() {
        return Ptsv2billingagreementsPaymentInformation.attributeTypeMap;
    }
}
exports.Ptsv2billingagreementsPaymentInformation = Ptsv2billingagreementsPaymentInformation;
Ptsv2billingagreementsPaymentInformation.discriminator = undefined;
Ptsv2billingagreementsPaymentInformation.attributeTypeMap = [
    {
        "name": "card",
        "baseName": "card",
        "type": "Ptsv2billingagreementsPaymentInformationCard"
    },
    {
        "name": "tokenizedCard",
        "baseName": "tokenizedCard",
        "type": "Ptsv2billingagreementsPaymentInformationTokenizedCard"
    },
    {
        "name": "paymentType",
        "baseName": "paymentType",
        "type": "Ptsv2billingagreementsPaymentInformationPaymentType"
    },
    {
        "name": "bank",
        "baseName": "bank",
        "type": "Ptsv2billingagreementsPaymentInformationBank"
    }
];
class Ptsv2billingagreementsPaymentInformationBank {
    static getAttributeTypeMap() {
        return Ptsv2billingagreementsPaymentInformationBank.attributeTypeMap;
    }
}
exports.Ptsv2billingagreementsPaymentInformationBank = Ptsv2billingagreementsPaymentInformationBank;
Ptsv2billingagreementsPaymentInformationBank.discriminator = undefined;
Ptsv2billingagreementsPaymentInformationBank.attributeTypeMap = [
    {
        "name": "account",
        "baseName": "account",
        "type": "Ptsv2billingagreementsPaymentInformationBankAccount"
    },
    {
        "name": "iban",
        "baseName": "iban",
        "type": "string"
    },
    {
        "name": "swiftCode",
        "baseName": "swiftCode",
        "type": "string"
    },
    {
        "name": "scheme",
        "baseName": "scheme",
        "type": "string"
    }
];
class Ptsv2billingagreementsPaymentInformationBankAccount {
    static getAttributeTypeMap() {
        return Ptsv2billingagreementsPaymentInformationBankAccount.attributeTypeMap;
    }
}
exports.Ptsv2billingagreementsPaymentInformationBankAccount = Ptsv2billingagreementsPaymentInformationBankAccount;
Ptsv2billingagreementsPaymentInformationBankAccount.discriminator = undefined;
Ptsv2billingagreementsPaymentInformationBankAccount.attributeTypeMap = [
    {
        "name": "number",
        "baseName": "number",
        "type": "string"
    }
];
class Ptsv2billingagreementsPaymentInformationCard {
    static getAttributeTypeMap() {
        return Ptsv2billingagreementsPaymentInformationCard.attributeTypeMap;
    }
}
exports.Ptsv2billingagreementsPaymentInformationCard = Ptsv2billingagreementsPaymentInformationCard;
Ptsv2billingagreementsPaymentInformationCard.discriminator = undefined;
Ptsv2billingagreementsPaymentInformationCard.attributeTypeMap = [
    {
        "name": "expirationMonth",
        "baseName": "expirationMonth",
        "type": "string"
    },
    {
        "name": "expirationYear",
        "baseName": "expirationYear",
        "type": "string"
    },
    {
        "name": "number",
        "baseName": "number",
        "type": "string"
    },
    {
        "name": "securityCode",
        "baseName": "securityCode",
        "type": "string"
    },
    {
        "name": "type",
        "baseName": "type",
        "type": "string"
    }
];
class Ptsv2billingagreementsPaymentInformationPaymentType {
    static getAttributeTypeMap() {
        return Ptsv2billingagreementsPaymentInformationPaymentType.attributeTypeMap;
    }
}
exports.Ptsv2billingagreementsPaymentInformationPaymentType = Ptsv2billingagreementsPaymentInformationPaymentType;
Ptsv2billingagreementsPaymentInformationPaymentType.discriminator = undefined;
Ptsv2billingagreementsPaymentInformationPaymentType.attributeTypeMap = [
    {
        "name": "method",
        "baseName": "method",
        "type": "Ptsv2billingagreementsPaymentInformationPaymentTypeMethod"
    },
    {
        "name": "name",
        "baseName": "name",
        "type": "string"
    }
];
class Ptsv2billingagreementsPaymentInformationPaymentTypeMethod {
    static getAttributeTypeMap() {
        return Ptsv2billingagreementsPaymentInformationPaymentTypeMethod.attributeTypeMap;
    }
}
exports.Ptsv2billingagreementsPaymentInformationPaymentTypeMethod = Ptsv2billingagreementsPaymentInformationPaymentTypeMethod;
Ptsv2billingagreementsPaymentInformationPaymentTypeMethod.discriminator = undefined;
Ptsv2billingagreementsPaymentInformationPaymentTypeMethod.attributeTypeMap = [
    {
        "name": "name",
        "baseName": "name",
        "type": "string"
    }
];
class Ptsv2billingagreementsPaymentInformationTokenizedCard {
    static getAttributeTypeMap() {
        return Ptsv2billingagreementsPaymentInformationTokenizedCard.attributeTypeMap;
    }
}
exports.Ptsv2billingagreementsPaymentInformationTokenizedCard = Ptsv2billingagreementsPaymentInformationTokenizedCard;
Ptsv2billingagreementsPaymentInformationTokenizedCard.discriminator = undefined;
Ptsv2billingagreementsPaymentInformationTokenizedCard.attributeTypeMap = [
    {
        "name": "cryptogram",
        "baseName": "cryptogram",
        "type": "string"
    },
    {
        "name": "expirationMonth",
        "baseName": "expirationMonth",
        "type": "string"
    },
    {
        "name": "expirationYear",
        "baseName": "expirationYear",
        "type": "string"
    },
    {
        "name": "number",
        "baseName": "number",
        "type": "string"
    },
    {
        "name": "transactionType",
        "baseName": "transactionType",
        "type": "string"
    },
    {
        "name": "type",
        "baseName": "type",
        "type": "string"
    }
];
class Ptsv2billingagreementsProcessingInformation {
    static getAttributeTypeMap() {
        return Ptsv2billingagreementsProcessingInformation.attributeTypeMap;
    }
}
exports.Ptsv2billingagreementsProcessingInformation = Ptsv2billingagreementsProcessingInformation;
Ptsv2billingagreementsProcessingInformation.discriminator = undefined;
Ptsv2billingagreementsProcessingInformation.attributeTypeMap = [
    {
        "name": "commerceIndicator",
        "baseName": "commerceIndicator",
        "type": "string"
    },
    {
        "name": "actionList",
        "baseName": "actionList",
        "type": "Array<string>"
    }
];
class Ptsv2billingagreementsidAgreementInformation {
    static getAttributeTypeMap() {
        return Ptsv2billingagreementsidAgreementInformation.attributeTypeMap;
    }
}
exports.Ptsv2billingagreementsidAgreementInformation = Ptsv2billingagreementsidAgreementInformation;
Ptsv2billingagreementsidAgreementInformation.discriminator = undefined;
Ptsv2billingagreementsidAgreementInformation.attributeTypeMap = [
    {
        "name": "id",
        "baseName": "id",
        "type": "string"
    },
    {
        "name": "eSignIndicator",
        "baseName": "eSignIndicator",
        "type": "string"
    }
];
class Ptsv2billingagreementsidBuyerInformation {
    static getAttributeTypeMap() {
        return Ptsv2billingagreementsidBuyerInformation.attributeTypeMap;
    }
}
exports.Ptsv2billingagreementsidBuyerInformation = Ptsv2billingagreementsidBuyerInformation;
Ptsv2billingagreementsidBuyerInformation.discriminator = undefined;
Ptsv2billingagreementsidBuyerInformation.attributeTypeMap = [
    {
        "name": "dateOfBirth",
        "baseName": "dateOfBirth",
        "type": "string"
    },
    {
        "name": "gender",
        "baseName": "gender",
        "type": "string"
    },
    {
        "name": "language",
        "baseName": "language",
        "type": "string"
    }
];
class Ptsv2billingagreementsidProcessingInformation {
    static getAttributeTypeMap() {
        return Ptsv2billingagreementsidProcessingInformation.attributeTypeMap;
    }
}
exports.Ptsv2billingagreementsidProcessingInformation = Ptsv2billingagreementsidProcessingInformation;
Ptsv2billingagreementsidProcessingInformation.discriminator = undefined;
Ptsv2billingagreementsidProcessingInformation.attributeTypeMap = [
    {
        "name": "commerceIndicator",
        "baseName": "commerceIndicator",
        "type": "string"
    },
    {
        "name": "actionList",
        "baseName": "actionList",
        "type": "Array<string>"
    }
];
class Ptsv2creditsInstallmentInformation {
    static getAttributeTypeMap() {
        return Ptsv2creditsInstallmentInformation.attributeTypeMap;
    }
}
exports.Ptsv2creditsInstallmentInformation = Ptsv2creditsInstallmentInformation;
Ptsv2creditsInstallmentInformation.discriminator = undefined;
Ptsv2creditsInstallmentInformation.attributeTypeMap = [
    {
        "name": "planType",
        "baseName": "planType",
        "type": "string"
    }
];
class Ptsv2creditsProcessingInformation {
    static getAttributeTypeMap() {
        return Ptsv2creditsProcessingInformation.attributeTypeMap;
    }
}
exports.Ptsv2creditsProcessingInformation = Ptsv2creditsProcessingInformation;
Ptsv2creditsProcessingInformation.discriminator = undefined;
Ptsv2creditsProcessingInformation.attributeTypeMap = [
    {
        "name": "commerceIndicator",
        "baseName": "commerceIndicator",
        "type": "string"
    },
    {
        "name": "processorId",
        "baseName": "processorId",
        "type": "string"
    },
    {
        "name": "paymentSolution",
        "baseName": "paymentSolution",
        "type": "string"
    },
    {
        "name": "reconciliationId",
        "baseName": "reconciliationId",
        "type": "string"
    },
    {
        "name": "linkId",
        "baseName": "linkId",
        "type": "string"
    },
    {
        "name": "reportGroup",
        "baseName": "reportGroup",
        "type": "string"
    },
    {
        "name": "visaCheckoutId",
        "baseName": "visaCheckoutId",
        "type": "string"
    },
    {
        "name": "purchaseLevel",
        "baseName": "purchaseLevel",
        "type": "string"
    },
    {
        "name": "industryDataType",
        "baseName": "industryDataType",
        "type": "string"
    },
    {
        "name": "walletType",
        "baseName": "walletType",
        "type": "string"
    },
    {
        "name": "nationalNetDomesticData",
        "baseName": "nationalNetDomesticData",
        "type": "string"
    },
    {
        "name": "networkRoutingOrder",
        "baseName": "networkRoutingOrder",
        "type": "string"
    },
    {
        "name": "recurringOptions",
        "baseName": "recurringOptions",
        "type": "Ptsv2paymentsidrefundsProcessingInformationRecurringOptions"
    },
    {
        "name": "bankTransferOptions",
        "baseName": "bankTransferOptions",
        "type": "Ptsv2creditsProcessingInformationBankTransferOptions"
    },
    {
        "name": "purchaseOptions",
        "baseName": "purchaseOptions",
        "type": "Ptsv2creditsProcessingInformationPurchaseOptions"
    },
    {
        "name": "electronicBenefitsTransfer",
        "baseName": "electronicBenefitsTransfer",
        "type": "Ptsv2creditsProcessingInformationElectronicBenefitsTransfer"
    },
    {
        "name": "loanOptions",
        "baseName": "loanOptions",
        "type": "Ptsv2paymentsProcessingInformationLoanOptions"
    },
    {
        "name": "japanPaymentOptions",
        "baseName": "japanPaymentOptions",
        "type": "Ptsv2creditsProcessingInformationJapanPaymentOptions"
    },
    {
        "name": "refundOptions",
        "baseName": "refundOptions",
        "type": "Ptsv2creditsProcessingInformationRefundOptions"
    }
];
class Ptsv2creditsProcessingInformationBankTransferOptions {
    static getAttributeTypeMap() {
        return Ptsv2creditsProcessingInformationBankTransferOptions.attributeTypeMap;
    }
}
exports.Ptsv2creditsProcessingInformationBankTransferOptions = Ptsv2creditsProcessingInformationBankTransferOptions;
Ptsv2creditsProcessingInformationBankTransferOptions.discriminator = undefined;
Ptsv2creditsProcessingInformationBankTransferOptions.attributeTypeMap = [
    {
        "name": "customerMemo",
        "baseName": "customerMemo",
        "type": "string"
    },
    {
        "name": "secCode",
        "baseName": "secCode",
        "type": "string"
    },
    {
        "name": "terminalCity",
        "baseName": "terminalCity",
        "type": "string"
    },
    {
        "name": "terminalState",
        "baseName": "terminalState",
        "type": "string"
    },
    {
        "name": "effectiveDate",
        "baseName": "effectiveDate",
        "type": "string"
    },
    {
        "name": "partialPaymentId",
        "baseName": "partialPaymentId",
        "type": "string"
    },
    {
        "name": "settlementMethod",
        "baseName": "settlementMethod",
        "type": "string"
    }
];
class Ptsv2creditsProcessingInformationElectronicBenefitsTransfer {
    static getAttributeTypeMap() {
        return Ptsv2creditsProcessingInformationElectronicBenefitsTransfer.attributeTypeMap;
    }
}
exports.Ptsv2creditsProcessingInformationElectronicBenefitsTransfer = Ptsv2creditsProcessingInformationElectronicBenefitsTransfer;
Ptsv2creditsProcessingInformationElectronicBenefitsTransfer.discriminator = undefined;
Ptsv2creditsProcessingInformationElectronicBenefitsTransfer.attributeTypeMap = [
    {
        "name": "category",
        "baseName": "category",
        "type": "string"
    }
];
class Ptsv2creditsProcessingInformationJapanPaymentOptions {
    static getAttributeTypeMap() {
        return Ptsv2creditsProcessingInformationJapanPaymentOptions.attributeTypeMap;
    }
}
exports.Ptsv2creditsProcessingInformationJapanPaymentOptions = Ptsv2creditsProcessingInformationJapanPaymentOptions;
Ptsv2creditsProcessingInformationJapanPaymentOptions.discriminator = undefined;
Ptsv2creditsProcessingInformationJapanPaymentOptions.attributeTypeMap = [
    {
        "name": "paymentMethod",
        "baseName": "paymentMethod",
        "type": "string"
    },
    {
        "name": "installments",
        "baseName": "installments",
        "type": "string"
    }
];
class Ptsv2creditsProcessingInformationPurchaseOptions {
    static getAttributeTypeMap() {
        return Ptsv2creditsProcessingInformationPurchaseOptions.attributeTypeMap;
    }
}
exports.Ptsv2creditsProcessingInformationPurchaseOptions = Ptsv2creditsProcessingInformationPurchaseOptions;
Ptsv2creditsProcessingInformationPurchaseOptions.discriminator = undefined;
Ptsv2creditsProcessingInformationPurchaseOptions.attributeTypeMap = [
    {
        "name": "isElectronicBenefitsTransfer",
        "baseName": "isElectronicBenefitsTransfer",
        "type": "boolean"
    }
];
class Ptsv2creditsProcessingInformationRefundOptions {
    static getAttributeTypeMap() {
        return Ptsv2creditsProcessingInformationRefundOptions.attributeTypeMap;
    }
}
exports.Ptsv2creditsProcessingInformationRefundOptions = Ptsv2creditsProcessingInformationRefundOptions;
Ptsv2creditsProcessingInformationRefundOptions.discriminator = undefined;
Ptsv2creditsProcessingInformationRefundOptions.attributeTypeMap = [
    {
        "name": "reason",
        "baseName": "reason",
        "type": "string"
    }
];
class Ptsv2creditsRecipientInformation {
    static getAttributeTypeMap() {
        return Ptsv2creditsRecipientInformation.attributeTypeMap;
    }
}
exports.Ptsv2creditsRecipientInformation = Ptsv2creditsRecipientInformation;
Ptsv2creditsRecipientInformation.discriminator = undefined;
Ptsv2creditsRecipientInformation.attributeTypeMap = [
    {
        "name": "firstName",
        "baseName": "firstName",
        "type": "string"
    },
    {
        "name": "lastName",
        "baseName": "lastName",
        "type": "string"
    }
];
class Ptsv2creditsSenderInformation {
    static getAttributeTypeMap() {
        return Ptsv2creditsSenderInformation.attributeTypeMap;
    }
}
exports.Ptsv2creditsSenderInformation = Ptsv2creditsSenderInformation;
Ptsv2creditsSenderInformation.discriminator = undefined;
Ptsv2creditsSenderInformation.attributeTypeMap = [
    {
        "name": "firstName",
        "baseName": "firstName",
        "type": "string"
    },
    {
        "name": "lastName",
        "baseName": "lastName",
        "type": "string"
    },
    {
        "name": "address1",
        "baseName": "address1",
        "type": "string"
    },
    {
        "name": "locality",
        "baseName": "locality",
        "type": "string"
    },
    {
        "name": "countryCode",
        "baseName": "countryCode",
        "type": "string"
    },
    {
        "name": "account",
        "baseName": "account",
        "type": "Ptsv2creditsSenderInformationAccount"
    }
];
class Ptsv2creditsSenderInformationAccount {
    static getAttributeTypeMap() {
        return Ptsv2creditsSenderInformationAccount.attributeTypeMap;
    }
}
exports.Ptsv2creditsSenderInformationAccount = Ptsv2creditsSenderInformationAccount;
Ptsv2creditsSenderInformationAccount.discriminator = undefined;
Ptsv2creditsSenderInformationAccount.attributeTypeMap = [
    {
        "name": "number",
        "baseName": "number",
        "type": "string"
    },
    {
        "name": "fundsSource",
        "baseName": "fundsSource",
        "type": "string"
    }
];
class Ptsv2intentsClientReferenceInformation {
    static getAttributeTypeMap() {
        return Ptsv2intentsClientReferenceInformation.attributeTypeMap;
    }
}
exports.Ptsv2intentsClientReferenceInformation = Ptsv2intentsClientReferenceInformation;
Ptsv2intentsClientReferenceInformation.discriminator = undefined;
Ptsv2intentsClientReferenceInformation.attributeTypeMap = [
    {
        "name": "reconciliationId",
        "baseName": "reconciliationId",
        "type": "string"
    }
];
class Ptsv2intentsEventInformation {
    static getAttributeTypeMap() {
        return Ptsv2intentsEventInformation.attributeTypeMap;
    }
}
exports.Ptsv2intentsEventInformation = Ptsv2intentsEventInformation;
Ptsv2intentsEventInformation.discriminator = undefined;
Ptsv2intentsEventInformation.attributeTypeMap = [
    {
        "name": "date",
        "baseName": "date",
        "type": "string"
    },
    {
        "name": "type",
        "baseName": "type",
        "type": "string"
    },
    {
        "name": "totalTickets",
        "baseName": "totalTickets",
        "type": "string"
    }
];
class Ptsv2intentsMerchantInformation {
    static getAttributeTypeMap() {
        return Ptsv2intentsMerchantInformation.attributeTypeMap;
    }
}
exports.Ptsv2intentsMerchantInformation = Ptsv2intentsMerchantInformation;
Ptsv2intentsMerchantInformation.discriminator = undefined;
Ptsv2intentsMerchantInformation.attributeTypeMap = [
    {
        "name": "merchantDescriptor",
        "baseName": "merchantDescriptor",
        "type": "Ptsv2intentsMerchantInformationMerchantDescriptor"
    },
    {
        "name": "cancelUrl",
        "baseName": "cancelUrl",
        "type": "string"
    },
    {
        "name": "successUrl",
        "baseName": "successUrl",
        "type": "string"
    }
];
class Ptsv2intentsMerchantInformationMerchantDescriptor {
    static getAttributeTypeMap() {
        return Ptsv2intentsMerchantInformationMerchantDescriptor.attributeTypeMap;
    }
}
exports.Ptsv2intentsMerchantInformationMerchantDescriptor = Ptsv2intentsMerchantInformationMerchantDescriptor;
Ptsv2intentsMerchantInformationMerchantDescriptor.discriminator = undefined;
Ptsv2intentsMerchantInformationMerchantDescriptor.attributeTypeMap = [
    {
        "name": "name",
        "baseName": "name",
        "type": "string"
    },
    {
        "name": "email",
        "baseName": "email",
        "type": "string"
    }
];
class Ptsv2intentsOrderInformation {
    static getAttributeTypeMap() {
        return Ptsv2intentsOrderInformation.attributeTypeMap;
    }
}
exports.Ptsv2intentsOrderInformation = Ptsv2intentsOrderInformation;
Ptsv2intentsOrderInformation.discriminator = undefined;
Ptsv2intentsOrderInformation.attributeTypeMap = [
    {
        "name": "amountDetails",
        "baseName": "amountDetails",
        "type": "Ptsv2intentsOrderInformationAmountDetails"
    },
    {
        "name": "billTo",
        "baseName": "billTo",
        "type": "Ptsv2intentsOrderInformationBillTo"
    },
    {
        "name": "shipTo",
        "baseName": "shipTo",
        "type": "Ptsv2intentsOrderInformationShipTo"
    },
    {
        "name": "lineItems",
        "baseName": "lineItems",
        "type": "Array<Ptsv2intentsOrderInformationLineItems>"
    },
    {
        "name": "invoiceDetails",
        "baseName": "invoiceDetails",
        "type": "Ptsv2intentsOrderInformationInvoiceDetails"
    }
];
class Ptsv2intentsOrderInformationAmountDetails {
    static getAttributeTypeMap() {
        return Ptsv2intentsOrderInformationAmountDetails.attributeTypeMap;
    }
}
exports.Ptsv2intentsOrderInformationAmountDetails = Ptsv2intentsOrderInformationAmountDetails;
Ptsv2intentsOrderInformationAmountDetails.discriminator = undefined;
Ptsv2intentsOrderInformationAmountDetails.attributeTypeMap = [
    {
        "name": "totalAmount",
        "baseName": "totalAmount",
        "type": "string"
    },
    {
        "name": "currency",
        "baseName": "currency",
        "type": "string"
    },
    {
        "name": "discountAmount",
        "baseName": "discountAmount",
        "type": "string"
    },
    {
        "name": "shippingAmount",
        "baseName": "shippingAmount",
        "type": "string"
    },
    {
        "name": "shippingDiscountAmount",
        "baseName": "shippingDiscountAmount",
        "type": "string"
    },
    {
        "name": "taxAmount",
        "baseName": "taxAmount",
        "type": "string"
    },
    {
        "name": "insuranceAmount",
        "baseName": "insuranceAmount",
        "type": "string"
    },
    {
        "name": "dutyAmount",
        "baseName": "dutyAmount",
        "type": "string"
    }
];
class Ptsv2intentsOrderInformationBillTo {
    static getAttributeTypeMap() {
        return Ptsv2intentsOrderInformationBillTo.attributeTypeMap;
    }
}
exports.Ptsv2intentsOrderInformationBillTo = Ptsv2intentsOrderInformationBillTo;
Ptsv2intentsOrderInformationBillTo.discriminator = undefined;
Ptsv2intentsOrderInformationBillTo.attributeTypeMap = [
    {
        "name": "email",
        "baseName": "email",
        "type": "string"
    }
];
class Ptsv2intentsOrderInformationInvoiceDetails {
    static getAttributeTypeMap() {
        return Ptsv2intentsOrderInformationInvoiceDetails.attributeTypeMap;
    }
}
exports.Ptsv2intentsOrderInformationInvoiceDetails = Ptsv2intentsOrderInformationInvoiceDetails;
Ptsv2intentsOrderInformationInvoiceDetails.discriminator = undefined;
Ptsv2intentsOrderInformationInvoiceDetails.attributeTypeMap = [
    {
        "name": "productDescription",
        "baseName": "productDescription",
        "type": "string"
    }
];
class Ptsv2intentsOrderInformationLineItems {
    static getAttributeTypeMap() {
        return Ptsv2intentsOrderInformationLineItems.attributeTypeMap;
    }
}
exports.Ptsv2intentsOrderInformationLineItems = Ptsv2intentsOrderInformationLineItems;
Ptsv2intentsOrderInformationLineItems.discriminator = undefined;
Ptsv2intentsOrderInformationLineItems.attributeTypeMap = [
    {
        "name": "productName",
        "baseName": "productName",
        "type": "string"
    },
    {
        "name": "productDescription",
        "baseName": "productDescription",
        "type": "string"
    },
    {
        "name": "productSku",
        "baseName": "productSku",
        "type": "string"
    },
    {
        "name": "quantity",
        "baseName": "quantity",
        "type": "number"
    },
    {
        "name": "typeOfSupply",
        "baseName": "typeOfSupply",
        "type": "string"
    },
    {
        "name": "unitPrice",
        "baseName": "unitPrice",
        "type": "string"
    },
    {
        "name": "totalAmount",
        "baseName": "totalAmount",
        "type": "string"
    },
    {
        "name": "taxAmount",
        "baseName": "taxAmount",
        "type": "string"
    }
];
class Ptsv2intentsOrderInformationShipTo {
    static getAttributeTypeMap() {
        return Ptsv2intentsOrderInformationShipTo.attributeTypeMap;
    }
}
exports.Ptsv2intentsOrderInformationShipTo = Ptsv2intentsOrderInformationShipTo;
Ptsv2intentsOrderInformationShipTo.discriminator = undefined;
Ptsv2intentsOrderInformationShipTo.attributeTypeMap = [
    {
        "name": "firstName",
        "baseName": "firstName",
        "type": "string"
    },
    {
        "name": "lastName",
        "baseName": "lastName",
        "type": "string"
    },
    {
        "name": "address1",
        "baseName": "address1",
        "type": "string"
    },
    {
        "name": "address2",
        "baseName": "address2",
        "type": "string"
    },
    {
        "name": "locality",
        "baseName": "locality",
        "type": "string"
    },
    {
        "name": "administrativeArea",
        "baseName": "administrativeArea",
        "type": "string"
    },
    {
        "name": "postalCode",
        "baseName": "postalCode",
        "type": "string"
    },
    {
        "name": "country",
        "baseName": "country",
        "type": "string"
    },
    {
        "name": "method",
        "baseName": "method",
        "type": "string"
    },
    {
        "name": "email",
        "baseName": "email",
        "type": "string"
    },
    {
        "name": "phoneNumber",
        "baseName": "phoneNumber",
        "type": "string"
    }
];
class Ptsv2intentsPaymentInformation {
    static getAttributeTypeMap() {
        return Ptsv2intentsPaymentInformation.attributeTypeMap;
    }
}
exports.Ptsv2intentsPaymentInformation = Ptsv2intentsPaymentInformation;
Ptsv2intentsPaymentInformation.discriminator = undefined;
Ptsv2intentsPaymentInformation.attributeTypeMap = [
    {
        "name": "paymentType",
        "baseName": "paymentType",
        "type": "Ptsv2intentsPaymentInformationPaymentType"
    },
    {
        "name": "tokenizedPaymentMethod",
        "baseName": "tokenizedPaymentMethod",
        "type": "Ptsv2intentsPaymentInformationTokenizedPaymentMethod"
    },
    {
        "name": "industryType",
        "baseName": "industryType",
        "type": "string"
    },
    {
        "name": "eWallet",
        "baseName": "eWallet",
        "type": "Ptsv2intentsPaymentInformationEWallet"
    }
];
class Ptsv2intentsPaymentInformationEWallet {
    static getAttributeTypeMap() {
        return Ptsv2intentsPaymentInformationEWallet.attributeTypeMap;
    }
}
exports.Ptsv2intentsPaymentInformationEWallet = Ptsv2intentsPaymentInformationEWallet;
Ptsv2intentsPaymentInformationEWallet.discriminator = undefined;
Ptsv2intentsPaymentInformationEWallet.attributeTypeMap = [
    {
        "name": "accountId",
        "baseName": "accountId",
        "type": "string"
    }
];
class Ptsv2intentsPaymentInformationPaymentType {
    static getAttributeTypeMap() {
        return Ptsv2intentsPaymentInformationPaymentType.attributeTypeMap;
    }
}
exports.Ptsv2intentsPaymentInformationPaymentType = Ptsv2intentsPaymentInformationPaymentType;
Ptsv2intentsPaymentInformationPaymentType.discriminator = undefined;
Ptsv2intentsPaymentInformationPaymentType.attributeTypeMap = [
    {
        "name": "name",
        "baseName": "name",
        "type": "string"
    },
    {
        "name": "method",
        "baseName": "method",
        "type": "Ptsv2intentsPaymentInformationPaymentTypeMethod"
    }
];
class Ptsv2intentsPaymentInformationPaymentTypeMethod {
    static getAttributeTypeMap() {
        return Ptsv2intentsPaymentInformationPaymentTypeMethod.attributeTypeMap;
    }
}
exports.Ptsv2intentsPaymentInformationPaymentTypeMethod = Ptsv2intentsPaymentInformationPaymentTypeMethod;
Ptsv2intentsPaymentInformationPaymentTypeMethod.discriminator = undefined;
Ptsv2intentsPaymentInformationPaymentTypeMethod.attributeTypeMap = [
    {
        "name": "name",
        "baseName": "name",
        "type": "string"
    }
];
class Ptsv2intentsPaymentInformationTokenizedPaymentMethod {
    static getAttributeTypeMap() {
        return Ptsv2intentsPaymentInformationTokenizedPaymentMethod.attributeTypeMap;
    }
}
exports.Ptsv2intentsPaymentInformationTokenizedPaymentMethod = Ptsv2intentsPaymentInformationTokenizedPaymentMethod;
Ptsv2intentsPaymentInformationTokenizedPaymentMethod.discriminator = undefined;
Ptsv2intentsPaymentInformationTokenizedPaymentMethod.attributeTypeMap = [
    {
        "name": "description",
        "baseName": "description",
        "type": "string"
    },
    {
        "name": "usagePattern",
        "baseName": "usagePattern",
        "type": "string"
    },
    {
        "name": "usageType",
        "baseName": "usageType",
        "type": "string"
    },
    {
        "name": "allowMultipleTokens",
        "baseName": "allowMultipleTokens",
        "type": "boolean"
    }
];
class Ptsv2intentsProcessingInformation {
    static getAttributeTypeMap() {
        return Ptsv2intentsProcessingInformation.attributeTypeMap;
    }
}
exports.Ptsv2intentsProcessingInformation = Ptsv2intentsProcessingInformation;
Ptsv2intentsProcessingInformation.discriminator = undefined;
Ptsv2intentsProcessingInformation.attributeTypeMap = [
    {
        "name": "processingInstruction",
        "baseName": "processingInstruction",
        "type": "string"
    },
    {
        "name": "authorizationOptions",
        "baseName": "authorizationOptions",
        "type": "Ptsv2intentsProcessingInformationAuthorizationOptions"
    },
    {
        "name": "actionList",
        "baseName": "actionList",
        "type": "Array<string>"
    },
    {
        "name": "highRiskTransactionFlag",
        "baseName": "highRiskTransactionFlag",
        "type": "string"
    },
    {
        "name": "transactionRetry",
        "baseName": "transactionRetry",
        "type": "string"
    },
    {
        "name": "lastOneHrTransactionCount",
        "baseName": "lastOneHrTransactionCount",
        "type": "string"
    },
    {
        "name": "lastOneDayTransactionCount",
        "baseName": "lastOneDayTransactionCount",
        "type": "string"
    },
    {
        "name": "lastThreeMonthsTxnCount",
        "baseName": "lastThreeMonthsTxnCount",
        "type": "string"
    },
    {
        "name": "totalTransactionCount",
        "baseName": "totalTransactionCount",
        "type": "string"
    },
    {
        "name": "pinVerification",
        "baseName": "pinVerification",
        "type": "string"
    },
    {
        "name": "faceIdVerification",
        "baseName": "faceIdVerification",
        "type": "string"
    },
    {
        "name": "userPassedVerification",
        "baseName": "userPassedVerification",
        "type": "string"
    },
    {
        "name": "ipAddress",
        "baseName": "ipAddress",
        "type": "string"
    },
    {
        "name": "transactionDate",
        "baseName": "transactionDate",
        "type": "string"
    },
    {
        "name": "tangible",
        "baseName": "tangible",
        "type": "string"
    }
];
class Ptsv2intentsProcessingInformationAuthorizationOptions {
    static getAttributeTypeMap() {
        return Ptsv2intentsProcessingInformationAuthorizationOptions.attributeTypeMap;
    }
}
exports.Ptsv2intentsProcessingInformationAuthorizationOptions = Ptsv2intentsProcessingInformationAuthorizationOptions;
Ptsv2intentsProcessingInformationAuthorizationOptions.discriminator = undefined;
Ptsv2intentsProcessingInformationAuthorizationOptions.attributeTypeMap = [
    {
        "name": "authType",
        "baseName": "authType",
        "type": "string"
    }
];
class Ptsv2intentsRecipientInformation {
    static getAttributeTypeMap() {
        return Ptsv2intentsRecipientInformation.attributeTypeMap;
    }
}
exports.Ptsv2intentsRecipientInformation = Ptsv2intentsRecipientInformation;
Ptsv2intentsRecipientInformation.discriminator = undefined;
Ptsv2intentsRecipientInformation.attributeTypeMap = [
    {
        "name": "accountId",
        "baseName": "accountId",
        "type": "string"
    },
    {
        "name": "createDate",
        "baseName": "createDate",
        "type": "string"
    },
    {
        "name": "email",
        "baseName": "email",
        "type": "string"
    },
    {
        "name": "countryCode",
        "baseName": "countryCode",
        "type": "string"
    },
    {
        "name": "businessName",
        "baseName": "businessName",
        "type": "string"
    },
    {
        "name": "riskPopularityScore",
        "baseName": "riskPopularityScore",
        "type": "string"
    }
];
class Ptsv2intentsSenderInformation {
    static getAttributeTypeMap() {
        return Ptsv2intentsSenderInformation.attributeTypeMap;
    }
}
exports.Ptsv2intentsSenderInformation = Ptsv2intentsSenderInformation;
Ptsv2intentsSenderInformation.discriminator = undefined;
Ptsv2intentsSenderInformation.attributeTypeMap = [
    {
        "name": "account",
        "baseName": "account",
        "type": "Ptsv2intentsSenderInformationAccount"
    },
    {
        "name": "firstName",
        "baseName": "firstName",
        "type": "string"
    },
    {
        "name": "lastName",
        "baseName": "lastName",
        "type": "string"
    },
    {
        "name": "email",
        "baseName": "email",
        "type": "string"
    },
    {
        "name": "phoneNumber",
        "baseName": "phoneNumber",
        "type": "string"
    },
    {
        "name": "countryCode",
        "baseName": "countryCode",
        "type": "string"
    },
    {
        "name": "createDate",
        "baseName": "createDate",
        "type": "string"
    },
    {
        "name": "postalCode",
        "baseName": "postalCode",
        "type": "string"
    },
    {
        "name": "riskPopularityScore",
        "baseName": "riskPopularityScore",
        "type": "string"
    }
];
class Ptsv2intentsSenderInformationAccount {
    static getAttributeTypeMap() {
        return Ptsv2intentsSenderInformationAccount.attributeTypeMap;
    }
}
exports.Ptsv2intentsSenderInformationAccount = Ptsv2intentsSenderInformationAccount;
Ptsv2intentsSenderInformationAccount.discriminator = undefined;
Ptsv2intentsSenderInformationAccount.attributeTypeMap = [
    {
        "name": "number",
        "baseName": "number",
        "type": "string"
    }
];
class Ptsv2intentsTravelInformation {
    static getAttributeTypeMap() {
        return Ptsv2intentsTravelInformation.attributeTypeMap;
    }
}
exports.Ptsv2intentsTravelInformation = Ptsv2intentsTravelInformation;
Ptsv2intentsTravelInformation.discriminator = undefined;
Ptsv2intentsTravelInformation.attributeTypeMap = [
    {
        "name": "agency",
        "baseName": "agency",
        "type": "Ptsv2intentsTravelInformationAgency"
    },
    {
        "name": "journeyType",
        "baseName": "journeyType",
        "type": "string"
    },
    {
        "name": "actualFinalDestination",
        "baseName": "actualFinalDestination",
        "type": "string"
    }
];
class Ptsv2intentsTravelInformationAgency {
    static getAttributeTypeMap() {
        return Ptsv2intentsTravelInformationAgency.attributeTypeMap;
    }
}
exports.Ptsv2intentsTravelInformationAgency = Ptsv2intentsTravelInformationAgency;
Ptsv2intentsTravelInformationAgency.discriminator = undefined;
Ptsv2intentsTravelInformationAgency.attributeTypeMap = [
    {
        "name": "startDate",
        "baseName": "startDate",
        "type": "string"
    },
    {
        "name": "endDate",
        "baseName": "endDate",
        "type": "string"
    },
    {
        "name": "changeOfGuest",
        "baseName": "changeOfGuest",
        "type": "string"
    },
    {
        "name": "countryCode",
        "baseName": "countryCode",
        "type": "string"
    },
    {
        "name": "locality",
        "baseName": "locality",
        "type": "string"
    },
    {
        "name": "postalCode",
        "baseName": "postalCode",
        "type": "string"
    }
];
class Ptsv2intentsidMerchantInformation {
    static getAttributeTypeMap() {
        return Ptsv2intentsidMerchantInformation.attributeTypeMap;
    }
}
exports.Ptsv2intentsidMerchantInformation = Ptsv2intentsidMerchantInformation;
Ptsv2intentsidMerchantInformation.discriminator = undefined;
Ptsv2intentsidMerchantInformation.attributeTypeMap = [
    {
        "name": "merchantDescriptor",
        "baseName": "merchantDescriptor",
        "type": "Ptsv2intentsMerchantInformationMerchantDescriptor"
    }
];
class Ptsv2intentsidOrderInformation {
    static getAttributeTypeMap() {
        return Ptsv2intentsidOrderInformation.attributeTypeMap;
    }
}
exports.Ptsv2intentsidOrderInformation = Ptsv2intentsidOrderInformation;
Ptsv2intentsidOrderInformation.discriminator = undefined;
Ptsv2intentsidOrderInformation.attributeTypeMap = [
    {
        "name": "amountDetails",
        "baseName": "amountDetails",
        "type": "Ptsv2intentsOrderInformationAmountDetails"
    },
    {
        "name": "shipTo",
        "baseName": "shipTo",
        "type": "Ptsv2intentsOrderInformationShipTo"
    },
    {
        "name": "lineItems",
        "baseName": "lineItems",
        "type": "Array<Ptsv2intentsOrderInformationLineItems>"
    },
    {
        "name": "invoiceDetails",
        "baseName": "invoiceDetails",
        "type": "Ptsv2intentsOrderInformationInvoiceDetails"
    }
];
class Ptsv2intentsidPaymentInformation {
    static getAttributeTypeMap() {
        return Ptsv2intentsidPaymentInformation.attributeTypeMap;
    }
}
exports.Ptsv2intentsidPaymentInformation = Ptsv2intentsidPaymentInformation;
Ptsv2intentsidPaymentInformation.discriminator = undefined;
Ptsv2intentsidPaymentInformation.attributeTypeMap = [
    {
        "name": "paymentType",
        "baseName": "paymentType",
        "type": "Ptsv2intentsPaymentInformationPaymentType"
    }
];
class Ptsv2intentsidProcessingInformation {
    static getAttributeTypeMap() {
        return Ptsv2intentsidProcessingInformation.attributeTypeMap;
    }
}
exports.Ptsv2intentsidProcessingInformation = Ptsv2intentsidProcessingInformation;
Ptsv2intentsidProcessingInformation.discriminator = undefined;
Ptsv2intentsidProcessingInformation.attributeTypeMap = [
    {
        "name": "actionList",
        "baseName": "actionList",
        "type": "Array<string>"
    }
];
class Ptsv2paymentreferencesAgreementInformation {
    static getAttributeTypeMap() {
        return Ptsv2paymentreferencesAgreementInformation.attributeTypeMap;
    }
}
exports.Ptsv2paymentreferencesAgreementInformation = Ptsv2paymentreferencesAgreementInformation;
Ptsv2paymentreferencesAgreementInformation.discriminator = undefined;
Ptsv2paymentreferencesAgreementInformation.attributeTypeMap = [
    {
        "name": "indicator",
        "baseName": "indicator",
        "type": "string"
    },
    {
        "name": "description",
        "baseName": "description",
        "type": "string"
    }
];
class Ptsv2paymentreferencesBuyerInformation {
    static getAttributeTypeMap() {
        return Ptsv2paymentreferencesBuyerInformation.attributeTypeMap;
    }
}
exports.Ptsv2paymentreferencesBuyerInformation = Ptsv2paymentreferencesBuyerInformation;
Ptsv2paymentreferencesBuyerInformation.discriminator = undefined;
Ptsv2paymentreferencesBuyerInformation.attributeTypeMap = [
    {
        "name": "dateOfBirth",
        "baseName": "dateOfBirth",
        "type": "string"
    },
    {
        "name": "gender",
        "baseName": "gender",
        "type": "string"
    },
    {
        "name": "language",
        "baseName": "language",
        "type": "string"
    },
    {
        "name": "noteToSeller",
        "baseName": "noteToSeller",
        "type": "string"
    },
    {
        "name": "personalIdentification",
        "baseName": "personalIdentification",
        "type": "Array<Ptsv2paymentsidcapturesBuyerInformationPersonalIdentification>"
    }
];
class Ptsv2paymentreferencesDeviceInformation {
    static getAttributeTypeMap() {
        return Ptsv2paymentreferencesDeviceInformation.attributeTypeMap;
    }
}
exports.Ptsv2paymentreferencesDeviceInformation = Ptsv2paymentreferencesDeviceInformation;
Ptsv2paymentreferencesDeviceInformation.discriminator = undefined;
Ptsv2paymentreferencesDeviceInformation.attributeTypeMap = [
    {
        "name": "ipAddress",
        "baseName": "ipAddress",
        "type": "string"
    },
    {
        "name": "deviceType",
        "baseName": "deviceType",
        "type": "string"
    },
    {
        "name": "id",
        "baseName": "id",
        "type": "string"
    },
    {
        "name": "userAgent",
        "baseName": "userAgent",
        "type": "string"
    }
];
class Ptsv2paymentreferencesMerchantInformation {
    static getAttributeTypeMap() {
        return Ptsv2paymentreferencesMerchantInformation.attributeTypeMap;
    }
}
exports.Ptsv2paymentreferencesMerchantInformation = Ptsv2paymentreferencesMerchantInformation;
Ptsv2paymentreferencesMerchantInformation.discriminator = undefined;
Ptsv2paymentreferencesMerchantInformation.attributeTypeMap = [
    {
        "name": "merchantDescriptor",
        "baseName": "merchantDescriptor",
        "type": "Ptsv2paymentsMerchantInformationMerchantDescriptor"
    },
    {
        "name": "cancelUrl",
        "baseName": "cancelUrl",
        "type": "string"
    },
    {
        "name": "successUrl",
        "baseName": "successUrl",
        "type": "string"
    },
    {
        "name": "failureUrl",
        "baseName": "failureUrl",
        "type": "string"
    },
    {
        "name": "noteToBuyer",
        "baseName": "noteToBuyer",
        "type": "string"
    }
];
class Ptsv2paymentreferencesOrderInformation {
    static getAttributeTypeMap() {
        return Ptsv2paymentreferencesOrderInformation.attributeTypeMap;
    }
}
exports.Ptsv2paymentreferencesOrderInformation = Ptsv2paymentreferencesOrderInformation;
Ptsv2paymentreferencesOrderInformation.discriminator = undefined;
Ptsv2paymentreferencesOrderInformation.attributeTypeMap = [
    {
        "name": "billTo",
        "baseName": "billTo",
        "type": "Ptsv2paymentreferencesOrderInformationBillTo"
    },
    {
        "name": "shipTo",
        "baseName": "shipTo",
        "type": "Ptsv2paymentreferencesOrderInformationShipTo"
    },
    {
        "name": "amountDetails",
        "baseName": "amountDetails",
        "type": "Ptsv2paymentreferencesOrderInformationAmountDetails"
    },
    {
        "name": "lineItems",
        "baseName": "lineItems",
        "type": "Array<Ptsv2paymentreferencesOrderInformationLineItems>"
    },
    {
        "name": "invoiceDetails",
        "baseName": "invoiceDetails",
        "type": "Ptsv2paymentreferencesOrderInformationInvoiceDetails"
    },
    {
        "name": "shippingDetails",
        "baseName": "shippingDetails",
        "type": "PtsV2PaymentsOrderPost201ResponseOrderInformationShippingDetails"
    }
];
class Ptsv2paymentreferencesOrderInformationAmountDetails {
    static getAttributeTypeMap() {
        return Ptsv2paymentreferencesOrderInformationAmountDetails.attributeTypeMap;
    }
}
exports.Ptsv2paymentreferencesOrderInformationAmountDetails = Ptsv2paymentreferencesOrderInformationAmountDetails;
Ptsv2paymentreferencesOrderInformationAmountDetails.discriminator = undefined;
Ptsv2paymentreferencesOrderInformationAmountDetails.attributeTypeMap = [
    {
        "name": "totalAmount",
        "baseName": "totalAmount",
        "type": "string"
    },
    {
        "name": "currency",
        "baseName": "currency",
        "type": "string"
    },
    {
        "name": "discountAmount",
        "baseName": "discountAmount",
        "type": "string"
    },
    {
        "name": "taxAmount",
        "baseName": "taxAmount",
        "type": "string"
    },
    {
        "name": "dutyAmount",
        "baseName": "dutyAmount",
        "type": "string"
    },
    {
        "name": "exchangeRate",
        "baseName": "exchangeRate",
        "type": "string"
    },
    {
        "name": "exchangeRateTimeStamp",
        "baseName": "exchangeRateTimeStamp",
        "type": "string"
    },
    {
        "name": "settlementCurrency",
        "baseName": "settlementCurrency",
        "type": "string"
    },
    {
        "name": "invoiceAmount",
        "baseName": "invoiceAmount",
        "type": "string"
    },
    {
        "name": "giftwrapAmount",
        "baseName": "giftwrapAmount",
        "type": "string"
    },
    {
        "name": "handlingAmount",
        "baseName": "handlingAmount",
        "type": "string"
    },
    {
        "name": "shippingAmount",
        "baseName": "shippingAmount",
        "type": "string"
    },
    {
        "name": "shippingDiscountAmount",
        "baseName": "shippingDiscountAmount",
        "type": "string"
    },
    {
        "name": "insuranceAmount",
        "baseName": "insuranceAmount",
        "type": "string"
    }
];
class Ptsv2paymentreferencesOrderInformationBillTo {
    static getAttributeTypeMap() {
        return Ptsv2paymentreferencesOrderInformationBillTo.attributeTypeMap;
    }
}
exports.Ptsv2paymentreferencesOrderInformationBillTo = Ptsv2paymentreferencesOrderInformationBillTo;
Ptsv2paymentreferencesOrderInformationBillTo.discriminator = undefined;
Ptsv2paymentreferencesOrderInformationBillTo.attributeTypeMap = [
    {
        "name": "name",
        "baseName": "name",
        "type": "string"
    }
];
class Ptsv2paymentreferencesOrderInformationInvoiceDetails {
    static getAttributeTypeMap() {
        return Ptsv2paymentreferencesOrderInformationInvoiceDetails.attributeTypeMap;
    }
}
exports.Ptsv2paymentreferencesOrderInformationInvoiceDetails = Ptsv2paymentreferencesOrderInformationInvoiceDetails;
Ptsv2paymentreferencesOrderInformationInvoiceDetails.discriminator = undefined;
Ptsv2paymentreferencesOrderInformationInvoiceDetails.attributeTypeMap = [
    {
        "name": "costCenter",
        "baseName": "costCenter",
        "type": "string"
    },
    {
        "name": "productDescription",
        "baseName": "productDescription",
        "type": "string"
    }
];
/**
* List of the line items from the order, which are included in an invoice.
*/
class Ptsv2paymentreferencesOrderInformationLineItems {
    static getAttributeTypeMap() {
        return Ptsv2paymentreferencesOrderInformationLineItems.attributeTypeMap;
    }
}
exports.Ptsv2paymentreferencesOrderInformationLineItems = Ptsv2paymentreferencesOrderInformationLineItems;
Ptsv2paymentreferencesOrderInformationLineItems.discriminator = undefined;
Ptsv2paymentreferencesOrderInformationLineItems.attributeTypeMap = [
    {
        "name": "productSku",
        "baseName": "productSku",
        "type": "string"
    },
    {
        "name": "productName",
        "baseName": "productName",
        "type": "string"
    },
    {
        "name": "quantity",
        "baseName": "quantity",
        "type": "number"
    },
    {
        "name": "unitPrice",
        "baseName": "unitPrice",
        "type": "string"
    },
    {
        "name": "discountAmount",
        "baseName": "discountAmount",
        "type": "string"
    },
    {
        "name": "discountRate",
        "baseName": "discountRate",
        "type": "string"
    },
    {
        "name": "taxAmount",
        "baseName": "taxAmount",
        "type": "string"
    },
    {
        "name": "taxRate",
        "baseName": "taxRate",
        "type": "string"
    },
    {
        "name": "totalAmount",
        "baseName": "totalAmount",
        "type": "string"
    },
    {
        "name": "productCode",
        "baseName": "productCode",
        "type": "string"
    },
    {
        "name": "productDescription",
        "baseName": "productDescription",
        "type": "string"
    }
];
class Ptsv2paymentreferencesOrderInformationShipTo {
    static getAttributeTypeMap() {
        return Ptsv2paymentreferencesOrderInformationShipTo.attributeTypeMap;
    }
}
exports.Ptsv2paymentreferencesOrderInformationShipTo = Ptsv2paymentreferencesOrderInformationShipTo;
Ptsv2paymentreferencesOrderInformationShipTo.discriminator = undefined;
Ptsv2paymentreferencesOrderInformationShipTo.attributeTypeMap = [
    {
        "name": "email",
        "baseName": "email",
        "type": "string"
    },
    {
        "name": "title",
        "baseName": "title",
        "type": "string"
    },
    {
        "name": "firstName",
        "baseName": "firstName",
        "type": "string"
    },
    {
        "name": "middleName",
        "baseName": "middleName",
        "type": "string"
    },
    {
        "name": "lastName",
        "baseName": "lastName",
        "type": "string"
    },
    {
        "name": "company",
        "baseName": "company",
        "type": "string"
    },
    {
        "name": "address1",
        "baseName": "address1",
        "type": "string"
    },
    {
        "name": "address2",
        "baseName": "address2",
        "type": "string"
    },
    {
        "name": "district",
        "baseName": "district",
        "type": "string"
    },
    {
        "name": "locality",
        "baseName": "locality",
        "type": "string"
    },
    {
        "name": "administrativeArea",
        "baseName": "administrativeArea",
        "type": "string"
    },
    {
        "name": "postalCode",
        "baseName": "postalCode",
        "type": "string"
    },
    {
        "name": "country",
        "baseName": "country",
        "type": "string"
    },
    {
        "name": "buildingNumber",
        "baseName": "buildingNumber",
        "type": "string"
    },
    {
        "name": "phoneNumber",
        "baseName": "phoneNumber",
        "type": "string"
    },
    {
        "name": "immutable",
        "baseName": "immutable",
        "type": "string"
    },
    {
        "name": "notApplicable",
        "baseName": "notApplicable",
        "type": "string"
    },
    {
        "name": "county",
        "baseName": "county",
        "type": "string"
    }
];
class Ptsv2paymentreferencesPaymentInformation {
    static getAttributeTypeMap() {
        return Ptsv2paymentreferencesPaymentInformation.attributeTypeMap;
    }
}
exports.Ptsv2paymentreferencesPaymentInformation = Ptsv2paymentreferencesPaymentInformation;
Ptsv2paymentreferencesPaymentInformation.discriminator = undefined;
Ptsv2paymentreferencesPaymentInformation.attributeTypeMap = [
    {
        "name": "card",
        "baseName": "card",
        "type": "Ptsv2paymentreferencesPaymentInformationCard"
    },
    {
        "name": "bank",
        "baseName": "bank",
        "type": "Ptsv2paymentreferencesPaymentInformationBank"
    },
    {
        "name": "eWallet",
        "baseName": "eWallet",
        "type": "Ptsv2paymentreferencesPaymentInformationEWallet"
    },
    {
        "name": "options",
        "baseName": "options",
        "type": "Ptsv2paymentreferencesPaymentInformationOptions"
    },
    {
        "name": "paymentType",
        "baseName": "paymentType",
        "type": "Ptsv2paymentsPaymentInformationPaymentType"
    }
];
class Ptsv2paymentreferencesPaymentInformationBank {
    static getAttributeTypeMap() {
        return Ptsv2paymentreferencesPaymentInformationBank.attributeTypeMap;
    }
}
exports.Ptsv2paymentreferencesPaymentInformationBank = Ptsv2paymentreferencesPaymentInformationBank;
Ptsv2paymentreferencesPaymentInformationBank.discriminator = undefined;
Ptsv2paymentreferencesPaymentInformationBank.attributeTypeMap = [
    {
        "name": "swiftCode",
        "baseName": "swiftCode",
        "type": "string"
    },
    {
        "name": "account",
        "baseName": "account",
        "type": "Ptsv2paymentreferencesPaymentInformationBankAccount"
    }
];
class Ptsv2paymentreferencesPaymentInformationBankAccount {
    static getAttributeTypeMap() {
        return Ptsv2paymentreferencesPaymentInformationBankAccount.attributeTypeMap;
    }
}
exports.Ptsv2paymentreferencesPaymentInformationBankAccount = Ptsv2paymentreferencesPaymentInformationBankAccount;
Ptsv2paymentreferencesPaymentInformationBankAccount.discriminator = undefined;
Ptsv2paymentreferencesPaymentInformationBankAccount.attributeTypeMap = [
    {
        "name": "number",
        "baseName": "number",
        "type": "string"
    },
    {
        "name": "iban",
        "baseName": "iban",
        "type": "string"
    }
];
class Ptsv2paymentreferencesPaymentInformationCard {
    static getAttributeTypeMap() {
        return Ptsv2paymentreferencesPaymentInformationCard.attributeTypeMap;
    }
}
exports.Ptsv2paymentreferencesPaymentInformationCard = Ptsv2paymentreferencesPaymentInformationCard;
Ptsv2paymentreferencesPaymentInformationCard.discriminator = undefined;
Ptsv2paymentreferencesPaymentInformationCard.attributeTypeMap = [
    {
        "name": "number",
        "baseName": "number",
        "type": "string"
    },
    {
        "name": "expirationMonth",
        "baseName": "expirationMonth",
        "type": "string"
    },
    {
        "name": "expirationYear",
        "baseName": "expirationYear",
        "type": "string"
    },
    {
        "name": "type",
        "baseName": "type",
        "type": "string"
    },
    {
        "name": "securityCode",
        "baseName": "securityCode",
        "type": "string"
    },
    {
        "name": "useAs",
        "baseName": "useAs",
        "type": "string"
    }
];
class Ptsv2paymentreferencesPaymentInformationEWallet {
    static getAttributeTypeMap() {
        return Ptsv2paymentreferencesPaymentInformationEWallet.attributeTypeMap;
    }
}
exports.Ptsv2paymentreferencesPaymentInformationEWallet = Ptsv2paymentreferencesPaymentInformationEWallet;
Ptsv2paymentreferencesPaymentInformationEWallet.discriminator = undefined;
Ptsv2paymentreferencesPaymentInformationEWallet.attributeTypeMap = [
    {
        "name": "fundingSource",
        "baseName": "fundingSource",
        "type": "string"
    }
];
class Ptsv2paymentreferencesPaymentInformationOptions {
    static getAttributeTypeMap() {
        return Ptsv2paymentreferencesPaymentInformationOptions.attributeTypeMap;
    }
}
exports.Ptsv2paymentreferencesPaymentInformationOptions = Ptsv2paymentreferencesPaymentInformationOptions;
Ptsv2paymentreferencesPaymentInformationOptions.discriminator = undefined;
Ptsv2paymentreferencesPaymentInformationOptions.attributeTypeMap = [
    {
        "name": "id",
        "baseName": "id",
        "type": "string"
    }
];
class Ptsv2paymentreferencesProcessingInformation {
    static getAttributeTypeMap() {
        return Ptsv2paymentreferencesProcessingInformation.attributeTypeMap;
    }
}
exports.Ptsv2paymentreferencesProcessingInformation = Ptsv2paymentreferencesProcessingInformation;
Ptsv2paymentreferencesProcessingInformation.discriminator = undefined;
Ptsv2paymentreferencesProcessingInformation.attributeTypeMap = [
    {
        "name": "sessionType",
        "baseName": "sessionType",
        "type": "string"
    },
    {
        "name": "paymentFlowMode",
        "baseName": "paymentFlowMode",
        "type": "string"
    },
    {
        "name": "actionList",
        "baseName": "actionList",
        "type": "Array<string>"
    }
];
class Ptsv2paymentreferencesTravelInformation {
    static getAttributeTypeMap() {
        return Ptsv2paymentreferencesTravelInformation.attributeTypeMap;
    }
}
exports.Ptsv2paymentreferencesTravelInformation = Ptsv2paymentreferencesTravelInformation;
Ptsv2paymentreferencesTravelInformation.discriminator = undefined;
Ptsv2paymentreferencesTravelInformation.attributeTypeMap = [
    {
        "name": "autoRental",
        "baseName": "autoRental",
        "type": "Ptsv2paymentreferencesTravelInformationAutoRental"
    }
];
class Ptsv2paymentreferencesTravelInformationAutoRental {
    static getAttributeTypeMap() {
        return Ptsv2paymentreferencesTravelInformationAutoRental.attributeTypeMap;
    }
}
exports.Ptsv2paymentreferencesTravelInformationAutoRental = Ptsv2paymentreferencesTravelInformationAutoRental;
Ptsv2paymentreferencesTravelInformationAutoRental.discriminator = undefined;
Ptsv2paymentreferencesTravelInformationAutoRental.attributeTypeMap = [
    {
        "name": "companyName",
        "baseName": "companyName",
        "type": "string"
    },
    {
        "name": "affiliateName",
        "baseName": "affiliateName",
        "type": "string"
    },
    {
        "name": "rentalAddress",
        "baseName": "rentalAddress",
        "type": "Ptsv2paymentsTravelInformationAutoRentalRentalAddress"
    },
    {
        "name": "returnAddress",
        "baseName": "returnAddress",
        "type": "Ptsv2paymentsTravelInformationAutoRentalReturnAddress"
    },
    {
        "name": "returnDateTime",
        "baseName": "returnDateTime",
        "type": "string"
    },
    {
        "name": "rentalDateTime",
        "baseName": "rentalDateTime",
        "type": "string"
    },
    {
        "name": "customerName",
        "baseName": "customerName",
        "type": "string"
    }
];
class Ptsv2paymentreferencesUserInterface {
    static getAttributeTypeMap() {
        return Ptsv2paymentreferencesUserInterface.attributeTypeMap;
    }
}
exports.Ptsv2paymentreferencesUserInterface = Ptsv2paymentreferencesUserInterface;
Ptsv2paymentreferencesUserInterface.discriminator = undefined;
Ptsv2paymentreferencesUserInterface.attributeTypeMap = [
    {
        "name": "borderRadius",
        "baseName": "borderRadius",
        "type": "string"
    },
    {
        "name": "theme",
        "baseName": "theme",
        "type": "string"
    },
    {
        "name": "color",
        "baseName": "color",
        "type": "Ptsv2paymentreferencesUserInterfaceColor"
    }
];
class Ptsv2paymentreferencesUserInterfaceColor {
    static getAttributeTypeMap() {
        return Ptsv2paymentreferencesUserInterfaceColor.attributeTypeMap;
    }
}
exports.Ptsv2paymentreferencesUserInterfaceColor = Ptsv2paymentreferencesUserInterfaceColor;
Ptsv2paymentreferencesUserInterfaceColor.discriminator = undefined;
Ptsv2paymentreferencesUserInterfaceColor.attributeTypeMap = [
    {
        "name": "border",
        "baseName": "border",
        "type": "string"
    },
    {
        "name": "borderSelected",
        "baseName": "borderSelected",
        "type": "string"
    },
    {
        "name": "button",
        "baseName": "button",
        "type": "string"
    },
    {
        "name": "buttonText",
        "baseName": "buttonText",
        "type": "string"
    },
    {
        "name": "checkbox",
        "baseName": "checkbox",
        "type": "string"
    },
    {
        "name": "checkboxCheckMark",
        "baseName": "checkboxCheckMark",
        "type": "string"
    },
    {
        "name": "header",
        "baseName": "header",
        "type": "string"
    },
    {
        "name": "link",
        "baseName": "link",
        "type": "string"
    },
    {
        "name": "text",
        "baseName": "text",
        "type": "string"
    }
];
class Ptsv2paymentreferencesidintentsOrderInformation {
    static getAttributeTypeMap() {
        return Ptsv2paymentreferencesidintentsOrderInformation.attributeTypeMap;
    }
}
exports.Ptsv2paymentreferencesidintentsOrderInformation = Ptsv2paymentreferencesidintentsOrderInformation;
Ptsv2paymentreferencesidintentsOrderInformation.discriminator = undefined;
Ptsv2paymentreferencesidintentsOrderInformation.attributeTypeMap = [
    {
        "name": "amountDetails",
        "baseName": "amountDetails",
        "type": "Ptsv2paymentsOrderInformationAmountDetailsOrder"
    }
];
class Ptsv2paymentreferencesidintentsPaymentInformation {
    static getAttributeTypeMap() {
        return Ptsv2paymentreferencesidintentsPaymentInformation.attributeTypeMap;
    }
}
exports.Ptsv2paymentreferencesidintentsPaymentInformation = Ptsv2paymentreferencesidintentsPaymentInformation;
Ptsv2paymentreferencesidintentsPaymentInformation.discriminator = undefined;
Ptsv2paymentreferencesidintentsPaymentInformation.attributeTypeMap = [
    {
        "name": "paymentType",
        "baseName": "paymentType",
        "type": "Ptsv2paymentsidreversalsPaymentInformationPaymentType"
    },
    {
        "name": "eWallet",
        "baseName": "eWallet",
        "type": "Ptsv2paymentreferencesidintentsPaymentInformationEWallet"
    }
];
class Ptsv2paymentreferencesidintentsPaymentInformationEWallet {
    static getAttributeTypeMap() {
        return Ptsv2paymentreferencesidintentsPaymentInformationEWallet.attributeTypeMap;
    }
}
exports.Ptsv2paymentreferencesidintentsPaymentInformationEWallet = Ptsv2paymentreferencesidintentsPaymentInformationEWallet;
Ptsv2paymentreferencesidintentsPaymentInformationEWallet.discriminator = undefined;
Ptsv2paymentreferencesidintentsPaymentInformationEWallet.attributeTypeMap = [
    {
        "name": "accountId",
        "baseName": "accountId",
        "type": "string"
    }
];
class Ptsv2paymentreferencesidintentsProcessingInformation {
    static getAttributeTypeMap() {
        return Ptsv2paymentreferencesidintentsProcessingInformation.attributeTypeMap;
    }
}
exports.Ptsv2paymentreferencesidintentsProcessingInformation = Ptsv2paymentreferencesidintentsProcessingInformation;
Ptsv2paymentreferencesidintentsProcessingInformation.discriminator = undefined;
Ptsv2paymentreferencesidintentsProcessingInformation.attributeTypeMap = [
    {
        "name": "actionList",
        "baseName": "actionList",
        "type": "Array<string>"
    }
];
class Ptsv2paymentsAcquirerInformation {
    static getAttributeTypeMap() {
        return Ptsv2paymentsAcquirerInformation.attributeTypeMap;
    }
}
exports.Ptsv2paymentsAcquirerInformation = Ptsv2paymentsAcquirerInformation;
Ptsv2paymentsAcquirerInformation.discriminator = undefined;
Ptsv2paymentsAcquirerInformation.attributeTypeMap = [
    {
        "name": "acquirerBin",
        "baseName": "acquirerBin",
        "type": "string"
    },
    {
        "name": "country",
        "baseName": "country",
        "type": "string"
    },
    {
        "name": "password",
        "baseName": "password",
        "type": "string"
    },
    {
        "name": "merchantId",
        "baseName": "merchantId",
        "type": "string"
    },
    {
        "name": "acquirerMerchantId",
        "baseName": "acquirerMerchantId",
        "type": "string"
    }
];
class Ptsv2paymentsAggregatorInformation {
    static getAttributeTypeMap() {
        return Ptsv2paymentsAggregatorInformation.attributeTypeMap;
    }
}
exports.Ptsv2paymentsAggregatorInformation = Ptsv2paymentsAggregatorInformation;
Ptsv2paymentsAggregatorInformation.discriminator = undefined;
Ptsv2paymentsAggregatorInformation.attributeTypeMap = [
    {
        "name": "aggregatorId",
        "baseName": "aggregatorId",
        "type": "string"
    },
    {
        "name": "name",
        "baseName": "name",
        "type": "string"
    },
    {
        "name": "subMerchant",
        "baseName": "subMerchant",
        "type": "Ptsv2paymentsAggregatorInformationSubMerchant"
    },
    {
        "name": "streetAddress",
        "baseName": "streetAddress",
        "type": "string"
    },
    {
        "name": "city",
        "baseName": "city",
        "type": "string"
    },
    {
        "name": "state",
        "baseName": "state",
        "type": "string"
    },
    {
        "name": "postalCode",
        "baseName": "postalCode",
        "type": "string"
    },
    {
        "name": "country",
        "baseName": "country",
        "type": "string"
    }
];
class Ptsv2paymentsAggregatorInformationSubMerchant {
    static getAttributeTypeMap() {
        return Ptsv2paymentsAggregatorInformationSubMerchant.attributeTypeMap;
    }
}
exports.Ptsv2paymentsAggregatorInformationSubMerchant = Ptsv2paymentsAggregatorInformationSubMerchant;
Ptsv2paymentsAggregatorInformationSubMerchant.discriminator = undefined;
Ptsv2paymentsAggregatorInformationSubMerchant.attributeTypeMap = [
    {
        "name": "cardAcceptorId",
        "baseName": "cardAcceptorId",
        "type": "string"
    },
    {
        "name": "id",
        "baseName": "id",
        "type": "string"
    },
    {
        "name": "name",
        "baseName": "name",
        "type": "string"
    },
    {
        "name": "address1",
        "baseName": "address1",
        "type": "string"
    },
    {
        "name": "locality",
        "baseName": "locality",
        "type": "string"
    },
    {
        "name": "administrativeArea",
        "baseName": "administrativeArea",
        "type": "string"
    },
    {
        "name": "region",
        "baseName": "region",
        "type": "string"
    },
    {
        "name": "postalCode",
        "baseName": "postalCode",
        "type": "string"
    },
    {
        "name": "country",
        "baseName": "country",
        "type": "string"
    },
    {
        "name": "email",
        "baseName": "email",
        "type": "string"
    },
    {
        "name": "phoneNumber",
        "baseName": "phoneNumber",
        "type": "string"
    }
];
class Ptsv2paymentsAgreementInformation {
    static getAttributeTypeMap() {
        return Ptsv2paymentsAgreementInformation.attributeTypeMap;
    }
}
exports.Ptsv2paymentsAgreementInformation = Ptsv2paymentsAgreementInformation;
Ptsv2paymentsAgreementInformation.discriminator = undefined;
Ptsv2paymentsAgreementInformation.attributeTypeMap = [
    {
        "name": "agreementId",
        "baseName": "agreementId",
        "type": "string"
    },
    {
        "name": "id",
        "baseName": "id",
        "type": "string"
    }
];
class Ptsv2paymentsBuyerInformation {
    static getAttributeTypeMap() {
        return Ptsv2paymentsBuyerInformation.attributeTypeMap;
    }
}
exports.Ptsv2paymentsBuyerInformation = Ptsv2paymentsBuyerInformation;
Ptsv2paymentsBuyerInformation.discriminator = undefined;
Ptsv2paymentsBuyerInformation.attributeTypeMap = [
    {
        "name": "merchantCustomerId",
        "baseName": "merchantCustomerId",
        "type": "string"
    },
    {
        "name": "dateOfBirth",
        "baseName": "dateOfBirth",
        "type": "string"
    },
    {
        "name": "vatRegistrationNumber",
        "baseName": "vatRegistrationNumber",
        "type": "string"
    },
    {
        "name": "companyTaxId",
        "baseName": "companyTaxId",
        "type": "string"
    },
    {
        "name": "personalIdentification",
        "baseName": "personalIdentification",
        "type": "Array<Ptsv2paymentsBuyerInformationPersonalIdentification>"
    },
    {
        "name": "hashedPassword",
        "baseName": "hashedPassword",
        "type": "string"
    },
    {
        "name": "gender",
        "baseName": "gender",
        "type": "string"
    },
    {
        "name": "language",
        "baseName": "language",
        "type": "string"
    },
    {
        "name": "noteToSeller",
        "baseName": "noteToSeller",
        "type": "string"
    },
    {
        "name": "mobilePhone",
        "baseName": "mobilePhone",
        "type": "number"
    },
    {
        "name": "walletId",
        "baseName": "walletId",
        "type": "string"
    }
];
class Ptsv2paymentsBuyerInformationPersonalIdentification {
    static getAttributeTypeMap() {
        return Ptsv2paymentsBuyerInformationPersonalIdentification.attributeTypeMap;
    }
}
exports.Ptsv2paymentsBuyerInformationPersonalIdentification = Ptsv2paymentsBuyerInformationPersonalIdentification;
Ptsv2paymentsBuyerInformationPersonalIdentification.discriminator = undefined;
Ptsv2paymentsBuyerInformationPersonalIdentification.attributeTypeMap = [
    {
        "name": "type",
        "baseName": "type",
        "type": "string"
    },
    {
        "name": "id",
        "baseName": "id",
        "type": "string"
    },
    {
        "name": "issuedBy",
        "baseName": "issuedBy",
        "type": "string"
    },
    {
        "name": "verificationResults",
        "baseName": "verificationResults",
        "type": "string"
    }
];
class Ptsv2paymentsClientReferenceInformation {
    static getAttributeTypeMap() {
        return Ptsv2paymentsClientReferenceInformation.attributeTypeMap;
    }
}
exports.Ptsv2paymentsClientReferenceInformation = Ptsv2paymentsClientReferenceInformation;
Ptsv2paymentsClientReferenceInformation.discriminator = undefined;
Ptsv2paymentsClientReferenceInformation.attributeTypeMap = [
    {
        "name": "code",
        "baseName": "code",
        "type": "string"
    },
    {
        "name": "reconciliationId",
        "baseName": "reconciliationId",
        "type": "string"
    },
    {
        "name": "pausedRequestId",
        "baseName": "pausedRequestId",
        "type": "string"
    },
    {
        "name": "transactionId",
        "baseName": "transactionId",
        "type": "string"
    },
    {
        "name": "comments",
        "baseName": "comments",
        "type": "string"
    },
    {
        "name": "partner",
        "baseName": "partner",
        "type": "Ptsv2paymentsClientReferenceInformationPartner"
    },
    {
        "name": "applicationName",
        "baseName": "applicationName",
        "type": "string"
    },
    {
        "name": "applicationVersion",
        "baseName": "applicationVersion",
        "type": "string"
    },
    {
        "name": "applicationUser",
        "baseName": "applicationUser",
        "type": "string"
    }
];
class Ptsv2paymentsClientReferenceInformationPartner {
    static getAttributeTypeMap() {
        return Ptsv2paymentsClientReferenceInformationPartner.attributeTypeMap;
    }
}
exports.Ptsv2paymentsClientReferenceInformationPartner = Ptsv2paymentsClientReferenceInformationPartner;
Ptsv2paymentsClientReferenceInformationPartner.discriminator = undefined;
Ptsv2paymentsClientReferenceInformationPartner.attributeTypeMap = [
    {
        "name": "originalTransactionId",
        "baseName": "originalTransactionId",
        "type": "string"
    },
    {
        "name": "developerId",
        "baseName": "developerId",
        "type": "string"
    },
    {
        "name": "solutionId",
        "baseName": "solutionId",
        "type": "string"
    },
    {
        "name": "thirdPartyCertificationNumber",
        "baseName": "thirdPartyCertificationNumber",
        "type": "string"
    }
];
class Ptsv2paymentsConsumerAuthenticationInformation {
    static getAttributeTypeMap() {
        return Ptsv2paymentsConsumerAuthenticationInformation.attributeTypeMap;
    }
}
exports.Ptsv2paymentsConsumerAuthenticationInformation = Ptsv2paymentsConsumerAuthenticationInformation;
Ptsv2paymentsConsumerAuthenticationInformation.discriminator = undefined;
Ptsv2paymentsConsumerAuthenticationInformation.attributeTypeMap = [
    {
        "name": "cavv",
        "baseName": "cavv",
        "type": "string"
    },
    {
        "name": "transactionFlowIndicator",
        "baseName": "transactionFlowIndicator",
        "type": "string"
    },
    {
        "name": "cavvAlgorithm",
        "baseName": "cavvAlgorithm",
        "type": "string"
    },
    {
        "name": "eciRaw",
        "baseName": "eciRaw",
        "type": "string"
    },
    {
        "name": "paresStatus",
        "baseName": "paresStatus",
        "type": "string"
    },
    {
        "name": "veresEnrolled",
        "baseName": "veresEnrolled",
        "type": "string"
    },
    {
        "name": "xid",
        "baseName": "xid",
        "type": "string"
    },
    {
        "name": "ucafCollectionIndicator",
        "baseName": "ucafCollectionIndicator",
        "type": "string"
    },
    {
        "name": "ucafAuthenticationData",
        "baseName": "ucafAuthenticationData",
        "type": "string"
    },
    {
        "name": "strongAuthentication",
        "baseName": "strongAuthentication",
        "type": "Ptsv2paymentsConsumerAuthenticationInformationStrongAuthentication"
    },
    {
        "name": "directoryServerTransactionId",
        "baseName": "directoryServerTransactionId",
        "type": "string"
    },
    {
        "name": "paSpecificationVersion",
        "baseName": "paSpecificationVersion",
        "type": "string"
    },
    {
        "name": "authenticationType",
        "baseName": "authenticationType",
        "type": "string"
    },
    {
        "name": "responseAccessToken",
        "baseName": "responseAccessToken",
        "type": "string"
    },
    {
        "name": "acsTransactionId",
        "baseName": "acsTransactionId",
        "type": "string"
    },
    {
        "name": "acsWindowSize",
        "baseName": "acsWindowSize",
        "type": "string"
    },
    {
        "name": "alternateAuthenticationData",
        "baseName": "alternateAuthenticationData",
        "type": "string"
    },
    {
        "name": "alternateAuthenticationDate",
        "baseName": "alternateAuthenticationDate",
        "type": "string"
    },
    {
        "name": "alternateAuthenticationMethod",
        "baseName": "alternateAuthenticationMethod",
        "type": "string"
    },
    {
        "name": "authenticationDate",
        "baseName": "authenticationDate",
        "type": "string"
    },
    {
        "name": "authenticationTransactionId",
        "baseName": "authenticationTransactionId",
        "type": "string"
    },
    {
        "name": "challengeCancelCode",
        "baseName": "challengeCancelCode",
        "type": "string"
    },
    {
        "name": "challengeCode",
        "baseName": "challengeCode",
        "type": "string"
    },
    {
        "name": "challengeStatus",
        "baseName": "challengeStatus",
        "type": "string"
    },
    {
        "name": "customerCardAlias",
        "baseName": "customerCardAlias",
        "type": "string"
    },
    {
        "name": "decoupledAuthenticationIndicator",
        "baseName": "decoupledAuthenticationIndicator",
        "type": "string"
    },
    {
        "name": "decoupledAuthenticationMaxTime",
        "baseName": "decoupledAuthenticationMaxTime",
        "type": "string"
    },
    {
        "name": "defaultCard",
        "baseName": "defaultCard",
        "type": "boolean"
    },
    {
        "name": "deviceChannel",
        "baseName": "deviceChannel",
        "type": "string"
    },
    {
        "name": "installmentTotalCount",
        "baseName": "installmentTotalCount",
        "type": "number"
    },
    {
        "name": "merchantFraudRate",
        "baseName": "merchantFraudRate",
        "type": "string"
    },
    {
        "name": "marketingOptIn",
        "baseName": "marketingOptIn",
        "type": "boolean"
    },
    {
        "name": "marketingSource",
        "baseName": "marketingSource",
        "type": "string"
    },
    {
        "name": "mcc",
        "baseName": "mcc",
        "type": "string"
    },
    {
        "name": "merchantScore",
        "baseName": "merchantScore",
        "type": "number"
    },
    {
        "name": "messageCategory",
        "baseName": "messageCategory",
        "type": "string"
    },
    {
        "name": "networkScore",
        "baseName": "networkScore",
        "type": "string"
    },
    {
        "name": "npaCode",
        "baseName": "npaCode",
        "type": "string"
    },
    {
        "name": "overridePaymentMethod",
        "baseName": "overridePaymentMethod",
        "type": "string"
    },
    {
        "name": "overrideCountryCode",
        "baseName": "overrideCountryCode",
        "type": "string"
    },
    {
        "name": "priorAuthenticationData",
        "baseName": "priorAuthenticationData",
        "type": "string"
    },
    {
        "name": "priorAuthenticationMethod",
        "baseName": "priorAuthenticationMethod",
        "type": "string"
    },
    {
        "name": "priorAuthenticationReferenceId",
        "baseName": "priorAuthenticationReferenceId",
        "type": "string"
    },
    {
        "name": "priorAuthenticationTime",
        "baseName": "priorAuthenticationTime",
        "type": "string"
    },
    {
        "name": "productCode",
        "baseName": "productCode",
        "type": "string"
    },
    {
        "name": "returnUrl",
        "baseName": "returnUrl",
        "type": "string"
    },
    {
        "name": "requestorId",
        "baseName": "requestorId",
        "type": "string"
    },
    {
        "name": "requestorInitiatedAuthenticationIndicator",
        "baseName": "requestorInitiatedAuthenticationIndicator",
        "type": "string"
    },
    {
        "name": "requestorName",
        "baseName": "requestorName",
        "type": "string"
    },
    {
        "name": "referenceId",
        "baseName": "referenceId",
        "type": "string"
    },
    {
        "name": "sdkMaxTimeout",
        "baseName": "sdkMaxTimeout",
        "type": "string"
    },
    {
        "name": "secureCorporatePaymentIndicator",
        "baseName": "secureCorporatePaymentIndicator",
        "type": "string"
    },
    {
        "name": "transactionMode",
        "baseName": "transactionMode",
        "type": "string"
    },
    {
        "name": "whiteListStatus",
        "baseName": "whiteListStatus",
        "type": "string"
    },
    {
        "name": "authenticationBrand",
        "baseName": "authenticationBrand",
        "type": "string"
    },
    {
        "name": "effectiveAuthenticationType",
        "baseName": "effectiveAuthenticationType",
        "type": "string"
    },
    {
        "name": "signedParesStatusReason",
        "baseName": "signedParesStatusReason",
        "type": "string"
    },
    {
        "name": "signedPares",
        "baseName": "signedPares",
        "type": "string"
    },
    {
        "name": "acsReferenceNumber",
        "baseName": "acsReferenceNumber",
        "type": "string"
    },
    {
        "name": "dsReferenceNumber",
        "baseName": "dsReferenceNumber",
        "type": "string"
    }
];
class Ptsv2paymentsConsumerAuthenticationInformationStrongAuthentication {
    static getAttributeTypeMap() {
        return Ptsv2paymentsConsumerAuthenticationInformationStrongAuthentication.attributeTypeMap;
    }
}
exports.Ptsv2paymentsConsumerAuthenticationInformationStrongAuthentication = Ptsv2paymentsConsumerAuthenticationInformationStrongAuthentication;
Ptsv2paymentsConsumerAuthenticationInformationStrongAuthentication.discriminator = undefined;
Ptsv2paymentsConsumerAuthenticationInformationStrongAuthentication.attributeTypeMap = [
    {
        "name": "issuerInformation",
        "baseName": "issuerInformation",
        "type": "Ptsv2paymentsConsumerAuthenticationInformationStrongAuthenticationIssuerInformation"
    },
    {
        "name": "lowValueExemptionIndicator",
        "baseName": "lowValueExemptionIndicator",
        "type": "string"
    },
    {
        "name": "riskAnalysisExemptionIndicator",
        "baseName": "riskAnalysisExemptionIndicator",
        "type": "string"
    },
    {
        "name": "trustedMerchantExemptionIndicator",
        "baseName": "trustedMerchantExemptionIndicator",
        "type": "string"
    },
    {
        "name": "secureCorporatePaymentIndicator",
        "baseName": "secureCorporatePaymentIndicator",
        "type": "string"
    },
    {
        "name": "delegatedAuthenticationExemptionIndicator",
        "baseName": "delegatedAuthenticationExemptionIndicator",
        "type": "string"
    },
    {
        "name": "outageExemptionIndicator",
        "baseName": "outageExemptionIndicator",
        "type": "string"
    },
    {
        "name": "authenticationIndicator",
        "baseName": "authenticationIndicator",
        "type": "string"
    }
];
class Ptsv2paymentsConsumerAuthenticationInformationStrongAuthenticationIssuerInformation {
    static getAttributeTypeMap() {
        return Ptsv2paymentsConsumerAuthenticationInformationStrongAuthenticationIssuerInformation.attributeTypeMap;
    }
}
exports.Ptsv2paymentsConsumerAuthenticationInformationStrongAuthenticationIssuerInformation = Ptsv2paymentsConsumerAuthenticationInformationStrongAuthenticationIssuerInformation;
Ptsv2paymentsConsumerAuthenticationInformationStrongAuthenticationIssuerInformation.discriminator = undefined;
Ptsv2paymentsConsumerAuthenticationInformationStrongAuthenticationIssuerInformation.attributeTypeMap = [
    {
        "name": "exemptionDataRaw",
        "baseName": "exemptionDataRaw",
        "type": "string"
    }
];
class Ptsv2paymentsDeviceInformation {
    static getAttributeTypeMap() {
        return Ptsv2paymentsDeviceInformation.attributeTypeMap;
    }
}
exports.Ptsv2paymentsDeviceInformation = Ptsv2paymentsDeviceInformation;
Ptsv2paymentsDeviceInformation.discriminator = undefined;
Ptsv2paymentsDeviceInformation.attributeTypeMap = [
    {
        "name": "id",
        "baseName": "id",
        "type": "string"
    },
    {
        "name": "hostName",
        "baseName": "hostName",
        "type": "string"
    },
    {
        "name": "ipAddress",
        "baseName": "ipAddress",
        "type": "string"
    },
    {
        "name": "userAgent",
        "baseName": "userAgent",
        "type": "string"
    },
    {
        "name": "fingerprintSessionId",
        "baseName": "fingerprintSessionId",
        "type": "string"
    },
    {
        "name": "useRawFingerprintSessionId",
        "baseName": "useRawFingerprintSessionId",
        "type": "boolean"
    },
    {
        "name": "deviceType",
        "baseName": "deviceType",
        "type": "string"
    },
    {
        "name": "appUrl",
        "baseName": "appUrl",
        "type": "string"
    },
    {
        "name": "metadata",
        "baseName": "metadata",
        "type": "string"
    },
    {
        "name": "rawData",
        "baseName": "rawData",
        "type": "Array<Ptsv2paymentsDeviceInformationRawData>"
    },
    {
        "name": "httpAcceptBrowserValue",
        "baseName": "httpAcceptBrowserValue",
        "type": "string"
    },
    {
        "name": "httpAcceptContent",
        "baseName": "httpAcceptContent",
        "type": "string"
    },
    {
        "name": "httpBrowserEmail",
        "baseName": "httpBrowserEmail",
        "type": "string"
    },
    {
        "name": "httpBrowserLanguage",
        "baseName": "httpBrowserLanguage",
        "type": "string"
    },
    {
        "name": "httpBrowserJavaEnabled",
        "baseName": "httpBrowserJavaEnabled",
        "type": "boolean"
    },
    {
        "name": "httpBrowserJavaScriptEnabled",
        "baseName": "httpBrowserJavaScriptEnabled",
        "type": "boolean"
    },
    {
        "name": "httpBrowserColorDepth",
        "baseName": "httpBrowserColorDepth",
        "type": "string"
    },
    {
        "name": "httpBrowserScreenHeight",
        "baseName": "httpBrowserScreenHeight",
        "type": "string"
    },
    {
        "name": "httpBrowserScreenWidth",
        "baseName": "httpBrowserScreenWidth",
        "type": "string"
    },
    {
        "name": "httpBrowserTimeDifference",
        "baseName": "httpBrowserTimeDifference",
        "type": "string"
    },
    {
        "name": "userAgentBrowserValue",
        "baseName": "userAgentBrowserValue",
        "type": "string"
    }
];
class Ptsv2paymentsDeviceInformationRawData {
    static getAttributeTypeMap() {
        return Ptsv2paymentsDeviceInformationRawData.attributeTypeMap;
    }
}
exports.Ptsv2paymentsDeviceInformationRawData = Ptsv2paymentsDeviceInformationRawData;
Ptsv2paymentsDeviceInformationRawData.discriminator = undefined;
Ptsv2paymentsDeviceInformationRawData.attributeTypeMap = [
    {
        "name": "data",
        "baseName": "data",
        "type": "string"
    },
    {
        "name": "provider",
        "baseName": "provider",
        "type": "string"
    }
];
class Ptsv2paymentsHealthCareInformation {
    static getAttributeTypeMap() {
        return Ptsv2paymentsHealthCareInformation.attributeTypeMap;
    }
}
exports.Ptsv2paymentsHealthCareInformation = Ptsv2paymentsHealthCareInformation;
Ptsv2paymentsHealthCareInformation.discriminator = undefined;
Ptsv2paymentsHealthCareInformation.attributeTypeMap = [
    {
        "name": "amountDetails",
        "baseName": "amountDetails",
        "type": "Array<Ptsv2paymentsHealthCareInformationAmountDetails>"
    }
];
class Ptsv2paymentsHealthCareInformationAmountDetails {
    static getAttributeTypeMap() {
        return Ptsv2paymentsHealthCareInformationAmountDetails.attributeTypeMap;
    }
}
exports.Ptsv2paymentsHealthCareInformationAmountDetails = Ptsv2paymentsHealthCareInformationAmountDetails;
Ptsv2paymentsHealthCareInformationAmountDetails.discriminator = undefined;
Ptsv2paymentsHealthCareInformationAmountDetails.attributeTypeMap = [
    {
        "name": "amountType",
        "baseName": "amountType",
        "type": "string"
    },
    {
        "name": "amount",
        "baseName": "amount",
        "type": "string"
    }
];
class Ptsv2paymentsHostedPaymentInformation {
    static getAttributeTypeMap() {
        return Ptsv2paymentsHostedPaymentInformation.attributeTypeMap;
    }
}
exports.Ptsv2paymentsHostedPaymentInformation = Ptsv2paymentsHostedPaymentInformation;
Ptsv2paymentsHostedPaymentInformation.discriminator = undefined;
Ptsv2paymentsHostedPaymentInformation.attributeTypeMap = [
    {
        "name": "hostName",
        "baseName": "hostName",
        "type": "string"
    },
    {
        "name": "ipAddress",
        "baseName": "ipAddress",
        "type": "string"
    },
    {
        "name": "userAgent",
        "baseName": "userAgent",
        "type": "Ptsv2paymentsHostedPaymentInformationUserAgent"
    }
];
/**
* The images to be used as background on Klarna’s payment page (the image best matching the resolution will be used). This is a pass-through field. Check Klarna’s documentation for more information about the correct format. This value can also be set in the merchant configuration.
*/
class Ptsv2paymentsHostedPaymentInformationUserAgent {
    static getAttributeTypeMap() {
        return Ptsv2paymentsHostedPaymentInformationUserAgent.attributeTypeMap;
    }
}
exports.Ptsv2paymentsHostedPaymentInformationUserAgent = Ptsv2paymentsHostedPaymentInformationUserAgent;
Ptsv2paymentsHostedPaymentInformationUserAgent.discriminator = undefined;
Ptsv2paymentsHostedPaymentInformationUserAgent.attributeTypeMap = [
    {
        "name": "url",
        "baseName": "url",
        "type": "string"
    },
    {
        "name": "width",
        "baseName": "width",
        "type": "number"
    }
];
class Ptsv2paymentsInstallmentInformation {
    static getAttributeTypeMap() {
        return Ptsv2paymentsInstallmentInformation.attributeTypeMap;
    }
}
exports.Ptsv2paymentsInstallmentInformation = Ptsv2paymentsInstallmentInformation;
Ptsv2paymentsInstallmentInformation.discriminator = undefined;
Ptsv2paymentsInstallmentInformation.attributeTypeMap = [
    {
        "name": "amount",
        "baseName": "amount",
        "type": "string"
    },
    {
        "name": "frequency",
        "baseName": "frequency",
        "type": "string"
    },
    {
        "name": "planType",
        "baseName": "planType",
        "type": "string"
    },
    {
        "name": "sequence",
        "baseName": "sequence",
        "type": "number"
    },
    {
        "name": "totalAmount",
        "baseName": "totalAmount",
        "type": "string"
    },
    {
        "name": "totalCount",
        "baseName": "totalCount",
        "type": "number"
    },
    {
        "name": "firstInstallmentDate",
        "baseName": "firstInstallmentDate",
        "type": "string"
    },
    {
        "name": "invoiceData",
        "baseName": "invoiceData",
        "type": "string"
    },
    {
        "name": "paymentType",
        "baseName": "paymentType",
        "type": "string"
    },
    {
        "name": "eligibilityInquiry",
        "baseName": "eligibilityInquiry",
        "type": "string"
    },
    {
        "name": "gracePeriodDuration",
        "baseName": "gracePeriodDuration",
        "type": "string"
    },
    {
        "name": "gracePeriodDurationType",
        "baseName": "gracePeriodDurationType",
        "type": "string"
    },
    {
        "name": "firstInstallmentAmount",
        "baseName": "firstInstallmentAmount",
        "type": "string"
    },
    {
        "name": "validationIndicator",
        "baseName": "validationIndicator",
        "type": "string"
    },
    {
        "name": "identifier",
        "baseName": "identifier",
        "type": "string"
    },
    {
        "name": "annualInterestRate",
        "baseName": "annualInterestRate",
        "type": "string"
    },
    {
        "name": "interestIndicator",
        "baseName": "interestIndicator",
        "type": "string"
    },
    {
        "name": "isGovernmentPlan",
        "baseName": "isGovernmentPlan",
        "type": "boolean"
    }
];
/**
* invoice Details
*/
class Ptsv2paymentsInvoiceDetails {
    static getAttributeTypeMap() {
        return Ptsv2paymentsInvoiceDetails.attributeTypeMap;
    }
}
exports.Ptsv2paymentsInvoiceDetails = Ptsv2paymentsInvoiceDetails;
Ptsv2paymentsInvoiceDetails.discriminator = undefined;
Ptsv2paymentsInvoiceDetails.attributeTypeMap = [
    {
        "name": "barcodeNumber",
        "baseName": "barcodeNumber",
        "type": "string"
    }
];
class Ptsv2paymentsIssuerInformation {
    static getAttributeTypeMap() {
        return Ptsv2paymentsIssuerInformation.attributeTypeMap;
    }
}
exports.Ptsv2paymentsIssuerInformation = Ptsv2paymentsIssuerInformation;
Ptsv2paymentsIssuerInformation.discriminator = undefined;
Ptsv2paymentsIssuerInformation.attributeTypeMap = [
    {
        "name": "discretionaryData",
        "baseName": "discretionaryData",
        "type": "string"
    }
];
class Ptsv2paymentsMerchantDefinedInformation {
    static getAttributeTypeMap() {
        return Ptsv2paymentsMerchantDefinedInformation.attributeTypeMap;
    }
}
exports.Ptsv2paymentsMerchantDefinedInformation = Ptsv2paymentsMerchantDefinedInformation;
Ptsv2paymentsMerchantDefinedInformation.discriminator = undefined;
Ptsv2paymentsMerchantDefinedInformation.attributeTypeMap = [
    {
        "name": "key",
        "baseName": "key",
        "type": "string"
    },
    {
        "name": "value",
        "baseName": "value",
        "type": "string"
    }
];
/**
* The object containing the secure data that the merchant defines.
*/
class Ptsv2paymentsMerchantDefinedSecureInformation {
    static getAttributeTypeMap() {
        return Ptsv2paymentsMerchantDefinedSecureInformation.attributeTypeMap;
    }
}
exports.Ptsv2paymentsMerchantDefinedSecureInformation = Ptsv2paymentsMerchantDefinedSecureInformation;
Ptsv2paymentsMerchantDefinedSecureInformation.discriminator = undefined;
Ptsv2paymentsMerchantDefinedSecureInformation.attributeTypeMap = [
    {
        "name": "secure1",
        "baseName": "secure1",
        "type": "string"
    },
    {
        "name": "secure2",
        "baseName": "secure2",
        "type": "string"
    },
    {
        "name": "secure3",
        "baseName": "secure3",
        "type": "string"
    },
    {
        "name": "secure4",
        "baseName": "secure4",
        "type": "string"
    }
];
class Ptsv2paymentsMerchantInformation {
    static getAttributeTypeMap() {
        return Ptsv2paymentsMerchantInformation.attributeTypeMap;
    }
}
exports.Ptsv2paymentsMerchantInformation = Ptsv2paymentsMerchantInformation;
Ptsv2paymentsMerchantInformation.discriminator = undefined;
Ptsv2paymentsMerchantInformation.attributeTypeMap = [
    {
        "name": "merchantDescriptor",
        "baseName": "merchantDescriptor",
        "type": "Ptsv2paymentsMerchantInformationMerchantDescriptor"
    },
    {
        "name": "domainName",
        "baseName": "domainName",
        "type": "string"
    },
    {
        "name": "salesOrganizationId",
        "baseName": "salesOrganizationId",
        "type": "string"
    },
    {
        "name": "categoryCode",
        "baseName": "categoryCode",
        "type": "number"
    },
    {
        "name": "categoryCodeDomestic",
        "baseName": "categoryCodeDomestic",
        "type": "number"
    },
    {
        "name": "taxId",
        "baseName": "taxId",
        "type": "string"
    },
    {
        "name": "vatRegistrationNumber",
        "baseName": "vatRegistrationNumber",
        "type": "string"
    },
    {
        "name": "cardAcceptorReferenceNumber",
        "baseName": "cardAcceptorReferenceNumber",
        "type": "string"
    },
    {
        "name": "transactionLocalDateTime",
        "baseName": "transactionLocalDateTime",
        "type": "string"
    },
    {
        "name": "serviceFeeDescriptor",
        "baseName": "serviceFeeDescriptor",
        "type": "Ptsv2paymentsMerchantInformationServiceFeeDescriptor"
    },
    {
        "name": "cancelUrl",
        "baseName": "cancelUrl",
        "type": "string"
    },
    {
        "name": "successUrl",
        "baseName": "successUrl",
        "type": "string"
    },
    {
        "name": "failureUrl",
        "baseName": "failureUrl",
        "type": "string"
    },
    {
        "name": "returnUrl",
        "baseName": "returnUrl",
        "type": "string"
    },
    {
        "name": "partnerIdCode",
        "baseName": "partnerIdCode",
        "type": "string"
    },
    {
        "name": "serviceLocation",
        "baseName": "serviceLocation",
        "type": "Ptsv2paymentsMerchantInformationServiceLocation"
    },
    {
        "name": "noteToBuyer",
        "baseName": "noteToBuyer",
        "type": "string"
    },
    {
        "name": "merchantName",
        "baseName": "merchantName",
        "type": "string"
    }
];
class Ptsv2paymentsMerchantInformationMerchantDescriptor {
    static getAttributeTypeMap() {
        return Ptsv2paymentsMerchantInformationMerchantDescriptor.attributeTypeMap;
    }
}
exports.Ptsv2paymentsMerchantInformationMerchantDescriptor = Ptsv2paymentsMerchantInformationMerchantDescriptor;
Ptsv2paymentsMerchantInformationMerchantDescriptor.discriminator = undefined;
Ptsv2paymentsMerchantInformationMerchantDescriptor.attributeTypeMap = [
    {
        "name": "name",
        "baseName": "name",
        "type": "string"
    },
    {
        "name": "alternateName",
        "baseName": "alternateName",
        "type": "string"
    },
    {
        "name": "contact",
        "baseName": "contact",
        "type": "string"
    },
    {
        "name": "address1",
        "baseName": "address1",
        "type": "string"
    },
    {
        "name": "locality",
        "baseName": "locality",
        "type": "string"
    },
    {
        "name": "country",
        "baseName": "country",
        "type": "string"
    },
    {
        "name": "postalCode",
        "baseName": "postalCode",
        "type": "string"
    },
    {
        "name": "administrativeArea",
        "baseName": "administrativeArea",
        "type": "string"
    },
    {
        "name": "phone",
        "baseName": "phone",
        "type": "string"
    },
    {
        "name": "url",
        "baseName": "url",
        "type": "string"
    },
    {
        "name": "countryOfOrigin",
        "baseName": "countryOfOrigin",
        "type": "string"
    },
    {
        "name": "storeId",
        "baseName": "storeId",
        "type": "string"
    },
    {
        "name": "storeName",
        "baseName": "storeName",
        "type": "string"
    },
    {
        "name": "customerServicePhoneNumber",
        "baseName": "customerServicePhoneNumber",
        "type": "string"
    }
];
class Ptsv2paymentsMerchantInformationServiceFeeDescriptor {
    static getAttributeTypeMap() {
        return Ptsv2paymentsMerchantInformationServiceFeeDescriptor.attributeTypeMap;
    }
}
exports.Ptsv2paymentsMerchantInformationServiceFeeDescriptor = Ptsv2paymentsMerchantInformationServiceFeeDescriptor;
Ptsv2paymentsMerchantInformationServiceFeeDescriptor.discriminator = undefined;
Ptsv2paymentsMerchantInformationServiceFeeDescriptor.attributeTypeMap = [
    {
        "name": "name",
        "baseName": "name",
        "type": "string"
    },
    {
        "name": "contact",
        "baseName": "contact",
        "type": "string"
    },
    {
        "name": "state",
        "baseName": "state",
        "type": "string"
    }
];
class Ptsv2paymentsMerchantInformationServiceLocation {
    static getAttributeTypeMap() {
        return Ptsv2paymentsMerchantInformationServiceLocation.attributeTypeMap;
    }
}
exports.Ptsv2paymentsMerchantInformationServiceLocation = Ptsv2paymentsMerchantInformationServiceLocation;
Ptsv2paymentsMerchantInformationServiceLocation.discriminator = undefined;
Ptsv2paymentsMerchantInformationServiceLocation.attributeTypeMap = [
    {
        "name": "locality",
        "baseName": "locality",
        "type": "string"
    },
    {
        "name": "countrySubdivisionCode",
        "baseName": "countrySubdivisionCode",
        "type": "string"
    },
    {
        "name": "countryCode",
        "baseName": "countryCode",
        "type": "string"
    },
    {
        "name": "postalCode",
        "baseName": "postalCode",
        "type": "string"
    }
];
class Ptsv2paymentsOrderInformation {
    static getAttributeTypeMap() {
        return Ptsv2paymentsOrderInformation.attributeTypeMap;
    }
}
exports.Ptsv2paymentsOrderInformation = Ptsv2paymentsOrderInformation;
Ptsv2paymentsOrderInformation.discriminator = undefined;
Ptsv2paymentsOrderInformation.attributeTypeMap = [
    {
        "name": "amountDetails",
        "baseName": "amountDetails",
        "type": "Ptsv2paymentsOrderInformationAmountDetails"
    },
    {
        "name": "billTo",
        "baseName": "billTo",
        "type": "Ptsv2paymentsOrderInformationBillTo"
    },
    {
        "name": "shipTo",
        "baseName": "shipTo",
        "type": "Ptsv2paymentsOrderInformationShipTo"
    },
    {
        "name": "lineItems",
        "baseName": "lineItems",
        "type": "Array<Ptsv2paymentsOrderInformationLineItems>"
    },
    {
        "name": "invoiceDetails",
        "baseName": "invoiceDetails",
        "type": "Ptsv2paymentsOrderInformationInvoiceDetails"
    },
    {
        "name": "shippingDetails",
        "baseName": "shippingDetails",
        "type": "Ptsv2paymentsOrderInformationShippingDetails"
    },
    {
        "name": "returnsAccepted",
        "baseName": "returnsAccepted",
        "type": "boolean"
    },
    {
        "name": "isCryptocurrencyPurchase",
        "baseName": "isCryptocurrencyPurchase",
        "type": "string"
    },
    {
        "name": "cutoffDateTime",
        "baseName": "cutoffDateTime",
        "type": "string"
    },
    {
        "name": "preOrder",
        "baseName": "preOrder",
        "type": "string"
    },
    {
        "name": "preOrderDate",
        "baseName": "preOrderDate",
        "type": "string"
    },
    {
        "name": "reordered",
        "baseName": "reordered",
        "type": "boolean"
    },
    {
        "name": "totalOffersCount",
        "baseName": "totalOffersCount",
        "type": "string"
    }
];
class Ptsv2paymentsOrderInformationAmountDetails {
    static getAttributeTypeMap() {
        return Ptsv2paymentsOrderInformationAmountDetails.attributeTypeMap;
    }
}
exports.Ptsv2paymentsOrderInformationAmountDetails = Ptsv2paymentsOrderInformationAmountDetails;
Ptsv2paymentsOrderInformationAmountDetails.discriminator = undefined;
Ptsv2paymentsOrderInformationAmountDetails.attributeTypeMap = [
    {
        "name": "giftWrapAmount",
        "baseName": "giftWrapAmount",
        "type": "string"
    },
    {
        "name": "invoiceAmount",
        "baseName": "invoiceAmount",
        "type": "string"
    },
    {
        "name": "totalAmount",
        "baseName": "totalAmount",
        "type": "string"
    },
    {
        "name": "subTotalAmount",
        "baseName": "subTotalAmount",
        "type": "string"
    },
    {
        "name": "currency",
        "baseName": "currency",
        "type": "string"
    },
    {
        "name": "discountAmount",
        "baseName": "discountAmount",
        "type": "string"
    },
    {
        "name": "dutyAmount",
        "baseName": "dutyAmount",
        "type": "string"
    },
    {
        "name": "gratuityAmount",
        "baseName": "gratuityAmount",
        "type": "string"
    },
    {
        "name": "taxAmount",
        "baseName": "taxAmount",
        "type": "string"
    },
    {
        "name": "nationalTaxIncluded",
        "baseName": "nationalTaxIncluded",
        "type": "string"
    },
    {
        "name": "taxAppliedAfterDiscount",
        "baseName": "taxAppliedAfterDiscount",
        "type": "string"
    },
    {
        "name": "taxAppliedLevel",
        "baseName": "taxAppliedLevel",
        "type": "string"
    },
    {
        "name": "taxTypeCode",
        "baseName": "taxTypeCode",
        "type": "string"
    },
    {
        "name": "freightAmount",
        "baseName": "freightAmount",
        "type": "string"
    },
    {
        "name": "foreignAmount",
        "baseName": "foreignAmount",
        "type": "string"
    },
    {
        "name": "foreignCurrency",
        "baseName": "foreignCurrency",
        "type": "string"
    },
    {
        "name": "exchangeRate",
        "baseName": "exchangeRate",
        "type": "string"
    },
    {
        "name": "exchangeRateTimeStamp",
        "baseName": "exchangeRateTimeStamp",
        "type": "string"
    },
    {
        "name": "surcharge",
        "baseName": "surcharge",
        "type": "Ptsv2paymentsOrderInformationAmountDetailsSurcharge"
    },
    {
        "name": "settlementAmount",
        "baseName": "settlementAmount",
        "type": "string"
    },
    {
        "name": "settlementCurrency",
        "baseName": "settlementCurrency",
        "type": "string"
    },
    {
        "name": "amexAdditionalAmounts",
        "baseName": "amexAdditionalAmounts",
        "type": "Array<Ptsv2paymentsOrderInformationAmountDetailsAmexAdditionalAmounts>"
    },
    {
        "name": "taxDetails",
        "baseName": "taxDetails",
        "type": "Array<Ptsv2paymentsOrderInformationAmountDetailsTaxDetails>"
    },
    {
        "name": "serviceFeeAmount",
        "baseName": "serviceFeeAmount",
        "type": "string"
    },
    {
        "name": "originalAmount",
        "baseName": "originalAmount",
        "type": "string"
    },
    {
        "name": "originalCurrency",
        "baseName": "originalCurrency",
        "type": "string"
    },
    {
        "name": "cashbackAmount",
        "baseName": "cashbackAmount",
        "type": "string"
    },
    {
        "name": "currencyConversion",
        "baseName": "currencyConversion",
        "type": "Ptsv2paymentsOrderInformationAmountDetailsCurrencyConversion"
    },
    {
        "name": "octSurcharge",
        "baseName": "oct-surcharge",
        "type": "Ptsv2paymentsOrderInformationAmountDetailsOctsurcharge"
    },
    {
        "name": "order",
        "baseName": "order",
        "type": "Ptsv2paymentsOrderInformationAmountDetailsOrder"
    },
    {
        "name": "anticipatedAmount",
        "baseName": "anticipatedAmount",
        "type": "string"
    }
];
class Ptsv2paymentsOrderInformationAmountDetailsAmexAdditionalAmounts {
    static getAttributeTypeMap() {
        return Ptsv2paymentsOrderInformationAmountDetailsAmexAdditionalAmounts.attributeTypeMap;
    }
}
exports.Ptsv2paymentsOrderInformationAmountDetailsAmexAdditionalAmounts = Ptsv2paymentsOrderInformationAmountDetailsAmexAdditionalAmounts;
Ptsv2paymentsOrderInformationAmountDetailsAmexAdditionalAmounts.discriminator = undefined;
Ptsv2paymentsOrderInformationAmountDetailsAmexAdditionalAmounts.attributeTypeMap = [
    {
        "name": "code",
        "baseName": "code",
        "type": "string"
    },
    {
        "name": "amount",
        "baseName": "amount",
        "type": "string"
    }
];
class Ptsv2paymentsOrderInformationAmountDetailsCurrencyConversion {
    static getAttributeTypeMap() {
        return Ptsv2paymentsOrderInformationAmountDetailsCurrencyConversion.attributeTypeMap;
    }
}
exports.Ptsv2paymentsOrderInformationAmountDetailsCurrencyConversion = Ptsv2paymentsOrderInformationAmountDetailsCurrencyConversion;
Ptsv2paymentsOrderInformationAmountDetailsCurrencyConversion.discriminator = undefined;
Ptsv2paymentsOrderInformationAmountDetailsCurrencyConversion.attributeTypeMap = [
    {
        "name": "indicator",
        "baseName": "indicator",
        "type": "string"
    },
    {
        "name": "reconciliationId",
        "baseName": "reconciliationId",
        "type": "string"
    },
    {
        "name": "id",
        "baseName": "id",
        "type": "string"
    }
];
class Ptsv2paymentsOrderInformationAmountDetailsOctsurcharge {
    static getAttributeTypeMap() {
        return Ptsv2paymentsOrderInformationAmountDetailsOctsurcharge.attributeTypeMap;
    }
}
exports.Ptsv2paymentsOrderInformationAmountDetailsOctsurcharge = Ptsv2paymentsOrderInformationAmountDetailsOctsurcharge;
Ptsv2paymentsOrderInformationAmountDetailsOctsurcharge.discriminator = undefined;
Ptsv2paymentsOrderInformationAmountDetailsOctsurcharge.attributeTypeMap = [
    {
        "name": "amount",
        "baseName": "amount",
        "type": "string"
    }
];
class Ptsv2paymentsOrderInformationAmountDetailsOrder {
    static getAttributeTypeMap() {
        return Ptsv2paymentsOrderInformationAmountDetailsOrder.attributeTypeMap;
    }
}
exports.Ptsv2paymentsOrderInformationAmountDetailsOrder = Ptsv2paymentsOrderInformationAmountDetailsOrder;
Ptsv2paymentsOrderInformationAmountDetailsOrder.discriminator = undefined;
Ptsv2paymentsOrderInformationAmountDetailsOrder.attributeTypeMap = [
    {
        "name": "totalAmount",
        "baseName": "totalAmount",
        "type": "string"
    },
    {
        "name": "currency",
        "baseName": "currency",
        "type": "string"
    },
    {
        "name": "subTotalAmount",
        "baseName": "subTotalAmount",
        "type": "string"
    },
    {
        "name": "handlingAmount",
        "baseName": "handlingAmount",
        "type": "string"
    },
    {
        "name": "shippingAmount",
        "baseName": "shippingAmount",
        "type": "string"
    },
    {
        "name": "shippingDiscountAmount",
        "baseName": "shippingDiscountAmount",
        "type": "string"
    },
    {
        "name": "taxAmount",
        "baseName": "taxAmount",
        "type": "string"
    },
    {
        "name": "insuranceAmount",
        "baseName": "insuranceAmount",
        "type": "string"
    },
    {
        "name": "giftWrapAmount",
        "baseName": "giftWrapAmount",
        "type": "string"
    }
];
class Ptsv2paymentsOrderInformationAmountDetailsSurcharge {
    static getAttributeTypeMap() {
        return Ptsv2paymentsOrderInformationAmountDetailsSurcharge.attributeTypeMap;
    }
}
exports.Ptsv2paymentsOrderInformationAmountDetailsSurcharge = Ptsv2paymentsOrderInformationAmountDetailsSurcharge;
Ptsv2paymentsOrderInformationAmountDetailsSurcharge.discriminator = undefined;
Ptsv2paymentsOrderInformationAmountDetailsSurcharge.attributeTypeMap = [
    {
        "name": "amount",
        "baseName": "amount",
        "type": "string"
    },
    {
        "name": "description",
        "baseName": "description",
        "type": "string"
    }
];
class Ptsv2paymentsOrderInformationAmountDetailsTaxDetails {
    static getAttributeTypeMap() {
        return Ptsv2paymentsOrderInformationAmountDetailsTaxDetails.attributeTypeMap;
    }
}
exports.Ptsv2paymentsOrderInformationAmountDetailsTaxDetails = Ptsv2paymentsOrderInformationAmountDetailsTaxDetails;
Ptsv2paymentsOrderInformationAmountDetailsTaxDetails.discriminator = undefined;
Ptsv2paymentsOrderInformationAmountDetailsTaxDetails.attributeTypeMap = [
    {
        "name": "type",
        "baseName": "type",
        "type": "string"
    },
    {
        "name": "amount",
        "baseName": "amount",
        "type": "string"
    },
    {
        "name": "rate",
        "baseName": "rate",
        "type": "string"
    },
    {
        "name": "code",
        "baseName": "code",
        "type": "string"
    },
    {
        "name": "taxId",
        "baseName": "taxId",
        "type": "string"
    },
    {
        "name": "applied",
        "baseName": "applied",
        "type": "boolean"
    },
    {
        "name": "exemptionCode",
        "baseName": "exemptionCode",
        "type": "string"
    }
];
class Ptsv2paymentsOrderInformationBillTo {
    static getAttributeTypeMap() {
        return Ptsv2paymentsOrderInformationBillTo.attributeTypeMap;
    }
}
exports.Ptsv2paymentsOrderInformationBillTo = Ptsv2paymentsOrderInformationBillTo;
Ptsv2paymentsOrderInformationBillTo.discriminator = undefined;
Ptsv2paymentsOrderInformationBillTo.attributeTypeMap = [
    {
        "name": "firstName",
        "baseName": "firstName",
        "type": "string"
    },
    {
        "name": "lastName",
        "baseName": "lastName",
        "type": "string"
    },
    {
        "name": "middleName",
        "baseName": "middleName",
        "type": "string"
    },
    {
        "name": "nameSuffix",
        "baseName": "nameSuffix",
        "type": "string"
    },
    {
        "name": "title",
        "baseName": "title",
        "type": "string"
    },
    {
        "name": "company",
        "baseName": "company",
        "type": "Ptsv2paymentsOrderInformationBillToCompany"
    },
    {
        "name": "address1",
        "baseName": "address1",
        "type": "string"
    },
    {
        "name": "address2",
        "baseName": "address2",
        "type": "string"
    },
    {
        "name": "address3",
        "baseName": "address3",
        "type": "string"
    },
    {
        "name": "address4",
        "baseName": "address4",
        "type": "string"
    },
    {
        "name": "locality",
        "baseName": "locality",
        "type": "string"
    },
    {
        "name": "administrativeArea",
        "baseName": "administrativeArea",
        "type": "string"
    },
    {
        "name": "postalCode",
        "baseName": "postalCode",
        "type": "string"
    },
    {
        "name": "county",
        "baseName": "county",
        "type": "string"
    },
    {
        "name": "country",
        "baseName": "country",
        "type": "string"
    },
    {
        "name": "district",
        "baseName": "district",
        "type": "string"
    },
    {
        "name": "buildingNumber",
        "baseName": "buildingNumber",
        "type": "string"
    },
    {
        "name": "email",
        "baseName": "email",
        "type": "string"
    },
    {
        "name": "emailDomain",
        "baseName": "emailDomain",
        "type": "string"
    },
    {
        "name": "phoneNumber",
        "baseName": "phoneNumber",
        "type": "string"
    },
    {
        "name": "phoneType",
        "baseName": "phoneType",
        "type": "string"
    },
    {
        "name": "verificationStatus",
        "baseName": "verificationStatus",
        "type": "string"
    },
    {
        "name": "alternatePhoneNumber",
        "baseName": "alternatePhoneNumber",
        "type": "string"
    },
    {
        "name": "alternateEmail",
        "baseName": "alternateEmail",
        "type": "string"
    }
];
class Ptsv2paymentsOrderInformationBillToCompany {
    static getAttributeTypeMap() {
        return Ptsv2paymentsOrderInformationBillToCompany.attributeTypeMap;
    }
}
exports.Ptsv2paymentsOrderInformationBillToCompany = Ptsv2paymentsOrderInformationBillToCompany;
Ptsv2paymentsOrderInformationBillToCompany.discriminator = undefined;
Ptsv2paymentsOrderInformationBillToCompany.attributeTypeMap = [
    {
        "name": "name",
        "baseName": "name",
        "type": "string"
    },
    {
        "name": "address1",
        "baseName": "address1",
        "type": "string"
    },
    {
        "name": "address2",
        "baseName": "address2",
        "type": "string"
    },
    {
        "name": "locality",
        "baseName": "locality",
        "type": "string"
    },
    {
        "name": "administrativeArea",
        "baseName": "administrativeArea",
        "type": "string"
    },
    {
        "name": "postalCode",
        "baseName": "postalCode",
        "type": "string"
    },
    {
        "name": "country",
        "baseName": "country",
        "type": "string"
    }
];
class Ptsv2paymentsOrderInformationInvoiceDetails {
    static getAttributeTypeMap() {
        return Ptsv2paymentsOrderInformationInvoiceDetails.attributeTypeMap;
    }
}
exports.Ptsv2paymentsOrderInformationInvoiceDetails = Ptsv2paymentsOrderInformationInvoiceDetails;
Ptsv2paymentsOrderInformationInvoiceDetails.discriminator = undefined;
Ptsv2paymentsOrderInformationInvoiceDetails.attributeTypeMap = [
    {
        "name": "invoiceNumber",
        "baseName": "invoiceNumber",
        "type": "string"
    },
    {
        "name": "barcodeNumber",
        "baseName": "barcodeNumber",
        "type": "string"
    },
    {
        "name": "expirationDate",
        "baseName": "expirationDate",
        "type": "string"
    },
    {
        "name": "purchaseOrderNumber",
        "baseName": "purchaseOrderNumber",
        "type": "string"
    },
    {
        "name": "purchaseOrderDate",
        "baseName": "purchaseOrderDate",
        "type": "string"
    },
    {
        "name": "purchaseContactName",
        "baseName": "purchaseContactName",
        "type": "string"
    },
    {
        "name": "taxable",
        "baseName": "taxable",
        "type": "boolean"
    },
    {
        "name": "vatInvoiceReferenceNumber",
        "baseName": "vatInvoiceReferenceNumber",
        "type": "string"
    },
    {
        "name": "commodityCode",
        "baseName": "commodityCode",
        "type": "string"
    },
    {
        "name": "merchandiseCode",
        "baseName": "merchandiseCode",
        "type": "number"
    },
    {
        "name": "transactionAdviceAddendum",
        "baseName": "transactionAdviceAddendum",
        "type": "Array<Ptsv2paymentsOrderInformationInvoiceDetailsTransactionAdviceAddendum>"
    },
    {
        "name": "referenceDataCode",
        "baseName": "referenceDataCode",
        "type": "string"
    },
    {
        "name": "referenceDataNumber",
        "baseName": "referenceDataNumber",
        "type": "string"
    },
    {
        "name": "salesSlipNumber",
        "baseName": "salesSlipNumber",
        "type": "number"
    },
    {
        "name": "invoiceDate",
        "baseName": "invoiceDate",
        "type": "string"
    },
    {
        "name": "costCenter",
        "baseName": "costCenter",
        "type": "string"
    },
    {
        "name": "issuerMessage",
        "baseName": "issuerMessage",
        "type": "string"
    },
    {
        "name": "productDescription",
        "baseName": "productDescription",
        "type": "string"
    }
];
class Ptsv2paymentsOrderInformationInvoiceDetailsTransactionAdviceAddendum {
    static getAttributeTypeMap() {
        return Ptsv2paymentsOrderInformationInvoiceDetailsTransactionAdviceAddendum.attributeTypeMap;
    }
}
exports.Ptsv2paymentsOrderInformationInvoiceDetailsTransactionAdviceAddendum = Ptsv2paymentsOrderInformationInvoiceDetailsTransactionAdviceAddendum;
Ptsv2paymentsOrderInformationInvoiceDetailsTransactionAdviceAddendum.discriminator = undefined;
Ptsv2paymentsOrderInformationInvoiceDetailsTransactionAdviceAddendum.attributeTypeMap = [
    {
        "name": "data",
        "baseName": "data",
        "type": "string"
    }
];
class Ptsv2paymentsOrderInformationLineItems {
    static getAttributeTypeMap() {
        return Ptsv2paymentsOrderInformationLineItems.attributeTypeMap;
    }
}
exports.Ptsv2paymentsOrderInformationLineItems = Ptsv2paymentsOrderInformationLineItems;
Ptsv2paymentsOrderInformationLineItems.discriminator = undefined;
Ptsv2paymentsOrderInformationLineItems.attributeTypeMap = [
    {
        "name": "productCode",
        "baseName": "productCode",
        "type": "string"
    },
    {
        "name": "productName",
        "baseName": "productName",
        "type": "string"
    },
    {
        "name": "productSku",
        "baseName": "productSku",
        "type": "string"
    },
    {
        "name": "quantity",
        "baseName": "quantity",
        "type": "number"
    },
    {
        "name": "unitPrice",
        "baseName": "unitPrice",
        "type": "string"
    },
    {
        "name": "unitOfMeasure",
        "baseName": "unitOfMeasure",
        "type": "string"
    },
    {
        "name": "totalAmount",
        "baseName": "totalAmount",
        "type": "string"
    },
    {
        "name": "taxAmount",
        "baseName": "taxAmount",
        "type": "string"
    },
    {
        "name": "taxRate",
        "baseName": "taxRate",
        "type": "string"
    },
    {
        "name": "taxAppliedAfterDiscount",
        "baseName": "taxAppliedAfterDiscount",
        "type": "string"
    },
    {
        "name": "taxStatusIndicator",
        "baseName": "taxStatusIndicator",
        "type": "string"
    },
    {
        "name": "taxTypeCode",
        "baseName": "taxTypeCode",
        "type": "string"
    },
    {
        "name": "amountIncludesTax",
        "baseName": "amountIncludesTax",
        "type": "boolean"
    },
    {
        "name": "typeOfSupply",
        "baseName": "typeOfSupply",
        "type": "string"
    },
    {
        "name": "commodityCode",
        "baseName": "commodityCode",
        "type": "string"
    },
    {
        "name": "discountAmount",
        "baseName": "discountAmount",
        "type": "string"
    },
    {
        "name": "discountApplied",
        "baseName": "discountApplied",
        "type": "boolean"
    },
    {
        "name": "discountRate",
        "baseName": "discountRate",
        "type": "string"
    },
    {
        "name": "invoiceNumber",
        "baseName": "invoiceNumber",
        "type": "string"
    },
    {
        "name": "taxDetails",
        "baseName": "taxDetails",
        "type": "Array<Ptsv2paymentsOrderInformationAmountDetailsTaxDetails>"
    },
    {
        "name": "fulfillmentType",
        "baseName": "fulfillmentType",
        "type": "string"
    },
    {
        "name": "weight",
        "baseName": "weight",
        "type": "string"
    },
    {
        "name": "weightIdentifier",
        "baseName": "weightIdentifier",
        "type": "string"
    },
    {
        "name": "weightUnit",
        "baseName": "weightUnit",
        "type": "string"
    },
    {
        "name": "referenceDataCode",
        "baseName": "referenceDataCode",
        "type": "string"
    },
    {
        "name": "referenceDataNumber",
        "baseName": "referenceDataNumber",
        "type": "string"
    },
    {
        "name": "unitTaxAmount",
        "baseName": "unitTaxAmount",
        "type": "string"
    },
    {
        "name": "measurement",
        "baseName": "measurement",
        "type": "string"
    },
    {
        "name": "productDescription",
        "baseName": "productDescription",
        "type": "string"
    },
    {
        "name": "giftCardCurrency",
        "baseName": "giftCardCurrency",
        "type": "number"
    },
    {
        "name": "shippingDestinationTypes",
        "baseName": "shippingDestinationTypes",
        "type": "string"
    },
    {
        "name": "gift",
        "baseName": "gift",
        "type": "boolean"
    },
    {
        "name": "passenger",
        "baseName": "passenger",
        "type": "Ptsv2paymentsOrderInformationPassenger"
    },
    {
        "name": "allowedExportCountries",
        "baseName": "allowedExportCountries",
        "type": "Array<string>"
    },
    {
        "name": "restrictedExportCountries",
        "baseName": "restrictedExportCountries",
        "type": "Array<string>"
    }
];
/**
* Contains travel-related passenger details used by DM service only.
*/
class Ptsv2paymentsOrderInformationPassenger {
    static getAttributeTypeMap() {
        return Ptsv2paymentsOrderInformationPassenger.attributeTypeMap;
    }
}
exports.Ptsv2paymentsOrderInformationPassenger = Ptsv2paymentsOrderInformationPassenger;
Ptsv2paymentsOrderInformationPassenger.discriminator = undefined;
Ptsv2paymentsOrderInformationPassenger.attributeTypeMap = [
    {
        "name": "type",
        "baseName": "type",
        "type": "string"
    },
    {
        "name": "status",
        "baseName": "status",
        "type": "string"
    },
    {
        "name": "phone",
        "baseName": "phone",
        "type": "string"
    },
    {
        "name": "firstName",
        "baseName": "firstName",
        "type": "string"
    },
    {
        "name": "lastName",
        "baseName": "lastName",
        "type": "string"
    },
    {
        "name": "id",
        "baseName": "id",
        "type": "string"
    },
    {
        "name": "email",
        "baseName": "email",
        "type": "string"
    },
    {
        "name": "nationality",
        "baseName": "nationality",
        "type": "string"
    }
];
class Ptsv2paymentsOrderInformationShipTo {
    static getAttributeTypeMap() {
        return Ptsv2paymentsOrderInformationShipTo.attributeTypeMap;
    }
}
exports.Ptsv2paymentsOrderInformationShipTo = Ptsv2paymentsOrderInformationShipTo;
Ptsv2paymentsOrderInformationShipTo.discriminator = undefined;
Ptsv2paymentsOrderInformationShipTo.attributeTypeMap = [
    {
        "name": "title",
        "baseName": "title",
        "type": "string"
    },
    {
        "name": "firstName",
        "baseName": "firstName",
        "type": "string"
    },
    {
        "name": "middleName",
        "baseName": "middleName",
        "type": "string"
    },
    {
        "name": "lastName",
        "baseName": "lastName",
        "type": "string"
    },
    {
        "name": "address1",
        "baseName": "address1",
        "type": "string"
    },
    {
        "name": "address2",
        "baseName": "address2",
        "type": "string"
    },
    {
        "name": "locality",
        "baseName": "locality",
        "type": "string"
    },
    {
        "name": "administrativeArea",
        "baseName": "administrativeArea",
        "type": "string"
    },
    {
        "name": "postalCode",
        "baseName": "postalCode",
        "type": "string"
    },
    {
        "name": "county",
        "baseName": "county",
        "type": "string"
    },
    {
        "name": "country",
        "baseName": "country",
        "type": "string"
    },
    {
        "name": "district",
        "baseName": "district",
        "type": "string"
    },
    {
        "name": "buildingNumber",
        "baseName": "buildingNumber",
        "type": "string"
    },
    {
        "name": "phoneNumber",
        "baseName": "phoneNumber",
        "type": "string"
    },
    {
        "name": "email",
        "baseName": "email",
        "type": "string"
    },
    {
        "name": "company",
        "baseName": "company",
        "type": "string"
    },
    {
        "name": "destinationTypes",
        "baseName": "destinationTypes",
        "type": "string"
    },
    {
        "name": "destinationCode",
        "baseName": "destinationCode",
        "type": "number"
    },
    {
        "name": "method",
        "baseName": "method",
        "type": "string"
    }
];
/**
* Contains shipping information not related to address.
*/
class Ptsv2paymentsOrderInformationShippingDetails {
    static getAttributeTypeMap() {
        return Ptsv2paymentsOrderInformationShippingDetails.attributeTypeMap;
    }
}
exports.Ptsv2paymentsOrderInformationShippingDetails = Ptsv2paymentsOrderInformationShippingDetails;
Ptsv2paymentsOrderInformationShippingDetails.discriminator = undefined;
Ptsv2paymentsOrderInformationShippingDetails.attributeTypeMap = [
    {
        "name": "giftWrap",
        "baseName": "giftWrap",
        "type": "boolean"
    },
    {
        "name": "shippingMethod",
        "baseName": "shippingMethod",
        "type": "string"
    },
    {
        "name": "shipFromPostalCode",
        "baseName": "shipFromPostalCode",
        "type": "string"
    }
];
class Ptsv2paymentsPaymentInformation {
    static getAttributeTypeMap() {
        return Ptsv2paymentsPaymentInformation.attributeTypeMap;
    }
}
exports.Ptsv2paymentsPaymentInformation = Ptsv2paymentsPaymentInformation;
Ptsv2paymentsPaymentInformation.discriminator = undefined;
Ptsv2paymentsPaymentInformation.attributeTypeMap = [
    {
        "name": "card",
        "baseName": "card",
        "type": "Ptsv2paymentsPaymentInformationCard"
    },
    {
        "name": "tokenizedCard",
        "baseName": "tokenizedCard",
        "type": "Ptsv2paymentsPaymentInformationTokenizedCard"
    },
    {
        "name": "tokenizedPaymentMethod",
        "baseName": "tokenizedPaymentMethod",
        "type": "Ptsv2paymentsPaymentInformationTokenizedPaymentMethod"
    },
    {
        "name": "directDebit",
        "baseName": "directDebit",
        "type": "Ptsv2paymentsPaymentInformationDirectDebit"
    },
    {
        "name": "fluidData",
        "baseName": "fluidData",
        "type": "Ptsv2paymentsPaymentInformationFluidData"
    },
    {
        "name": "customer",
        "baseName": "customer",
        "type": "Ptsv2paymentsPaymentInformationCustomer"
    },
    {
        "name": "paymentInstrument",
        "baseName": "paymentInstrument",
        "type": "Ptsv2paymentsPaymentInformationPaymentInstrument"
    },
    {
        "name": "instrumentIdentifier",
        "baseName": "instrumentIdentifier",
        "type": "Ptsv2paymentsPaymentInformationInstrumentIdentifier"
    },
    {
        "name": "shippingAddress",
        "baseName": "shippingAddress",
        "type": "Ptsv2paymentsPaymentInformationShippingAddress"
    },
    {
        "name": "legacyToken",
        "baseName": "legacyToken",
        "type": "Ptsv2paymentsPaymentInformationLegacyToken"
    },
    {
        "name": "bank",
        "baseName": "bank",
        "type": "Ptsv2paymentsPaymentInformationBank"
    },
    {
        "name": "options",
        "baseName": "options",
        "type": "Ptsv2paymentsPaymentInformationOptions"
    },
    {
        "name": "paymentType",
        "baseName": "paymentType",
        "type": "Ptsv2paymentsPaymentInformationPaymentType"
    },
    {
        "name": "initiationChannel",
        "baseName": "initiationChannel",
        "type": "string"
    },
    {
        "name": "sepa",
        "baseName": "sepa",
        "type": "Ptsv2paymentsPaymentInformationSepa"
    },
    {
        "name": "eWallet",
        "baseName": "eWallet",
        "type": "Ptsv2paymentsPaymentInformationEWallet"
    },
    {
        "name": "paymentAccountReference",
        "baseName": "paymentAccountReference",
        "type": "Ptsv2paymentsPaymentInformationPaymentAccountReference"
    }
];
class Ptsv2paymentsPaymentInformationBank {
    static getAttributeTypeMap() {
        return Ptsv2paymentsPaymentInformationBank.attributeTypeMap;
    }
}
exports.Ptsv2paymentsPaymentInformationBank = Ptsv2paymentsPaymentInformationBank;
Ptsv2paymentsPaymentInformationBank.discriminator = undefined;
Ptsv2paymentsPaymentInformationBank.attributeTypeMap = [
    {
        "name": "account",
        "baseName": "account",
        "type": "Ptsv2paymentsPaymentInformationBankAccount"
    },
    {
        "name": "routingNumber",
        "baseName": "routingNumber",
        "type": "string"
    },
    {
        "name": "iban",
        "baseName": "iban",
        "type": "string"
    },
    {
        "name": "swiftCode",
        "baseName": "swiftCode",
        "type": "string"
    },
    {
        "name": "code",
        "baseName": "code",
        "type": "string"
    }
];
class Ptsv2paymentsPaymentInformationBankAccount {
    static getAttributeTypeMap() {
        return Ptsv2paymentsPaymentInformationBankAccount.attributeTypeMap;
    }
}
exports.Ptsv2paymentsPaymentInformationBankAccount = Ptsv2paymentsPaymentInformationBankAccount;
Ptsv2paymentsPaymentInformationBankAccount.discriminator = undefined;
Ptsv2paymentsPaymentInformationBankAccount.attributeTypeMap = [
    {
        "name": "type",
        "baseName": "type",
        "type": "string"
    },
    {
        "name": "number",
        "baseName": "number",
        "type": "string"
    },
    {
        "name": "encoderId",
        "baseName": "encoderId",
        "type": "string"
    },
    {
        "name": "checkNumber",
        "baseName": "checkNumber",
        "type": "string"
    },
    {
        "name": "checkImageReferenceNumber",
        "baseName": "checkImageReferenceNumber",
        "type": "string"
    },
    {
        "name": "iban",
        "baseName": "iban",
        "type": "string"
    }
];
class Ptsv2paymentsPaymentInformationCard {
    static getAttributeTypeMap() {
        return Ptsv2paymentsPaymentInformationCard.attributeTypeMap;
    }
}
exports.Ptsv2paymentsPaymentInformationCard = Ptsv2paymentsPaymentInformationCard;
Ptsv2paymentsPaymentInformationCard.discriminator = undefined;
Ptsv2paymentsPaymentInformationCard.attributeTypeMap = [
    {
        "name": "number",
        "baseName": "number",
        "type": "string"
    },
    {
        "name": "expirationMonth",
        "baseName": "expirationMonth",
        "type": "string"
    },
    {
        "name": "expirationYear",
        "baseName": "expirationYear",
        "type": "string"
    },
    {
        "name": "type",
        "baseName": "type",
        "type": "string"
    },
    {
        "name": "useAs",
        "baseName": "useAs",
        "type": "string"
    },
    {
        "name": "sourceAccountType",
        "baseName": "sourceAccountType",
        "type": "string"
    },
    {
        "name": "sourceAccountTypeDetails",
        "baseName": "sourceAccountTypeDetails",
        "type": "string"
    },
    {
        "name": "securityCode",
        "baseName": "securityCode",
        "type": "string"
    },
    {
        "name": "securityCodeIndicator",
        "baseName": "securityCodeIndicator",
        "type": "string"
    },
    {
        "name": "accountEncoderId",
        "baseName": "accountEncoderId",
        "type": "string"
    },
    {
        "name": "issueNumber",
        "baseName": "issueNumber",
        "type": "string"
    },
    {
        "name": "startMonth",
        "baseName": "startMonth",
        "type": "string"
    },
    {
        "name": "startYear",
        "baseName": "startYear",
        "type": "string"
    },
    {
        "name": "productName",
        "baseName": "productName",
        "type": "string"
    },
    {
        "name": "productSubtype",
        "baseName": "productSubtype",
        "type": "string"
    },
    {
        "name": "typeSelectionIndicator",
        "baseName": "typeSelectionIndicator",
        "type": "string"
    }
];
class Ptsv2paymentsPaymentInformationCustomer {
    static getAttributeTypeMap() {
        return Ptsv2paymentsPaymentInformationCustomer.attributeTypeMap;
    }
}
exports.Ptsv2paymentsPaymentInformationCustomer = Ptsv2paymentsPaymentInformationCustomer;
Ptsv2paymentsPaymentInformationCustomer.discriminator = undefined;
Ptsv2paymentsPaymentInformationCustomer.attributeTypeMap = [
    {
        "name": "customerId",
        "baseName": "customerId",
        "type": "string"
    },
    {
        "name": "id",
        "baseName": "id",
        "type": "string"
    }
];
class Ptsv2paymentsPaymentInformationDirectDebit {
    static getAttributeTypeMap() {
        return Ptsv2paymentsPaymentInformationDirectDebit.attributeTypeMap;
    }
}
exports.Ptsv2paymentsPaymentInformationDirectDebit = Ptsv2paymentsPaymentInformationDirectDebit;
Ptsv2paymentsPaymentInformationDirectDebit.discriminator = undefined;
Ptsv2paymentsPaymentInformationDirectDebit.attributeTypeMap = [
    {
        "name": "mandate",
        "baseName": "mandate",
        "type": "Ptsv2paymentsPaymentInformationDirectDebitMandate"
    }
];
class Ptsv2paymentsPaymentInformationDirectDebitMandate {
    static getAttributeTypeMap() {
        return Ptsv2paymentsPaymentInformationDirectDebitMandate.attributeTypeMap;
    }
}
exports.Ptsv2paymentsPaymentInformationDirectDebitMandate = Ptsv2paymentsPaymentInformationDirectDebitMandate;
Ptsv2paymentsPaymentInformationDirectDebitMandate.discriminator = undefined;
Ptsv2paymentsPaymentInformationDirectDebitMandate.attributeTypeMap = [
    {
        "name": "clearingDate",
        "baseName": "clearingDate",
        "type": "string"
    }
];
class Ptsv2paymentsPaymentInformationEWallet {
    static getAttributeTypeMap() {
        return Ptsv2paymentsPaymentInformationEWallet.attributeTypeMap;
    }
}
exports.Ptsv2paymentsPaymentInformationEWallet = Ptsv2paymentsPaymentInformationEWallet;
Ptsv2paymentsPaymentInformationEWallet.discriminator = undefined;
Ptsv2paymentsPaymentInformationEWallet.attributeTypeMap = [
    {
        "name": "accountId",
        "baseName": "accountId",
        "type": "string"
    },
    {
        "name": "fundingSource",
        "baseName": "fundingSource",
        "type": "string"
    }
];
class Ptsv2paymentsPaymentInformationFluidData {
    static getAttributeTypeMap() {
        return Ptsv2paymentsPaymentInformationFluidData.attributeTypeMap;
    }
}
exports.Ptsv2paymentsPaymentInformationFluidData = Ptsv2paymentsPaymentInformationFluidData;
Ptsv2paymentsPaymentInformationFluidData.discriminator = undefined;
Ptsv2paymentsPaymentInformationFluidData.attributeTypeMap = [
    {
        "name": "keySerialNumber",
        "baseName": "keySerialNumber",
        "type": "string"
    },
    {
        "name": "descriptor",
        "baseName": "descriptor",
        "type": "string"
    },
    {
        "name": "value",
        "baseName": "value",
        "type": "string"
    },
    {
        "name": "encoding",
        "baseName": "encoding",
        "type": "string"
    }
];
class Ptsv2paymentsPaymentInformationInstrumentIdentifier {
    static getAttributeTypeMap() {
        return Ptsv2paymentsPaymentInformationInstrumentIdentifier.attributeTypeMap;
    }
}
exports.Ptsv2paymentsPaymentInformationInstrumentIdentifier = Ptsv2paymentsPaymentInformationInstrumentIdentifier;
Ptsv2paymentsPaymentInformationInstrumentIdentifier.discriminator = undefined;
Ptsv2paymentsPaymentInformationInstrumentIdentifier.attributeTypeMap = [
    {
        "name": "id",
        "baseName": "id",
        "type": "string"
    }
];
class Ptsv2paymentsPaymentInformationLegacyToken {
    static getAttributeTypeMap() {
        return Ptsv2paymentsPaymentInformationLegacyToken.attributeTypeMap;
    }
}
exports.Ptsv2paymentsPaymentInformationLegacyToken = Ptsv2paymentsPaymentInformationLegacyToken;
Ptsv2paymentsPaymentInformationLegacyToken.discriminator = undefined;
Ptsv2paymentsPaymentInformationLegacyToken.attributeTypeMap = [
    {
        "name": "id",
        "baseName": "id",
        "type": "string"
    }
];
class Ptsv2paymentsPaymentInformationOptions {
    static getAttributeTypeMap() {
        return Ptsv2paymentsPaymentInformationOptions.attributeTypeMap;
    }
}
exports.Ptsv2paymentsPaymentInformationOptions = Ptsv2paymentsPaymentInformationOptions;
Ptsv2paymentsPaymentInformationOptions.discriminator = undefined;
Ptsv2paymentsPaymentInformationOptions.attributeTypeMap = [
    {
        "name": "id",
        "baseName": "id",
        "type": "string"
    }
];
class Ptsv2paymentsPaymentInformationPaymentAccountReference {
    static getAttributeTypeMap() {
        return Ptsv2paymentsPaymentInformationPaymentAccountReference.attributeTypeMap;
    }
}
exports.Ptsv2paymentsPaymentInformationPaymentAccountReference = Ptsv2paymentsPaymentInformationPaymentAccountReference;
Ptsv2paymentsPaymentInformationPaymentAccountReference.discriminator = undefined;
Ptsv2paymentsPaymentInformationPaymentAccountReference.attributeTypeMap = [
    {
        "name": "id",
        "baseName": "id",
        "type": "string"
    }
];
class Ptsv2paymentsPaymentInformationPaymentInstrument {
    static getAttributeTypeMap() {
        return Ptsv2paymentsPaymentInformationPaymentInstrument.attributeTypeMap;
    }
}
exports.Ptsv2paymentsPaymentInformationPaymentInstrument = Ptsv2paymentsPaymentInformationPaymentInstrument;
Ptsv2paymentsPaymentInformationPaymentInstrument.discriminator = undefined;
Ptsv2paymentsPaymentInformationPaymentInstrument.attributeTypeMap = [
    {
        "name": "id",
        "baseName": "id",
        "type": "string"
    }
];
class Ptsv2paymentsPaymentInformationPaymentType {
    static getAttributeTypeMap() {
        return Ptsv2paymentsPaymentInformationPaymentType.attributeTypeMap;
    }
}
exports.Ptsv2paymentsPaymentInformationPaymentType = Ptsv2paymentsPaymentInformationPaymentType;
Ptsv2paymentsPaymentInformationPaymentType.discriminator = undefined;
Ptsv2paymentsPaymentInformationPaymentType.attributeTypeMap = [
    {
        "name": "name",
        "baseName": "name",
        "type": "string"
    },
    {
        "name": "subTypeName",
        "baseName": "subTypeName",
        "type": "string"
    },
    {
        "name": "method",
        "baseName": "method",
        "type": "Ptsv2paymentsPaymentInformationPaymentTypeMethod"
    }
];
class Ptsv2paymentsPaymentInformationPaymentTypeMethod {
    static getAttributeTypeMap() {
        return Ptsv2paymentsPaymentInformationPaymentTypeMethod.attributeTypeMap;
    }
}
exports.Ptsv2paymentsPaymentInformationPaymentTypeMethod = Ptsv2paymentsPaymentInformationPaymentTypeMethod;
Ptsv2paymentsPaymentInformationPaymentTypeMethod.discriminator = undefined;
Ptsv2paymentsPaymentInformationPaymentTypeMethod.attributeTypeMap = [
    {
        "name": "name",
        "baseName": "name",
        "type": "string"
    },
    {
        "name": "type",
        "baseName": "type",
        "type": "string"
    }
];
class Ptsv2paymentsPaymentInformationSepa {
    static getAttributeTypeMap() {
        return Ptsv2paymentsPaymentInformationSepa.attributeTypeMap;
    }
}
exports.Ptsv2paymentsPaymentInformationSepa = Ptsv2paymentsPaymentInformationSepa;
Ptsv2paymentsPaymentInformationSepa.discriminator = undefined;
Ptsv2paymentsPaymentInformationSepa.attributeTypeMap = [
    {
        "name": "directDebit",
        "baseName": "directDebit",
        "type": "Ptsv2paymentsPaymentInformationSepaDirectDebit"
    }
];
class Ptsv2paymentsPaymentInformationSepaDirectDebit {
    static getAttributeTypeMap() {
        return Ptsv2paymentsPaymentInformationSepaDirectDebit.attributeTypeMap;
    }
}
exports.Ptsv2paymentsPaymentInformationSepaDirectDebit = Ptsv2paymentsPaymentInformationSepaDirectDebit;
Ptsv2paymentsPaymentInformationSepaDirectDebit.discriminator = undefined;
Ptsv2paymentsPaymentInformationSepaDirectDebit.attributeTypeMap = [
    {
        "name": "reference",
        "baseName": "reference",
        "type": "string"
    },
    {
        "name": "signatureDate",
        "baseName": "signatureDate",
        "type": "string"
    },
    {
        "name": "url",
        "baseName": "url",
        "type": "string"
    },
    {
        "name": "type",
        "baseName": "type",
        "type": "string"
    }
];
class Ptsv2paymentsPaymentInformationShippingAddress {
    static getAttributeTypeMap() {
        return Ptsv2paymentsPaymentInformationShippingAddress.attributeTypeMap;
    }
}
exports.Ptsv2paymentsPaymentInformationShippingAddress = Ptsv2paymentsPaymentInformationShippingAddress;
Ptsv2paymentsPaymentInformationShippingAddress.discriminator = undefined;
Ptsv2paymentsPaymentInformationShippingAddress.attributeTypeMap = [
    {
        "name": "id",
        "baseName": "id",
        "type": "string"
    }
];
class Ptsv2paymentsPaymentInformationTokenizedCard {
    static getAttributeTypeMap() {
        return Ptsv2paymentsPaymentInformationTokenizedCard.attributeTypeMap;
    }
}
exports.Ptsv2paymentsPaymentInformationTokenizedCard = Ptsv2paymentsPaymentInformationTokenizedCard;
Ptsv2paymentsPaymentInformationTokenizedCard.discriminator = undefined;
Ptsv2paymentsPaymentInformationTokenizedCard.attributeTypeMap = [
    {
        "name": "number",
        "baseName": "number",
        "type": "string"
    },
    {
        "name": "expirationMonth",
        "baseName": "expirationMonth",
        "type": "string"
    },
    {
        "name": "expirationYear",
        "baseName": "expirationYear",
        "type": "string"
    },
    {
        "name": "type",
        "baseName": "type",
        "type": "string"
    },
    {
        "name": "cryptogram",
        "baseName": "cryptogram",
        "type": "string"
    },
    {
        "name": "requestorId",
        "baseName": "requestorId",
        "type": "string"
    },
    {
        "name": "transactionType",
        "baseName": "transactionType",
        "type": "string"
    },
    {
        "name": "assuranceLevel",
        "baseName": "assuranceLevel",
        "type": "string"
    },
    {
        "name": "storageMethod",
        "baseName": "storageMethod",
        "type": "string"
    },
    {
        "name": "securityCode",
        "baseName": "securityCode",
        "type": "string"
    },
    {
        "name": "securityCodeIndicator",
        "baseName": "securityCodeIndicator",
        "type": "string"
    },
    {
        "name": "assuranceMethod",
        "baseName": "assuranceMethod",
        "type": "string"
    }
];
class Ptsv2paymentsPaymentInformationTokenizedPaymentMethod {
    static getAttributeTypeMap() {
        return Ptsv2paymentsPaymentInformationTokenizedPaymentMethod.attributeTypeMap;
    }
}
exports.Ptsv2paymentsPaymentInformationTokenizedPaymentMethod = Ptsv2paymentsPaymentInformationTokenizedPaymentMethod;
Ptsv2paymentsPaymentInformationTokenizedPaymentMethod.discriminator = undefined;
Ptsv2paymentsPaymentInformationTokenizedPaymentMethod.attributeTypeMap = [
    {
        "name": "id",
        "baseName": "id",
        "type": "string"
    }
];
class Ptsv2paymentsPointOfSaleInformation {
    static getAttributeTypeMap() {
        return Ptsv2paymentsPointOfSaleInformation.attributeTypeMap;
    }
}
exports.Ptsv2paymentsPointOfSaleInformation = Ptsv2paymentsPointOfSaleInformation;
Ptsv2paymentsPointOfSaleInformation.discriminator = undefined;
Ptsv2paymentsPointOfSaleInformation.attributeTypeMap = [
    {
        "name": "terminalId",
        "baseName": "terminalId",
        "type": "string"
    },
    {
        "name": "terminalSerialNumber",
        "baseName": "terminalSerialNumber",
        "type": "string"
    },
    {
        "name": "cardholderVerificationMethodUsed",
        "baseName": "cardholderVerificationMethodUsed",
        "type": "number"
    },
    {
        "name": "laneNumber",
        "baseName": "laneNumber",
        "type": "string"
    },
    {
        "name": "catLevel",
        "baseName": "catLevel",
        "type": "number"
    },
    {
        "name": "entryMode",
        "baseName": "entryMode",
        "type": "string"
    },
    {
        "name": "terminalCapability",
        "baseName": "terminalCapability",
        "type": "number"
    },
    {
        "name": "operatingEnvironment",
        "baseName": "operatingEnvironment",
        "type": "string"
    },
    {
        "name": "emv",
        "baseName": "emv",
        "type": "Ptsv2paymentsPointOfSaleInformationEmv"
    },
    {
        "name": "amexCapnData",
        "baseName": "amexCapnData",
        "type": "string"
    },
    {
        "name": "trackData",
        "baseName": "trackData",
        "type": "string"
    },
    {
        "name": "storeAndForwardIndicator",
        "baseName": "storeAndForwardIndicator",
        "type": "string"
    },
    {
        "name": "cardholderVerificationMethod",
        "baseName": "cardholderVerificationMethod",
        "type": "Array<string>"
    },
    {
        "name": "terminalCategory",
        "baseName": "terminalCategory",
        "type": "string"
    },
    {
        "name": "terminalInputCapability",
        "baseName": "terminalInputCapability",
        "type": "Array<string>"
    },
    {
        "name": "terminalCardCaptureCapability",
        "baseName": "terminalCardCaptureCapability",
        "type": "string"
    },
    {
        "name": "terminalOutputCapability",
        "baseName": "terminalOutputCapability",
        "type": "string"
    },
    {
        "name": "terminalPinCapability",
        "baseName": "terminalPinCapability",
        "type": "number"
    },
    {
        "name": "pinEntrySolution",
        "baseName": "pinEntrySolution",
        "type": "string"
    },
    {
        "name": "deviceId",
        "baseName": "deviceId",
        "type": "string"
    },
    {
        "name": "pinBlockEncodingFormat",
        "baseName": "pinBlockEncodingFormat",
        "type": "number"
    },
    {
        "name": "encryptedPin",
        "baseName": "encryptedPin",
        "type": "string"
    },
    {
        "name": "encryptedKeySerialNumber",
        "baseName": "encryptedKeySerialNumber",
        "type": "string"
    },
    {
        "name": "partnerSdkVersion",
        "baseName": "partnerSdkVersion",
        "type": "string"
    },
    {
        "name": "emvApplicationIdentifierAndDedicatedFileName",
        "baseName": "emvApplicationIdentifierAndDedicatedFileName",
        "type": "string"
    },
    {
        "name": "terminalCompliance",
        "baseName": "terminalCompliance",
        "type": "string"
    },
    {
        "name": "isDedicatedHardwareTerminal",
        "baseName": "isDedicatedHardwareTerminal",
        "type": "string"
    },
    {
        "name": "terminalModel",
        "baseName": "terminalModel",
        "type": "string"
    },
    {
        "name": "terminalMake",
        "baseName": "terminalMake",
        "type": "string"
    },
    {
        "name": "serviceCode",
        "baseName": "serviceCode",
        "type": "string"
    }
];
class Ptsv2paymentsPointOfSaleInformationEmv {
    static getAttributeTypeMap() {
        return Ptsv2paymentsPointOfSaleInformationEmv.attributeTypeMap;
    }
}
exports.Ptsv2paymentsPointOfSaleInformationEmv = Ptsv2paymentsPointOfSaleInformationEmv;
Ptsv2paymentsPointOfSaleInformationEmv.discriminator = undefined;
Ptsv2paymentsPointOfSaleInformationEmv.attributeTypeMap = [
    {
        "name": "tags",
        "baseName": "tags",
        "type": "string"
    },
    {
        "name": "cardholderVerificationMethodUsed",
        "baseName": "cardholderVerificationMethodUsed",
        "type": "number"
    },
    {
        "name": "cardSequenceNumber",
        "baseName": "cardSequenceNumber",
        "type": "string"
    },
    {
        "name": "fallback",
        "baseName": "fallback",
        "type": "boolean"
    },
    {
        "name": "fallbackCondition",
        "baseName": "fallbackCondition",
        "type": "number"
    },
    {
        "name": "isRepeat",
        "baseName": "isRepeat",
        "type": "boolean"
    }
];
class Ptsv2paymentsProcessingInformation {
    static getAttributeTypeMap() {
        return Ptsv2paymentsProcessingInformation.attributeTypeMap;
    }
}
exports.Ptsv2paymentsProcessingInformation = Ptsv2paymentsProcessingInformation;
Ptsv2paymentsProcessingInformation.discriminator = undefined;
Ptsv2paymentsProcessingInformation.attributeTypeMap = [
    {
        "name": "actionList",
        "baseName": "actionList",
        "type": "Array<string>"
    },
    {
        "name": "enableEscrowOption",
        "baseName": "enableEscrowOption",
        "type": "boolean"
    },
    {
        "name": "actionTokenTypes",
        "baseName": "actionTokenTypes",
        "type": "Array<string>"
    },
    {
        "name": "binSource",
        "baseName": "binSource",
        "type": "string"
    },
    {
        "name": "capture",
        "baseName": "capture",
        "type": "boolean"
    },
    {
        "name": "processorId",
        "baseName": "processorId",
        "type": "string"
    },
    {
        "name": "businessApplicationId",
        "baseName": "businessApplicationId",
        "type": "string"
    },
    {
        "name": "commerceIndicator",
        "baseName": "commerceIndicator",
        "type": "string"
    },
    {
        "name": "commerceIndicatorLabel",
        "baseName": "commerceIndicatorLabel",
        "type": "string"
    },
    {
        "name": "paymentSolution",
        "baseName": "paymentSolution",
        "type": "string"
    },
    {
        "name": "reconciliationId",
        "baseName": "reconciliationId",
        "type": "string"
    },
    {
        "name": "linkId",
        "baseName": "linkId",
        "type": "string"
    },
    {
        "name": "purchaseLevel",
        "baseName": "purchaseLevel",
        "type": "string"
    },
    {
        "name": "transactionTimeout",
        "baseName": "transactionTimeout",
        "type": "number"
    },
    {
        "name": "intentsId",
        "baseName": "intentsId",
        "type": "string"
    },
    {
        "name": "reportGroup",
        "baseName": "reportGroup",
        "type": "string"
    },
    {
        "name": "visaCheckoutId",
        "baseName": "visaCheckoutId",
        "type": "string"
    },
    {
        "name": "industryDataType",
        "baseName": "industryDataType",
        "type": "string"
    },
    {
        "name": "authorizationOptions",
        "baseName": "authorizationOptions",
        "type": "Ptsv2paymentsProcessingInformationAuthorizationOptions"
    },
    {
        "name": "captureOptions",
        "baseName": "captureOptions",
        "type": "Ptsv2paymentsProcessingInformationCaptureOptions"
    },
    {
        "name": "recurringOptions",
        "baseName": "recurringOptions",
        "type": "Ptsv2paymentsProcessingInformationRecurringOptions"
    },
    {
        "name": "bankTransferOptions",
        "baseName": "bankTransferOptions",
        "type": "Ptsv2paymentsProcessingInformationBankTransferOptions"
    },
    {
        "name": "purchaseOptions",
        "baseName": "purchaseOptions",
        "type": "Ptsv2paymentsProcessingInformationPurchaseOptions"
    },
    {
        "name": "electronicBenefitsTransfer",
        "baseName": "electronicBenefitsTransfer",
        "type": "Ptsv2paymentsProcessingInformationElectronicBenefitsTransfer"
    },
    {
        "name": "loanOptions",
        "baseName": "loanOptions",
        "type": "Ptsv2paymentsProcessingInformationLoanOptions"
    },
    {
        "name": "walletType",
        "baseName": "walletType",
        "type": "string"
    },
    {
        "name": "nationalNetDomesticData",
        "baseName": "nationalNetDomesticData",
        "type": "string"
    },
    {
        "name": "japanPaymentOptions",
        "baseName": "japanPaymentOptions",
        "type": "Ptsv2paymentsProcessingInformationJapanPaymentOptions"
    },
    {
        "name": "mobileRemotePaymentType",
        "baseName": "mobileRemotePaymentType",
        "type": "string"
    },
    {
        "name": "extendedCreditTotalCount",
        "baseName": "extendedCreditTotalCount",
        "type": "string"
    },
    {
        "name": "networkRoutingOrder",
        "baseName": "networkRoutingOrder",
        "type": "string"
    },
    {
        "name": "payByPointsIndicator",
        "baseName": "payByPointsIndicator",
        "type": "boolean"
    },
    {
        "name": "timeout",
        "baseName": "timeout",
        "type": "number"
    },
    {
        "name": "isReturnAuthRecordEnabled",
        "baseName": "isReturnAuthRecordEnabled",
        "type": "boolean"
    },
    {
        "name": "networkPartnerId",
        "baseName": "networkPartnerId",
        "type": "string"
    },
    {
        "name": "paymentType",
        "baseName": "paymentType",
        "type": "string"
    },
    {
        "name": "enablerId",
        "baseName": "enablerId",
        "type": "string"
    },
    {
        "name": "processingInstruction",
        "baseName": "processingInstruction",
        "type": "string"
    },
    {
        "name": "transactionTypeIndicator",
        "baseName": "transactionTypeIndicator",
        "type": "string"
    },
    {
        "name": "purposeOfPayment",
        "baseName": "purposeOfPayment",
        "type": "string"
    },
    {
        "name": "languageCode",
        "baseName": "languageCode",
        "type": "string"
    },
    {
        "name": "originalPaymentId",
        "baseName": "originalPaymentId",
        "type": "string"
    }
];
class Ptsv2paymentsProcessingInformationAuthorizationOptions {
    static getAttributeTypeMap() {
        return Ptsv2paymentsProcessingInformationAuthorizationOptions.attributeTypeMap;
    }
}
exports.Ptsv2paymentsProcessingInformationAuthorizationOptions = Ptsv2paymentsProcessingInformationAuthorizationOptions;
Ptsv2paymentsProcessingInformationAuthorizationOptions.discriminator = undefined;
Ptsv2paymentsProcessingInformationAuthorizationOptions.attributeTypeMap = [
    {
        "name": "authType",
        "baseName": "authType",
        "type": "string"
    },
    {
        "name": "panReturnIndicator",
        "baseName": "panReturnIndicator",
        "type": "string"
    },
    {
        "name": "verbalAuthCode",
        "baseName": "verbalAuthCode",
        "type": "string"
    },
    {
        "name": "verbalAuthTransactionId",
        "baseName": "verbalAuthTransactionId",
        "type": "string"
    },
    {
        "name": "authIndicator",
        "baseName": "authIndicator",
        "type": "string"
    },
    {
        "name": "partialAuthIndicator",
        "baseName": "partialAuthIndicator",
        "type": "boolean"
    },
    {
        "name": "extendAuthIndicator",
        "baseName": "extendAuthIndicator",
        "type": "string"
    },
    {
        "name": "balanceInquiry",
        "baseName": "balanceInquiry",
        "type": "boolean"
    },
    {
        "name": "ignoreAvsResult",
        "baseName": "ignoreAvsResult",
        "type": "boolean"
    },
    {
        "name": "declineAvsFlags",
        "baseName": "declineAvsFlags",
        "type": "Array<string>"
    },
    {
        "name": "ignoreCvResult",
        "baseName": "ignoreCvResult",
        "type": "boolean"
    },
    {
        "name": "initiator",
        "baseName": "initiator",
        "type": "Ptsv2paymentsProcessingInformationAuthorizationOptionsInitiator"
    },
    {
        "name": "billPayment",
        "baseName": "billPayment",
        "type": "boolean"
    },
    {
        "name": "billPaymentType",
        "baseName": "billPaymentType",
        "type": "string"
    },
    {
        "name": "redemptionInquiry",
        "baseName": "redemptionInquiry",
        "type": "boolean"
    },
    {
        "name": "transportationMode",
        "baseName": "transportationMode",
        "type": "string"
    },
    {
        "name": "aggregatedAuthIndicator",
        "baseName": "aggregatedAuthIndicator",
        "type": "string"
    },
    {
        "name": "debtRecoveryIndicator",
        "baseName": "debtRecoveryIndicator",
        "type": "string"
    },
    {
        "name": "deferredAuthIndicator",
        "baseName": "deferredAuthIndicator",
        "type": "boolean"
    },
    {
        "name": "cashAdvanceIndicator",
        "baseName": "cashAdvanceIndicator",
        "type": "boolean"
    },
    {
        "name": "splitPaymentTransaction",
        "baseName": "splitPaymentTransaction",
        "type": "boolean"
    },
    {
        "name": "cardVerificationIndicator",
        "baseName": "cardVerificationIndicator",
        "type": "boolean"
    },
    {
        "name": "transactionMode",
        "baseName": "transactionMode",
        "type": "string"
    },
    {
        "name": "aftIndicator",
        "baseName": "aftIndicator",
        "type": "boolean"
    },
    {
        "name": "serviceType",
        "baseName": "serviceType",
        "type": "string"
    },
    {
        "name": "balanceUpdate",
        "baseName": "balanceUpdate",
        "type": "boolean"
    },
    {
        "name": "moneyLoad",
        "baseName": "moneyLoad",
        "type": "boolean"
    }
];
class Ptsv2paymentsProcessingInformationAuthorizationOptionsInitiator {
    static getAttributeTypeMap() {
        return Ptsv2paymentsProcessingInformationAuthorizationOptionsInitiator.attributeTypeMap;
    }
}
exports.Ptsv2paymentsProcessingInformationAuthorizationOptionsInitiator = Ptsv2paymentsProcessingInformationAuthorizationOptionsInitiator;
Ptsv2paymentsProcessingInformationAuthorizationOptionsInitiator.discriminator = undefined;
Ptsv2paymentsProcessingInformationAuthorizationOptionsInitiator.attributeTypeMap = [
    {
        "name": "type",
        "baseName": "type",
        "type": "string"
    },
    {
        "name": "credentialStoredOnFile",
        "baseName": "credentialStoredOnFile",
        "type": "boolean"
    },
    {
        "name": "storedCredentialUsed",
        "baseName": "storedCredentialUsed",
        "type": "boolean"
    },
    {
        "name": "merchantInitiatedTransaction",
        "baseName": "merchantInitiatedTransaction",
        "type": "Ptsv2paymentsProcessingInformationAuthorizationOptionsInitiatorMerchantInitiatedTransaction"
    }
];
class Ptsv2paymentsProcessingInformationAuthorizationOptionsInitiatorMerchantInitiatedTransaction {
    static getAttributeTypeMap() {
        return Ptsv2paymentsProcessingInformationAuthorizationOptionsInitiatorMerchantInitiatedTransaction.attributeTypeMap;
    }
}
exports.Ptsv2paymentsProcessingInformationAuthorizationOptionsInitiatorMerchantInitiatedTransaction = Ptsv2paymentsProcessingInformationAuthorizationOptionsInitiatorMerchantInitiatedTransaction;
Ptsv2paymentsProcessingInformationAuthorizationOptionsInitiatorMerchantInitiatedTransaction.discriminator = undefined;
Ptsv2paymentsProcessingInformationAuthorizationOptionsInitiatorMerchantInitiatedTransaction.attributeTypeMap = [
    {
        "name": "reason",
        "baseName": "reason",
        "type": "string"
    },
    {
        "name": "previousTransactionId",
        "baseName": "previousTransactionId",
        "type": "string"
    },
    {
        "name": "originalAuthorizedAmount",
        "baseName": "originalAuthorizedAmount",
        "type": "string"
    },
    {
        "name": "agreementId",
        "baseName": "agreementId",
        "type": "string"
    }
];
class Ptsv2paymentsProcessingInformationBankTransferOptions {
    static getAttributeTypeMap() {
        return Ptsv2paymentsProcessingInformationBankTransferOptions.attributeTypeMap;
    }
}
exports.Ptsv2paymentsProcessingInformationBankTransferOptions = Ptsv2paymentsProcessingInformationBankTransferOptions;
Ptsv2paymentsProcessingInformationBankTransferOptions.discriminator = undefined;
Ptsv2paymentsProcessingInformationBankTransferOptions.attributeTypeMap = [
    {
        "name": "declineAvsFlags",
        "baseName": "declineAvsFlags",
        "type": "string"
    },
    {
        "name": "secCode",
        "baseName": "secCode",
        "type": "string"
    },
    {
        "name": "terminalCity",
        "baseName": "terminalCity",
        "type": "string"
    },
    {
        "name": "terminalState",
        "baseName": "terminalState",
        "type": "string"
    },
    {
        "name": "effectiveDate",
        "baseName": "effectiveDate",
        "type": "string"
    },
    {
        "name": "partialPaymentId",
        "baseName": "partialPaymentId",
        "type": "string"
    },
    {
        "name": "customerMemo",
        "baseName": "customerMemo",
        "type": "string"
    },
    {
        "name": "paymentCategoryCode",
        "baseName": "paymentCategoryCode",
        "type": "string"
    },
    {
        "name": "settlementMethod",
        "baseName": "settlementMethod",
        "type": "string"
    },
    {
        "name": "fraudScreeningLevel",
        "baseName": "fraudScreeningLevel",
        "type": "string"
    },
    {
        "name": "customerPresent",
        "baseName": "customerPresent",
        "type": "string"
    }
];
class Ptsv2paymentsProcessingInformationCaptureOptions {
    static getAttributeTypeMap() {
        return Ptsv2paymentsProcessingInformationCaptureOptions.attributeTypeMap;
    }
}
exports.Ptsv2paymentsProcessingInformationCaptureOptions = Ptsv2paymentsProcessingInformationCaptureOptions;
Ptsv2paymentsProcessingInformationCaptureOptions.discriminator = undefined;
Ptsv2paymentsProcessingInformationCaptureOptions.attributeTypeMap = [
    {
        "name": "captureSequenceNumber",
        "baseName": "captureSequenceNumber",
        "type": "number"
    },
    {
        "name": "totalCaptureCount",
        "baseName": "totalCaptureCount",
        "type": "number"
    },
    {
        "name": "dateToCapture",
        "baseName": "dateToCapture",
        "type": "string"
    },
    {
        "name": "isFinal",
        "baseName": "isFinal",
        "type": "string"
    },
    {
        "name": "notes",
        "baseName": "notes",
        "type": "string"
    },
    {
        "name": "reconciliationId",
        "baseName": "reconciliationId",
        "type": "string"
    },
    {
        "name": "reconciliationIdAlternate",
        "baseName": "reconciliationIdAlternate",
        "type": "string"
    }
];
class Ptsv2paymentsProcessingInformationElectronicBenefitsTransfer {
    static getAttributeTypeMap() {
        return Ptsv2paymentsProcessingInformationElectronicBenefitsTransfer.attributeTypeMap;
    }
}
exports.Ptsv2paymentsProcessingInformationElectronicBenefitsTransfer = Ptsv2paymentsProcessingInformationElectronicBenefitsTransfer;
Ptsv2paymentsProcessingInformationElectronicBenefitsTransfer.discriminator = undefined;
Ptsv2paymentsProcessingInformationElectronicBenefitsTransfer.attributeTypeMap = [
    {
        "name": "category",
        "baseName": "category",
        "type": "string"
    },
    {
        "name": "voucherSerialNumber",
        "baseName": "voucherSerialNumber",
        "type": "string"
    }
];
class Ptsv2paymentsProcessingInformationJapanPaymentOptions {
    static getAttributeTypeMap() {
        return Ptsv2paymentsProcessingInformationJapanPaymentOptions.attributeTypeMap;
    }
}
exports.Ptsv2paymentsProcessingInformationJapanPaymentOptions = Ptsv2paymentsProcessingInformationJapanPaymentOptions;
Ptsv2paymentsProcessingInformationJapanPaymentOptions.discriminator = undefined;
Ptsv2paymentsProcessingInformationJapanPaymentOptions.attributeTypeMap = [
    {
        "name": "paymentMethod",
        "baseName": "paymentMethod",
        "type": "string"
    },
    {
        "name": "bonuses",
        "baseName": "bonuses",
        "type": "Array<Ptsv2paymentsProcessingInformationJapanPaymentOptionsBonuses>"
    },
    {
        "name": "preapprovalType",
        "baseName": "preapprovalType",
        "type": "string"
    },
    {
        "name": "installments",
        "baseName": "installments",
        "type": "string"
    },
    {
        "name": "terminalId",
        "baseName": "terminalId",
        "type": "string"
    },
    {
        "name": "firstBillingMonth",
        "baseName": "firstBillingMonth",
        "type": "string"
    },
    {
        "name": "businessName",
        "baseName": "businessName",
        "type": "string"
    },
    {
        "name": "businessNameKatakana",
        "baseName": "businessNameKatakana",
        "type": "string"
    },
    {
        "name": "jis2TrackData",
        "baseName": "jis2TrackData",
        "type": "string"
    },
    {
        "name": "businessNameAlphaNumeric",
        "baseName": "businessNameAlphaNumeric",
        "type": "string"
    }
];
class Ptsv2paymentsProcessingInformationJapanPaymentOptionsBonuses {
    static getAttributeTypeMap() {
        return Ptsv2paymentsProcessingInformationJapanPaymentOptionsBonuses.attributeTypeMap;
    }
}
exports.Ptsv2paymentsProcessingInformationJapanPaymentOptionsBonuses = Ptsv2paymentsProcessingInformationJapanPaymentOptionsBonuses;
Ptsv2paymentsProcessingInformationJapanPaymentOptionsBonuses.discriminator = undefined;
Ptsv2paymentsProcessingInformationJapanPaymentOptionsBonuses.attributeTypeMap = [
    {
        "name": "month",
        "baseName": "month",
        "type": "string"
    },
    {
        "name": "amount",
        "baseName": "amount",
        "type": "string"
    }
];
class Ptsv2paymentsProcessingInformationLoanOptions {
    static getAttributeTypeMap() {
        return Ptsv2paymentsProcessingInformationLoanOptions.attributeTypeMap;
    }
}
exports.Ptsv2paymentsProcessingInformationLoanOptions = Ptsv2paymentsProcessingInformationLoanOptions;
Ptsv2paymentsProcessingInformationLoanOptions.discriminator = undefined;
Ptsv2paymentsProcessingInformationLoanOptions.attributeTypeMap = [
    {
        "name": "type",
        "baseName": "type",
        "type": "string"
    },
    {
        "name": "assetType",
        "baseName": "assetType",
        "type": "string"
    }
];
class Ptsv2paymentsProcessingInformationPurchaseOptions {
    static getAttributeTypeMap() {
        return Ptsv2paymentsProcessingInformationPurchaseOptions.attributeTypeMap;
    }
}
exports.Ptsv2paymentsProcessingInformationPurchaseOptions = Ptsv2paymentsProcessingInformationPurchaseOptions;
Ptsv2paymentsProcessingInformationPurchaseOptions.discriminator = undefined;
Ptsv2paymentsProcessingInformationPurchaseOptions.attributeTypeMap = [
    {
        "name": "isElectronicBenefitsTransfer",
        "baseName": "isElectronicBenefitsTransfer",
        "type": "boolean"
    },
    {
        "name": "type",
        "baseName": "type",
        "type": "string"
    },
    {
        "name": "eligibilityIndicator",
        "baseName": "eligibilityIndicator",
        "type": "string"
    },
    {
        "name": "benefitAmount",
        "baseName": "benefitAmount",
        "type": "string"
    },
    {
        "name": "benefitType",
        "baseName": "benefitType",
        "type": "string"
    }
];
class Ptsv2paymentsProcessingInformationRecurringOptions {
    static getAttributeTypeMap() {
        return Ptsv2paymentsProcessingInformationRecurringOptions.attributeTypeMap;
    }
}
exports.Ptsv2paymentsProcessingInformationRecurringOptions = Ptsv2paymentsProcessingInformationRecurringOptions;
Ptsv2paymentsProcessingInformationRecurringOptions.discriminator = undefined;
Ptsv2paymentsProcessingInformationRecurringOptions.attributeTypeMap = [
    {
        "name": "loanPayment",
        "baseName": "loanPayment",
        "type": "boolean"
    },
    {
        "name": "firstRecurringPayment",
        "baseName": "firstRecurringPayment",
        "type": "boolean"
    }
];
/**
* Processor Information
*/
class Ptsv2paymentsProcessorInformation {
    static getAttributeTypeMap() {
        return Ptsv2paymentsProcessorInformation.attributeTypeMap;
    }
}
exports.Ptsv2paymentsProcessorInformation = Ptsv2paymentsProcessorInformation;
Ptsv2paymentsProcessorInformation.discriminator = undefined;
Ptsv2paymentsProcessorInformation.attributeTypeMap = [
    {
        "name": "preApprovalToken",
        "baseName": "preApprovalToken",
        "type": "string"
    },
    {
        "name": "authorizationOptions",
        "baseName": "authorizationOptions",
        "type": "Ptsv2paymentsProcessorInformationAuthorizationOptions"
    },
    {
        "name": "reversal",
        "baseName": "reversal",
        "type": "Ptsv2paymentsProcessorInformationReversal"
    }
];
class Ptsv2paymentsProcessorInformationAuthorizationOptions {
    static getAttributeTypeMap() {
        return Ptsv2paymentsProcessorInformationAuthorizationOptions.attributeTypeMap;
    }
}
exports.Ptsv2paymentsProcessorInformationAuthorizationOptions = Ptsv2paymentsProcessorInformationAuthorizationOptions;
Ptsv2paymentsProcessorInformationAuthorizationOptions.discriminator = undefined;
Ptsv2paymentsProcessorInformationAuthorizationOptions.attributeTypeMap = [
    {
        "name": "panReturnIndicator",
        "baseName": "panReturnIndicator",
        "type": "string"
    }
];
class Ptsv2paymentsProcessorInformationReversal {
    static getAttributeTypeMap() {
        return Ptsv2paymentsProcessorInformationReversal.attributeTypeMap;
    }
}
exports.Ptsv2paymentsProcessorInformationReversal = Ptsv2paymentsProcessorInformationReversal;
Ptsv2paymentsProcessorInformationReversal.discriminator = undefined;
Ptsv2paymentsProcessorInformationReversal.attributeTypeMap = [
    {
        "name": "preApprovalToken",
        "baseName": "preApprovalToken",
        "type": "string"
    }
];
class Ptsv2paymentsPromotionInformation {
    static getAttributeTypeMap() {
        return Ptsv2paymentsPromotionInformation.attributeTypeMap;
    }
}
exports.Ptsv2paymentsPromotionInformation = Ptsv2paymentsPromotionInformation;
Ptsv2paymentsPromotionInformation.discriminator = undefined;
Ptsv2paymentsPromotionInformation.attributeTypeMap = [
    {
        "name": "additionalCode",
        "baseName": "additionalCode",
        "type": "string"
    },
    {
        "name": "code",
        "baseName": "code",
        "type": "string"
    }
];
class Ptsv2paymentsRecipientInformation {
    static getAttributeTypeMap() {
        return Ptsv2paymentsRecipientInformation.attributeTypeMap;
    }
}
exports.Ptsv2paymentsRecipientInformation = Ptsv2paymentsRecipientInformation;
Ptsv2paymentsRecipientInformation.discriminator = undefined;
Ptsv2paymentsRecipientInformation.attributeTypeMap = [
    {
        "name": "accountId",
        "baseName": "accountId",
        "type": "string"
    },
    {
        "name": "accountType",
        "baseName": "accountType",
        "type": "string"
    },
    {
        "name": "firstName",
        "baseName": "firstName",
        "type": "string"
    },
    {
        "name": "middleName",
        "baseName": "middleName",
        "type": "string"
    },
    {
        "name": "lastName",
        "baseName": "lastName",
        "type": "string"
    },
    {
        "name": "address1",
        "baseName": "address1",
        "type": "string"
    },
    {
        "name": "administrativeArea",
        "baseName": "administrativeArea",
        "type": "string"
    },
    {
        "name": "postalCode",
        "baseName": "postalCode",
        "type": "string"
    },
    {
        "name": "country",
        "baseName": "country",
        "type": "string"
    },
    {
        "name": "dateOfBirth",
        "baseName": "dateOfBirth",
        "type": "string"
    },
    {
        "name": "beneficiaryId",
        "baseName": "beneficiaryId",
        "type": "string"
    },
    {
        "name": "beneficiaryName",
        "baseName": "beneficiaryName",
        "type": "string"
    },
    {
        "name": "beneficiaryAddress",
        "baseName": "beneficiaryAddress",
        "type": "string"
    },
    {
        "name": "aliasName",
        "baseName": "aliasName",
        "type": "string"
    },
    {
        "name": "nationality",
        "baseName": "nationality",
        "type": "string"
    },
    {
        "name": "countryOfBirth",
        "baseName": "countryOfBirth",
        "type": "string"
    },
    {
        "name": "occupation",
        "baseName": "occupation",
        "type": "string"
    },
    {
        "name": "email",
        "baseName": "email",
        "type": "string"
    },
    {
        "name": "locality",
        "baseName": "locality",
        "type": "string"
    }
];
/**
* This object contains recurring payment information.
*/
class Ptsv2paymentsRecurringPaymentInformation {
    static getAttributeTypeMap() {
        return Ptsv2paymentsRecurringPaymentInformation.attributeTypeMap;
    }
}
exports.Ptsv2paymentsRecurringPaymentInformation = Ptsv2paymentsRecurringPaymentInformation;
Ptsv2paymentsRecurringPaymentInformation.discriminator = undefined;
Ptsv2paymentsRecurringPaymentInformation.attributeTypeMap = [
    {
        "name": "endDate",
        "baseName": "endDate",
        "type": "string"
    },
    {
        "name": "frequency",
        "baseName": "frequency",
        "type": "number"
    },
    {
        "name": "numberOfPayments",
        "baseName": "numberOfPayments",
        "type": "number"
    },
    {
        "name": "originalPurchaseDate",
        "baseName": "originalPurchaseDate",
        "type": "string"
    },
    {
        "name": "sequenceNumber",
        "baseName": "sequenceNumber",
        "type": "number"
    },
    {
        "name": "type",
        "baseName": "type",
        "type": "string"
    },
    {
        "name": "occurrence",
        "baseName": "occurrence",
        "type": "string"
    },
    {
        "name": "validationIndicator",
        "baseName": "validationIndicator",
        "type": "string"
    },
    {
        "name": "amountType",
        "baseName": "amountType",
        "type": "string"
    },
    {
        "name": "maximumAmount",
        "baseName": "maximumAmount",
        "type": "string"
    },
    {
        "name": "referenceNumber",
        "baseName": "referenceNumber",
        "type": "string"
    }
];
/**
* This object is only needed when you are requesting both payment and DM services at same time.
*/
class Ptsv2paymentsRiskInformation {
    static getAttributeTypeMap() {
        return Ptsv2paymentsRiskInformation.attributeTypeMap;
    }
}
exports.Ptsv2paymentsRiskInformation = Ptsv2paymentsRiskInformation;
Ptsv2paymentsRiskInformation.discriminator = undefined;
Ptsv2paymentsRiskInformation.attributeTypeMap = [
    {
        "name": "profile",
        "baseName": "profile",
        "type": "Ptsv2paymentsRiskInformationProfile"
    },
    {
        "name": "eventType",
        "baseName": "eventType",
        "type": "string"
    },
    {
        "name": "buyerHistory",
        "baseName": "buyerHistory",
        "type": "Ptsv2paymentsRiskInformationBuyerHistory"
    },
    {
        "name": "auxiliaryData",
        "baseName": "auxiliaryData",
        "type": "Array<Ptsv2paymentsRiskInformationAuxiliaryData>"
    }
];
/**
* Contains auxiliary key-value pairs.
*/
class Ptsv2paymentsRiskInformationAuxiliaryData {
    static getAttributeTypeMap() {
        return Ptsv2paymentsRiskInformationAuxiliaryData.attributeTypeMap;
    }
}
exports.Ptsv2paymentsRiskInformationAuxiliaryData = Ptsv2paymentsRiskInformationAuxiliaryData;
Ptsv2paymentsRiskInformationAuxiliaryData.discriminator = undefined;
Ptsv2paymentsRiskInformationAuxiliaryData.attributeTypeMap = [
    {
        "name": "key",
        "baseName": "key",
        "type": "string"
    },
    {
        "name": "value",
        "baseName": "value",
        "type": "string"
    }
];
class Ptsv2paymentsRiskInformationBuyerHistory {
    static getAttributeTypeMap() {
        return Ptsv2paymentsRiskInformationBuyerHistory.attributeTypeMap;
    }
}
exports.Ptsv2paymentsRiskInformationBuyerHistory = Ptsv2paymentsRiskInformationBuyerHistory;
Ptsv2paymentsRiskInformationBuyerHistory.discriminator = undefined;
Ptsv2paymentsRiskInformationBuyerHistory.attributeTypeMap = [
    {
        "name": "customerAccount",
        "baseName": "customerAccount",
        "type": "Ptsv2paymentsRiskInformationBuyerHistoryCustomerAccount"
    },
    {
        "name": "accountHistory",
        "baseName": "accountHistory",
        "type": "Ptsv2paymentsRiskInformationBuyerHistoryAccountHistory"
    },
    {
        "name": "accountPurchases",
        "baseName": "accountPurchases",
        "type": "number"
    },
    {
        "name": "addCardAttempts",
        "baseName": "addCardAttempts",
        "type": "number"
    },
    {
        "name": "priorSuspiciousActivity",
        "baseName": "priorSuspiciousActivity",
        "type": "boolean"
    },
    {
        "name": "paymentAccountHistory",
        "baseName": "paymentAccountHistory",
        "type": "string"
    },
    {
        "name": "paymentAccountDate",
        "baseName": "paymentAccountDate",
        "type": "number"
    },
    {
        "name": "transactionCountDay",
        "baseName": "transactionCountDay",
        "type": "number"
    },
    {
        "name": "transactionCountYear",
        "baseName": "transactionCountYear",
        "type": "number"
    }
];
class Ptsv2paymentsRiskInformationBuyerHistoryAccountHistory {
    static getAttributeTypeMap() {
        return Ptsv2paymentsRiskInformationBuyerHistoryAccountHistory.attributeTypeMap;
    }
}
exports.Ptsv2paymentsRiskInformationBuyerHistoryAccountHistory = Ptsv2paymentsRiskInformationBuyerHistoryAccountHistory;
Ptsv2paymentsRiskInformationBuyerHistoryAccountHistory.discriminator = undefined;
Ptsv2paymentsRiskInformationBuyerHistoryAccountHistory.attributeTypeMap = [
    {
        "name": "firstUseOfShippingAddress",
        "baseName": "firstUseOfShippingAddress",
        "type": "boolean"
    },
    {
        "name": "shippingAddressUsageDate",
        "baseName": "shippingAddressUsageDate",
        "type": "string"
    }
];
class Ptsv2paymentsRiskInformationBuyerHistoryCustomerAccount {
    static getAttributeTypeMap() {
        return Ptsv2paymentsRiskInformationBuyerHistoryCustomerAccount.attributeTypeMap;
    }
}
exports.Ptsv2paymentsRiskInformationBuyerHistoryCustomerAccount = Ptsv2paymentsRiskInformationBuyerHistoryCustomerAccount;
Ptsv2paymentsRiskInformationBuyerHistoryCustomerAccount.discriminator = undefined;
Ptsv2paymentsRiskInformationBuyerHistoryCustomerAccount.attributeTypeMap = [
    {
        "name": "lastChangeDate",
        "baseName": "lastChangeDate",
        "type": "string"
    },
    {
        "name": "creationHistory",
        "baseName": "creationHistory",
        "type": "string"
    },
    {
        "name": "modificationHistory",
        "baseName": "modificationHistory",
        "type": "string"
    },
    {
        "name": "passwordHistory",
        "baseName": "passwordHistory",
        "type": "string"
    },
    {
        "name": "createDate",
        "baseName": "createDate",
        "type": "string"
    },
    {
        "name": "passwordChangeDate",
        "baseName": "passwordChangeDate",
        "type": "string"
    }
];
/**
* Identifies a risk profile.
*/
class Ptsv2paymentsRiskInformationProfile {
    static getAttributeTypeMap() {
        return Ptsv2paymentsRiskInformationProfile.attributeTypeMap;
    }
}
exports.Ptsv2paymentsRiskInformationProfile = Ptsv2paymentsRiskInformationProfile;
Ptsv2paymentsRiskInformationProfile.discriminator = undefined;
Ptsv2paymentsRiskInformationProfile.attributeTypeMap = [
    {
        "name": "name",
        "baseName": "name",
        "type": "string"
    }
];
class Ptsv2paymentsSenderInformation {
    static getAttributeTypeMap() {
        return Ptsv2paymentsSenderInformation.attributeTypeMap;
    }
}
exports.Ptsv2paymentsSenderInformation = Ptsv2paymentsSenderInformation;
Ptsv2paymentsSenderInformation.discriminator = undefined;
Ptsv2paymentsSenderInformation.attributeTypeMap = [
    {
        "name": "firstName",
        "baseName": "firstName",
        "type": "string"
    },
    {
        "name": "middleName",
        "baseName": "middleName",
        "type": "string"
    },
    {
        "name": "lastName",
        "baseName": "lastName",
        "type": "string"
    },
    {
        "name": "address1",
        "baseName": "address1",
        "type": "string"
    },
    {
        "name": "locality",
        "baseName": "locality",
        "type": "string"
    },
    {
        "name": "administrativeArea",
        "baseName": "administrativeArea",
        "type": "string"
    },
    {
        "name": "countryCode",
        "baseName": "countryCode",
        "type": "string"
    },
    {
        "name": "aliasName",
        "baseName": "aliasName",
        "type": "string"
    },
    {
        "name": "referenceNumber",
        "baseName": "referenceNumber",
        "type": "string"
    },
    {
        "name": "account",
        "baseName": "account",
        "type": "Ptsv2paymentsSenderInformationAccount"
    },
    {
        "name": "postalCode",
        "baseName": "postalCode",
        "type": "string"
    }
];
class Ptsv2paymentsSenderInformationAccount {
    static getAttributeTypeMap() {
        return Ptsv2paymentsSenderInformationAccount.attributeTypeMap;
    }
}
exports.Ptsv2paymentsSenderInformationAccount = Ptsv2paymentsSenderInformationAccount;
Ptsv2paymentsSenderInformationAccount.discriminator = undefined;
Ptsv2paymentsSenderInformationAccount.attributeTypeMap = [
    {
        "name": "number",
        "baseName": "number",
        "type": "string"
    },
    {
        "name": "type",
        "baseName": "type",
        "type": "string"
    },
    {
        "name": "fundsSource",
        "baseName": "fundsSource",
        "type": "string"
    }
];
class Ptsv2paymentsTokenInformation {
    static getAttributeTypeMap() {
        return Ptsv2paymentsTokenInformation.attributeTypeMap;
    }
}
exports.Ptsv2paymentsTokenInformation = Ptsv2paymentsTokenInformation;
Ptsv2paymentsTokenInformation.discriminator = undefined;
Ptsv2paymentsTokenInformation.attributeTypeMap = [
    {
        "name": "jti",
        "baseName": "jti",
        "type": "string"
    },
    {
        "name": "transientTokenJwt",
        "baseName": "transientTokenJwt",
        "type": "string"
    },
    {
        "name": "paymentInstrument",
        "baseName": "paymentInstrument",
        "type": "Ptsv2paymentsTokenInformationPaymentInstrument"
    },
    {
        "name": "shippingAddress",
        "baseName": "shippingAddress",
        "type": "Ptsv2paymentsTokenInformationShippingAddress"
    },
    {
        "name": "networkTokenOption",
        "baseName": "networkTokenOption",
        "type": "string"
    },
    {
        "name": "tokenProvisioningInformation",
        "baseName": "tokenProvisioningInformation",
        "type": "Ptsv2paymentsTokenInformationTokenProvisioningInformation"
    }
];
class Ptsv2paymentsTokenInformationPaymentInstrument {
    static getAttributeTypeMap() {
        return Ptsv2paymentsTokenInformationPaymentInstrument.attributeTypeMap;
    }
}
exports.Ptsv2paymentsTokenInformationPaymentInstrument = Ptsv2paymentsTokenInformationPaymentInstrument;
Ptsv2paymentsTokenInformationPaymentInstrument.discriminator = undefined;
Ptsv2paymentsTokenInformationPaymentInstrument.attributeTypeMap = [
    {
        "name": "_default",
        "baseName": "default",
        "type": "boolean"
    }
];
class Ptsv2paymentsTokenInformationShippingAddress {
    static getAttributeTypeMap() {
        return Ptsv2paymentsTokenInformationShippingAddress.attributeTypeMap;
    }
}
exports.Ptsv2paymentsTokenInformationShippingAddress = Ptsv2paymentsTokenInformationShippingAddress;
Ptsv2paymentsTokenInformationShippingAddress.discriminator = undefined;
Ptsv2paymentsTokenInformationShippingAddress.attributeTypeMap = [
    {
        "name": "_default",
        "baseName": "default",
        "type": "boolean"
    }
];
class Ptsv2paymentsTokenInformationTokenProvisioningInformation {
    static getAttributeTypeMap() {
        return Ptsv2paymentsTokenInformationTokenProvisioningInformation.attributeTypeMap;
    }
}
exports.Ptsv2paymentsTokenInformationTokenProvisioningInformation = Ptsv2paymentsTokenInformationTokenProvisioningInformation;
Ptsv2paymentsTokenInformationTokenProvisioningInformation.discriminator = undefined;
Ptsv2paymentsTokenInformationTokenProvisioningInformation.attributeTypeMap = [
    {
        "name": "consumerConsentObtained",
        "baseName": "consumerConsentObtained",
        "type": "boolean"
    },
    {
        "name": "multiFactorAuthenticated",
        "baseName": "multiFactorAuthenticated",
        "type": "boolean"
    }
];
class Ptsv2paymentsTravelInformation {
    static getAttributeTypeMap() {
        return Ptsv2paymentsTravelInformation.attributeTypeMap;
    }
}
exports.Ptsv2paymentsTravelInformation = Ptsv2paymentsTravelInformation;
Ptsv2paymentsTravelInformation.discriminator = undefined;
Ptsv2paymentsTravelInformation.attributeTypeMap = [
    {
        "name": "duration",
        "baseName": "duration",
        "type": "string"
    },
    {
        "name": "agency",
        "baseName": "agency",
        "type": "Ptsv2paymentsTravelInformationAgency"
    },
    {
        "name": "autoRental",
        "baseName": "autoRental",
        "type": "Ptsv2paymentsTravelInformationAutoRental"
    },
    {
        "name": "lodging",
        "baseName": "lodging",
        "type": "Ptsv2paymentsTravelInformationLodging"
    },
    {
        "name": "transit",
        "baseName": "transit",
        "type": "Ptsv2paymentsTravelInformationTransit"
    },
    {
        "name": "vehicleData",
        "baseName": "vehicleData",
        "type": "Ptsv2paymentsTravelInformationVehicleData"
    }
];
class Ptsv2paymentsTravelInformationAgency {
    static getAttributeTypeMap() {
        return Ptsv2paymentsTravelInformationAgency.attributeTypeMap;
    }
}
exports.Ptsv2paymentsTravelInformationAgency = Ptsv2paymentsTravelInformationAgency;
Ptsv2paymentsTravelInformationAgency.discriminator = undefined;
Ptsv2paymentsTravelInformationAgency.attributeTypeMap = [
    {
        "name": "code",
        "baseName": "code",
        "type": "string"
    },
    {
        "name": "name",
        "baseName": "name",
        "type": "string"
    }
];
class Ptsv2paymentsTravelInformationAutoRental {
    static getAttributeTypeMap() {
        return Ptsv2paymentsTravelInformationAutoRental.attributeTypeMap;
    }
}
exports.Ptsv2paymentsTravelInformationAutoRental = Ptsv2paymentsTravelInformationAutoRental;
Ptsv2paymentsTravelInformationAutoRental.discriminator = undefined;
Ptsv2paymentsTravelInformationAutoRental.attributeTypeMap = [
    {
        "name": "noShowIndicator",
        "baseName": "noShowIndicator",
        "type": "boolean"
    },
    {
        "name": "customerName",
        "baseName": "customerName",
        "type": "string"
    },
    {
        "name": "vehicleClass",
        "baseName": "vehicleClass",
        "type": "string"
    },
    {
        "name": "distanceTravelled",
        "baseName": "distanceTravelled",
        "type": "string"
    },
    {
        "name": "distanceUnit",
        "baseName": "distanceUnit",
        "type": "string"
    },
    {
        "name": "returnDateTime",
        "baseName": "returnDateTime",
        "type": "string"
    },
    {
        "name": "rentalDateTime",
        "baseName": "rentalDateTime",
        "type": "string"
    },
    {
        "name": "maxFreeDistance",
        "baseName": "maxFreeDistance",
        "type": "string"
    },
    {
        "name": "insuranceIndicator",
        "baseName": "insuranceIndicator",
        "type": "boolean"
    },
    {
        "name": "programCode",
        "baseName": "programCode",
        "type": "string"
    },
    {
        "name": "returnAddress",
        "baseName": "returnAddress",
        "type": "Ptsv2paymentsTravelInformationAutoRentalReturnAddress"
    },
    {
        "name": "rentalAddress",
        "baseName": "rentalAddress",
        "type": "Ptsv2paymentsTravelInformationAutoRentalRentalAddress"
    },
    {
        "name": "agreementNumber",
        "baseName": "agreementNumber",
        "type": "string"
    },
    {
        "name": "odometerReading",
        "baseName": "odometerReading",
        "type": "string"
    },
    {
        "name": "vehicleIdentificationNumber",
        "baseName": "vehicleIdentificationNumber",
        "type": "string"
    },
    {
        "name": "companyId",
        "baseName": "companyId",
        "type": "string"
    },
    {
        "name": "numberOfAdditionalDrivers",
        "baseName": "numberOfAdditionalDrivers",
        "type": "string"
    },
    {
        "name": "driverAge",
        "baseName": "driverAge",
        "type": "string"
    },
    {
        "name": "specialProgramCode",
        "baseName": "specialProgramCode",
        "type": "string"
    },
    {
        "name": "vehicleMake",
        "baseName": "vehicleMake",
        "type": "string"
    },
    {
        "name": "vehicleModel",
        "baseName": "vehicleModel",
        "type": "string"
    },
    {
        "name": "timePeriod",
        "baseName": "timePeriod",
        "type": "string"
    },
    {
        "name": "commodityCode",
        "baseName": "commodityCode",
        "type": "string"
    },
    {
        "name": "customerServicePhoneNumber",
        "baseName": "customerServicePhoneNumber",
        "type": "string"
    },
    {
        "name": "taxDetails",
        "baseName": "taxDetails",
        "type": "Ptsv2paymentsTravelInformationAutoRentalTaxDetails"
    },
    {
        "name": "insuranceAmount",
        "baseName": "insuranceAmount",
        "type": "string"
    },
    {
        "name": "oneWayDropOffAmount",
        "baseName": "oneWayDropOffAmount",
        "type": "string"
    },
    {
        "name": "adjustedAmountIndicator",
        "baseName": "adjustedAmountIndicator",
        "type": "string"
    },
    {
        "name": "adjustedAmount",
        "baseName": "adjustedAmount",
        "type": "string"
    },
    {
        "name": "fuelCharges",
        "baseName": "fuelCharges",
        "type": "string"
    },
    {
        "name": "weeklyRentalRate",
        "baseName": "weeklyRentalRate",
        "type": "string"
    },
    {
        "name": "dailyRentalRate",
        "baseName": "dailyRentalRate",
        "type": "string"
    },
    {
        "name": "ratePerMile",
        "baseName": "ratePerMile",
        "type": "string"
    },
    {
        "name": "mileageCharge",
        "baseName": "mileageCharge",
        "type": "string"
    },
    {
        "name": "extraMileageCharge",
        "baseName": "extraMileageCharge",
        "type": "string"
    },
    {
        "name": "lateFeeAmount",
        "baseName": "lateFeeAmount",
        "type": "string"
    },
    {
        "name": "towingCharge",
        "baseName": "towingCharge",
        "type": "string"
    },
    {
        "name": "extraCharge",
        "baseName": "extraCharge",
        "type": "string"
    },
    {
        "name": "gpsCharge",
        "baseName": "gpsCharge",
        "type": "string"
    },
    {
        "name": "phoneCharge",
        "baseName": "phoneCharge",
        "type": "string"
    },
    {
        "name": "parkingViolationCharge",
        "baseName": "parkingViolationCharge",
        "type": "string"
    },
    {
        "name": "otherCharges",
        "baseName": "otherCharges",
        "type": "string"
    },
    {
        "name": "companyName",
        "baseName": "companyName",
        "type": "string"
    },
    {
        "name": "affiliateName",
        "baseName": "affiliateName",
        "type": "string"
    }
];
class Ptsv2paymentsTravelInformationAutoRentalRentalAddress {
    static getAttributeTypeMap() {
        return Ptsv2paymentsTravelInformationAutoRentalRentalAddress.attributeTypeMap;
    }
}
exports.Ptsv2paymentsTravelInformationAutoRentalRentalAddress = Ptsv2paymentsTravelInformationAutoRentalRentalAddress;
Ptsv2paymentsTravelInformationAutoRentalRentalAddress.discriminator = undefined;
Ptsv2paymentsTravelInformationAutoRentalRentalAddress.attributeTypeMap = [
    {
        "name": "city",
        "baseName": "city",
        "type": "string"
    },
    {
        "name": "state",
        "baseName": "state",
        "type": "string"
    },
    {
        "name": "country",
        "baseName": "country",
        "type": "string"
    },
    {
        "name": "locationId",
        "baseName": "locationId",
        "type": "string"
    },
    {
        "name": "address1",
        "baseName": "address1",
        "type": "string"
    },
    {
        "name": "address2",
        "baseName": "address2",
        "type": "string"
    },
    {
        "name": "postalCode",
        "baseName": "postalCode",
        "type": "string"
    },
    {
        "name": "location",
        "baseName": "location",
        "type": "string"
    }
];
class Ptsv2paymentsTravelInformationAutoRentalReturnAddress {
    static getAttributeTypeMap() {
        return Ptsv2paymentsTravelInformationAutoRentalReturnAddress.attributeTypeMap;
    }
}
exports.Ptsv2paymentsTravelInformationAutoRentalReturnAddress = Ptsv2paymentsTravelInformationAutoRentalReturnAddress;
Ptsv2paymentsTravelInformationAutoRentalReturnAddress.discriminator = undefined;
Ptsv2paymentsTravelInformationAutoRentalReturnAddress.attributeTypeMap = [
    {
        "name": "city",
        "baseName": "city",
        "type": "string"
    },
    {
        "name": "state",
        "baseName": "state",
        "type": "string"
    },
    {
        "name": "country",
        "baseName": "country",
        "type": "string"
    },
    {
        "name": "locationId",
        "baseName": "locationId",
        "type": "string"
    },
    {
        "name": "address1",
        "baseName": "address1",
        "type": "string"
    },
    {
        "name": "postalCode",
        "baseName": "postalCode",
        "type": "string"
    },
    {
        "name": "location",
        "baseName": "location",
        "type": "string"
    }
];
class Ptsv2paymentsTravelInformationAutoRentalTaxDetails {
    static getAttributeTypeMap() {
        return Ptsv2paymentsTravelInformationAutoRentalTaxDetails.attributeTypeMap;
    }
}
exports.Ptsv2paymentsTravelInformationAutoRentalTaxDetails = Ptsv2paymentsTravelInformationAutoRentalTaxDetails;
Ptsv2paymentsTravelInformationAutoRentalTaxDetails.discriminator = undefined;
Ptsv2paymentsTravelInformationAutoRentalTaxDetails.attributeTypeMap = [
    {
        "name": "amount",
        "baseName": "amount",
        "type": "string"
    },
    {
        "name": "rate",
        "baseName": "rate",
        "type": "string"
    },
    {
        "name": "applied",
        "baseName": "applied",
        "type": "boolean"
    },
    {
        "name": "exemptionCode",
        "baseName": "exemptionCode",
        "type": "string"
    },
    {
        "name": "taxType",
        "baseName": "taxType",
        "type": "string"
    },
    {
        "name": "taxSummary",
        "baseName": "taxSummary",
        "type": "string"
    }
];
class Ptsv2paymentsTravelInformationLodging {
    static getAttributeTypeMap() {
        return Ptsv2paymentsTravelInformationLodging.attributeTypeMap;
    }
}
exports.Ptsv2paymentsTravelInformationLodging = Ptsv2paymentsTravelInformationLodging;
Ptsv2paymentsTravelInformationLodging.discriminator = undefined;
Ptsv2paymentsTravelInformationLodging.attributeTypeMap = [
    {
        "name": "checkInDate",
        "baseName": "checkInDate",
        "type": "string"
    },
    {
        "name": "checkOutDate",
        "baseName": "checkOutDate",
        "type": "string"
    },
    {
        "name": "room",
        "baseName": "room",
        "type": "Array<Ptsv2paymentsTravelInformationLodgingRoom>"
    },
    {
        "name": "smokingPreference",
        "baseName": "smokingPreference",
        "type": "string"
    },
    {
        "name": "numberOfRooms",
        "baseName": "numberOfRooms",
        "type": "number"
    },
    {
        "name": "numberOfGuests",
        "baseName": "numberOfGuests",
        "type": "number"
    },
    {
        "name": "roomBedType",
        "baseName": "roomBedType",
        "type": "string"
    },
    {
        "name": "roomTaxType",
        "baseName": "roomTaxType",
        "type": "string"
    },
    {
        "name": "roomRateType",
        "baseName": "roomRateType",
        "type": "string"
    },
    {
        "name": "guestName",
        "baseName": "guestName",
        "type": "string"
    },
    {
        "name": "customerServicePhoneNumber",
        "baseName": "customerServicePhoneNumber",
        "type": "string"
    },
    {
        "name": "corporateClientCode",
        "baseName": "corporateClientCode",
        "type": "string"
    },
    {
        "name": "additionalDiscountAmount",
        "baseName": "additionalDiscountAmount",
        "type": "string"
    },
    {
        "name": "roomLocation",
        "baseName": "roomLocation",
        "type": "string"
    },
    {
        "name": "specialProgramCode",
        "baseName": "specialProgramCode",
        "type": "string"
    },
    {
        "name": "totalTaxAmount",
        "baseName": "totalTaxAmount",
        "type": "string"
    },
    {
        "name": "prepaidCost",
        "baseName": "prepaidCost",
        "type": "string"
    },
    {
        "name": "foodAndBeverageCost",
        "baseName": "foodAndBeverageCost",
        "type": "string"
    },
    {
        "name": "roomTaxAmount",
        "baseName": "roomTaxAmount",
        "type": "string"
    },
    {
        "name": "adjustmentAmount",
        "baseName": "adjustmentAmount",
        "type": "string"
    },
    {
        "name": "phoneCost",
        "baseName": "phoneCost",
        "type": "string"
    },
    {
        "name": "restaurantCost",
        "baseName": "restaurantCost",
        "type": "string"
    },
    {
        "name": "roomServiceCost",
        "baseName": "roomServiceCost",
        "type": "string"
    },
    {
        "name": "miniBarCost",
        "baseName": "miniBarCost",
        "type": "string"
    },
    {
        "name": "laundryCost",
        "baseName": "laundryCost",
        "type": "string"
    },
    {
        "name": "miscellaneousCost",
        "baseName": "miscellaneousCost",
        "type": "string"
    },
    {
        "name": "giftShopCost",
        "baseName": "giftShopCost",
        "type": "string"
    },
    {
        "name": "movieCost",
        "baseName": "movieCost",
        "type": "string"
    },
    {
        "name": "healthClubCost",
        "baseName": "healthClubCost",
        "type": "string"
    },
    {
        "name": "valetParkingCost",
        "baseName": "valetParkingCost",
        "type": "string"
    },
    {
        "name": "cashDisbursementCost",
        "baseName": "cashDisbursementCost",
        "type": "string"
    },
    {
        "name": "nonRoomCost",
        "baseName": "nonRoomCost",
        "type": "string"
    },
    {
        "name": "businessCenterCost",
        "baseName": "businessCenterCost",
        "type": "string"
    },
    {
        "name": "loungeBarCost",
        "baseName": "loungeBarCost",
        "type": "string"
    },
    {
        "name": "transportationCost",
        "baseName": "transportationCost",
        "type": "string"
    },
    {
        "name": "gratuityAmount",
        "baseName": "gratuityAmount",
        "type": "string"
    },
    {
        "name": "conferenceRoomCost",
        "baseName": "conferenceRoomCost",
        "type": "string"
    },
    {
        "name": "audioVisualCost",
        "baseName": "audioVisualCost",
        "type": "string"
    },
    {
        "name": "banquestCost",
        "baseName": "banquestCost",
        "type": "string"
    },
    {
        "name": "nonRoomTaxAmount",
        "baseName": "nonRoomTaxAmount",
        "type": "string"
    },
    {
        "name": "earlyCheckOutCost",
        "baseName": "earlyCheckOutCost",
        "type": "string"
    },
    {
        "name": "internetAccessCost",
        "baseName": "internetAccessCost",
        "type": "string"
    },
    {
        "name": "name",
        "baseName": "name",
        "type": "string"
    },
    {
        "name": "hotelName",
        "baseName": "hotelName",
        "type": "string"
    },
    {
        "name": "checkInDateTime",
        "baseName": "checkInDateTime",
        "type": "string"
    },
    {
        "name": "checkOutDateTime",
        "baseName": "checkOutDateTime",
        "type": "string"
    }
];
class Ptsv2paymentsTravelInformationLodgingRoom {
    static getAttributeTypeMap() {
        return Ptsv2paymentsTravelInformationLodgingRoom.attributeTypeMap;
    }
}
exports.Ptsv2paymentsTravelInformationLodgingRoom = Ptsv2paymentsTravelInformationLodgingRoom;
Ptsv2paymentsTravelInformationLodgingRoom.discriminator = undefined;
Ptsv2paymentsTravelInformationLodgingRoom.attributeTypeMap = [
    {
        "name": "dailyRate",
        "baseName": "dailyRate",
        "type": "string"
    },
    {
        "name": "numberOfNights",
        "baseName": "numberOfNights",
        "type": "number"
    }
];
class Ptsv2paymentsTravelInformationTransit {
    static getAttributeTypeMap() {
        return Ptsv2paymentsTravelInformationTransit.attributeTypeMap;
    }
}
exports.Ptsv2paymentsTravelInformationTransit = Ptsv2paymentsTravelInformationTransit;
Ptsv2paymentsTravelInformationTransit.discriminator = undefined;
Ptsv2paymentsTravelInformationTransit.attributeTypeMap = [
    {
        "name": "airline",
        "baseName": "airline",
        "type": "Ptsv2paymentsTravelInformationTransitAirline"
    }
];
class Ptsv2paymentsTravelInformationTransitAirline {
    static getAttributeTypeMap() {
        return Ptsv2paymentsTravelInformationTransitAirline.attributeTypeMap;
    }
}
exports.Ptsv2paymentsTravelInformationTransitAirline = Ptsv2paymentsTravelInformationTransitAirline;
Ptsv2paymentsTravelInformationTransitAirline.discriminator = undefined;
Ptsv2paymentsTravelInformationTransitAirline.attributeTypeMap = [
    {
        "name": "isDomestic",
        "baseName": "isDomestic",
        "type": "string"
    },
    {
        "name": "bookingReferenceNumber",
        "baseName": "bookingReferenceNumber",
        "type": "string"
    },
    {
        "name": "carrierName",
        "baseName": "carrierName",
        "type": "string"
    },
    {
        "name": "ticketIssuer",
        "baseName": "ticketIssuer",
        "type": "Ptsv2paymentsTravelInformationTransitAirlineTicketIssuer"
    },
    {
        "name": "ticketNumber",
        "baseName": "ticketNumber",
        "type": "string"
    },
    {
        "name": "checkDigit",
        "baseName": "checkDigit",
        "type": "string"
    },
    {
        "name": "restrictedTicketIndicator",
        "baseName": "restrictedTicketIndicator",
        "type": "number"
    },
    {
        "name": "transactionType",
        "baseName": "transactionType",
        "type": "number"
    },
    {
        "name": "extendedPaymentCode",
        "baseName": "extendedPaymentCode",
        "type": "string"
    },
    {
        "name": "passengerName",
        "baseName": "passengerName",
        "type": "string"
    },
    {
        "name": "customerCode",
        "baseName": "customerCode",
        "type": "string"
    },
    {
        "name": "documentType",
        "baseName": "documentType",
        "type": "string"
    },
    {
        "name": "documentNumber",
        "baseName": "documentNumber",
        "type": "string"
    },
    {
        "name": "documentNumberOfParts",
        "baseName": "documentNumberOfParts",
        "type": "number"
    },
    {
        "name": "invoiceNumber",
        "baseName": "invoiceNumber",
        "type": "string"
    },
    {
        "name": "invoiceDate",
        "baseName": "invoiceDate",
        "type": "number"
    },
    {
        "name": "additionalCharges",
        "baseName": "additionalCharges",
        "type": "string"
    },
    {
        "name": "totalFeeAmount",
        "baseName": "totalFeeAmount",
        "type": "string"
    },
    {
        "name": "clearingSequence",
        "baseName": "clearingSequence",
        "type": "string"
    },
    {
        "name": "clearingCount",
        "baseName": "clearingCount",
        "type": "string"
    },
    {
        "name": "totalClearingAmount",
        "baseName": "totalClearingAmount",
        "type": "string"
    },
    {
        "name": "numberOfPassengers",
        "baseName": "numberOfPassengers",
        "type": "number"
    },
    {
        "name": "reservationSystemCode",
        "baseName": "reservationSystemCode",
        "type": "string"
    },
    {
        "name": "processIdentifier",
        "baseName": "processIdentifier",
        "type": "string"
    },
    {
        "name": "ticketIssueDate",
        "baseName": "ticketIssueDate",
        "type": "string"
    },
    {
        "name": "electronicTicketIndicator",
        "baseName": "electronicTicketIndicator",
        "type": "boolean"
    },
    {
        "name": "originalTicketNumber",
        "baseName": "originalTicketNumber",
        "type": "string"
    },
    {
        "name": "purchaseType",
        "baseName": "purchaseType",
        "type": "string"
    },
    {
        "name": "creditReasonIndicator",
        "baseName": "creditReasonIndicator",
        "type": "string"
    },
    {
        "name": "ticketChangeIndicator",
        "baseName": "ticketChangeIndicator",
        "type": "string"
    },
    {
        "name": "planNumber",
        "baseName": "planNumber",
        "type": "string"
    },
    {
        "name": "arrivalDate",
        "baseName": "arrivalDate",
        "type": "string"
    },
    {
        "name": "restrictedTicketDesciption",
        "baseName": "restrictedTicketDesciption",
        "type": "string"
    },
    {
        "name": "exchangeTicketAmount",
        "baseName": "exchangeTicketAmount",
        "type": "string"
    },
    {
        "name": "exchangeTicketFeeAmount",
        "baseName": "exchangeTicketFeeAmount",
        "type": "string"
    },
    {
        "name": "reservationType",
        "baseName": "reservationType",
        "type": "string"
    },
    {
        "name": "boardingFeeAmount",
        "baseName": "boardingFeeAmount",
        "type": "string"
    },
    {
        "name": "legs",
        "baseName": "legs",
        "type": "Array<Ptsv2paymentsTravelInformationTransitAirlineLegs>"
    },
    {
        "name": "ancillaryInformation",
        "baseName": "ancillaryInformation",
        "type": "Ptsv2paymentsTravelInformationTransitAirlineAncillaryInformation"
    },
    {
        "name": "flightType",
        "baseName": "flightType",
        "type": "string"
    },
    {
        "name": "insuranceAmount",
        "baseName": "insuranceAmount",
        "type": "string"
    },
    {
        "name": "frequentFlyerNumber",
        "baseName": "frequentFlyerNumber",
        "type": "string"
    },
    {
        "name": "thirdPartyStatus",
        "baseName": "thirdPartyStatus",
        "type": "string"
    },
    {
        "name": "passengerType",
        "baseName": "passengerType",
        "type": "string"
    },
    {
        "name": "totalInsuranceAmount",
        "baseName": "totalInsuranceAmount",
        "type": "string"
    }
];
class Ptsv2paymentsTravelInformationTransitAirlineAncillaryInformation {
    static getAttributeTypeMap() {
        return Ptsv2paymentsTravelInformationTransitAirlineAncillaryInformation.attributeTypeMap;
    }
}
exports.Ptsv2paymentsTravelInformationTransitAirlineAncillaryInformation = Ptsv2paymentsTravelInformationTransitAirlineAncillaryInformation;
Ptsv2paymentsTravelInformationTransitAirlineAncillaryInformation.discriminator = undefined;
Ptsv2paymentsTravelInformationTransitAirlineAncillaryInformation.attributeTypeMap = [
    {
        "name": "ticketNumber",
        "baseName": "ticketNumber",
        "type": "string"
    },
    {
        "name": "passengerName",
        "baseName": "passengerName",
        "type": "string"
    },
    {
        "name": "connectedTicketNumber",
        "baseName": "connectedTicketNumber",
        "type": "string"
    },
    {
        "name": "creditReasonIndicator",
        "baseName": "creditReasonIndicator",
        "type": "string"
    },
    {
        "name": "service",
        "baseName": "service",
        "type": "Array<Ptsv2paymentsTravelInformationTransitAirlineAncillaryInformationService>"
    }
];
class Ptsv2paymentsTravelInformationTransitAirlineAncillaryInformationService {
    static getAttributeTypeMap() {
        return Ptsv2paymentsTravelInformationTransitAirlineAncillaryInformationService.attributeTypeMap;
    }
}
exports.Ptsv2paymentsTravelInformationTransitAirlineAncillaryInformationService = Ptsv2paymentsTravelInformationTransitAirlineAncillaryInformationService;
Ptsv2paymentsTravelInformationTransitAirlineAncillaryInformationService.discriminator = undefined;
Ptsv2paymentsTravelInformationTransitAirlineAncillaryInformationService.attributeTypeMap = [
    {
        "name": "categoryCode",
        "baseName": "categoryCode",
        "type": "string"
    },
    {
        "name": "subCategoryCode",
        "baseName": "subCategoryCode",
        "type": "string"
    }
];
class Ptsv2paymentsTravelInformationTransitAirlineLegs {
    static getAttributeTypeMap() {
        return Ptsv2paymentsTravelInformationTransitAirlineLegs.attributeTypeMap;
    }
}
exports.Ptsv2paymentsTravelInformationTransitAirlineLegs = Ptsv2paymentsTravelInformationTransitAirlineLegs;
Ptsv2paymentsTravelInformationTransitAirlineLegs.discriminator = undefined;
Ptsv2paymentsTravelInformationTransitAirlineLegs.attributeTypeMap = [
    {
        "name": "carrierCode",
        "baseName": "carrierCode",
        "type": "string"
    },
    {
        "name": "flightNumber",
        "baseName": "flightNumber",
        "type": "string"
    },
    {
        "name": "originatingAirportCode",
        "baseName": "originatingAirportCode",
        "type": "string"
    },
    {
        "name": "_class",
        "baseName": "class",
        "type": "string"
    },
    {
        "name": "stopoverIndicator",
        "baseName": "stopoverIndicator",
        "type": "number"
    },
    {
        "name": "departureDate",
        "baseName": "departureDate",
        "type": "number"
    },
    {
        "name": "destinationAirportCode",
        "baseName": "destinationAirportCode",
        "type": "string"
    },
    {
        "name": "fareBasis",
        "baseName": "fareBasis",
        "type": "string"
    },
    {
        "name": "departTaxAmount",
        "baseName": "departTaxAmount",
        "type": "string"
    },
    {
        "name": "conjunctionTicket",
        "baseName": "conjunctionTicket",
        "type": "string"
    },
    {
        "name": "exchangeTicketNumber",
        "baseName": "exchangeTicketNumber",
        "type": "string"
    },
    {
        "name": "couponNumber",
        "baseName": "couponNumber",
        "type": "string"
    },
    {
        "name": "departureTime",
        "baseName": "departureTime",
        "type": "number"
    },
    {
        "name": "departureTimeMeridian",
        "baseName": "departureTimeMeridian",
        "type": "string"
    },
    {
        "name": "arrivalTime",
        "baseName": "arrivalTime",
        "type": "number"
    },
    {
        "name": "arrivalTimeMeridian",
        "baseName": "arrivalTimeMeridian",
        "type": "string"
    },
    {
        "name": "endorsementsRestrictions",
        "baseName": "endorsementsRestrictions",
        "type": "string"
    },
    {
        "name": "totalFareAmount",
        "baseName": "totalFareAmount",
        "type": "string"
    },
    {
        "name": "feeAmount",
        "baseName": "feeAmount",
        "type": "string"
    },
    {
        "name": "taxAmount",
        "baseName": "taxAmount",
        "type": "string"
    }
];
class Ptsv2paymentsTravelInformationTransitAirlineTicketIssuer {
    static getAttributeTypeMap() {
        return Ptsv2paymentsTravelInformationTransitAirlineTicketIssuer.attributeTypeMap;
    }
}
exports.Ptsv2paymentsTravelInformationTransitAirlineTicketIssuer = Ptsv2paymentsTravelInformationTransitAirlineTicketIssuer;
Ptsv2paymentsTravelInformationTransitAirlineTicketIssuer.discriminator = undefined;
Ptsv2paymentsTravelInformationTransitAirlineTicketIssuer.attributeTypeMap = [
    {
        "name": "code",
        "baseName": "code",
        "type": "string"
    },
    {
        "name": "name",
        "baseName": "name",
        "type": "string"
    },
    {
        "name": "address",
        "baseName": "address",
        "type": "string"
    },
    {
        "name": "locality",
        "baseName": "locality",
        "type": "string"
    },
    {
        "name": "administrativeArea",
        "baseName": "administrativeArea",
        "type": "string"
    },
    {
        "name": "postalCode",
        "baseName": "postalCode",
        "type": "string"
    },
    {
        "name": "country",
        "baseName": "country",
        "type": "string"
    }
];
class Ptsv2paymentsTravelInformationVehicleData {
    static getAttributeTypeMap() {
        return Ptsv2paymentsTravelInformationVehicleData.attributeTypeMap;
    }
}
exports.Ptsv2paymentsTravelInformationVehicleData = Ptsv2paymentsTravelInformationVehicleData;
Ptsv2paymentsTravelInformationVehicleData.discriminator = undefined;
Ptsv2paymentsTravelInformationVehicleData.attributeTypeMap = [
    {
        "name": "connectorType",
        "baseName": "connectorType",
        "type": "string"
    },
    {
        "name": "chargingReasonCode",
        "baseName": "chargingReasonCode",
        "type": "string"
    }
];
class Ptsv2paymentsUnscheduledPaymentInformation {
    static getAttributeTypeMap() {
        return Ptsv2paymentsUnscheduledPaymentInformation.attributeTypeMap;
    }
}
exports.Ptsv2paymentsUnscheduledPaymentInformation = Ptsv2paymentsUnscheduledPaymentInformation;
Ptsv2paymentsUnscheduledPaymentInformation.discriminator = undefined;
Ptsv2paymentsUnscheduledPaymentInformation.attributeTypeMap = [
    {
        "name": "type",
        "baseName": "type",
        "type": "string"
    }
];
class Ptsv2paymentsWatchlistScreeningInformation {
    static getAttributeTypeMap() {
        return Ptsv2paymentsWatchlistScreeningInformation.attributeTypeMap;
    }
}
exports.Ptsv2paymentsWatchlistScreeningInformation = Ptsv2paymentsWatchlistScreeningInformation;
Ptsv2paymentsWatchlistScreeningInformation.discriminator = undefined;
Ptsv2paymentsWatchlistScreeningInformation.attributeTypeMap = [
    {
        "name": "addressOperator",
        "baseName": "addressOperator",
        "type": "string"
    },
    {
        "name": "weights",
        "baseName": "weights",
        "type": "Ptsv2paymentsWatchlistScreeningInformationWeights"
    },
    {
        "name": "sanctionLists",
        "baseName": "sanctionLists",
        "type": "Array<string>"
    },
    {
        "name": "proceedOnMatch",
        "baseName": "proceedOnMatch",
        "type": "boolean"
    }
];
class Ptsv2paymentsWatchlistScreeningInformationWeights {
    static getAttributeTypeMap() {
        return Ptsv2paymentsWatchlistScreeningInformationWeights.attributeTypeMap;
    }
}
exports.Ptsv2paymentsWatchlistScreeningInformationWeights = Ptsv2paymentsWatchlistScreeningInformationWeights;
Ptsv2paymentsWatchlistScreeningInformationWeights.discriminator = undefined;
Ptsv2paymentsWatchlistScreeningInformationWeights.attributeTypeMap = [
    {
        "name": "address",
        "baseName": "address",
        "type": "string"
    },
    {
        "name": "company",
        "baseName": "company",
        "type": "string"
    },
    {
        "name": "name",
        "baseName": "name",
        "type": "string"
    }
];
class Ptsv2paymentsidClientReferenceInformation {
    static getAttributeTypeMap() {
        return Ptsv2paymentsidClientReferenceInformation.attributeTypeMap;
    }
}
exports.Ptsv2paymentsidClientReferenceInformation = Ptsv2paymentsidClientReferenceInformation;
Ptsv2paymentsidClientReferenceInformation.discriminator = undefined;
Ptsv2paymentsidClientReferenceInformation.attributeTypeMap = [
    {
        "name": "code",
        "baseName": "code",
        "type": "string"
    },
    {
        "name": "partner",
        "baseName": "partner",
        "type": "Ptsv2paymentsidClientReferenceInformationPartner"
    },
    {
        "name": "applicationName",
        "baseName": "applicationName",
        "type": "string"
    },
    {
        "name": "applicationVersion",
        "baseName": "applicationVersion",
        "type": "string"
    },
    {
        "name": "applicationUser",
        "baseName": "applicationUser",
        "type": "string"
    },
    {
        "name": "transactionId",
        "baseName": "transactionId",
        "type": "string"
    }
];
class Ptsv2paymentsidClientReferenceInformationPartner {
    static getAttributeTypeMap() {
        return Ptsv2paymentsidClientReferenceInformationPartner.attributeTypeMap;
    }
}
exports.Ptsv2paymentsidClientReferenceInformationPartner = Ptsv2paymentsidClientReferenceInformationPartner;
Ptsv2paymentsidClientReferenceInformationPartner.discriminator = undefined;
Ptsv2paymentsidClientReferenceInformationPartner.attributeTypeMap = [
    {
        "name": "originalTransactionId",
        "baseName": "originalTransactionId",
        "type": "string"
    },
    {
        "name": "developerId",
        "baseName": "developerId",
        "type": "string"
    },
    {
        "name": "solutionId",
        "baseName": "solutionId",
        "type": "string"
    }
];
class Ptsv2paymentsidMerchantInformation {
    static getAttributeTypeMap() {
        return Ptsv2paymentsidMerchantInformation.attributeTypeMap;
    }
}
exports.Ptsv2paymentsidMerchantInformation = Ptsv2paymentsidMerchantInformation;
Ptsv2paymentsidMerchantInformation.discriminator = undefined;
Ptsv2paymentsidMerchantInformation.attributeTypeMap = [
    {
        "name": "transactionLocalDateTime",
        "baseName": "transactionLocalDateTime",
        "type": "string"
    }
];
class Ptsv2paymentsidOrderInformation {
    static getAttributeTypeMap() {
        return Ptsv2paymentsidOrderInformation.attributeTypeMap;
    }
}
exports.Ptsv2paymentsidOrderInformation = Ptsv2paymentsidOrderInformation;
Ptsv2paymentsidOrderInformation.discriminator = undefined;
Ptsv2paymentsidOrderInformation.attributeTypeMap = [
    {
        "name": "amountDetails",
        "baseName": "amountDetails",
        "type": "Ptsv2paymentsidOrderInformationAmountDetails"
    }
];
class Ptsv2paymentsidOrderInformationAmountDetails {
    static getAttributeTypeMap() {
        return Ptsv2paymentsidOrderInformationAmountDetails.attributeTypeMap;
    }
}
exports.Ptsv2paymentsidOrderInformationAmountDetails = Ptsv2paymentsidOrderInformationAmountDetails;
Ptsv2paymentsidOrderInformationAmountDetails.discriminator = undefined;
Ptsv2paymentsidOrderInformationAmountDetails.attributeTypeMap = [
    {
        "name": "additionalAmount",
        "baseName": "additionalAmount",
        "type": "string"
    },
    {
        "name": "currency",
        "baseName": "currency",
        "type": "string"
    }
];
class Ptsv2paymentsidProcessingInformation {
    static getAttributeTypeMap() {
        return Ptsv2paymentsidProcessingInformation.attributeTypeMap;
    }
}
exports.Ptsv2paymentsidProcessingInformation = Ptsv2paymentsidProcessingInformation;
Ptsv2paymentsidProcessingInformation.discriminator = undefined;
Ptsv2paymentsidProcessingInformation.attributeTypeMap = [
    {
        "name": "authorizationOptions",
        "baseName": "authorizationOptions",
        "type": "Ptsv2paymentsidProcessingInformationAuthorizationOptions"
    }
];
class Ptsv2paymentsidProcessingInformationAuthorizationOptions {
    static getAttributeTypeMap() {
        return Ptsv2paymentsidProcessingInformationAuthorizationOptions.attributeTypeMap;
    }
}
exports.Ptsv2paymentsidProcessingInformationAuthorizationOptions = Ptsv2paymentsidProcessingInformationAuthorizationOptions;
Ptsv2paymentsidProcessingInformationAuthorizationOptions.discriminator = undefined;
Ptsv2paymentsidProcessingInformationAuthorizationOptions.attributeTypeMap = [
    {
        "name": "initiator",
        "baseName": "initiator",
        "type": "Ptsv2paymentsidProcessingInformationAuthorizationOptionsInitiator"
    }
];
class Ptsv2paymentsidProcessingInformationAuthorizationOptionsInitiator {
    static getAttributeTypeMap() {
        return Ptsv2paymentsidProcessingInformationAuthorizationOptionsInitiator.attributeTypeMap;
    }
}
exports.Ptsv2paymentsidProcessingInformationAuthorizationOptionsInitiator = Ptsv2paymentsidProcessingInformationAuthorizationOptionsInitiator;
Ptsv2paymentsidProcessingInformationAuthorizationOptionsInitiator.discriminator = undefined;
Ptsv2paymentsidProcessingInformationAuthorizationOptionsInitiator.attributeTypeMap = [
    {
        "name": "storedCredentialUsed",
        "baseName": "storedCredentialUsed",
        "type": "boolean"
    }
];
class Ptsv2paymentsidTravelInformation {
    static getAttributeTypeMap() {
        return Ptsv2paymentsidTravelInformation.attributeTypeMap;
    }
}
exports.Ptsv2paymentsidTravelInformation = Ptsv2paymentsidTravelInformation;
Ptsv2paymentsidTravelInformation.discriminator = undefined;
Ptsv2paymentsidTravelInformation.attributeTypeMap = [
    {
        "name": "duration",
        "baseName": "duration",
        "type": "string"
    }
];
class Ptsv2paymentsidcapturesAggregatorInformation {
    static getAttributeTypeMap() {
        return Ptsv2paymentsidcapturesAggregatorInformation.attributeTypeMap;
    }
}
exports.Ptsv2paymentsidcapturesAggregatorInformation = Ptsv2paymentsidcapturesAggregatorInformation;
Ptsv2paymentsidcapturesAggregatorInformation.discriminator = undefined;
Ptsv2paymentsidcapturesAggregatorInformation.attributeTypeMap = [
    {
        "name": "aggregatorId",
        "baseName": "aggregatorId",
        "type": "string"
    },
    {
        "name": "name",
        "baseName": "name",
        "type": "string"
    },
    {
        "name": "subMerchant",
        "baseName": "subMerchant",
        "type": "Ptsv2paymentsidcapturesAggregatorInformationSubMerchant"
    }
];
class Ptsv2paymentsidcapturesAggregatorInformationSubMerchant {
    static getAttributeTypeMap() {
        return Ptsv2paymentsidcapturesAggregatorInformationSubMerchant.attributeTypeMap;
    }
}
exports.Ptsv2paymentsidcapturesAggregatorInformationSubMerchant = Ptsv2paymentsidcapturesAggregatorInformationSubMerchant;
Ptsv2paymentsidcapturesAggregatorInformationSubMerchant.discriminator = undefined;
Ptsv2paymentsidcapturesAggregatorInformationSubMerchant.attributeTypeMap = [
    {
        "name": "name",
        "baseName": "name",
        "type": "string"
    },
    {
        "name": "address1",
        "baseName": "address1",
        "type": "string"
    },
    {
        "name": "locality",
        "baseName": "locality",
        "type": "string"
    },
    {
        "name": "administrativeArea",
        "baseName": "administrativeArea",
        "type": "string"
    },
    {
        "name": "postalCode",
        "baseName": "postalCode",
        "type": "string"
    },
    {
        "name": "country",
        "baseName": "country",
        "type": "string"
    },
    {
        "name": "email",
        "baseName": "email",
        "type": "string"
    },
    {
        "name": "phoneNumber",
        "baseName": "phoneNumber",
        "type": "string"
    },
    {
        "name": "id",
        "baseName": "id",
        "type": "string"
    }
];
class Ptsv2paymentsidcapturesBuyerInformation {
    static getAttributeTypeMap() {
        return Ptsv2paymentsidcapturesBuyerInformation.attributeTypeMap;
    }
}
exports.Ptsv2paymentsidcapturesBuyerInformation = Ptsv2paymentsidcapturesBuyerInformation;
Ptsv2paymentsidcapturesBuyerInformation.discriminator = undefined;
Ptsv2paymentsidcapturesBuyerInformation.attributeTypeMap = [
    {
        "name": "merchantCustomerId",
        "baseName": "merchantCustomerId",
        "type": "string"
    },
    {
        "name": "vatRegistrationNumber",
        "baseName": "vatRegistrationNumber",
        "type": "string"
    },
    {
        "name": "dateOfBirth",
        "baseName": "dateOfBirth",
        "type": "string"
    },
    {
        "name": "gender",
        "baseName": "gender",
        "type": "string"
    },
    {
        "name": "language",
        "baseName": "language",
        "type": "string"
    },
    {
        "name": "personalIdentification",
        "baseName": "personalIdentification",
        "type": "Array<Ptsv2paymentsidcapturesBuyerInformationPersonalIdentification>"
    }
];
class Ptsv2paymentsidcapturesBuyerInformationPersonalIdentification {
    static getAttributeTypeMap() {
        return Ptsv2paymentsidcapturesBuyerInformationPersonalIdentification.attributeTypeMap;
    }
}
exports.Ptsv2paymentsidcapturesBuyerInformationPersonalIdentification = Ptsv2paymentsidcapturesBuyerInformationPersonalIdentification;
Ptsv2paymentsidcapturesBuyerInformationPersonalIdentification.discriminator = undefined;
Ptsv2paymentsidcapturesBuyerInformationPersonalIdentification.attributeTypeMap = [
    {
        "name": "id",
        "baseName": "id",
        "type": "string"
    }
];
class Ptsv2paymentsidcapturesDeviceInformation {
    static getAttributeTypeMap() {
        return Ptsv2paymentsidcapturesDeviceInformation.attributeTypeMap;
    }
}
exports.Ptsv2paymentsidcapturesDeviceInformation = Ptsv2paymentsidcapturesDeviceInformation;
Ptsv2paymentsidcapturesDeviceInformation.discriminator = undefined;
Ptsv2paymentsidcapturesDeviceInformation.attributeTypeMap = [
    {
        "name": "hostName",
        "baseName": "hostName",
        "type": "string"
    },
    {
        "name": "ipAddress",
        "baseName": "ipAddress",
        "type": "string"
    },
    {
        "name": "userAgent",
        "baseName": "userAgent",
        "type": "string"
    }
];
class Ptsv2paymentsidcapturesInstallmentInformation {
    static getAttributeTypeMap() {
        return Ptsv2paymentsidcapturesInstallmentInformation.attributeTypeMap;
    }
}
exports.Ptsv2paymentsidcapturesInstallmentInformation = Ptsv2paymentsidcapturesInstallmentInformation;
Ptsv2paymentsidcapturesInstallmentInformation.discriminator = undefined;
Ptsv2paymentsidcapturesInstallmentInformation.attributeTypeMap = [
    {
        "name": "amount",
        "baseName": "amount",
        "type": "string"
    },
    {
        "name": "frequency",
        "baseName": "frequency",
        "type": "string"
    },
    {
        "name": "planType",
        "baseName": "planType",
        "type": "string"
    },
    {
        "name": "sequence",
        "baseName": "sequence",
        "type": "number"
    },
    {
        "name": "totalAmount",
        "baseName": "totalAmount",
        "type": "string"
    },
    {
        "name": "totalCount",
        "baseName": "totalCount",
        "type": "number"
    },
    {
        "name": "firstInstallmentDate",
        "baseName": "firstInstallmentDate",
        "type": "string"
    },
    {
        "name": "firstInstallmentAmount",
        "baseName": "firstInstallmentAmount",
        "type": "string"
    },
    {
        "name": "invoiceData",
        "baseName": "invoiceData",
        "type": "string"
    },
    {
        "name": "paymentType",
        "baseName": "paymentType",
        "type": "string"
    },
    {
        "name": "additionalCosts",
        "baseName": "additionalCosts",
        "type": "string"
    },
    {
        "name": "additionalCostsPercentage",
        "baseName": "additionalCostsPercentage",
        "type": "string"
    },
    {
        "name": "amountFunded",
        "baseName": "amountFunded",
        "type": "string"
    },
    {
        "name": "amountRequestedPercentage",
        "baseName": "amountRequestedPercentage",
        "type": "string"
    },
    {
        "name": "annualFinancingCost",
        "baseName": "annualFinancingCost",
        "type": "string"
    },
    {
        "name": "annualInterestRate",
        "baseName": "annualInterestRate",
        "type": "string"
    },
    {
        "name": "expenses",
        "baseName": "expenses",
        "type": "string"
    },
    {
        "name": "expensesPercentage",
        "baseName": "expensesPercentage",
        "type": "string"
    },
    {
        "name": "fees",
        "baseName": "fees",
        "type": "string"
    },
    {
        "name": "feesPercentage",
        "baseName": "feesPercentage",
        "type": "string"
    },
    {
        "name": "insurance",
        "baseName": "insurance",
        "type": "string"
    },
    {
        "name": "insurancePercentage",
        "baseName": "insurancePercentage",
        "type": "string"
    },
    {
        "name": "monthlyInterestRate",
        "baseName": "monthlyInterestRate",
        "type": "string"
    },
    {
        "name": "taxes",
        "baseName": "taxes",
        "type": "string"
    },
    {
        "name": "taxesPercentage",
        "baseName": "taxesPercentage",
        "type": "string"
    }
];
class Ptsv2paymentsidcapturesMerchantInformation {
    static getAttributeTypeMap() {
        return Ptsv2paymentsidcapturesMerchantInformation.attributeTypeMap;
    }
}
exports.Ptsv2paymentsidcapturesMerchantInformation = Ptsv2paymentsidcapturesMerchantInformation;
Ptsv2paymentsidcapturesMerchantInformation.discriminator = undefined;
Ptsv2paymentsidcapturesMerchantInformation.attributeTypeMap = [
    {
        "name": "merchantDescriptor",
        "baseName": "merchantDescriptor",
        "type": "Ptsv2paymentsMerchantInformationMerchantDescriptor"
    },
    {
        "name": "cardAcceptorReferenceNumber",
        "baseName": "cardAcceptorReferenceNumber",
        "type": "string"
    },
    {
        "name": "categoryCode",
        "baseName": "categoryCode",
        "type": "number"
    },
    {
        "name": "vatRegistrationNumber",
        "baseName": "vatRegistrationNumber",
        "type": "string"
    },
    {
        "name": "serviceFeeDescriptor",
        "baseName": "serviceFeeDescriptor",
        "type": "Ptsv2paymentsMerchantInformationServiceFeeDescriptor"
    },
    {
        "name": "taxId",
        "baseName": "taxId",
        "type": "string"
    }
];
class Ptsv2paymentsidcapturesOrderInformation {
    static getAttributeTypeMap() {
        return Ptsv2paymentsidcapturesOrderInformation.attributeTypeMap;
    }
}
exports.Ptsv2paymentsidcapturesOrderInformation = Ptsv2paymentsidcapturesOrderInformation;
Ptsv2paymentsidcapturesOrderInformation.discriminator = undefined;
Ptsv2paymentsidcapturesOrderInformation.attributeTypeMap = [
    {
        "name": "amountDetails",
        "baseName": "amountDetails",
        "type": "Ptsv2paymentsidcapturesOrderInformationAmountDetails"
    },
    {
        "name": "billTo",
        "baseName": "billTo",
        "type": "Ptsv2paymentsidcapturesOrderInformationBillTo"
    },
    {
        "name": "shipTo",
        "baseName": "shipTo",
        "type": "Ptsv2paymentsidcapturesOrderInformationShipTo"
    },
    {
        "name": "lineItems",
        "baseName": "lineItems",
        "type": "Array<Ptsv2paymentsOrderInformationLineItems>"
    },
    {
        "name": "invoiceDetails",
        "baseName": "invoiceDetails",
        "type": "Ptsv2paymentsidcapturesOrderInformationInvoiceDetails"
    },
    {
        "name": "shippingDetails",
        "baseName": "shippingDetails",
        "type": "Ptsv2paymentsidcapturesOrderInformationShippingDetails"
    }
];
class Ptsv2paymentsidcapturesOrderInformationAmountDetails {
    static getAttributeTypeMap() {
        return Ptsv2paymentsidcapturesOrderInformationAmountDetails.attributeTypeMap;
    }
}
exports.Ptsv2paymentsidcapturesOrderInformationAmountDetails = Ptsv2paymentsidcapturesOrderInformationAmountDetails;
Ptsv2paymentsidcapturesOrderInformationAmountDetails.discriminator = undefined;
Ptsv2paymentsidcapturesOrderInformationAmountDetails.attributeTypeMap = [
    {
        "name": "totalAmount",
        "baseName": "totalAmount",
        "type": "string"
    },
    {
        "name": "currency",
        "baseName": "currency",
        "type": "string"
    },
    {
        "name": "discountAmount",
        "baseName": "discountAmount",
        "type": "string"
    },
    {
        "name": "dutyAmount",
        "baseName": "dutyAmount",
        "type": "string"
    },
    {
        "name": "gratuityAmount",
        "baseName": "gratuityAmount",
        "type": "string"
    },
    {
        "name": "taxAmount",
        "baseName": "taxAmount",
        "type": "string"
    },
    {
        "name": "nationalTaxIncluded",
        "baseName": "nationalTaxIncluded",
        "type": "string"
    },
    {
        "name": "taxAppliedAfterDiscount",
        "baseName": "taxAppliedAfterDiscount",
        "type": "string"
    },
    {
        "name": "taxAppliedLevel",
        "baseName": "taxAppliedLevel",
        "type": "string"
    },
    {
        "name": "taxTypeCode",
        "baseName": "taxTypeCode",
        "type": "string"
    },
    {
        "name": "freightAmount",
        "baseName": "freightAmount",
        "type": "string"
    },
    {
        "name": "foreignAmount",
        "baseName": "foreignAmount",
        "type": "string"
    },
    {
        "name": "foreignCurrency",
        "baseName": "foreignCurrency",
        "type": "string"
    },
    {
        "name": "exchangeRate",
        "baseName": "exchangeRate",
        "type": "string"
    },
    {
        "name": "exchangeRateTimeStamp",
        "baseName": "exchangeRateTimeStamp",
        "type": "string"
    },
    {
        "name": "amexAdditionalAmounts",
        "baseName": "amexAdditionalAmounts",
        "type": "Array<Ptsv2paymentsOrderInformationAmountDetailsAmexAdditionalAmounts>"
    },
    {
        "name": "taxDetails",
        "baseName": "taxDetails",
        "type": "Array<Ptsv2paymentsOrderInformationAmountDetailsTaxDetails>"
    },
    {
        "name": "serviceFeeAmount",
        "baseName": "serviceFeeAmount",
        "type": "string"
    },
    {
        "name": "originalCurrency",
        "baseName": "originalCurrency",
        "type": "string"
    },
    {
        "name": "cashbackAmount",
        "baseName": "cashbackAmount",
        "type": "string"
    }
];
class Ptsv2paymentsidcapturesOrderInformationBillTo {
    static getAttributeTypeMap() {
        return Ptsv2paymentsidcapturesOrderInformationBillTo.attributeTypeMap;
    }
}
exports.Ptsv2paymentsidcapturesOrderInformationBillTo = Ptsv2paymentsidcapturesOrderInformationBillTo;
Ptsv2paymentsidcapturesOrderInformationBillTo.discriminator = undefined;
Ptsv2paymentsidcapturesOrderInformationBillTo.attributeTypeMap = [
    {
        "name": "title",
        "baseName": "title",
        "type": "string"
    },
    {
        "name": "firstName",
        "baseName": "firstName",
        "type": "string"
    },
    {
        "name": "middleName",
        "baseName": "middleName",
        "type": "string"
    },
    {
        "name": "lastName",
        "baseName": "lastName",
        "type": "string"
    },
    {
        "name": "company",
        "baseName": "company",
        "type": "Ptsv2paymentsOrderInformationBillToCompany"
    },
    {
        "name": "address1",
        "baseName": "address1",
        "type": "string"
    },
    {
        "name": "address2",
        "baseName": "address2",
        "type": "string"
    },
    {
        "name": "locality",
        "baseName": "locality",
        "type": "string"
    },
    {
        "name": "district",
        "baseName": "district",
        "type": "string"
    },
    {
        "name": "administrativeArea",
        "baseName": "administrativeArea",
        "type": "string"
    },
    {
        "name": "postalCode",
        "baseName": "postalCode",
        "type": "string"
    },
    {
        "name": "county",
        "baseName": "county",
        "type": "string"
    },
    {
        "name": "country",
        "baseName": "country",
        "type": "string"
    },
    {
        "name": "email",
        "baseName": "email",
        "type": "string"
    },
    {
        "name": "phoneNumber",
        "baseName": "phoneNumber",
        "type": "string"
    }
];
class Ptsv2paymentsidcapturesOrderInformationInvoiceDetails {
    static getAttributeTypeMap() {
        return Ptsv2paymentsidcapturesOrderInformationInvoiceDetails.attributeTypeMap;
    }
}
exports.Ptsv2paymentsidcapturesOrderInformationInvoiceDetails = Ptsv2paymentsidcapturesOrderInformationInvoiceDetails;
Ptsv2paymentsidcapturesOrderInformationInvoiceDetails.discriminator = undefined;
Ptsv2paymentsidcapturesOrderInformationInvoiceDetails.attributeTypeMap = [
    {
        "name": "purchaseOrderNumber",
        "baseName": "purchaseOrderNumber",
        "type": "string"
    },
    {
        "name": "purchaseOrderDate",
        "baseName": "purchaseOrderDate",
        "type": "string"
    },
    {
        "name": "purchaseContactName",
        "baseName": "purchaseContactName",
        "type": "string"
    },
    {
        "name": "taxable",
        "baseName": "taxable",
        "type": "boolean"
    },
    {
        "name": "vatInvoiceReferenceNumber",
        "baseName": "vatInvoiceReferenceNumber",
        "type": "string"
    },
    {
        "name": "commodityCode",
        "baseName": "commodityCode",
        "type": "string"
    },
    {
        "name": "transactionAdviceAddendum",
        "baseName": "transactionAdviceAddendum",
        "type": "Array<Ptsv2paymentsOrderInformationInvoiceDetailsTransactionAdviceAddendum>"
    }
];
class Ptsv2paymentsidcapturesOrderInformationShipTo {
    static getAttributeTypeMap() {
        return Ptsv2paymentsidcapturesOrderInformationShipTo.attributeTypeMap;
    }
}
exports.Ptsv2paymentsidcapturesOrderInformationShipTo = Ptsv2paymentsidcapturesOrderInformationShipTo;
Ptsv2paymentsidcapturesOrderInformationShipTo.discriminator = undefined;
Ptsv2paymentsidcapturesOrderInformationShipTo.attributeTypeMap = [
    {
        "name": "administrativeArea",
        "baseName": "administrativeArea",
        "type": "string"
    },
    {
        "name": "country",
        "baseName": "country",
        "type": "string"
    },
    {
        "name": "postalCode",
        "baseName": "postalCode",
        "type": "string"
    },
    {
        "name": "email",
        "baseName": "email",
        "type": "string"
    },
    {
        "name": "county",
        "baseName": "county",
        "type": "string"
    }
];
class Ptsv2paymentsidcapturesOrderInformationShippingDetails {
    static getAttributeTypeMap() {
        return Ptsv2paymentsidcapturesOrderInformationShippingDetails.attributeTypeMap;
    }
}
exports.Ptsv2paymentsidcapturesOrderInformationShippingDetails = Ptsv2paymentsidcapturesOrderInformationShippingDetails;
Ptsv2paymentsidcapturesOrderInformationShippingDetails.discriminator = undefined;
Ptsv2paymentsidcapturesOrderInformationShippingDetails.attributeTypeMap = [
    {
        "name": "shipFromPostalCode",
        "baseName": "shipFromPostalCode",
        "type": "string"
    }
];
class Ptsv2paymentsidcapturesPaymentInformation {
    static getAttributeTypeMap() {
        return Ptsv2paymentsidcapturesPaymentInformation.attributeTypeMap;
    }
}
exports.Ptsv2paymentsidcapturesPaymentInformation = Ptsv2paymentsidcapturesPaymentInformation;
Ptsv2paymentsidcapturesPaymentInformation.discriminator = undefined;
Ptsv2paymentsidcapturesPaymentInformation.attributeTypeMap = [
    {
        "name": "customer",
        "baseName": "customer",
        "type": "Ptsv2paymentsPaymentInformationCustomer"
    },
    {
        "name": "card",
        "baseName": "card",
        "type": "Ptsv2paymentsidcapturesPaymentInformationCard"
    },
    {
        "name": "paymentType",
        "baseName": "paymentType",
        "type": "Ptsv2paymentsidcapturesPaymentInformationPaymentType"
    }
];
class Ptsv2paymentsidcapturesPaymentInformationCard {
    static getAttributeTypeMap() {
        return Ptsv2paymentsidcapturesPaymentInformationCard.attributeTypeMap;
    }
}
exports.Ptsv2paymentsidcapturesPaymentInformationCard = Ptsv2paymentsidcapturesPaymentInformationCard;
Ptsv2paymentsidcapturesPaymentInformationCard.discriminator = undefined;
Ptsv2paymentsidcapturesPaymentInformationCard.attributeTypeMap = [
    {
        "name": "sourceAccountType",
        "baseName": "sourceAccountType",
        "type": "string"
    },
    {
        "name": "sourceAccountTypeDetails",
        "baseName": "sourceAccountTypeDetails",
        "type": "string"
    }
];
class Ptsv2paymentsidcapturesPaymentInformationPaymentType {
    static getAttributeTypeMap() {
        return Ptsv2paymentsidcapturesPaymentInformationPaymentType.attributeTypeMap;
    }
}
exports.Ptsv2paymentsidcapturesPaymentInformationPaymentType = Ptsv2paymentsidcapturesPaymentInformationPaymentType;
Ptsv2paymentsidcapturesPaymentInformationPaymentType.discriminator = undefined;
Ptsv2paymentsidcapturesPaymentInformationPaymentType.attributeTypeMap = [
    {
        "name": "method",
        "baseName": "method",
        "type": "Ptsv2paymentsidcapturesPaymentInformationPaymentTypeMethod"
    }
];
class Ptsv2paymentsidcapturesPaymentInformationPaymentTypeMethod {
    static getAttributeTypeMap() {
        return Ptsv2paymentsidcapturesPaymentInformationPaymentTypeMethod.attributeTypeMap;
    }
}
exports.Ptsv2paymentsidcapturesPaymentInformationPaymentTypeMethod = Ptsv2paymentsidcapturesPaymentInformationPaymentTypeMethod;
Ptsv2paymentsidcapturesPaymentInformationPaymentTypeMethod.discriminator = undefined;
Ptsv2paymentsidcapturesPaymentInformationPaymentTypeMethod.attributeTypeMap = [
    {
        "name": "name",
        "baseName": "name",
        "type": "string"
    }
];
class Ptsv2paymentsidcapturesPointOfSaleInformation {
    static getAttributeTypeMap() {
        return Ptsv2paymentsidcapturesPointOfSaleInformation.attributeTypeMap;
    }
}
exports.Ptsv2paymentsidcapturesPointOfSaleInformation = Ptsv2paymentsidcapturesPointOfSaleInformation;
Ptsv2paymentsidcapturesPointOfSaleInformation.discriminator = undefined;
Ptsv2paymentsidcapturesPointOfSaleInformation.attributeTypeMap = [
    {
        "name": "emv",
        "baseName": "emv",
        "type": "Ptsv2paymentsidcapturesPointOfSaleInformationEmv"
    },
    {
        "name": "amexCapnData",
        "baseName": "amexCapnData",
        "type": "string"
    }
];
class Ptsv2paymentsidcapturesPointOfSaleInformationEmv {
    static getAttributeTypeMap() {
        return Ptsv2paymentsidcapturesPointOfSaleInformationEmv.attributeTypeMap;
    }
}
exports.Ptsv2paymentsidcapturesPointOfSaleInformationEmv = Ptsv2paymentsidcapturesPointOfSaleInformationEmv;
Ptsv2paymentsidcapturesPointOfSaleInformationEmv.discriminator = undefined;
Ptsv2paymentsidcapturesPointOfSaleInformationEmv.attributeTypeMap = [
    {
        "name": "tags",
        "baseName": "tags",
        "type": "string"
    },
    {
        "name": "fallback",
        "baseName": "fallback",
        "type": "boolean"
    }
];
class Ptsv2paymentsidcapturesProcessingInformation {
    static getAttributeTypeMap() {
        return Ptsv2paymentsidcapturesProcessingInformation.attributeTypeMap;
    }
}
exports.Ptsv2paymentsidcapturesProcessingInformation = Ptsv2paymentsidcapturesProcessingInformation;
Ptsv2paymentsidcapturesProcessingInformation.discriminator = undefined;
Ptsv2paymentsidcapturesProcessingInformation.attributeTypeMap = [
    {
        "name": "paymentSolution",
        "baseName": "paymentSolution",
        "type": "string"
    },
    {
        "name": "reconciliationId",
        "baseName": "reconciliationId",
        "type": "string"
    },
    {
        "name": "linkId",
        "baseName": "linkId",
        "type": "string"
    },
    {
        "name": "reportGroup",
        "baseName": "reportGroup",
        "type": "string"
    },
    {
        "name": "visaCheckoutId",
        "baseName": "visaCheckoutId",
        "type": "string"
    },
    {
        "name": "purchaseLevel",
        "baseName": "purchaseLevel",
        "type": "string"
    },
    {
        "name": "industryDataType",
        "baseName": "industryDataType",
        "type": "string"
    },
    {
        "name": "issuer",
        "baseName": "issuer",
        "type": "Ptsv2paymentsIssuerInformation"
    },
    {
        "name": "authorizationOptions",
        "baseName": "authorizationOptions",
        "type": "Ptsv2paymentsidcapturesProcessingInformationAuthorizationOptions"
    },
    {
        "name": "captureOptions",
        "baseName": "captureOptions",
        "type": "Ptsv2paymentsidcapturesProcessingInformationCaptureOptions"
    },
    {
        "name": "loanOptions",
        "baseName": "loanOptions",
        "type": "Ptsv2paymentsProcessingInformationLoanOptions"
    },
    {
        "name": "payByPointsIndicator",
        "baseName": "payByPointsIndicator",
        "type": "boolean"
    },
    {
        "name": "actionList",
        "baseName": "actionList",
        "type": "Array<string>"
    }
];
class Ptsv2paymentsidcapturesProcessingInformationAuthorizationOptions {
    static getAttributeTypeMap() {
        return Ptsv2paymentsidcapturesProcessingInformationAuthorizationOptions.attributeTypeMap;
    }
}
exports.Ptsv2paymentsidcapturesProcessingInformationAuthorizationOptions = Ptsv2paymentsidcapturesProcessingInformationAuthorizationOptions;
Ptsv2paymentsidcapturesProcessingInformationAuthorizationOptions.discriminator = undefined;
Ptsv2paymentsidcapturesProcessingInformationAuthorizationOptions.attributeTypeMap = [
    {
        "name": "authType",
        "baseName": "authType",
        "type": "string"
    },
    {
        "name": "verbalAuthCode",
        "baseName": "verbalAuthCode",
        "type": "string"
    },
    {
        "name": "verbalAuthTransactionId",
        "baseName": "verbalAuthTransactionId",
        "type": "string"
    }
];
class Ptsv2paymentsidcapturesProcessingInformationCaptureOptions {
    static getAttributeTypeMap() {
        return Ptsv2paymentsidcapturesProcessingInformationCaptureOptions.attributeTypeMap;
    }
}
exports.Ptsv2paymentsidcapturesProcessingInformationCaptureOptions = Ptsv2paymentsidcapturesProcessingInformationCaptureOptions;
Ptsv2paymentsidcapturesProcessingInformationCaptureOptions.discriminator = undefined;
Ptsv2paymentsidcapturesProcessingInformationCaptureOptions.attributeTypeMap = [
    {
        "name": "captureSequenceNumber",
        "baseName": "captureSequenceNumber",
        "type": "number"
    },
    {
        "name": "totalCaptureCount",
        "baseName": "totalCaptureCount",
        "type": "number"
    },
    {
        "name": "isFinal",
        "baseName": "isFinal",
        "type": "string"
    },
    {
        "name": "notes",
        "baseName": "notes",
        "type": "string"
    },
    {
        "name": "reconciliationIdAlternate",
        "baseName": "reconciliationIdAlternate",
        "type": "string"
    }
];
class Ptsv2paymentsidrefundsClientReferenceInformation {
    static getAttributeTypeMap() {
        return Ptsv2paymentsidrefundsClientReferenceInformation.attributeTypeMap;
    }
}
exports.Ptsv2paymentsidrefundsClientReferenceInformation = Ptsv2paymentsidrefundsClientReferenceInformation;
Ptsv2paymentsidrefundsClientReferenceInformation.discriminator = undefined;
Ptsv2paymentsidrefundsClientReferenceInformation.attributeTypeMap = [
    {
        "name": "code",
        "baseName": "code",
        "type": "string"
    },
    {
        "name": "reconciliationId",
        "baseName": "reconciliationId",
        "type": "string"
    },
    {
        "name": "returnReconciliationId",
        "baseName": "returnReconciliationId",
        "type": "string"
    },
    {
        "name": "pausedRequestId",
        "baseName": "pausedRequestId",
        "type": "string"
    },
    {
        "name": "transactionId",
        "baseName": "transactionId",
        "type": "string"
    },
    {
        "name": "comments",
        "baseName": "comments",
        "type": "string"
    },
    {
        "name": "partner",
        "baseName": "partner",
        "type": "Ptsv2paymentsClientReferenceInformationPartner"
    },
    {
        "name": "applicationName",
        "baseName": "applicationName",
        "type": "string"
    },
    {
        "name": "applicationVersion",
        "baseName": "applicationVersion",
        "type": "string"
    },
    {
        "name": "applicationUser",
        "baseName": "applicationUser",
        "type": "string"
    }
];
class Ptsv2paymentsidrefundsMerchantInformation {
    static getAttributeTypeMap() {
        return Ptsv2paymentsidrefundsMerchantInformation.attributeTypeMap;
    }
}
exports.Ptsv2paymentsidrefundsMerchantInformation = Ptsv2paymentsidrefundsMerchantInformation;
Ptsv2paymentsidrefundsMerchantInformation.discriminator = undefined;
Ptsv2paymentsidrefundsMerchantInformation.attributeTypeMap = [
    {
        "name": "merchantDescriptor",
        "baseName": "merchantDescriptor",
        "type": "Ptsv2paymentsMerchantInformationMerchantDescriptor"
    },
    {
        "name": "categoryCode",
        "baseName": "categoryCode",
        "type": "number"
    },
    {
        "name": "vatRegistrationNumber",
        "baseName": "vatRegistrationNumber",
        "type": "string"
    },
    {
        "name": "cardAcceptorReferenceNumber",
        "baseName": "cardAcceptorReferenceNumber",
        "type": "string"
    },
    {
        "name": "taxId",
        "baseName": "taxId",
        "type": "string"
    }
];
class Ptsv2paymentsidrefundsOrderInformation {
    static getAttributeTypeMap() {
        return Ptsv2paymentsidrefundsOrderInformation.attributeTypeMap;
    }
}
exports.Ptsv2paymentsidrefundsOrderInformation = Ptsv2paymentsidrefundsOrderInformation;
Ptsv2paymentsidrefundsOrderInformation.discriminator = undefined;
Ptsv2paymentsidrefundsOrderInformation.attributeTypeMap = [
    {
        "name": "amountDetails",
        "baseName": "amountDetails",
        "type": "Ptsv2paymentsidcapturesOrderInformationAmountDetails"
    },
    {
        "name": "billTo",
        "baseName": "billTo",
        "type": "Ptsv2paymentsidcapturesOrderInformationBillTo"
    },
    {
        "name": "shipTo",
        "baseName": "shipTo",
        "type": "Ptsv2paymentsidcapturesOrderInformationShipTo"
    },
    {
        "name": "lineItems",
        "baseName": "lineItems",
        "type": "Array<Ptsv2paymentsidrefundsOrderInformationLineItems>"
    },
    {
        "name": "invoiceDetails",
        "baseName": "invoiceDetails",
        "type": "Ptsv2paymentsidcapturesOrderInformationInvoiceDetails"
    },
    {
        "name": "shippingDetails",
        "baseName": "shippingDetails",
        "type": "Ptsv2paymentsidcapturesOrderInformationShippingDetails"
    }
];
class Ptsv2paymentsidrefundsOrderInformationLineItems {
    static getAttributeTypeMap() {
        return Ptsv2paymentsidrefundsOrderInformationLineItems.attributeTypeMap;
    }
}
exports.Ptsv2paymentsidrefundsOrderInformationLineItems = Ptsv2paymentsidrefundsOrderInformationLineItems;
Ptsv2paymentsidrefundsOrderInformationLineItems.discriminator = undefined;
Ptsv2paymentsidrefundsOrderInformationLineItems.attributeTypeMap = [
    {
        "name": "productCode",
        "baseName": "productCode",
        "type": "string"
    },
    {
        "name": "productName",
        "baseName": "productName",
        "type": "string"
    },
    {
        "name": "productSku",
        "baseName": "productSku",
        "type": "string"
    },
    {
        "name": "quantity",
        "baseName": "quantity",
        "type": "number"
    },
    {
        "name": "unitPrice",
        "baseName": "unitPrice",
        "type": "string"
    },
    {
        "name": "unitOfMeasure",
        "baseName": "unitOfMeasure",
        "type": "string"
    },
    {
        "name": "totalAmount",
        "baseName": "totalAmount",
        "type": "string"
    },
    {
        "name": "taxAmount",
        "baseName": "taxAmount",
        "type": "string"
    },
    {
        "name": "taxRate",
        "baseName": "taxRate",
        "type": "string"
    },
    {
        "name": "taxAppliedAfterDiscount",
        "baseName": "taxAppliedAfterDiscount",
        "type": "string"
    },
    {
        "name": "taxStatusIndicator",
        "baseName": "taxStatusIndicator",
        "type": "string"
    },
    {
        "name": "taxTypeCode",
        "baseName": "taxTypeCode",
        "type": "string"
    },
    {
        "name": "amountIncludesTax",
        "baseName": "amountIncludesTax",
        "type": "boolean"
    },
    {
        "name": "typeOfSupply",
        "baseName": "typeOfSupply",
        "type": "string"
    },
    {
        "name": "commodityCode",
        "baseName": "commodityCode",
        "type": "string"
    },
    {
        "name": "discountAmount",
        "baseName": "discountAmount",
        "type": "string"
    },
    {
        "name": "discountApplied",
        "baseName": "discountApplied",
        "type": "boolean"
    },
    {
        "name": "discountRate",
        "baseName": "discountRate",
        "type": "string"
    },
    {
        "name": "invoiceNumber",
        "baseName": "invoiceNumber",
        "type": "string"
    },
    {
        "name": "taxDetails",
        "baseName": "taxDetails",
        "type": "Array<Ptsv2paymentsOrderInformationAmountDetailsTaxDetails>"
    }
];
class Ptsv2paymentsidrefundsPaymentInformation {
    static getAttributeTypeMap() {
        return Ptsv2paymentsidrefundsPaymentInformation.attributeTypeMap;
    }
}
exports.Ptsv2paymentsidrefundsPaymentInformation = Ptsv2paymentsidrefundsPaymentInformation;
Ptsv2paymentsidrefundsPaymentInformation.discriminator = undefined;
Ptsv2paymentsidrefundsPaymentInformation.attributeTypeMap = [
    {
        "name": "card",
        "baseName": "card",
        "type": "Ptsv2paymentsidrefundsPaymentInformationCard"
    },
    {
        "name": "bank",
        "baseName": "bank",
        "type": "Ptsv2paymentsidrefundsPaymentInformationBank"
    },
    {
        "name": "tokenizedCard",
        "baseName": "tokenizedCard",
        "type": "Ptsv2paymentsPaymentInformationTokenizedCard"
    },
    {
        "name": "fluidData",
        "baseName": "fluidData",
        "type": "Ptsv2paymentsPaymentInformationFluidData"
    },
    {
        "name": "customer",
        "baseName": "customer",
        "type": "Ptsv2paymentsPaymentInformationCustomer"
    },
    {
        "name": "paymentInstrument",
        "baseName": "paymentInstrument",
        "type": "Ptsv2paymentsPaymentInformationPaymentInstrument"
    },
    {
        "name": "instrumentIdentifier",
        "baseName": "instrumentIdentifier",
        "type": "Ptsv2paymentsPaymentInformationInstrumentIdentifier"
    },
    {
        "name": "shippingAddress",
        "baseName": "shippingAddress",
        "type": "Ptsv2paymentsPaymentInformationShippingAddress"
    },
    {
        "name": "legacyToken",
        "baseName": "legacyToken",
        "type": "Ptsv2paymentsPaymentInformationLegacyToken"
    },
    {
        "name": "paymentType",
        "baseName": "paymentType",
        "type": "Ptsv2paymentsidrefundsPaymentInformationPaymentType"
    },
    {
        "name": "eWallet",
        "baseName": "eWallet",
        "type": "Ptsv2paymentsidrefundsPaymentInformationEWallet"
    },
    {
        "name": "paymentAccountReference",
        "baseName": "paymentAccountReference",
        "type": "Ptsv2paymentsPaymentInformationPaymentAccountReference"
    }
];
class Ptsv2paymentsidrefundsPaymentInformationBank {
    static getAttributeTypeMap() {
        return Ptsv2paymentsidrefundsPaymentInformationBank.attributeTypeMap;
    }
}
exports.Ptsv2paymentsidrefundsPaymentInformationBank = Ptsv2paymentsidrefundsPaymentInformationBank;
Ptsv2paymentsidrefundsPaymentInformationBank.discriminator = undefined;
Ptsv2paymentsidrefundsPaymentInformationBank.attributeTypeMap = [
    {
        "name": "account",
        "baseName": "account",
        "type": "Ptsv2paymentsidrefundsPaymentInformationBankAccount"
    },
    {
        "name": "routingNumber",
        "baseName": "routingNumber",
        "type": "string"
    },
    {
        "name": "iban",
        "baseName": "iban",
        "type": "string"
    },
    {
        "name": "swiftCode",
        "baseName": "swiftCode",
        "type": "string"
    }
];
class Ptsv2paymentsidrefundsPaymentInformationBankAccount {
    static getAttributeTypeMap() {
        return Ptsv2paymentsidrefundsPaymentInformationBankAccount.attributeTypeMap;
    }
}
exports.Ptsv2paymentsidrefundsPaymentInformationBankAccount = Ptsv2paymentsidrefundsPaymentInformationBankAccount;
Ptsv2paymentsidrefundsPaymentInformationBankAccount.discriminator = undefined;
Ptsv2paymentsidrefundsPaymentInformationBankAccount.attributeTypeMap = [
    {
        "name": "type",
        "baseName": "type",
        "type": "string"
    },
    {
        "name": "number",
        "baseName": "number",
        "type": "string"
    },
    {
        "name": "encoderId",
        "baseName": "encoderId",
        "type": "string"
    },
    {
        "name": "checkNumber",
        "baseName": "checkNumber",
        "type": "string"
    },
    {
        "name": "checkImageReferenceNumber",
        "baseName": "checkImageReferenceNumber",
        "type": "string"
    }
];
class Ptsv2paymentsidrefundsPaymentInformationCard {
    static getAttributeTypeMap() {
        return Ptsv2paymentsidrefundsPaymentInformationCard.attributeTypeMap;
    }
}
exports.Ptsv2paymentsidrefundsPaymentInformationCard = Ptsv2paymentsidrefundsPaymentInformationCard;
Ptsv2paymentsidrefundsPaymentInformationCard.discriminator = undefined;
Ptsv2paymentsidrefundsPaymentInformationCard.attributeTypeMap = [
    {
        "name": "number",
        "baseName": "number",
        "type": "string"
    },
    {
        "name": "expirationMonth",
        "baseName": "expirationMonth",
        "type": "string"
    },
    {
        "name": "expirationYear",
        "baseName": "expirationYear",
        "type": "string"
    },
    {
        "name": "type",
        "baseName": "type",
        "type": "string"
    },
    {
        "name": "accountEncoderId",
        "baseName": "accountEncoderId",
        "type": "string"
    },
    {
        "name": "issueNumber",
        "baseName": "issueNumber",
        "type": "string"
    },
    {
        "name": "startMonth",
        "baseName": "startMonth",
        "type": "string"
    },
    {
        "name": "startYear",
        "baseName": "startYear",
        "type": "string"
    },
    {
        "name": "sourceAccountType",
        "baseName": "sourceAccountType",
        "type": "string"
    },
    {
        "name": "sourceAccountTypeDetails",
        "baseName": "sourceAccountTypeDetails",
        "type": "string"
    },
    {
        "name": "securityCode",
        "baseName": "securityCode",
        "type": "string"
    },
    {
        "name": "useAs",
        "baseName": "useAs",
        "type": "string"
    }
];
class Ptsv2paymentsidrefundsPaymentInformationEWallet {
    static getAttributeTypeMap() {
        return Ptsv2paymentsidrefundsPaymentInformationEWallet.attributeTypeMap;
    }
}
exports.Ptsv2paymentsidrefundsPaymentInformationEWallet = Ptsv2paymentsidrefundsPaymentInformationEWallet;
Ptsv2paymentsidrefundsPaymentInformationEWallet.discriminator = undefined;
Ptsv2paymentsidrefundsPaymentInformationEWallet.attributeTypeMap = [
    {
        "name": "fundingSource",
        "baseName": "fundingSource",
        "type": "string"
    }
];
class Ptsv2paymentsidrefundsPaymentInformationPaymentType {
    static getAttributeTypeMap() {
        return Ptsv2paymentsidrefundsPaymentInformationPaymentType.attributeTypeMap;
    }
}
exports.Ptsv2paymentsidrefundsPaymentInformationPaymentType = Ptsv2paymentsidrefundsPaymentInformationPaymentType;
Ptsv2paymentsidrefundsPaymentInformationPaymentType.discriminator = undefined;
Ptsv2paymentsidrefundsPaymentInformationPaymentType.attributeTypeMap = [
    {
        "name": "name",
        "baseName": "name",
        "type": "string"
    },
    {
        "name": "subTypeName",
        "baseName": "subTypeName",
        "type": "string"
    },
    {
        "name": "method",
        "baseName": "method",
        "type": "Ptsv2paymentsidcapturesPaymentInformationPaymentTypeMethod"
    }
];
class Ptsv2paymentsidrefundsPointOfSaleInformation {
    static getAttributeTypeMap() {
        return Ptsv2paymentsidrefundsPointOfSaleInformation.attributeTypeMap;
    }
}
exports.Ptsv2paymentsidrefundsPointOfSaleInformation = Ptsv2paymentsidrefundsPointOfSaleInformation;
Ptsv2paymentsidrefundsPointOfSaleInformation.discriminator = undefined;
Ptsv2paymentsidrefundsPointOfSaleInformation.attributeTypeMap = [
    {
        "name": "emv",
        "baseName": "emv",
        "type": "Ptsv2paymentsidcapturesPointOfSaleInformationEmv"
    },
    {
        "name": "terminalCategory",
        "baseName": "terminalCategory",
        "type": "string"
    }
];
class Ptsv2paymentsidrefundsProcessingInformation {
    static getAttributeTypeMap() {
        return Ptsv2paymentsidrefundsProcessingInformation.attributeTypeMap;
    }
}
exports.Ptsv2paymentsidrefundsProcessingInformation = Ptsv2paymentsidrefundsProcessingInformation;
Ptsv2paymentsidrefundsProcessingInformation.discriminator = undefined;
Ptsv2paymentsidrefundsProcessingInformation.attributeTypeMap = [
    {
        "name": "actionList",
        "baseName": "actionList",
        "type": "Array<string>"
    },
    {
        "name": "paymentSolution",
        "baseName": "paymentSolution",
        "type": "string"
    },
    {
        "name": "reconciliationId",
        "baseName": "reconciliationId",
        "type": "string"
    },
    {
        "name": "linkId",
        "baseName": "linkId",
        "type": "string"
    },
    {
        "name": "reportGroup",
        "baseName": "reportGroup",
        "type": "string"
    },
    {
        "name": "visaCheckoutId",
        "baseName": "visaCheckoutId",
        "type": "string"
    },
    {
        "name": "purchaseLevel",
        "baseName": "purchaseLevel",
        "type": "string"
    },
    {
        "name": "recurringOptions",
        "baseName": "recurringOptions",
        "type": "Ptsv2paymentsidrefundsProcessingInformationRecurringOptions"
    },
    {
        "name": "industryDataType",
        "baseName": "industryDataType",
        "type": "string"
    },
    {
        "name": "paymentType",
        "baseName": "paymentType",
        "type": "string"
    },
    {
        "name": "refundOptions",
        "baseName": "refundOptions",
        "type": "Ptsv2paymentsidrefundsProcessingInformationRefundOptions"
    },
    {
        "name": "transactionTypeIndicator",
        "baseName": "transactionTypeIndicator",
        "type": "string"
    }
];
class Ptsv2paymentsidrefundsProcessingInformationRecurringOptions {
    static getAttributeTypeMap() {
        return Ptsv2paymentsidrefundsProcessingInformationRecurringOptions.attributeTypeMap;
    }
}
exports.Ptsv2paymentsidrefundsProcessingInformationRecurringOptions = Ptsv2paymentsidrefundsProcessingInformationRecurringOptions;
Ptsv2paymentsidrefundsProcessingInformationRecurringOptions.discriminator = undefined;
Ptsv2paymentsidrefundsProcessingInformationRecurringOptions.attributeTypeMap = [
    {
        "name": "loanPayment",
        "baseName": "loanPayment",
        "type": "boolean"
    }
];
class Ptsv2paymentsidrefundsProcessingInformationRefundOptions {
    static getAttributeTypeMap() {
        return Ptsv2paymentsidrefundsProcessingInformationRefundOptions.attributeTypeMap;
    }
}
exports.Ptsv2paymentsidrefundsProcessingInformationRefundOptions = Ptsv2paymentsidrefundsProcessingInformationRefundOptions;
Ptsv2paymentsidrefundsProcessingInformationRefundOptions.discriminator = undefined;
Ptsv2paymentsidrefundsProcessingInformationRefundOptions.attributeTypeMap = [
    {
        "name": "reason",
        "baseName": "reason",
        "type": "string"
    }
];
class Ptsv2paymentsidreversalsClientReferenceInformation {
    static getAttributeTypeMap() {
        return Ptsv2paymentsidreversalsClientReferenceInformation.attributeTypeMap;
    }
}
exports.Ptsv2paymentsidreversalsClientReferenceInformation = Ptsv2paymentsidreversalsClientReferenceInformation;
Ptsv2paymentsidreversalsClientReferenceInformation.discriminator = undefined;
Ptsv2paymentsidreversalsClientReferenceInformation.attributeTypeMap = [
    {
        "name": "code",
        "baseName": "code",
        "type": "string"
    },
    {
        "name": "pausedRequestId",
        "baseName": "pausedRequestId",
        "type": "string"
    },
    {
        "name": "comments",
        "baseName": "comments",
        "type": "string"
    },
    {
        "name": "partner",
        "baseName": "partner",
        "type": "Ptsv2paymentsidreversalsClientReferenceInformationPartner"
    },
    {
        "name": "applicationName",
        "baseName": "applicationName",
        "type": "string"
    },
    {
        "name": "applicationVersion",
        "baseName": "applicationVersion",
        "type": "string"
    },
    {
        "name": "applicationUser",
        "baseName": "applicationUser",
        "type": "string"
    },
    {
        "name": "reconciliationId",
        "baseName": "reconciliationId",
        "type": "string"
    },
    {
        "name": "transactionId",
        "baseName": "transactionId",
        "type": "string"
    }
];
class Ptsv2paymentsidreversalsClientReferenceInformationPartner {
    static getAttributeTypeMap() {
        return Ptsv2paymentsidreversalsClientReferenceInformationPartner.attributeTypeMap;
    }
}
exports.Ptsv2paymentsidreversalsClientReferenceInformationPartner = Ptsv2paymentsidreversalsClientReferenceInformationPartner;
Ptsv2paymentsidreversalsClientReferenceInformationPartner.discriminator = undefined;
Ptsv2paymentsidreversalsClientReferenceInformationPartner.attributeTypeMap = [
    {
        "name": "developerId",
        "baseName": "developerId",
        "type": "string"
    },
    {
        "name": "solutionId",
        "baseName": "solutionId",
        "type": "string"
    },
    {
        "name": "thirdPartyCertificationNumber",
        "baseName": "thirdPartyCertificationNumber",
        "type": "string"
    }
];
class Ptsv2paymentsidreversalsOrderInformation {
    static getAttributeTypeMap() {
        return Ptsv2paymentsidreversalsOrderInformation.attributeTypeMap;
    }
}
exports.Ptsv2paymentsidreversalsOrderInformation = Ptsv2paymentsidreversalsOrderInformation;
Ptsv2paymentsidreversalsOrderInformation.discriminator = undefined;
Ptsv2paymentsidreversalsOrderInformation.attributeTypeMap = [
    {
        "name": "amountDetails",
        "baseName": "amountDetails",
        "type": "Ptsv2paymentsidreversalsOrderInformationAmountDetails"
    },
    {
        "name": "lineItems",
        "baseName": "lineItems",
        "type": "Array<Ptsv2paymentsidreversalsOrderInformationLineItems>"
    }
];
class Ptsv2paymentsidreversalsOrderInformationAmountDetails {
    static getAttributeTypeMap() {
        return Ptsv2paymentsidreversalsOrderInformationAmountDetails.attributeTypeMap;
    }
}
exports.Ptsv2paymentsidreversalsOrderInformationAmountDetails = Ptsv2paymentsidreversalsOrderInformationAmountDetails;
Ptsv2paymentsidreversalsOrderInformationAmountDetails.discriminator = undefined;
Ptsv2paymentsidreversalsOrderInformationAmountDetails.attributeTypeMap = [
    {
        "name": "serviceFeeAmount",
        "baseName": "serviceFeeAmount",
        "type": "string"
    }
];
class Ptsv2paymentsidreversalsOrderInformationLineItems {
    static getAttributeTypeMap() {
        return Ptsv2paymentsidreversalsOrderInformationLineItems.attributeTypeMap;
    }
}
exports.Ptsv2paymentsidreversalsOrderInformationLineItems = Ptsv2paymentsidreversalsOrderInformationLineItems;
Ptsv2paymentsidreversalsOrderInformationLineItems.discriminator = undefined;
Ptsv2paymentsidreversalsOrderInformationLineItems.attributeTypeMap = [
    {
        "name": "quantity",
        "baseName": "quantity",
        "type": "number"
    },
    {
        "name": "unitPrice",
        "baseName": "unitPrice",
        "type": "string"
    }
];
class Ptsv2paymentsidreversalsPaymentInformation {
    static getAttributeTypeMap() {
        return Ptsv2paymentsidreversalsPaymentInformation.attributeTypeMap;
    }
}
exports.Ptsv2paymentsidreversalsPaymentInformation = Ptsv2paymentsidreversalsPaymentInformation;
Ptsv2paymentsidreversalsPaymentInformation.discriminator = undefined;
Ptsv2paymentsidreversalsPaymentInformation.attributeTypeMap = [
    {
        "name": "paymentType",
        "baseName": "paymentType",
        "type": "Ptsv2paymentsidreversalsPaymentInformationPaymentType"
    }
];
class Ptsv2paymentsidreversalsPaymentInformationPaymentType {
    static getAttributeTypeMap() {
        return Ptsv2paymentsidreversalsPaymentInformationPaymentType.attributeTypeMap;
    }
}
exports.Ptsv2paymentsidreversalsPaymentInformationPaymentType = Ptsv2paymentsidreversalsPaymentInformationPaymentType;
Ptsv2paymentsidreversalsPaymentInformationPaymentType.discriminator = undefined;
Ptsv2paymentsidreversalsPaymentInformationPaymentType.attributeTypeMap = [
    {
        "name": "method",
        "baseName": "method",
        "type": "Ptsv2paymentsidreversalsPaymentInformationPaymentTypeMethod"
    }
];
class Ptsv2paymentsidreversalsPaymentInformationPaymentTypeMethod {
    static getAttributeTypeMap() {
        return Ptsv2paymentsidreversalsPaymentInformationPaymentTypeMethod.attributeTypeMap;
    }
}
exports.Ptsv2paymentsidreversalsPaymentInformationPaymentTypeMethod = Ptsv2paymentsidreversalsPaymentInformationPaymentTypeMethod;
Ptsv2paymentsidreversalsPaymentInformationPaymentTypeMethod.discriminator = undefined;
Ptsv2paymentsidreversalsPaymentInformationPaymentTypeMethod.attributeTypeMap = [
    {
        "name": "name",
        "baseName": "name",
        "type": "string"
    }
];
class Ptsv2paymentsidreversalsPointOfSaleInformation {
    static getAttributeTypeMap() {
        return Ptsv2paymentsidreversalsPointOfSaleInformation.attributeTypeMap;
    }
}
exports.Ptsv2paymentsidreversalsPointOfSaleInformation = Ptsv2paymentsidreversalsPointOfSaleInformation;
Ptsv2paymentsidreversalsPointOfSaleInformation.discriminator = undefined;
Ptsv2paymentsidreversalsPointOfSaleInformation.attributeTypeMap = [
    {
        "name": "emv",
        "baseName": "emv",
        "type": "Ptsv2paymentsidreversalsPointOfSaleInformationEmv"
    }
];
class Ptsv2paymentsidreversalsPointOfSaleInformationEmv {
    static getAttributeTypeMap() {
        return Ptsv2paymentsidreversalsPointOfSaleInformationEmv.attributeTypeMap;
    }
}
exports.Ptsv2paymentsidreversalsPointOfSaleInformationEmv = Ptsv2paymentsidreversalsPointOfSaleInformationEmv;
Ptsv2paymentsidreversalsPointOfSaleInformationEmv.discriminator = undefined;
Ptsv2paymentsidreversalsPointOfSaleInformationEmv.attributeTypeMap = [
    {
        "name": "tags",
        "baseName": "tags",
        "type": "string"
    }
];
class Ptsv2paymentsidreversalsProcessingInformation {
    static getAttributeTypeMap() {
        return Ptsv2paymentsidreversalsProcessingInformation.attributeTypeMap;
    }
}
exports.Ptsv2paymentsidreversalsProcessingInformation = Ptsv2paymentsidreversalsProcessingInformation;
Ptsv2paymentsidreversalsProcessingInformation.discriminator = undefined;
Ptsv2paymentsidreversalsProcessingInformation.attributeTypeMap = [
    {
        "name": "paymentSolution",
        "baseName": "paymentSolution",
        "type": "string"
    },
    {
        "name": "reconciliationId",
        "baseName": "reconciliationId",
        "type": "string"
    },
    {
        "name": "linkId",
        "baseName": "linkId",
        "type": "string"
    },
    {
        "name": "reportGroup",
        "baseName": "reportGroup",
        "type": "string"
    },
    {
        "name": "visaCheckoutId",
        "baseName": "visaCheckoutId",
        "type": "string"
    },
    {
        "name": "issuer",
        "baseName": "issuer",
        "type": "Ptsv2paymentsIssuerInformation"
    },
    {
        "name": "actionList",
        "baseName": "actionList",
        "type": "Array<string>"
    },
    {
        "name": "transactionTypeIndicator",
        "baseName": "transactionTypeIndicator",
        "type": "string"
    }
];
class Ptsv2paymentsidreversalsReversalInformation {
    static getAttributeTypeMap() {
        return Ptsv2paymentsidreversalsReversalInformation.attributeTypeMap;
    }
}
exports.Ptsv2paymentsidreversalsReversalInformation = Ptsv2paymentsidreversalsReversalInformation;
Ptsv2paymentsidreversalsReversalInformation.discriminator = undefined;
Ptsv2paymentsidreversalsReversalInformation.attributeTypeMap = [
    {
        "name": "amountDetails",
        "baseName": "amountDetails",
        "type": "Ptsv2paymentsidreversalsReversalInformationAmountDetails"
    },
    {
        "name": "reason",
        "baseName": "reason",
        "type": "string"
    }
];
class Ptsv2paymentsidreversalsReversalInformationAmountDetails {
    static getAttributeTypeMap() {
        return Ptsv2paymentsidreversalsReversalInformationAmountDetails.attributeTypeMap;
    }
}
exports.Ptsv2paymentsidreversalsReversalInformationAmountDetails = Ptsv2paymentsidreversalsReversalInformationAmountDetails;
Ptsv2paymentsidreversalsReversalInformationAmountDetails.discriminator = undefined;
Ptsv2paymentsidreversalsReversalInformationAmountDetails.attributeTypeMap = [
    {
        "name": "totalAmount",
        "baseName": "totalAmount",
        "type": "string"
    },
    {
        "name": "currency",
        "baseName": "currency",
        "type": "string"
    }
];
class Ptsv2paymentsidvoidsAgreementInformation {
    static getAttributeTypeMap() {
        return Ptsv2paymentsidvoidsAgreementInformation.attributeTypeMap;
    }
}
exports.Ptsv2paymentsidvoidsAgreementInformation = Ptsv2paymentsidvoidsAgreementInformation;
Ptsv2paymentsidvoidsAgreementInformation.discriminator = undefined;
Ptsv2paymentsidvoidsAgreementInformation.attributeTypeMap = [
    {
        "name": "agreementId",
        "baseName": "agreementId",
        "type": "string"
    }
];
class Ptsv2paymentsidvoidsMerchantInformation {
    static getAttributeTypeMap() {
        return Ptsv2paymentsidvoidsMerchantInformation.attributeTypeMap;
    }
}
exports.Ptsv2paymentsidvoidsMerchantInformation = Ptsv2paymentsidvoidsMerchantInformation;
Ptsv2paymentsidvoidsMerchantInformation.discriminator = undefined;
Ptsv2paymentsidvoidsMerchantInformation.attributeTypeMap = [
    {
        "name": "transactionLocalDateTime",
        "baseName": "transactionLocalDateTime",
        "type": "string"
    }
];
class Ptsv2paymentsidvoidsOrderInformation {
    static getAttributeTypeMap() {
        return Ptsv2paymentsidvoidsOrderInformation.attributeTypeMap;
    }
}
exports.Ptsv2paymentsidvoidsOrderInformation = Ptsv2paymentsidvoidsOrderInformation;
Ptsv2paymentsidvoidsOrderInformation.discriminator = undefined;
Ptsv2paymentsidvoidsOrderInformation.attributeTypeMap = [
    {
        "name": "amountDetails",
        "baseName": "amountDetails",
        "type": "Ptsv2paymentsidreversalsReversalInformationAmountDetails"
    }
];
class Ptsv2paymentsidvoidsPaymentInformation {
    static getAttributeTypeMap() {
        return Ptsv2paymentsidvoidsPaymentInformation.attributeTypeMap;
    }
}
exports.Ptsv2paymentsidvoidsPaymentInformation = Ptsv2paymentsidvoidsPaymentInformation;
Ptsv2paymentsidvoidsPaymentInformation.discriminator = undefined;
Ptsv2paymentsidvoidsPaymentInformation.attributeTypeMap = [
    {
        "name": "paymentType",
        "baseName": "paymentType",
        "type": "Ptsv2paymentsidrefundsPaymentInformationPaymentType"
    }
];
class Ptsv2paymentsidvoidsProcessingInformation {
    static getAttributeTypeMap() {
        return Ptsv2paymentsidvoidsProcessingInformation.attributeTypeMap;
    }
}
exports.Ptsv2paymentsidvoidsProcessingInformation = Ptsv2paymentsidvoidsProcessingInformation;
Ptsv2paymentsidvoidsProcessingInformation.discriminator = undefined;
Ptsv2paymentsidvoidsProcessingInformation.attributeTypeMap = [
    {
        "name": "actionList",
        "baseName": "actionList",
        "type": "Array<string>"
    }
];
class Ptsv2paymenttokensPaymentInformation {
    static getAttributeTypeMap() {
        return Ptsv2paymenttokensPaymentInformation.attributeTypeMap;
    }
}
exports.Ptsv2paymenttokensPaymentInformation = Ptsv2paymenttokensPaymentInformation;
Ptsv2paymenttokensPaymentInformation.discriminator = undefined;
Ptsv2paymenttokensPaymentInformation.attributeTypeMap = [
    {
        "name": "paymentType",
        "baseName": "paymentType",
        "type": "Ptsv2refreshpaymentstatusidPaymentInformationPaymentType"
    },
    {
        "name": "tokenizedPaymentMethod",
        "baseName": "tokenizedPaymentMethod",
        "type": "Ptsv2paymentsPaymentInformationTokenizedPaymentMethod"
    }
];
class Ptsv2paymenttokensProcessingInformation {
    static getAttributeTypeMap() {
        return Ptsv2paymenttokensProcessingInformation.attributeTypeMap;
    }
}
exports.Ptsv2paymenttokensProcessingInformation = Ptsv2paymenttokensProcessingInformation;
Ptsv2paymenttokensProcessingInformation.discriminator = undefined;
Ptsv2paymenttokensProcessingInformation.attributeTypeMap = [
    {
        "name": "actionList",
        "baseName": "actionList",
        "type": "Array<string>"
    }
];
class Ptsv2payoutsAggregatorInformation {
    static getAttributeTypeMap() {
        return Ptsv2payoutsAggregatorInformation.attributeTypeMap;
    }
}
exports.Ptsv2payoutsAggregatorInformation = Ptsv2payoutsAggregatorInformation;
Ptsv2payoutsAggregatorInformation.discriminator = undefined;
Ptsv2payoutsAggregatorInformation.attributeTypeMap = [
    {
        "name": "aggregatorId",
        "baseName": "aggregatorId",
        "type": "string"
    },
    {
        "name": "name",
        "baseName": "name",
        "type": "string"
    },
    {
        "name": "independentSalesOrganizationID",
        "baseName": "independentSalesOrganizationID",
        "type": "string"
    },
    {
        "name": "subMerchant",
        "baseName": "subMerchant",
        "type": "Ptsv2payoutsAggregatorInformationSubMerchant"
    },
    {
        "name": "streetAddress",
        "baseName": "streetAddress",
        "type": "string"
    },
    {
        "name": "city",
        "baseName": "city",
        "type": "string"
    },
    {
        "name": "state",
        "baseName": "state",
        "type": "string"
    },
    {
        "name": "postalCode",
        "baseName": "postalCode",
        "type": "string"
    },
    {
        "name": "country",
        "baseName": "country",
        "type": "string"
    }
];
class Ptsv2payoutsAggregatorInformationSubMerchant {
    static getAttributeTypeMap() {
        return Ptsv2payoutsAggregatorInformationSubMerchant.attributeTypeMap;
    }
}
exports.Ptsv2payoutsAggregatorInformationSubMerchant = Ptsv2payoutsAggregatorInformationSubMerchant;
Ptsv2payoutsAggregatorInformationSubMerchant.discriminator = undefined;
Ptsv2payoutsAggregatorInformationSubMerchant.attributeTypeMap = [
    {
        "name": "id",
        "baseName": "id",
        "type": "string"
    }
];
class Ptsv2payoutsClientReferenceInformation {
    static getAttributeTypeMap() {
        return Ptsv2payoutsClientReferenceInformation.attributeTypeMap;
    }
}
exports.Ptsv2payoutsClientReferenceInformation = Ptsv2payoutsClientReferenceInformation;
Ptsv2payoutsClientReferenceInformation.discriminator = undefined;
Ptsv2payoutsClientReferenceInformation.attributeTypeMap = [
    {
        "name": "code",
        "baseName": "code",
        "type": "string"
    },
    {
        "name": "applicationName",
        "baseName": "applicationName",
        "type": "string"
    },
    {
        "name": "applicationVersion",
        "baseName": "applicationVersion",
        "type": "string"
    },
    {
        "name": "applicationUser",
        "baseName": "applicationUser",
        "type": "string"
    }
];
class Ptsv2payoutsMerchantInformation {
    static getAttributeTypeMap() {
        return Ptsv2payoutsMerchantInformation.attributeTypeMap;
    }
}
exports.Ptsv2payoutsMerchantInformation = Ptsv2payoutsMerchantInformation;
Ptsv2payoutsMerchantInformation.discriminator = undefined;
Ptsv2payoutsMerchantInformation.attributeTypeMap = [
    {
        "name": "categoryCode",
        "baseName": "categoryCode",
        "type": "number"
    },
    {
        "name": "submitLocalDateTime",
        "baseName": "submitLocalDateTime",
        "type": "string"
    },
    {
        "name": "vatRegistrationNumber",
        "baseName": "vatRegistrationNumber",
        "type": "string"
    },
    {
        "name": "merchantDescriptor",
        "baseName": "merchantDescriptor",
        "type": "Ptsv2payoutsMerchantInformationMerchantDescriptor"
    }
];
class Ptsv2payoutsMerchantInformationMerchantDescriptor {
    static getAttributeTypeMap() {
        return Ptsv2payoutsMerchantInformationMerchantDescriptor.attributeTypeMap;
    }
}
exports.Ptsv2payoutsMerchantInformationMerchantDescriptor = Ptsv2payoutsMerchantInformationMerchantDescriptor;
Ptsv2payoutsMerchantInformationMerchantDescriptor.discriminator = undefined;
Ptsv2payoutsMerchantInformationMerchantDescriptor.attributeTypeMap = [
    {
        "name": "name",
        "baseName": "name",
        "type": "string"
    },
    {
        "name": "locality",
        "baseName": "locality",
        "type": "string"
    },
    {
        "name": "country",
        "baseName": "country",
        "type": "string"
    },
    {
        "name": "administrativeArea",
        "baseName": "administrativeArea",
        "type": "string"
    },
    {
        "name": "postalCode",
        "baseName": "postalCode",
        "type": "string"
    },
    {
        "name": "contact",
        "baseName": "contact",
        "type": "string"
    },
    {
        "name": "address1",
        "baseName": "address1",
        "type": "string"
    }
];
class Ptsv2payoutsOrderInformation {
    static getAttributeTypeMap() {
        return Ptsv2payoutsOrderInformation.attributeTypeMap;
    }
}
exports.Ptsv2payoutsOrderInformation = Ptsv2payoutsOrderInformation;
Ptsv2payoutsOrderInformation.discriminator = undefined;
Ptsv2payoutsOrderInformation.attributeTypeMap = [
    {
        "name": "amountDetails",
        "baseName": "amountDetails",
        "type": "Ptsv2payoutsOrderInformationAmountDetails"
    },
    {
        "name": "billTo",
        "baseName": "billTo",
        "type": "Ptsv2payoutsOrderInformationBillTo"
    },
    {
        "name": "isCryptocurrencyPurchase",
        "baseName": "isCryptocurrencyPurchase",
        "type": "string"
    }
];
class Ptsv2payoutsOrderInformationAmountDetails {
    static getAttributeTypeMap() {
        return Ptsv2payoutsOrderInformationAmountDetails.attributeTypeMap;
    }
}
exports.Ptsv2payoutsOrderInformationAmountDetails = Ptsv2payoutsOrderInformationAmountDetails;
Ptsv2payoutsOrderInformationAmountDetails.discriminator = undefined;
Ptsv2payoutsOrderInformationAmountDetails.attributeTypeMap = [
    {
        "name": "totalAmount",
        "baseName": "totalAmount",
        "type": "string"
    },
    {
        "name": "currency",
        "baseName": "currency",
        "type": "string"
    },
    {
        "name": "surcharge",
        "baseName": "surcharge",
        "type": "Ptsv2payoutsOrderInformationAmountDetailsSurcharge"
    }
];
class Ptsv2payoutsOrderInformationAmountDetailsSurcharge {
    static getAttributeTypeMap() {
        return Ptsv2payoutsOrderInformationAmountDetailsSurcharge.attributeTypeMap;
    }
}
exports.Ptsv2payoutsOrderInformationAmountDetailsSurcharge = Ptsv2payoutsOrderInformationAmountDetailsSurcharge;
Ptsv2payoutsOrderInformationAmountDetailsSurcharge.discriminator = undefined;
Ptsv2payoutsOrderInformationAmountDetailsSurcharge.attributeTypeMap = [
    {
        "name": "amount",
        "baseName": "amount",
        "type": "string"
    }
];
class Ptsv2payoutsOrderInformationBillTo {
    static getAttributeTypeMap() {
        return Ptsv2payoutsOrderInformationBillTo.attributeTypeMap;
    }
}
exports.Ptsv2payoutsOrderInformationBillTo = Ptsv2payoutsOrderInformationBillTo;
Ptsv2payoutsOrderInformationBillTo.discriminator = undefined;
Ptsv2payoutsOrderInformationBillTo.attributeTypeMap = [
    {
        "name": "firstName",
        "baseName": "firstName",
        "type": "string"
    },
    {
        "name": "lastName",
        "baseName": "lastName",
        "type": "string"
    },
    {
        "name": "address1",
        "baseName": "address1",
        "type": "string"
    },
    {
        "name": "address2",
        "baseName": "address2",
        "type": "string"
    },
    {
        "name": "country",
        "baseName": "country",
        "type": "string"
    },
    {
        "name": "locality",
        "baseName": "locality",
        "type": "string"
    },
    {
        "name": "administrativeArea",
        "baseName": "administrativeArea",
        "type": "string"
    },
    {
        "name": "postalCode",
        "baseName": "postalCode",
        "type": "string"
    },
    {
        "name": "phoneNumber",
        "baseName": "phoneNumber",
        "type": "string"
    },
    {
        "name": "phoneType",
        "baseName": "phoneType",
        "type": "string"
    }
];
class Ptsv2payoutsPaymentInformation {
    static getAttributeTypeMap() {
        return Ptsv2payoutsPaymentInformation.attributeTypeMap;
    }
}
exports.Ptsv2payoutsPaymentInformation = Ptsv2payoutsPaymentInformation;
Ptsv2payoutsPaymentInformation.discriminator = undefined;
Ptsv2payoutsPaymentInformation.attributeTypeMap = [
    {
        "name": "card",
        "baseName": "card",
        "type": "Ptsv2payoutsPaymentInformationCard"
    },
    {
        "name": "customer",
        "baseName": "customer",
        "type": "Ptsv2paymentsPaymentInformationCustomer"
    },
    {
        "name": "paymentInstrument",
        "baseName": "paymentInstrument",
        "type": "Ptsv2paymentsPaymentInformationPaymentInstrument"
    },
    {
        "name": "instrumentIdentifier",
        "baseName": "instrumentIdentifier",
        "type": "PtsV2PaymentsPost201ResponsePaymentInformationInstrumentIdentifier"
    },
    {
        "name": "tokenizedCard",
        "baseName": "tokenizedCard",
        "type": "Ptsv2paymentsPaymentInformationTokenizedCard"
    }
];
class Ptsv2payoutsPaymentInformationCard {
    static getAttributeTypeMap() {
        return Ptsv2payoutsPaymentInformationCard.attributeTypeMap;
    }
}
exports.Ptsv2payoutsPaymentInformationCard = Ptsv2payoutsPaymentInformationCard;
Ptsv2payoutsPaymentInformationCard.discriminator = undefined;
Ptsv2payoutsPaymentInformationCard.attributeTypeMap = [
    {
        "name": "type",
        "baseName": "type",
        "type": "string"
    },
    {
        "name": "number",
        "baseName": "number",
        "type": "string"
    },
    {
        "name": "expirationMonth",
        "baseName": "expirationMonth",
        "type": "string"
    },
    {
        "name": "expirationYear",
        "baseName": "expirationYear",
        "type": "string"
    },
    {
        "name": "sourceAccountType",
        "baseName": "sourceAccountType",
        "type": "string"
    }
];
class Ptsv2payoutsProcessingInformation {
    static getAttributeTypeMap() {
        return Ptsv2payoutsProcessingInformation.attributeTypeMap;
    }
}
exports.Ptsv2payoutsProcessingInformation = Ptsv2payoutsProcessingInformation;
Ptsv2payoutsProcessingInformation.discriminator = undefined;
Ptsv2payoutsProcessingInformation.attributeTypeMap = [
    {
        "name": "businessApplicationId",
        "baseName": "businessApplicationId",
        "type": "string"
    },
    {
        "name": "networkRoutingOrder",
        "baseName": "networkRoutingOrder",
        "type": "string"
    },
    {
        "name": "commerceIndicator",
        "baseName": "commerceIndicator",
        "type": "string"
    },
    {
        "name": "reconciliationId",
        "baseName": "reconciliationId",
        "type": "string"
    },
    {
        "name": "payoutsOptions",
        "baseName": "payoutsOptions",
        "type": "Ptsv2payoutsProcessingInformationPayoutsOptions"
    },
    {
        "name": "transactionReason",
        "baseName": "transactionReason",
        "type": "string"
    },
    {
        "name": "purposeOfPayment",
        "baseName": "purposeOfPayment",
        "type": "string"
    },
    {
        "name": "fundingOptions",
        "baseName": "fundingOptions",
        "type": "Ptsv2payoutsProcessingInformationFundingOptions"
    },
    {
        "name": "languageCode",
        "baseName": "languageCode",
        "type": "string"
    },
    {
        "name": "purchaseOptions",
        "baseName": "purchaseOptions",
        "type": "Ptsv2payoutsProcessingInformationPurchaseOptions"
    }
];
class Ptsv2payoutsProcessingInformationFundingOptions {
    static getAttributeTypeMap() {
        return Ptsv2payoutsProcessingInformationFundingOptions.attributeTypeMap;
    }
}
exports.Ptsv2payoutsProcessingInformationFundingOptions = Ptsv2payoutsProcessingInformationFundingOptions;
Ptsv2payoutsProcessingInformationFundingOptions.discriminator = undefined;
Ptsv2payoutsProcessingInformationFundingOptions.attributeTypeMap = [
    {
        "name": "initiator",
        "baseName": "initiator",
        "type": "Ptsv2payoutsProcessingInformationFundingOptionsInitiator"
    }
];
class Ptsv2payoutsProcessingInformationFundingOptionsInitiator {
    static getAttributeTypeMap() {
        return Ptsv2payoutsProcessingInformationFundingOptionsInitiator.attributeTypeMap;
    }
}
exports.Ptsv2payoutsProcessingInformationFundingOptionsInitiator = Ptsv2payoutsProcessingInformationFundingOptionsInitiator;
Ptsv2payoutsProcessingInformationFundingOptionsInitiator.discriminator = undefined;
Ptsv2payoutsProcessingInformationFundingOptionsInitiator.attributeTypeMap = [
    {
        "name": "type",
        "baseName": "type",
        "type": "string"
    }
];
class Ptsv2payoutsProcessingInformationPayoutsOptions {
    static getAttributeTypeMap() {
        return Ptsv2payoutsProcessingInformationPayoutsOptions.attributeTypeMap;
    }
}
exports.Ptsv2payoutsProcessingInformationPayoutsOptions = Ptsv2payoutsProcessingInformationPayoutsOptions;
Ptsv2payoutsProcessingInformationPayoutsOptions.discriminator = undefined;
Ptsv2payoutsProcessingInformationPayoutsOptions.attributeTypeMap = [
    {
        "name": "acquirerMerchantId",
        "baseName": "acquirerMerchantId",
        "type": "string"
    },
    {
        "name": "acquirerBin",
        "baseName": "acquirerBin",
        "type": "string"
    },
    {
        "name": "retrievalReferenceNumber",
        "baseName": "retrievalReferenceNumber",
        "type": "string"
    },
    {
        "name": "accountFundingReferenceId",
        "baseName": "accountFundingReferenceId",
        "type": "string"
    },
    {
        "name": "deferredDateTime",
        "baseName": "deferredDateTime",
        "type": "string"
    }
];
class Ptsv2payoutsProcessingInformationPurchaseOptions {
    static getAttributeTypeMap() {
        return Ptsv2payoutsProcessingInformationPurchaseOptions.attributeTypeMap;
    }
}
exports.Ptsv2payoutsProcessingInformationPurchaseOptions = Ptsv2payoutsProcessingInformationPurchaseOptions;
Ptsv2payoutsProcessingInformationPurchaseOptions.discriminator = undefined;
Ptsv2payoutsProcessingInformationPurchaseOptions.attributeTypeMap = [
    {
        "name": "benefitAmount",
        "baseName": "benefitAmount",
        "type": "string"
    },
    {
        "name": "benefitType",
        "baseName": "benefitType",
        "type": "string"
    }
];
class Ptsv2payoutsRecipientInformation {
    static getAttributeTypeMap() {
        return Ptsv2payoutsRecipientInformation.attributeTypeMap;
    }
}
exports.Ptsv2payoutsRecipientInformation = Ptsv2payoutsRecipientInformation;
Ptsv2payoutsRecipientInformation.discriminator = undefined;
Ptsv2payoutsRecipientInformation.attributeTypeMap = [
    {
        "name": "firstName",
        "baseName": "firstName",
        "type": "string"
    },
    {
        "name": "middleName",
        "baseName": "middleName",
        "type": "string"
    },
    {
        "name": "lastName",
        "baseName": "lastName",
        "type": "string"
    },
    {
        "name": "address1",
        "baseName": "address1",
        "type": "string"
    },
    {
        "name": "locality",
        "baseName": "locality",
        "type": "string"
    },
    {
        "name": "administrativeArea",
        "baseName": "administrativeArea",
        "type": "string"
    },
    {
        "name": "country",
        "baseName": "country",
        "type": "string"
    },
    {
        "name": "postalCode",
        "baseName": "postalCode",
        "type": "string"
    },
    {
        "name": "phoneNumber",
        "baseName": "phoneNumber",
        "type": "string"
    },
    {
        "name": "aliasName",
        "baseName": "aliasName",
        "type": "string"
    },
    {
        "name": "nationality",
        "baseName": "nationality",
        "type": "string"
    },
    {
        "name": "countryOfBirth",
        "baseName": "countryOfBirth",
        "type": "string"
    },
    {
        "name": "occupation",
        "baseName": "occupation",
        "type": "string"
    },
    {
        "name": "email",
        "baseName": "email",
        "type": "string"
    }
];
class Ptsv2payoutsSenderInformation {
    static getAttributeTypeMap() {
        return Ptsv2payoutsSenderInformation.attributeTypeMap;
    }
}
exports.Ptsv2payoutsSenderInformation = Ptsv2payoutsSenderInformation;
Ptsv2payoutsSenderInformation.discriminator = undefined;
Ptsv2payoutsSenderInformation.attributeTypeMap = [
    {
        "name": "referenceNumber",
        "baseName": "referenceNumber",
        "type": "string"
    },
    {
        "name": "account",
        "baseName": "account",
        "type": "Ptsv2payoutsSenderInformationAccount"
    },
    {
        "name": "firstName",
        "baseName": "firstName",
        "type": "string"
    },
    {
        "name": "middleInitial",
        "baseName": "middleInitial",
        "type": "string"
    },
    {
        "name": "middleName",
        "baseName": "middleName",
        "type": "string"
    },
    {
        "name": "lastName",
        "baseName": "lastName",
        "type": "string"
    },
    {
        "name": "name",
        "baseName": "name",
        "type": "string"
    },
    {
        "name": "address1",
        "baseName": "address1",
        "type": "string"
    },
    {
        "name": "locality",
        "baseName": "locality",
        "type": "string"
    },
    {
        "name": "administrativeArea",
        "baseName": "administrativeArea",
        "type": "string"
    },
    {
        "name": "countryCode",
        "baseName": "countryCode",
        "type": "string"
    },
    {
        "name": "postalCode",
        "baseName": "postalCode",
        "type": "string"
    },
    {
        "name": "phoneNumber",
        "baseName": "phoneNumber",
        "type": "string"
    },
    {
        "name": "dateOfBirth",
        "baseName": "dateOfBirth",
        "type": "string"
    },
    {
        "name": "vatRegistrationNumber",
        "baseName": "vatRegistrationNumber",
        "type": "string"
    },
    {
        "name": "personalIdType",
        "baseName": "personalIdType",
        "type": "string"
    },
    {
        "name": "type",
        "baseName": "type",
        "type": "string"
    },
    {
        "name": "identificationNumber",
        "baseName": "identificationNumber",
        "type": "string"
    },
    {
        "name": "aliasName",
        "baseName": "aliasName",
        "type": "string"
    }
];
class Ptsv2payoutsSenderInformationAccount {
    static getAttributeTypeMap() {
        return Ptsv2payoutsSenderInformationAccount.attributeTypeMap;
    }
}
exports.Ptsv2payoutsSenderInformationAccount = Ptsv2payoutsSenderInformationAccount;
Ptsv2payoutsSenderInformationAccount.discriminator = undefined;
Ptsv2payoutsSenderInformationAccount.attributeTypeMap = [
    {
        "name": "fundsSource",
        "baseName": "fundsSource",
        "type": "string"
    },
    {
        "name": "number",
        "baseName": "number",
        "type": "string"
    }
];
class Ptsv2refreshpaymentstatusidAgreementInformation {
    static getAttributeTypeMap() {
        return Ptsv2refreshpaymentstatusidAgreementInformation.attributeTypeMap;
    }
}
exports.Ptsv2refreshpaymentstatusidAgreementInformation = Ptsv2refreshpaymentstatusidAgreementInformation;
Ptsv2refreshpaymentstatusidAgreementInformation.discriminator = undefined;
Ptsv2refreshpaymentstatusidAgreementInformation.attributeTypeMap = [
    {
        "name": "agreementId",
        "baseName": "agreementId",
        "type": "string"
    }
];
class Ptsv2refreshpaymentstatusidClientReferenceInformation {
    static getAttributeTypeMap() {
        return Ptsv2refreshpaymentstatusidClientReferenceInformation.attributeTypeMap;
    }
}
exports.Ptsv2refreshpaymentstatusidClientReferenceInformation = Ptsv2refreshpaymentstatusidClientReferenceInformation;
Ptsv2refreshpaymentstatusidClientReferenceInformation.discriminator = undefined;
Ptsv2refreshpaymentstatusidClientReferenceInformation.attributeTypeMap = [
    {
        "name": "code",
        "baseName": "code",
        "type": "string"
    },
    {
        "name": "reconciliationId",
        "baseName": "reconciliationId",
        "type": "string"
    }
];
class Ptsv2refreshpaymentstatusidPaymentInformation {
    static getAttributeTypeMap() {
        return Ptsv2refreshpaymentstatusidPaymentInformation.attributeTypeMap;
    }
}
exports.Ptsv2refreshpaymentstatusidPaymentInformation = Ptsv2refreshpaymentstatusidPaymentInformation;
Ptsv2refreshpaymentstatusidPaymentInformation.discriminator = undefined;
Ptsv2refreshpaymentstatusidPaymentInformation.attributeTypeMap = [
    {
        "name": "customer",
        "baseName": "customer",
        "type": "Ptsv2refreshpaymentstatusidPaymentInformationCustomer"
    },
    {
        "name": "paymentType",
        "baseName": "paymentType",
        "type": "Ptsv2refreshpaymentstatusidPaymentInformationPaymentType"
    }
];
class Ptsv2refreshpaymentstatusidPaymentInformationCustomer {
    static getAttributeTypeMap() {
        return Ptsv2refreshpaymentstatusidPaymentInformationCustomer.attributeTypeMap;
    }
}
exports.Ptsv2refreshpaymentstatusidPaymentInformationCustomer = Ptsv2refreshpaymentstatusidPaymentInformationCustomer;
Ptsv2refreshpaymentstatusidPaymentInformationCustomer.discriminator = undefined;
Ptsv2refreshpaymentstatusidPaymentInformationCustomer.attributeTypeMap = [
    {
        "name": "customerId",
        "baseName": "customerId",
        "type": "string"
    }
];
class Ptsv2refreshpaymentstatusidPaymentInformationPaymentType {
    static getAttributeTypeMap() {
        return Ptsv2refreshpaymentstatusidPaymentInformationPaymentType.attributeTypeMap;
    }
}
exports.Ptsv2refreshpaymentstatusidPaymentInformationPaymentType = Ptsv2refreshpaymentstatusidPaymentInformationPaymentType;
Ptsv2refreshpaymentstatusidPaymentInformationPaymentType.discriminator = undefined;
Ptsv2refreshpaymentstatusidPaymentInformationPaymentType.attributeTypeMap = [
    {
        "name": "name",
        "baseName": "name",
        "type": "string"
    },
    {
        "name": "method",
        "baseName": "method",
        "type": "Ptsv2paymentsidcapturesPaymentInformationPaymentTypeMethod"
    }
];
class Ptsv2refreshpaymentstatusidProcessingInformation {
    static getAttributeTypeMap() {
        return Ptsv2refreshpaymentstatusidProcessingInformation.attributeTypeMap;
    }
}
exports.Ptsv2refreshpaymentstatusidProcessingInformation = Ptsv2refreshpaymentstatusidProcessingInformation;
Ptsv2refreshpaymentstatusidProcessingInformation.discriminator = undefined;
Ptsv2refreshpaymentstatusidProcessingInformation.attributeTypeMap = [
    {
        "name": "actionList",
        "baseName": "actionList",
        "type": "Array<string>"
    }
];
class Ptsv2voidsProcessingInformation {
    static getAttributeTypeMap() {
        return Ptsv2voidsProcessingInformation.attributeTypeMap;
    }
}
exports.Ptsv2voidsProcessingInformation = Ptsv2voidsProcessingInformation;
Ptsv2voidsProcessingInformation.discriminator = undefined;
Ptsv2voidsProcessingInformation.attributeTypeMap = [
    {
        "name": "paymentId",
        "baseName": "paymentId",
        "type": "string"
    }
];
class Rbsv1plansClientReferenceInformation {
    static getAttributeTypeMap() {
        return Rbsv1plansClientReferenceInformation.attributeTypeMap;
    }
}
exports.Rbsv1plansClientReferenceInformation = Rbsv1plansClientReferenceInformation;
Rbsv1plansClientReferenceInformation.discriminator = undefined;
Rbsv1plansClientReferenceInformation.attributeTypeMap = [
    {
        "name": "comments",
        "baseName": "comments",
        "type": "string"
    },
    {
        "name": "partner",
        "baseName": "partner",
        "type": "Riskv1decisionsClientReferenceInformationPartner"
    },
    {
        "name": "applicationName",
        "baseName": "applicationName",
        "type": "string"
    },
    {
        "name": "applicationVersion",
        "baseName": "applicationVersion",
        "type": "string"
    },
    {
        "name": "applicationUser",
        "baseName": "applicationUser",
        "type": "string"
    }
];
class Rbsv1plansOrderInformation {
    static getAttributeTypeMap() {
        return Rbsv1plansOrderInformation.attributeTypeMap;
    }
}
exports.Rbsv1plansOrderInformation = Rbsv1plansOrderInformation;
Rbsv1plansOrderInformation.discriminator = undefined;
Rbsv1plansOrderInformation.attributeTypeMap = [
    {
        "name": "amountDetails",
        "baseName": "amountDetails",
        "type": "Rbsv1plansOrderInformationAmountDetails"
    }
];
class Rbsv1plansOrderInformationAmountDetails {
    static getAttributeTypeMap() {
        return Rbsv1plansOrderInformationAmountDetails.attributeTypeMap;
    }
}
exports.Rbsv1plansOrderInformationAmountDetails = Rbsv1plansOrderInformationAmountDetails;
Rbsv1plansOrderInformationAmountDetails.discriminator = undefined;
Rbsv1plansOrderInformationAmountDetails.attributeTypeMap = [
    {
        "name": "currency",
        "baseName": "currency",
        "type": "string"
    },
    {
        "name": "billingAmount",
        "baseName": "billingAmount",
        "type": "string"
    },
    {
        "name": "setupFee",
        "baseName": "setupFee",
        "type": "string"
    }
];
class Rbsv1plansPlanInformation {
    static getAttributeTypeMap() {
        return Rbsv1plansPlanInformation.attributeTypeMap;
    }
}
exports.Rbsv1plansPlanInformation = Rbsv1plansPlanInformation;
Rbsv1plansPlanInformation.discriminator = undefined;
Rbsv1plansPlanInformation.attributeTypeMap = [
    {
        "name": "code",
        "baseName": "code",
        "type": "string"
    },
    {
        "name": "name",
        "baseName": "name",
        "type": "string"
    },
    {
        "name": "description",
        "baseName": "description",
        "type": "string"
    },
    {
        "name": "status",
        "baseName": "status",
        "type": "string"
    },
    {
        "name": "billingPeriod",
        "baseName": "billingPeriod",
        "type": "GetAllPlansResponsePlanInformationBillingPeriod"
    },
    {
        "name": "billingCycles",
        "baseName": "billingCycles",
        "type": "Rbsv1plansPlanInformationBillingCycles"
    }
];
/**
* Number of times customer is going to be billed
*/
class Rbsv1plansPlanInformationBillingCycles {
    static getAttributeTypeMap() {
        return Rbsv1plansPlanInformationBillingCycles.attributeTypeMap;
    }
}
exports.Rbsv1plansPlanInformationBillingCycles = Rbsv1plansPlanInformationBillingCycles;
Rbsv1plansPlanInformationBillingCycles.discriminator = undefined;
Rbsv1plansPlanInformationBillingCycles.attributeTypeMap = [
    {
        "name": "total",
        "baseName": "total",
        "type": "string"
    }
];
class Rbsv1plansidPlanInformation {
    static getAttributeTypeMap() {
        return Rbsv1plansidPlanInformation.attributeTypeMap;
    }
}
exports.Rbsv1plansidPlanInformation = Rbsv1plansidPlanInformation;
Rbsv1plansidPlanInformation.discriminator = undefined;
Rbsv1plansidPlanInformation.attributeTypeMap = [
    {
        "name": "code",
        "baseName": "code",
        "type": "string"
    },
    {
        "name": "name",
        "baseName": "name",
        "type": "string"
    },
    {
        "name": "description",
        "baseName": "description",
        "type": "string"
    },
    {
        "name": "status",
        "baseName": "status",
        "type": "string"
    },
    {
        "name": "billingPeriod",
        "baseName": "billingPeriod",
        "type": "GetAllPlansResponsePlanInformationBillingPeriod"
    },
    {
        "name": "billingCycles",
        "baseName": "billingCycles",
        "type": "Rbsv1plansPlanInformationBillingCycles"
    }
];
class Rbsv1plansidProcessingInformation {
    static getAttributeTypeMap() {
        return Rbsv1plansidProcessingInformation.attributeTypeMap;
    }
}
exports.Rbsv1plansidProcessingInformation = Rbsv1plansidProcessingInformation;
Rbsv1plansidProcessingInformation.discriminator = undefined;
Rbsv1plansidProcessingInformation.attributeTypeMap = [
    {
        "name": "subscriptionBillingOptions",
        "baseName": "subscriptionBillingOptions",
        "type": "Rbsv1plansidProcessingInformationSubscriptionBillingOptions"
    }
];
class Rbsv1plansidProcessingInformationSubscriptionBillingOptions {
    static getAttributeTypeMap() {
        return Rbsv1plansidProcessingInformationSubscriptionBillingOptions.attributeTypeMap;
    }
}
exports.Rbsv1plansidProcessingInformationSubscriptionBillingOptions = Rbsv1plansidProcessingInformationSubscriptionBillingOptions;
Rbsv1plansidProcessingInformationSubscriptionBillingOptions.discriminator = undefined;
Rbsv1plansidProcessingInformationSubscriptionBillingOptions.attributeTypeMap = [
    {
        "name": "applyTo",
        "baseName": "applyTo",
        "type": "string"
    }
];
class Rbsv1subscriptionsClientReferenceInformation {
    static getAttributeTypeMap() {
        return Rbsv1subscriptionsClientReferenceInformation.attributeTypeMap;
    }
}
exports.Rbsv1subscriptionsClientReferenceInformation = Rbsv1subscriptionsClientReferenceInformation;
Rbsv1subscriptionsClientReferenceInformation.discriminator = undefined;
Rbsv1subscriptionsClientReferenceInformation.attributeTypeMap = [
    {
        "name": "code",
        "baseName": "code",
        "type": "string"
    },
    {
        "name": "comments",
        "baseName": "comments",
        "type": "string"
    },
    {
        "name": "partner",
        "baseName": "partner",
        "type": "Rbsv1subscriptionsClientReferenceInformationPartner"
    },
    {
        "name": "applicationName",
        "baseName": "applicationName",
        "type": "string"
    },
    {
        "name": "applicationVersion",
        "baseName": "applicationVersion",
        "type": "string"
    },
    {
        "name": "applicationUser",
        "baseName": "applicationUser",
        "type": "string"
    }
];
class Rbsv1subscriptionsClientReferenceInformationPartner {
    static getAttributeTypeMap() {
        return Rbsv1subscriptionsClientReferenceInformationPartner.attributeTypeMap;
    }
}
exports.Rbsv1subscriptionsClientReferenceInformationPartner = Rbsv1subscriptionsClientReferenceInformationPartner;
Rbsv1subscriptionsClientReferenceInformationPartner.discriminator = undefined;
Rbsv1subscriptionsClientReferenceInformationPartner.attributeTypeMap = [
    {
        "name": "developerId",
        "baseName": "developerId",
        "type": "string"
    },
    {
        "name": "solutionId",
        "baseName": "solutionId",
        "type": "string"
    }
];
class Rbsv1subscriptionsPaymentInformation {
    static getAttributeTypeMap() {
        return Rbsv1subscriptionsPaymentInformation.attributeTypeMap;
    }
}
exports.Rbsv1subscriptionsPaymentInformation = Rbsv1subscriptionsPaymentInformation;
Rbsv1subscriptionsPaymentInformation.discriminator = undefined;
Rbsv1subscriptionsPaymentInformation.attributeTypeMap = [
    {
        "name": "customer",
        "baseName": "customer",
        "type": "Rbsv1subscriptionsPaymentInformationCustomer"
    }
];
class Rbsv1subscriptionsPaymentInformationCustomer {
    static getAttributeTypeMap() {
        return Rbsv1subscriptionsPaymentInformationCustomer.attributeTypeMap;
    }
}
exports.Rbsv1subscriptionsPaymentInformationCustomer = Rbsv1subscriptionsPaymentInformationCustomer;
Rbsv1subscriptionsPaymentInformationCustomer.discriminator = undefined;
Rbsv1subscriptionsPaymentInformationCustomer.attributeTypeMap = [
    {
        "name": "id",
        "baseName": "id",
        "type": "string"
    }
];
class Rbsv1subscriptionsPlanInformation {
    static getAttributeTypeMap() {
        return Rbsv1subscriptionsPlanInformation.attributeTypeMap;
    }
}
exports.Rbsv1subscriptionsPlanInformation = Rbsv1subscriptionsPlanInformation;
Rbsv1subscriptionsPlanInformation.discriminator = undefined;
Rbsv1subscriptionsPlanInformation.attributeTypeMap = [
    {
        "name": "billingPeriod",
        "baseName": "billingPeriod",
        "type": "GetAllPlansResponsePlanInformationBillingPeriod"
    },
    {
        "name": "billingCycles",
        "baseName": "billingCycles",
        "type": "Rbsv1plansPlanInformationBillingCycles"
    }
];
class Rbsv1subscriptionsProcessingInformation {
    static getAttributeTypeMap() {
        return Rbsv1subscriptionsProcessingInformation.attributeTypeMap;
    }
}
exports.Rbsv1subscriptionsProcessingInformation = Rbsv1subscriptionsProcessingInformation;
Rbsv1subscriptionsProcessingInformation.discriminator = undefined;
Rbsv1subscriptionsProcessingInformation.attributeTypeMap = [
    {
        "name": "commerceIndicator",
        "baseName": "commerceIndicator",
        "type": "string"
    },
    {
        "name": "authorizationOptions",
        "baseName": "authorizationOptions",
        "type": "Rbsv1subscriptionsProcessingInformationAuthorizationOptions"
    }
];
class Rbsv1subscriptionsProcessingInformationAuthorizationOptions {
    static getAttributeTypeMap() {
        return Rbsv1subscriptionsProcessingInformationAuthorizationOptions.attributeTypeMap;
    }
}
exports.Rbsv1subscriptionsProcessingInformationAuthorizationOptions = Rbsv1subscriptionsProcessingInformationAuthorizationOptions;
Rbsv1subscriptionsProcessingInformationAuthorizationOptions.discriminator = undefined;
Rbsv1subscriptionsProcessingInformationAuthorizationOptions.attributeTypeMap = [
    {
        "name": "initiator",
        "baseName": "initiator",
        "type": "Rbsv1subscriptionsProcessingInformationAuthorizationOptionsInitiator"
    }
];
class Rbsv1subscriptionsProcessingInformationAuthorizationOptionsInitiator {
    static getAttributeTypeMap() {
        return Rbsv1subscriptionsProcessingInformationAuthorizationOptionsInitiator.attributeTypeMap;
    }
}
exports.Rbsv1subscriptionsProcessingInformationAuthorizationOptionsInitiator = Rbsv1subscriptionsProcessingInformationAuthorizationOptionsInitiator;
Rbsv1subscriptionsProcessingInformationAuthorizationOptionsInitiator.discriminator = undefined;
Rbsv1subscriptionsProcessingInformationAuthorizationOptionsInitiator.attributeTypeMap = [
    {
        "name": "type",
        "baseName": "type",
        "type": "string"
    }
];
class Rbsv1subscriptionsSubscriptionInformation {
    static getAttributeTypeMap() {
        return Rbsv1subscriptionsSubscriptionInformation.attributeTypeMap;
    }
}
exports.Rbsv1subscriptionsSubscriptionInformation = Rbsv1subscriptionsSubscriptionInformation;
Rbsv1subscriptionsSubscriptionInformation.discriminator = undefined;
Rbsv1subscriptionsSubscriptionInformation.attributeTypeMap = [
    {
        "name": "code",
        "baseName": "code",
        "type": "string"
    },
    {
        "name": "planId",
        "baseName": "planId",
        "type": "string"
    },
    {
        "name": "name",
        "baseName": "name",
        "type": "string"
    },
    {
        "name": "startDate",
        "baseName": "startDate",
        "type": "string"
    },
    {
        "name": "originalTransactionId",
        "baseName": "originalTransactionId",
        "type": "string"
    },
    {
        "name": "originalTransactionAuthorizedAmount",
        "baseName": "originalTransactionAuthorizedAmount",
        "type": "string"
    }
];
class Rbsv1subscriptionsidOrderInformation {
    static getAttributeTypeMap() {
        return Rbsv1subscriptionsidOrderInformation.attributeTypeMap;
    }
}
exports.Rbsv1subscriptionsidOrderInformation = Rbsv1subscriptionsidOrderInformation;
Rbsv1subscriptionsidOrderInformation.discriminator = undefined;
Rbsv1subscriptionsidOrderInformation.attributeTypeMap = [
    {
        "name": "amountDetails",
        "baseName": "amountDetails",
        "type": "Rbsv1subscriptionsidOrderInformationAmountDetails"
    }
];
class Rbsv1subscriptionsidOrderInformationAmountDetails {
    static getAttributeTypeMap() {
        return Rbsv1subscriptionsidOrderInformationAmountDetails.attributeTypeMap;
    }
}
exports.Rbsv1subscriptionsidOrderInformationAmountDetails = Rbsv1subscriptionsidOrderInformationAmountDetails;
Rbsv1subscriptionsidOrderInformationAmountDetails.discriminator = undefined;
Rbsv1subscriptionsidOrderInformationAmountDetails.attributeTypeMap = [
    {
        "name": "billingAmount",
        "baseName": "billingAmount",
        "type": "string"
    },
    {
        "name": "setupFee",
        "baseName": "setupFee",
        "type": "string"
    }
];
class Rbsv1subscriptionsidPlanInformation {
    static getAttributeTypeMap() {
        return Rbsv1subscriptionsidPlanInformation.attributeTypeMap;
    }
}
exports.Rbsv1subscriptionsidPlanInformation = Rbsv1subscriptionsidPlanInformation;
Rbsv1subscriptionsidPlanInformation.discriminator = undefined;
Rbsv1subscriptionsidPlanInformation.attributeTypeMap = [
    {
        "name": "billingCycles",
        "baseName": "billingCycles",
        "type": "Rbsv1plansPlanInformationBillingCycles"
    }
];
class Rbsv1subscriptionsidSubscriptionInformation {
    static getAttributeTypeMap() {
        return Rbsv1subscriptionsidSubscriptionInformation.attributeTypeMap;
    }
}
exports.Rbsv1subscriptionsidSubscriptionInformation = Rbsv1subscriptionsidSubscriptionInformation;
Rbsv1subscriptionsidSubscriptionInformation.discriminator = undefined;
Rbsv1subscriptionsidSubscriptionInformation.attributeTypeMap = [
    {
        "name": "code",
        "baseName": "code",
        "type": "string"
    },
    {
        "name": "planId",
        "baseName": "planId",
        "type": "string"
    },
    {
        "name": "name",
        "baseName": "name",
        "type": "string"
    },
    {
        "name": "startDate",
        "baseName": "startDate",
        "type": "string"
    }
];
class RefreshPaymentStatusRequest {
    static getAttributeTypeMap() {
        return RefreshPaymentStatusRequest.attributeTypeMap;
    }
}
exports.RefreshPaymentStatusRequest = RefreshPaymentStatusRequest;
RefreshPaymentStatusRequest.discriminator = undefined;
RefreshPaymentStatusRequest.attributeTypeMap = [
    {
        "name": "paymentInformation",
        "baseName": "paymentInformation",
        "type": "Ptsv2refreshpaymentstatusidPaymentInformation"
    },
    {
        "name": "clientReferenceInformation",
        "baseName": "clientReferenceInformation",
        "type": "Ptsv2refreshpaymentstatusidClientReferenceInformation"
    },
    {
        "name": "agreementInformation",
        "baseName": "agreementInformation",
        "type": "Ptsv2refreshpaymentstatusidAgreementInformation"
    },
    {
        "name": "processingInformation",
        "baseName": "processingInformation",
        "type": "Ptsv2refreshpaymentstatusidProcessingInformation"
    }
];
class RefundCaptureRequest {
    static getAttributeTypeMap() {
        return RefundCaptureRequest.attributeTypeMap;
    }
}
exports.RefundCaptureRequest = RefundCaptureRequest;
RefundCaptureRequest.discriminator = undefined;
RefundCaptureRequest.attributeTypeMap = [
    {
        "name": "clientReferenceInformation",
        "baseName": "clientReferenceInformation",
        "type": "Ptsv2paymentsidrefundsClientReferenceInformation"
    },
    {
        "name": "processingInformation",
        "baseName": "processingInformation",
        "type": "Ptsv2paymentsidrefundsProcessingInformation"
    },
    {
        "name": "paymentInformation",
        "baseName": "paymentInformation",
        "type": "Ptsv2paymentsidrefundsPaymentInformation"
    },
    {
        "name": "orderInformation",
        "baseName": "orderInformation",
        "type": "Ptsv2paymentsidrefundsOrderInformation"
    },
    {
        "name": "buyerInformation",
        "baseName": "buyerInformation",
        "type": "Ptsv2paymentsidcapturesBuyerInformation"
    },
    {
        "name": "deviceInformation",
        "baseName": "deviceInformation",
        "type": "Ptsv2paymentsidcapturesDeviceInformation"
    },
    {
        "name": "merchantInformation",
        "baseName": "merchantInformation",
        "type": "Ptsv2paymentsidrefundsMerchantInformation"
    },
    {
        "name": "aggregatorInformation",
        "baseName": "aggregatorInformation",
        "type": "Ptsv2paymentsidcapturesAggregatorInformation"
    },
    {
        "name": "pointOfSaleInformation",
        "baseName": "pointOfSaleInformation",
        "type": "Ptsv2paymentsidrefundsPointOfSaleInformation"
    },
    {
        "name": "merchantDefinedInformation",
        "baseName": "merchantDefinedInformation",
        "type": "Array<Ptsv2paymentsMerchantDefinedInformation>"
    },
    {
        "name": "travelInformation",
        "baseName": "travelInformation",
        "type": "Ptsv2paymentsTravelInformation"
    },
    {
        "name": "promotionInformation",
        "baseName": "promotionInformation",
        "type": "Ptsv2paymentsPromotionInformation"
    }
];
class RefundPaymentRequest {
    static getAttributeTypeMap() {
        return RefundPaymentRequest.attributeTypeMap;
    }
}
exports.RefundPaymentRequest = RefundPaymentRequest;
RefundPaymentRequest.discriminator = undefined;
RefundPaymentRequest.attributeTypeMap = [
    {
        "name": "clientReferenceInformation",
        "baseName": "clientReferenceInformation",
        "type": "Ptsv2paymentsidrefundsClientReferenceInformation"
    },
    {
        "name": "processingInformation",
        "baseName": "processingInformation",
        "type": "Ptsv2paymentsidrefundsProcessingInformation"
    },
    {
        "name": "paymentInformation",
        "baseName": "paymentInformation",
        "type": "Ptsv2paymentsidrefundsPaymentInformation"
    },
    {
        "name": "orderInformation",
        "baseName": "orderInformation",
        "type": "Ptsv2paymentsidrefundsOrderInformation"
    },
    {
        "name": "buyerInformation",
        "baseName": "buyerInformation",
        "type": "Ptsv2paymentsidcapturesBuyerInformation"
    },
    {
        "name": "deviceInformation",
        "baseName": "deviceInformation",
        "type": "Ptsv2paymentsidcapturesDeviceInformation"
    },
    {
        "name": "merchantInformation",
        "baseName": "merchantInformation",
        "type": "Ptsv2paymentsidrefundsMerchantInformation"
    },
    {
        "name": "aggregatorInformation",
        "baseName": "aggregatorInformation",
        "type": "Ptsv2paymentsidcapturesAggregatorInformation"
    },
    {
        "name": "pointOfSaleInformation",
        "baseName": "pointOfSaleInformation",
        "type": "Ptsv2paymentsidrefundsPointOfSaleInformation"
    },
    {
        "name": "merchantDefinedInformation",
        "baseName": "merchantDefinedInformation",
        "type": "Array<Ptsv2paymentsMerchantDefinedInformation>"
    },
    {
        "name": "travelInformation",
        "baseName": "travelInformation",
        "type": "Ptsv2paymentsTravelInformation"
    },
    {
        "name": "promotionInformation",
        "baseName": "promotionInformation",
        "type": "Ptsv2paymentsPromotionInformation"
    }
];
class ReportingV3ChargebackDetailsGet200Response {
    static getAttributeTypeMap() {
        return ReportingV3ChargebackDetailsGet200Response.attributeTypeMap;
    }
}
exports.ReportingV3ChargebackDetailsGet200Response = ReportingV3ChargebackDetailsGet200Response;
ReportingV3ChargebackDetailsGet200Response.discriminator = undefined;
ReportingV3ChargebackDetailsGet200Response.attributeTypeMap = [
    {
        "name": "organizationId",
        "baseName": "organizationId",
        "type": "string"
    },
    {
        "name": "startTime",
        "baseName": "startTime",
        "type": "Date"
    },
    {
        "name": "endTime",
        "baseName": "endTime",
        "type": "Date"
    },
    {
        "name": "chargebackDetails",
        "baseName": "chargebackDetails",
        "type": "Array<ReportingV3ChargebackDetailsGet200ResponseChargebackDetails>"
    }
];
class ReportingV3ChargebackDetailsGet200ResponseChargebackDetails {
    static getAttributeTypeMap() {
        return ReportingV3ChargebackDetailsGet200ResponseChargebackDetails.attributeTypeMap;
    }
}
exports.ReportingV3ChargebackDetailsGet200ResponseChargebackDetails = ReportingV3ChargebackDetailsGet200ResponseChargebackDetails;
ReportingV3ChargebackDetailsGet200ResponseChargebackDetails.discriminator = undefined;
ReportingV3ChargebackDetailsGet200ResponseChargebackDetails.attributeTypeMap = [
    {
        "name": "processorMerchantId",
        "baseName": "processorMerchantId",
        "type": "string"
    },
    {
        "name": "merchantName",
        "baseName": "merchantName",
        "type": "string"
    },
    {
        "name": "transactionReferenceNumber",
        "baseName": "transactionReferenceNumber",
        "type": "string"
    },
    {
        "name": "merchantReferenceNumber",
        "baseName": "merchantReferenceNumber",
        "type": "string"
    },
    {
        "name": "natureOfDispute",
        "baseName": "natureOfDispute",
        "type": "string"
    },
    {
        "name": "alertType",
        "baseName": "alertType",
        "type": "string"
    },
    {
        "name": "amount",
        "baseName": "amount",
        "type": "string"
    },
    {
        "name": "sign",
        "baseName": "sign",
        "type": "string"
    },
    {
        "name": "action",
        "baseName": "action",
        "type": "string"
    },
    {
        "name": "cardType",
        "baseName": "cardType",
        "type": "string"
    },
    {
        "name": "originalSettlementTime",
        "baseName": "originalSettlementTime",
        "type": "Date"
    },
    {
        "name": "trackingNumber",
        "baseName": "trackingNumber",
        "type": "string"
    },
    {
        "name": "currencyCode",
        "baseName": "currencyCode",
        "type": "string"
    },
    {
        "name": "requestId",
        "baseName": "requestId",
        "type": "string"
    },
    {
        "name": "responseDueTime",
        "baseName": "responseDueTime",
        "type": "Date"
    },
    {
        "name": "time",
        "baseName": "time",
        "type": "Date"
    },
    {
        "name": "actionDescription",
        "baseName": "actionDescription",
        "type": "string"
    },
    {
        "name": "customerId",
        "baseName": "customerId",
        "type": "string"
    },
    {
        "name": "reasonCode",
        "baseName": "reasonCode",
        "type": "string"
    },
    {
        "name": "representmentCPTime",
        "baseName": "representmentCPTime",
        "type": "Date"
    },
    {
        "name": "applications",
        "baseName": "applications",
        "type": "string"
    },
    {
        "name": "eventRequestedTime",
        "baseName": "eventRequestedTime",
        "type": "Date"
    },
    {
        "name": "preDisputeFlag",
        "baseName": "preDisputeFlag",
        "type": "string"
    }
];
class ReportingV3ChargebackSummariesGet200Response {
    static getAttributeTypeMap() {
        return ReportingV3ChargebackSummariesGet200Response.attributeTypeMap;
    }
}
exports.ReportingV3ChargebackSummariesGet200Response = ReportingV3ChargebackSummariesGet200Response;
ReportingV3ChargebackSummariesGet200Response.discriminator = undefined;
ReportingV3ChargebackSummariesGet200Response.attributeTypeMap = [
    {
        "name": "organizationId",
        "baseName": "organizationId",
        "type": "string"
    },
    {
        "name": "startTime",
        "baseName": "startTime",
        "type": "Date"
    },
    {
        "name": "endTime",
        "baseName": "endTime",
        "type": "string"
    },
    {
        "name": "chargebackSummaries",
        "baseName": "chargebackSummaries",
        "type": "Array<ReportingV3ChargebackSummariesGet200ResponseChargebackSummaries>"
    }
];
class ReportingV3ChargebackSummariesGet200ResponseChargebackSummaries {
    static getAttributeTypeMap() {
        return ReportingV3ChargebackSummariesGet200ResponseChargebackSummaries.attributeTypeMap;
    }
}
exports.ReportingV3ChargebackSummariesGet200ResponseChargebackSummaries = ReportingV3ChargebackSummariesGet200ResponseChargebackSummaries;
ReportingV3ChargebackSummariesGet200ResponseChargebackSummaries.discriminator = undefined;
ReportingV3ChargebackSummariesGet200ResponseChargebackSummaries.attributeTypeMap = [
    {
        "name": "count",
        "baseName": "count",
        "type": "number"
    },
    {
        "name": "time",
        "baseName": "time",
        "type": "Date"
    },
    {
        "name": "accountId",
        "baseName": "accountId",
        "type": "string"
    }
];
class ReportingV3ConversionDetailsGet200Response {
    static getAttributeTypeMap() {
        return ReportingV3ConversionDetailsGet200Response.attributeTypeMap;
    }
}
exports.ReportingV3ConversionDetailsGet200Response = ReportingV3ConversionDetailsGet200Response;
ReportingV3ConversionDetailsGet200Response.discriminator = undefined;
ReportingV3ConversionDetailsGet200Response.attributeTypeMap = [
    {
        "name": "organizationId",
        "baseName": "organizationId",
        "type": "string"
    },
    {
        "name": "startTime",
        "baseName": "startTime",
        "type": "Date"
    },
    {
        "name": "endTime",
        "baseName": "endTime",
        "type": "Date"
    },
    {
        "name": "conversionDetails",
        "baseName": "conversionDetails",
        "type": "Array<ReportingV3ConversionDetailsGet200ResponseConversionDetails>"
    }
];
class ReportingV3ConversionDetailsGet200ResponseConversionDetails {
    static getAttributeTypeMap() {
        return ReportingV3ConversionDetailsGet200ResponseConversionDetails.attributeTypeMap;
    }
}
exports.ReportingV3ConversionDetailsGet200ResponseConversionDetails = ReportingV3ConversionDetailsGet200ResponseConversionDetails;
ReportingV3ConversionDetailsGet200ResponseConversionDetails.discriminator = undefined;
ReportingV3ConversionDetailsGet200ResponseConversionDetails.attributeTypeMap = [
    {
        "name": "merchantReferenceNumber",
        "baseName": "merchantReferenceNumber",
        "type": "string"
    },
    {
        "name": "conversionTime",
        "baseName": "conversionTime",
        "type": "Date"
    },
    {
        "name": "requestId",
        "baseName": "requestId",
        "type": "string"
    },
    {
        "name": "originalDecision",
        "baseName": "originalDecision",
        "type": "string"
    },
    {
        "name": "newDecision",
        "baseName": "newDecision",
        "type": "string"
    },
    {
        "name": "reviewer",
        "baseName": "reviewer",
        "type": "string"
    },
    {
        "name": "reviewerComments",
        "baseName": "reviewerComments",
        "type": "string"
    },
    {
        "name": "queue",
        "baseName": "queue",
        "type": "string"
    },
    {
        "name": "profile",
        "baseName": "profile",
        "type": "string"
    },
    {
        "name": "notes",
        "baseName": "notes",
        "type": "Array<ReportingV3ConversionDetailsGet200ResponseNotes>"
    }
];
class ReportingV3ConversionDetailsGet200ResponseNotes {
    static getAttributeTypeMap() {
        return ReportingV3ConversionDetailsGet200ResponseNotes.attributeTypeMap;
    }
}
exports.ReportingV3ConversionDetailsGet200ResponseNotes = ReportingV3ConversionDetailsGet200ResponseNotes;
ReportingV3ConversionDetailsGet200ResponseNotes.discriminator = undefined;
ReportingV3ConversionDetailsGet200ResponseNotes.attributeTypeMap = [
    {
        "name": "time",
        "baseName": "time",
        "type": "Date"
    },
    {
        "name": "addedBy",
        "baseName": "addedBy",
        "type": "string"
    },
    {
        "name": "comments",
        "baseName": "comments",
        "type": "string"
    }
];
class ReportingV3InterchangeClearingLevelDetailsGet200Response {
    static getAttributeTypeMap() {
        return ReportingV3InterchangeClearingLevelDetailsGet200Response.attributeTypeMap;
    }
}
exports.ReportingV3InterchangeClearingLevelDetailsGet200Response = ReportingV3InterchangeClearingLevelDetailsGet200Response;
ReportingV3InterchangeClearingLevelDetailsGet200Response.discriminator = undefined;
ReportingV3InterchangeClearingLevelDetailsGet200Response.attributeTypeMap = [
    {
        "name": "startDate",
        "baseName": "startDate",
        "type": "Date"
    },
    {
        "name": "endDate",
        "baseName": "endDate",
        "type": "Date"
    },
    {
        "name": "interchangeClearingLevelDetails",
        "baseName": "interchangeClearingLevelDetails",
        "type": "Array<ReportingV3InterchangeClearingLevelDetailsGet200ResponseInterchangeClearingLevelDetails>"
    }
];
class ReportingV3InterchangeClearingLevelDetailsGet200ResponseInterchangeClearingLevelDetails {
    static getAttributeTypeMap() {
        return ReportingV3InterchangeClearingLevelDetailsGet200ResponseInterchangeClearingLevelDetails.attributeTypeMap;
    }
}
exports.ReportingV3InterchangeClearingLevelDetailsGet200ResponseInterchangeClearingLevelDetails = ReportingV3InterchangeClearingLevelDetailsGet200ResponseInterchangeClearingLevelDetails;
ReportingV3InterchangeClearingLevelDetailsGet200ResponseInterchangeClearingLevelDetails.discriminator = undefined;
ReportingV3InterchangeClearingLevelDetailsGet200ResponseInterchangeClearingLevelDetails.attributeTypeMap = [
    {
        "name": "requestId",
        "baseName": "requestId",
        "type": "string"
    },
    {
        "name": "organizationId",
        "baseName": "organizationId",
        "type": "string"
    },
    {
        "name": "accountId",
        "baseName": "accountId",
        "type": "string"
    },
    {
        "name": "processorMerchantId",
        "baseName": "processorMerchantId",
        "type": "string"
    },
    {
        "name": "transactionReferenceNumber",
        "baseName": "transactionReferenceNumber",
        "type": "string"
    },
    {
        "name": "merchantReferenceNumber",
        "baseName": "merchantReferenceNumber",
        "type": "string"
    },
    {
        "name": "accountSuffix",
        "baseName": "accountSuffix",
        "type": "string"
    },
    {
        "name": "paymentSubType",
        "baseName": "paymentSubType",
        "type": "string"
    },
    {
        "name": "paymentSubTypeDescription",
        "baseName": "paymentSubTypeDescription",
        "type": "string"
    },
    {
        "name": "transactionTime",
        "baseName": "transactionTime",
        "type": "Date"
    },
    {
        "name": "processedTime",
        "baseName": "processedTime",
        "type": "Date"
    },
    {
        "name": "transactionType",
        "baseName": "transactionType",
        "type": "string"
    },
    {
        "name": "amount",
        "baseName": "amount",
        "type": "string"
    },
    {
        "name": "currencyCode",
        "baseName": "currencyCode",
        "type": "string"
    },
    {
        "name": "priceType",
        "baseName": "priceType",
        "type": "string"
    },
    {
        "name": "priceAmountOne",
        "baseName": "priceAmountOne",
        "type": "string"
    },
    {
        "name": "priceAmountTwo",
        "baseName": "priceAmountTwo",
        "type": "string"
    },
    {
        "name": "reClass",
        "baseName": "reClass",
        "type": "string"
    },
    {
        "name": "settlementTime",
        "baseName": "settlementTime",
        "type": "Date"
    },
    {
        "name": "settlementProcessor",
        "baseName": "settlementProcessor",
        "type": "string"
    },
    {
        "name": "merchantBatchNumber",
        "baseName": "merchantBatchNumber",
        "type": "string"
    },
    {
        "name": "clearedLevel",
        "baseName": "clearedLevel",
        "type": "string"
    },
    {
        "name": "billbackReasonCode",
        "baseName": "billbackReasonCode",
        "type": "string"
    },
    {
        "name": "billbackReasonDescription",
        "baseName": "billbackReasonDescription",
        "type": "string"
    },
    {
        "name": "merchantPricedLevel",
        "baseName": "merchantPricedLevel",
        "type": "string"
    },
    {
        "name": "discountRate",
        "baseName": "discountRate",
        "type": "string"
    },
    {
        "name": "discountAmount",
        "baseName": "discountAmount",
        "type": "string"
    },
    {
        "name": "clearingRateAmountOne",
        "baseName": "clearingRateAmountOne",
        "type": "string"
    },
    {
        "name": "clearingRateAmountTwo",
        "baseName": "clearingRateAmountTwo",
        "type": "string"
    },
    {
        "name": "clearingRateAmountThree",
        "baseName": "clearingRateAmountThree",
        "type": "string"
    },
    {
        "name": "clearingRateCurrencyCode",
        "baseName": "clearingRateCurrencyCode",
        "type": "string"
    },
    {
        "name": "interchangeAmount",
        "baseName": "interchangeAmount",
        "type": "string"
    },
    {
        "name": "billbackAmount",
        "baseName": "billbackAmount",
        "type": "string"
    },
    {
        "name": "settlementAmount",
        "baseName": "settlementAmount",
        "type": "string"
    },
    {
        "name": "settlementCurrencyCode",
        "baseName": "settlementCurrencyCode",
        "type": "string"
    },
    {
        "name": "conversionRate",
        "baseName": "conversionRate",
        "type": "string"
    },
    {
        "name": "deltaCost",
        "baseName": "deltaCost",
        "type": "string"
    },
    {
        "name": "surchargeAmount",
        "baseName": "surchargeAmount",
        "type": "string"
    },
    {
        "name": "percentRateCharged",
        "baseName": "percentRateCharged",
        "type": "string"
    },
    {
        "name": "perTransactionCharged",
        "baseName": "perTransactionCharged",
        "type": "string"
    },
    {
        "name": "downgradeReasonCode",
        "baseName": "downgradeReasonCode",
        "type": "string"
    },
    {
        "name": "processTime",
        "baseName": "processTime",
        "type": "Date"
    },
    {
        "name": "authCode",
        "baseName": "authCode",
        "type": "string"
    },
    {
        "name": "batchTime",
        "baseName": "batchTime",
        "type": "Date"
    },
    {
        "name": "processorBatchNumber",
        "baseName": "processorBatchNumber",
        "type": "string"
    },
    {
        "name": "cardIndicator",
        "baseName": "cardIndicator",
        "type": "string"
    },
    {
        "name": "minimumUnit",
        "baseName": "minimumUnit",
        "type": "number"
    },
    {
        "name": "minimumUnitCurrencyCode",
        "baseName": "minimumUnitCurrencyCode",
        "type": "string"
    },
    {
        "name": "creditDeltaIndicator",
        "baseName": "creditDeltaIndicator",
        "type": "string"
    },
    {
        "name": "feeCategory",
        "baseName": "feeCategory",
        "type": "string"
    },
    {
        "name": "applicationName",
        "baseName": "applicationName",
        "type": "string"
    }
];
class ReportingV3NetFundingsGet200Response {
    static getAttributeTypeMap() {
        return ReportingV3NetFundingsGet200Response.attributeTypeMap;
    }
}
exports.ReportingV3NetFundingsGet200Response = ReportingV3NetFundingsGet200Response;
ReportingV3NetFundingsGet200Response.discriminator = undefined;
ReportingV3NetFundingsGet200Response.attributeTypeMap = [
    {
        "name": "startTime",
        "baseName": "startTime",
        "type": "Date"
    },
    {
        "name": "endTime",
        "baseName": "endTime",
        "type": "Date"
    },
    {
        "name": "netFundingSummaries",
        "baseName": "netFundingSummaries",
        "type": "Array<ReportingV3NetFundingsGet200ResponseNetFundingSummaries>"
    },
    {
        "name": "totalPurchases",
        "baseName": "totalPurchases",
        "type": "Array<ReportingV3NetFundingsGet200ResponseTotalPurchases>"
    },
    {
        "name": "totalRefunds",
        "baseName": "totalRefunds",
        "type": "Array<ReportingV3NetFundingsGet200ResponseTotalPurchases>"
    },
    {
        "name": "totalFees",
        "baseName": "totalFees",
        "type": "Array<ReportingV3NetFundingsGet200ResponseTotalPurchases>"
    },
    {
        "name": "totalChargebacks",
        "baseName": "totalChargebacks",
        "type": "Array<ReportingV3NetFundingsGet200ResponseTotalPurchases>"
    },
    {
        "name": "netTotal",
        "baseName": "netTotal",
        "type": "Array<ReportingV3NetFundingsGet200ResponseTotalPurchases>"
    }
];
class ReportingV3NetFundingsGet200ResponseNetFundingSummaries {
    static getAttributeTypeMap() {
        return ReportingV3NetFundingsGet200ResponseNetFundingSummaries.attributeTypeMap;
    }
}
exports.ReportingV3NetFundingsGet200ResponseNetFundingSummaries = ReportingV3NetFundingsGet200ResponseNetFundingSummaries;
ReportingV3NetFundingsGet200ResponseNetFundingSummaries.discriminator = undefined;
ReportingV3NetFundingsGet200ResponseNetFundingSummaries.attributeTypeMap = [
    {
        "name": "type",
        "baseName": "type",
        "type": "string"
    },
    {
        "name": "paymentSubType",
        "baseName": "paymentSubType",
        "type": "string"
    },
    {
        "name": "conveyedCount",
        "baseName": "conveyedCount",
        "type": "number"
    },
    {
        "name": "conveyedAmount",
        "baseName": "conveyedAmount",
        "type": "string"
    },
    {
        "name": "settledCount",
        "baseName": "settledCount",
        "type": "number"
    },
    {
        "name": "fundedCount",
        "baseName": "fundedCount",
        "type": "number"
    },
    {
        "name": "fundedAmount",
        "baseName": "fundedAmount",
        "type": "string"
    },
    {
        "name": "currencyCode",
        "baseName": "currencyCode",
        "type": "string"
    }
];
class ReportingV3NetFundingsGet200ResponseTotalPurchases {
    static getAttributeTypeMap() {
        return ReportingV3NetFundingsGet200ResponseTotalPurchases.attributeTypeMap;
    }
}
exports.ReportingV3NetFundingsGet200ResponseTotalPurchases = ReportingV3NetFundingsGet200ResponseTotalPurchases;
ReportingV3NetFundingsGet200ResponseTotalPurchases.discriminator = undefined;
ReportingV3NetFundingsGet200ResponseTotalPurchases.attributeTypeMap = [
    {
        "name": "currency",
        "baseName": "currency",
        "type": "string"
    },
    {
        "name": "value",
        "baseName": "value",
        "type": "string"
    }
];
class ReportingV3NotificationofChangesGet200Response {
    static getAttributeTypeMap() {
        return ReportingV3NotificationofChangesGet200Response.attributeTypeMap;
    }
}
exports.ReportingV3NotificationofChangesGet200Response = ReportingV3NotificationofChangesGet200Response;
ReportingV3NotificationofChangesGet200Response.discriminator = undefined;
ReportingV3NotificationofChangesGet200Response.attributeTypeMap = [
    {
        "name": "notificationOfChanges",
        "baseName": "notificationOfChanges",
        "type": "Array<ReportingV3NotificationofChangesGet200ResponseNotificationOfChanges>"
    }
];
/**
* Notification Of Change
*/
class ReportingV3NotificationofChangesGet200ResponseNotificationOfChanges {
    static getAttributeTypeMap() {
        return ReportingV3NotificationofChangesGet200ResponseNotificationOfChanges.attributeTypeMap;
    }
}
exports.ReportingV3NotificationofChangesGet200ResponseNotificationOfChanges = ReportingV3NotificationofChangesGet200ResponseNotificationOfChanges;
ReportingV3NotificationofChangesGet200ResponseNotificationOfChanges.discriminator = undefined;
ReportingV3NotificationofChangesGet200ResponseNotificationOfChanges.attributeTypeMap = [
    {
        "name": "merchantReferenceNumber",
        "baseName": "merchantReferenceNumber",
        "type": "string"
    },
    {
        "name": "transactionReferenceNumber",
        "baseName": "transactionReferenceNumber",
        "type": "string"
    },
    {
        "name": "time",
        "baseName": "time",
        "type": "Date"
    },
    {
        "name": "code",
        "baseName": "code",
        "type": "string"
    },
    {
        "name": "accountType",
        "baseName": "accountType",
        "type": "string"
    },
    {
        "name": "routingNumber",
        "baseName": "routingNumber",
        "type": "string"
    },
    {
        "name": "accountNumber",
        "baseName": "accountNumber",
        "type": "string"
    },
    {
        "name": "consumerName",
        "baseName": "consumerName",
        "type": "string"
    }
];
class ReportingV3PaymentBatchSummariesGet200Response {
    static getAttributeTypeMap() {
        return ReportingV3PaymentBatchSummariesGet200Response.attributeTypeMap;
    }
}
exports.ReportingV3PaymentBatchSummariesGet200Response = ReportingV3PaymentBatchSummariesGet200Response;
ReportingV3PaymentBatchSummariesGet200Response.discriminator = undefined;
ReportingV3PaymentBatchSummariesGet200Response.attributeTypeMap = [
    {
        "name": "startTime",
        "baseName": "startTime",
        "type": "Date"
    },
    {
        "name": "endTime",
        "baseName": "endTime",
        "type": "Date"
    },
    {
        "name": "paymentBatchSummaries",
        "baseName": "paymentBatchSummaries",
        "type": "Array<ReportingV3PaymentBatchSummariesGet200ResponsePaymentBatchSummaries>"
    }
];
class ReportingV3PaymentBatchSummariesGet200ResponsePaymentBatchSummaries {
    static getAttributeTypeMap() {
        return ReportingV3PaymentBatchSummariesGet200ResponsePaymentBatchSummaries.attributeTypeMap;
    }
}
exports.ReportingV3PaymentBatchSummariesGet200ResponsePaymentBatchSummaries = ReportingV3PaymentBatchSummariesGet200ResponsePaymentBatchSummaries;
ReportingV3PaymentBatchSummariesGet200ResponsePaymentBatchSummaries.discriminator = undefined;
ReportingV3PaymentBatchSummariesGet200ResponsePaymentBatchSummaries.attributeTypeMap = [
    {
        "name": "currencyCode",
        "baseName": "currencyCode",
        "type": "string"
    },
    {
        "name": "paymentSubTypeDescription",
        "baseName": "paymentSubTypeDescription",
        "type": "string"
    },
    {
        "name": "startTime",
        "baseName": "startTime",
        "type": "Date"
    },
    {
        "name": "endTime",
        "baseName": "endTime",
        "type": "Date"
    },
    {
        "name": "salesCount",
        "baseName": "salesCount",
        "type": "number"
    },
    {
        "name": "salesAmount",
        "baseName": "salesAmount",
        "type": "string"
    },
    {
        "name": "creditCount",
        "baseName": "creditCount",
        "type": "number"
    },
    {
        "name": "creditAmount",
        "baseName": "creditAmount",
        "type": "string"
    },
    {
        "name": "accountName",
        "baseName": "accountName",
        "type": "string"
    },
    {
        "name": "accountId",
        "baseName": "accountId",
        "type": "string"
    },
    {
        "name": "merchantId",
        "baseName": "merchantId",
        "type": "string"
    },
    {
        "name": "merchantName",
        "baseName": "merchantName",
        "type": "string"
    }
];
/**
* PurchaseAndRefundDetails
*/
class ReportingV3PurchaseRefundDetailsGet200Response {
    static getAttributeTypeMap() {
        return ReportingV3PurchaseRefundDetailsGet200Response.attributeTypeMap;
    }
}
exports.ReportingV3PurchaseRefundDetailsGet200Response = ReportingV3PurchaseRefundDetailsGet200Response;
ReportingV3PurchaseRefundDetailsGet200Response.discriminator = undefined;
ReportingV3PurchaseRefundDetailsGet200Response.attributeTypeMap = [
    {
        "name": "offset",
        "baseName": "offset",
        "type": "number"
    },
    {
        "name": "limit",
        "baseName": "limit",
        "type": "number"
    },
    {
        "name": "pageResults",
        "baseName": "pageResults",
        "type": "number"
    },
    {
        "name": "requestDetails",
        "baseName": "requestDetails",
        "type": "Array<ReportingV3PurchaseRefundDetailsGet200ResponseRequestDetails>"
    },
    {
        "name": "settlements",
        "baseName": "settlements",
        "type": "Array<ReportingV3PurchaseRefundDetailsGet200ResponseSettlements>"
    },
    {
        "name": "authorizations",
        "baseName": "authorizations",
        "type": "Array<ReportingV3PurchaseRefundDetailsGet200ResponseAuthorizations>"
    },
    {
        "name": "feeAndFundingDetails",
        "baseName": "feeAndFundingDetails",
        "type": "Array<ReportingV3PurchaseRefundDetailsGet200ResponseFeeAndFundingDetails>"
    },
    {
        "name": "others",
        "baseName": "others",
        "type": "Array<ReportingV3PurchaseRefundDetailsGet200ResponseOthers>"
    },
    {
        "name": "settlementStatuses",
        "baseName": "settlementStatuses",
        "type": "Array<ReportingV3PurchaseRefundDetailsGet200ResponseSettlementStatuses>"
    }
];
/**
* Authorization Info Values
*/
class ReportingV3PurchaseRefundDetailsGet200ResponseAuthorizations {
    static getAttributeTypeMap() {
        return ReportingV3PurchaseRefundDetailsGet200ResponseAuthorizations.attributeTypeMap;
    }
}
exports.ReportingV3PurchaseRefundDetailsGet200ResponseAuthorizations = ReportingV3PurchaseRefundDetailsGet200ResponseAuthorizations;
ReportingV3PurchaseRefundDetailsGet200ResponseAuthorizations.discriminator = undefined;
ReportingV3PurchaseRefundDetailsGet200ResponseAuthorizations.attributeTypeMap = [
    {
        "name": "requestId",
        "baseName": "requestId",
        "type": "string"
    },
    {
        "name": "transactionReferenceNumber",
        "baseName": "transactionReferenceNumber",
        "type": "string"
    },
    {
        "name": "time",
        "baseName": "time",
        "type": "Date"
    },
    {
        "name": "authorizationRequestId",
        "baseName": "authorizationRequestId",
        "type": "string"
    },
    {
        "name": "amount",
        "baseName": "amount",
        "type": "string"
    },
    {
        "name": "currencyCode",
        "baseName": "currencyCode",
        "type": "string"
    },
    {
        "name": "code",
        "baseName": "code",
        "type": "string"
    },
    {
        "name": "rcode",
        "baseName": "rcode",
        "type": "string"
    }
];
/**
* Fee Funding Section
*/
class ReportingV3PurchaseRefundDetailsGet200ResponseFeeAndFundingDetails {
    static getAttributeTypeMap() {
        return ReportingV3PurchaseRefundDetailsGet200ResponseFeeAndFundingDetails.attributeTypeMap;
    }
}
exports.ReportingV3PurchaseRefundDetailsGet200ResponseFeeAndFundingDetails = ReportingV3PurchaseRefundDetailsGet200ResponseFeeAndFundingDetails;
ReportingV3PurchaseRefundDetailsGet200ResponseFeeAndFundingDetails.discriminator = undefined;
ReportingV3PurchaseRefundDetailsGet200ResponseFeeAndFundingDetails.attributeTypeMap = [
    {
        "name": "requestId",
        "baseName": "requestId",
        "type": "string"
    },
    {
        "name": "interchangePerItemFee",
        "baseName": "interchangePerItemFee",
        "type": "string"
    },
    {
        "name": "interchangeDescription",
        "baseName": "interchangeDescription",
        "type": "string"
    },
    {
        "name": "interchangePercentage",
        "baseName": "interchangePercentage",
        "type": "string"
    },
    {
        "name": "interchangePercentageAmount",
        "baseName": "interchangePercentageAmount",
        "type": "string"
    },
    {
        "name": "discountPercentage",
        "baseName": "discountPercentage",
        "type": "string"
    },
    {
        "name": "discountAmount",
        "baseName": "discountAmount",
        "type": "string"
    },
    {
        "name": "discountPerItemFee",
        "baseName": "discountPerItemFee",
        "type": "string"
    },
    {
        "name": "totalFee",
        "baseName": "totalFee",
        "type": "string"
    },
    {
        "name": "feeCurrency",
        "baseName": "feeCurrency",
        "type": "string"
    },
    {
        "name": "duesAssessments",
        "baseName": "duesAssessments",
        "type": "string"
    },
    {
        "name": "fundingAmount",
        "baseName": "fundingAmount",
        "type": "string"
    },
    {
        "name": "fundingCurrency",
        "baseName": "fundingCurrency",
        "type": "string"
    }
];
/**
* Other Merchant Details Values.
*/
class ReportingV3PurchaseRefundDetailsGet200ResponseOthers {
    static getAttributeTypeMap() {
        return ReportingV3PurchaseRefundDetailsGet200ResponseOthers.attributeTypeMap;
    }
}
exports.ReportingV3PurchaseRefundDetailsGet200ResponseOthers = ReportingV3PurchaseRefundDetailsGet200ResponseOthers;
ReportingV3PurchaseRefundDetailsGet200ResponseOthers.discriminator = undefined;
ReportingV3PurchaseRefundDetailsGet200ResponseOthers.attributeTypeMap = [
    {
        "name": "requestId",
        "baseName": "requestId",
        "type": "string"
    },
    {
        "name": "merchantData1",
        "baseName": "merchantData1",
        "type": "string"
    },
    {
        "name": "merchantData2",
        "baseName": "merchantData2",
        "type": "string"
    },
    {
        "name": "merchantData3",
        "baseName": "merchantData3",
        "type": "string"
    },
    {
        "name": "merchantData4",
        "baseName": "merchantData4",
        "type": "string"
    },
    {
        "name": "firstName",
        "baseName": "firstName",
        "type": "string"
    },
    {
        "name": "lastName",
        "baseName": "lastName",
        "type": "string"
    }
];
/**
* Request Info Section
*/
class ReportingV3PurchaseRefundDetailsGet200ResponseRequestDetails {
    static getAttributeTypeMap() {
        return ReportingV3PurchaseRefundDetailsGet200ResponseRequestDetails.attributeTypeMap;
    }
}
exports.ReportingV3PurchaseRefundDetailsGet200ResponseRequestDetails = ReportingV3PurchaseRefundDetailsGet200ResponseRequestDetails;
ReportingV3PurchaseRefundDetailsGet200ResponseRequestDetails.discriminator = undefined;
ReportingV3PurchaseRefundDetailsGet200ResponseRequestDetails.attributeTypeMap = [
    {
        "name": "requestId",
        "baseName": "requestId",
        "type": "string"
    },
    {
        "name": "cybersourceMerchantId",
        "baseName": "cybersourceMerchantId",
        "type": "string"
    },
    {
        "name": "processorMerchantId",
        "baseName": "processorMerchantId",
        "type": "string"
    },
    {
        "name": "groupName",
        "baseName": "groupName",
        "type": "string"
    },
    {
        "name": "transactionReferenceNumber",
        "baseName": "transactionReferenceNumber",
        "type": "string"
    },
    {
        "name": "merchantReferenceNumber",
        "baseName": "merchantReferenceNumber",
        "type": "string"
    }
];
/**
* Settlement Status Section Values.
*/
class ReportingV3PurchaseRefundDetailsGet200ResponseSettlementStatuses {
    static getAttributeTypeMap() {
        return ReportingV3PurchaseRefundDetailsGet200ResponseSettlementStatuses.attributeTypeMap;
    }
}
exports.ReportingV3PurchaseRefundDetailsGet200ResponseSettlementStatuses = ReportingV3PurchaseRefundDetailsGet200ResponseSettlementStatuses;
ReportingV3PurchaseRefundDetailsGet200ResponseSettlementStatuses.discriminator = undefined;
ReportingV3PurchaseRefundDetailsGet200ResponseSettlementStatuses.attributeTypeMap = [
    {
        "name": "requestId",
        "baseName": "requestId",
        "type": "string"
    },
    {
        "name": "status",
        "baseName": "status",
        "type": "string"
    },
    {
        "name": "settlementTime",
        "baseName": "settlementTime",
        "type": "Date"
    },
    {
        "name": "reasonCode",
        "baseName": "reasonCode",
        "type": "string"
    },
    {
        "name": "errorText",
        "baseName": "errorText",
        "type": "string"
    }
];
class ReportingV3PurchaseRefundDetailsGet200ResponseSettlements {
    static getAttributeTypeMap() {
        return ReportingV3PurchaseRefundDetailsGet200ResponseSettlements.attributeTypeMap;
    }
}
exports.ReportingV3PurchaseRefundDetailsGet200ResponseSettlements = ReportingV3PurchaseRefundDetailsGet200ResponseSettlements;
ReportingV3PurchaseRefundDetailsGet200ResponseSettlements.discriminator = undefined;
ReportingV3PurchaseRefundDetailsGet200ResponseSettlements.attributeTypeMap = [
    {
        "name": "requestId",
        "baseName": "requestId",
        "type": "string"
    },
    {
        "name": "transactionType",
        "baseName": "transactionType",
        "type": "string"
    },
    {
        "name": "submissionTime",
        "baseName": "submissionTime",
        "type": "Date"
    },
    {
        "name": "amount",
        "baseName": "amount",
        "type": "string"
    },
    {
        "name": "currencyCode",
        "baseName": "currencyCode",
        "type": "string"
    },
    {
        "name": "paymentMethod",
        "baseName": "paymentMethod",
        "type": "string"
    },
    {
        "name": "walletType",
        "baseName": "walletType",
        "type": "string"
    },
    {
        "name": "paymentType",
        "baseName": "paymentType",
        "type": "string"
    },
    {
        "name": "accountSuffix",
        "baseName": "accountSuffix",
        "type": "string"
    },
    {
        "name": "cybersourceBatchTime",
        "baseName": "cybersourceBatchTime",
        "type": "Date"
    },
    {
        "name": "cybersourceBatchId",
        "baseName": "cybersourceBatchId",
        "type": "string"
    },
    {
        "name": "cardType",
        "baseName": "cardType",
        "type": "string"
    },
    {
        "name": "debitNetwork",
        "baseName": "debitNetwork",
        "type": "string"
    }
];
class ReportingV3ReportDefinitionsGet200Response {
    static getAttributeTypeMap() {
        return ReportingV3ReportDefinitionsGet200Response.attributeTypeMap;
    }
}
exports.ReportingV3ReportDefinitionsGet200Response = ReportingV3ReportDefinitionsGet200Response;
ReportingV3ReportDefinitionsGet200Response.discriminator = undefined;
ReportingV3ReportDefinitionsGet200Response.attributeTypeMap = [
    {
        "name": "reportDefinitions",
        "baseName": "reportDefinitions",
        "type": "Array<ReportingV3ReportDefinitionsGet200ResponseReportDefinitions>"
    }
];
class ReportingV3ReportDefinitionsGet200ResponseReportDefinitions {
    static getAttributeTypeMap() {
        return ReportingV3ReportDefinitionsGet200ResponseReportDefinitions.attributeTypeMap;
    }
}
exports.ReportingV3ReportDefinitionsGet200ResponseReportDefinitions = ReportingV3ReportDefinitionsGet200ResponseReportDefinitions;
ReportingV3ReportDefinitionsGet200ResponseReportDefinitions.discriminator = undefined;
ReportingV3ReportDefinitionsGet200ResponseReportDefinitions.attributeTypeMap = [
    {
        "name": "type",
        "baseName": "type",
        "type": "string"
    },
    {
        "name": "reportDefinitionId",
        "baseName": "reportDefinitionId",
        "type": "number"
    },
    {
        "name": "reportDefintionName",
        "baseName": "reportDefintionName",
        "type": "string"
    },
    {
        "name": "supportedFormats",
        "baseName": "supportedFormats",
        "type": "Array<string>"
    },
    {
        "name": "description",
        "baseName": "description",
        "type": "string"
    },
    {
        "name": "defaultSettings",
        "baseName": "defaultSettings",
        "type": "ReportingV3ReportDefinitionsNameGet200ResponseDefaultSettings"
    },
    {
        "name": "subscriptionType",
        "baseName": "subscriptionType",
        "type": "string"
    }
];
class ReportingV3ReportDefinitionsNameGet200Response {
    static getAttributeTypeMap() {
        return ReportingV3ReportDefinitionsNameGet200Response.attributeTypeMap;
    }
}
exports.ReportingV3ReportDefinitionsNameGet200Response = ReportingV3ReportDefinitionsNameGet200Response;
ReportingV3ReportDefinitionsNameGet200Response.discriminator = undefined;
ReportingV3ReportDefinitionsNameGet200Response.attributeTypeMap = [
    {
        "name": "type",
        "baseName": "type",
        "type": "string"
    },
    {
        "name": "reportDefinitionId",
        "baseName": "reportDefinitionId",
        "type": "number"
    },
    {
        "name": "reportDefintionName",
        "baseName": "reportDefintionName",
        "type": "string"
    },
    {
        "name": "attributes",
        "baseName": "attributes",
        "type": "Array<ReportingV3ReportDefinitionsNameGet200ResponseAttributes>"
    },
    {
        "name": "supportedFormats",
        "baseName": "supportedFormats",
        "type": "Array<string>"
    },
    {
        "name": "description",
        "baseName": "description",
        "type": "string"
    },
    {
        "name": "defaultSettings",
        "baseName": "defaultSettings",
        "type": "ReportingV3ReportDefinitionsNameGet200ResponseDefaultSettings"
    },
    {
        "name": "subscriptionType",
        "baseName": "subscriptionType",
        "type": "string"
    }
];
class ReportingV3ReportDefinitionsNameGet200ResponseAttributes {
    static getAttributeTypeMap() {
        return ReportingV3ReportDefinitionsNameGet200ResponseAttributes.attributeTypeMap;
    }
}
exports.ReportingV3ReportDefinitionsNameGet200ResponseAttributes = ReportingV3ReportDefinitionsNameGet200ResponseAttributes;
ReportingV3ReportDefinitionsNameGet200ResponseAttributes.discriminator = undefined;
ReportingV3ReportDefinitionsNameGet200ResponseAttributes.attributeTypeMap = [
    {
        "name": "id",
        "baseName": "id",
        "type": "string"
    },
    {
        "name": "name",
        "baseName": "name",
        "type": "string"
    },
    {
        "name": "description",
        "baseName": "description",
        "type": "string"
    },
    {
        "name": "filterType",
        "baseName": "filterType",
        "type": "string"
    },
    {
        "name": "_default",
        "baseName": "default",
        "type": "boolean"
    },
    {
        "name": "required",
        "baseName": "required",
        "type": "boolean"
    },
    {
        "name": "supportedType",
        "baseName": "supportedType",
        "type": "string"
    }
];
class ReportingV3ReportDefinitionsNameGet200ResponseDefaultSettings {
    static getAttributeTypeMap() {
        return ReportingV3ReportDefinitionsNameGet200ResponseDefaultSettings.attributeTypeMap;
    }
}
exports.ReportingV3ReportDefinitionsNameGet200ResponseDefaultSettings = ReportingV3ReportDefinitionsNameGet200ResponseDefaultSettings;
ReportingV3ReportDefinitionsNameGet200ResponseDefaultSettings.discriminator = undefined;
ReportingV3ReportDefinitionsNameGet200ResponseDefaultSettings.attributeTypeMap = [
    {
        "name": "reportMimeType",
        "baseName": "reportMimeType",
        "type": "string"
    },
    {
        "name": "reportFrequency",
        "baseName": "reportFrequency",
        "type": "string"
    },
    {
        "name": "reportName",
        "baseName": "reportName",
        "type": "string"
    },
    {
        "name": "timezone",
        "baseName": "timezone",
        "type": "string"
    },
    {
        "name": "startTime",
        "baseName": "startTime",
        "type": "string"
    },
    {
        "name": "startDay",
        "baseName": "startDay",
        "type": "number"
    },
    {
        "name": "reportFilters",
        "baseName": "reportFilters",
        "type": "{ [key: string]: Array<string>; }"
    },
    {
        "name": "reportPreferences",
        "baseName": "reportPreferences",
        "type": "Reportingv3reportsReportPreferences"
    }
];
class ReportingV3ReportSubscriptionsGet200Response {
    static getAttributeTypeMap() {
        return ReportingV3ReportSubscriptionsGet200Response.attributeTypeMap;
    }
}
exports.ReportingV3ReportSubscriptionsGet200Response = ReportingV3ReportSubscriptionsGet200Response;
ReportingV3ReportSubscriptionsGet200Response.discriminator = undefined;
ReportingV3ReportSubscriptionsGet200Response.attributeTypeMap = [
    {
        "name": "subscriptions",
        "baseName": "subscriptions",
        "type": "Array<ReportingV3ReportSubscriptionsGet200ResponseSubscriptions>"
    }
];
/**
* Subscription Details
*/
class ReportingV3ReportSubscriptionsGet200ResponseSubscriptions {
    static getAttributeTypeMap() {
        return ReportingV3ReportSubscriptionsGet200ResponseSubscriptions.attributeTypeMap;
    }
}
exports.ReportingV3ReportSubscriptionsGet200ResponseSubscriptions = ReportingV3ReportSubscriptionsGet200ResponseSubscriptions;
ReportingV3ReportSubscriptionsGet200ResponseSubscriptions.discriminator = undefined;
ReportingV3ReportSubscriptionsGet200ResponseSubscriptions.attributeTypeMap = [
    {
        "name": "organizationId",
        "baseName": "organizationId",
        "type": "string"
    },
    {
        "name": "reportDefinitionId",
        "baseName": "reportDefinitionId",
        "type": "string"
    },
    {
        "name": "reportDefinitionName",
        "baseName": "reportDefinitionName",
        "type": "string"
    },
    {
        "name": "reportMimeType",
        "baseName": "reportMimeType",
        "type": "string"
    },
    {
        "name": "reportFrequency",
        "baseName": "reportFrequency",
        "type": "string"
    },
    {
        "name": "reportInterval",
        "baseName": "reportInterval",
        "type": "string"
    },
    {
        "name": "reportName",
        "baseName": "reportName",
        "type": "string"
    },
    {
        "name": "timezone",
        "baseName": "timezone",
        "type": "string"
    },
    {
        "name": "startTime",
        "baseName": "startTime",
        "type": "Date"
    },
    {
        "name": "startDay",
        "baseName": "startDay",
        "type": "number"
    },
    {
        "name": "reportFields",
        "baseName": "reportFields",
        "type": "Array<string>"
    },
    {
        "name": "reportFilters",
        "baseName": "reportFilters",
        "type": "{ [key: string]: Array<string>; }"
    },
    {
        "name": "reportPreferences",
        "baseName": "reportPreferences",
        "type": "Reportingv3reportsReportPreferences"
    },
    {
        "name": "groupId",
        "baseName": "groupId",
        "type": "string"
    }
];
class ReportingV3ReportsGet200Response {
    static getAttributeTypeMap() {
        return ReportingV3ReportsGet200Response.attributeTypeMap;
    }
}
exports.ReportingV3ReportsGet200Response = ReportingV3ReportsGet200Response;
ReportingV3ReportsGet200Response.discriminator = undefined;
ReportingV3ReportsGet200Response.attributeTypeMap = [
    {
        "name": "reportSearchResults",
        "baseName": "reportSearchResults",
        "type": "Array<ReportingV3ReportsGet200ResponseReportSearchResults>"
    }
];
class ReportingV3ReportsGet200ResponseLink {
    static getAttributeTypeMap() {
        return ReportingV3ReportsGet200ResponseLink.attributeTypeMap;
    }
}
exports.ReportingV3ReportsGet200ResponseLink = ReportingV3ReportsGet200ResponseLink;
ReportingV3ReportsGet200ResponseLink.discriminator = undefined;
ReportingV3ReportsGet200ResponseLink.attributeTypeMap = [
    {
        "name": "reportDownload",
        "baseName": "reportDownload",
        "type": "ReportingV3ReportsGet200ResponseLinkReportDownload"
    }
];
class ReportingV3ReportsGet200ResponseLinkReportDownload {
    static getAttributeTypeMap() {
        return ReportingV3ReportsGet200ResponseLinkReportDownload.attributeTypeMap;
    }
}
exports.ReportingV3ReportsGet200ResponseLinkReportDownload = ReportingV3ReportsGet200ResponseLinkReportDownload;
ReportingV3ReportsGet200ResponseLinkReportDownload.discriminator = undefined;
ReportingV3ReportsGet200ResponseLinkReportDownload.attributeTypeMap = [
    {
        "name": "href",
        "baseName": "href",
        "type": "string"
    },
    {
        "name": "method",
        "baseName": "method",
        "type": "string"
    }
];
/**
* Report Search Result Bean
*/
class ReportingV3ReportsGet200ResponseReportSearchResults {
    static getAttributeTypeMap() {
        return ReportingV3ReportsGet200ResponseReportSearchResults.attributeTypeMap;
    }
}
exports.ReportingV3ReportsGet200ResponseReportSearchResults = ReportingV3ReportsGet200ResponseReportSearchResults;
ReportingV3ReportsGet200ResponseReportSearchResults.discriminator = undefined;
ReportingV3ReportsGet200ResponseReportSearchResults.attributeTypeMap = [
    {
        "name": "link",
        "baseName": "_link",
        "type": "ReportingV3ReportsGet200ResponseLink"
    },
    {
        "name": "reportDefinitionId",
        "baseName": "reportDefinitionId",
        "type": "string"
    },
    {
        "name": "reportName",
        "baseName": "reportName",
        "type": "string"
    },
    {
        "name": "reportMimeType",
        "baseName": "reportMimeType",
        "type": "string"
    },
    {
        "name": "reportFrequency",
        "baseName": "reportFrequency",
        "type": "string"
    },
    {
        "name": "status",
        "baseName": "status",
        "type": "string"
    },
    {
        "name": "reportStartTime",
        "baseName": "reportStartTime",
        "type": "Date"
    },
    {
        "name": "reportEndTime",
        "baseName": "reportEndTime",
        "type": "Date"
    },
    {
        "name": "timezone",
        "baseName": "timezone",
        "type": "string"
    },
    {
        "name": "reportId",
        "baseName": "reportId",
        "type": "string"
    },
    {
        "name": "organizationId",
        "baseName": "organizationId",
        "type": "string"
    },
    {
        "name": "queuedTime",
        "baseName": "queuedTime",
        "type": "Date"
    },
    {
        "name": "reportGeneratingTime",
        "baseName": "reportGeneratingTime",
        "type": "Date"
    },
    {
        "name": "reportCompletedTime",
        "baseName": "reportCompletedTime",
        "type": "Date"
    },
    {
        "name": "subscriptionType",
        "baseName": "subscriptionType",
        "type": "string"
    },
    {
        "name": "groupId",
        "baseName": "groupId",
        "type": "string"
    }
];
/**
* Report Log
*/
class ReportingV3ReportsIdGet200Response {
    static getAttributeTypeMap() {
        return ReportingV3ReportsIdGet200Response.attributeTypeMap;
    }
}
exports.ReportingV3ReportsIdGet200Response = ReportingV3ReportsIdGet200Response;
ReportingV3ReportsIdGet200Response.discriminator = undefined;
ReportingV3ReportsIdGet200Response.attributeTypeMap = [
    {
        "name": "organizationId",
        "baseName": "organizationId",
        "type": "string"
    },
    {
        "name": "reportId",
        "baseName": "reportId",
        "type": "string"
    },
    {
        "name": "reportDefinitionId",
        "baseName": "reportDefinitionId",
        "type": "string"
    },
    {
        "name": "reportName",
        "baseName": "reportName",
        "type": "string"
    },
    {
        "name": "reportMimeType",
        "baseName": "reportMimeType",
        "type": "string"
    },
    {
        "name": "reportFrequency",
        "baseName": "reportFrequency",
        "type": "string"
    },
    {
        "name": "reportFields",
        "baseName": "reportFields",
        "type": "Array<string>"
    },
    {
        "name": "reportStatus",
        "baseName": "reportStatus",
        "type": "string"
    },
    {
        "name": "reportStartTime",
        "baseName": "reportStartTime",
        "type": "Date"
    },
    {
        "name": "reportEndTime",
        "baseName": "reportEndTime",
        "type": "Date"
    },
    {
        "name": "timezone",
        "baseName": "timezone",
        "type": "string"
    },
    {
        "name": "reportFilters",
        "baseName": "reportFilters",
        "type": "{ [key: string]: Array<string>; }"
    },
    {
        "name": "reportPreferences",
        "baseName": "reportPreferences",
        "type": "Reportingv3reportsReportPreferences"
    },
    {
        "name": "groupId",
        "baseName": "groupId",
        "type": "string"
    }
];
class ReportingV3RetrievalDetailsGet200Response {
    static getAttributeTypeMap() {
        return ReportingV3RetrievalDetailsGet200Response.attributeTypeMap;
    }
}
exports.ReportingV3RetrievalDetailsGet200Response = ReportingV3RetrievalDetailsGet200Response;
ReportingV3RetrievalDetailsGet200Response.discriminator = undefined;
ReportingV3RetrievalDetailsGet200Response.attributeTypeMap = [
    {
        "name": "organizationId",
        "baseName": "organizationId",
        "type": "string"
    },
    {
        "name": "startTime",
        "baseName": "startTime",
        "type": "Date"
    },
    {
        "name": "endTime",
        "baseName": "endTime",
        "type": "Date"
    },
    {
        "name": "retrievalDetails",
        "baseName": "retrievalDetails",
        "type": "Array<ReportingV3RetrievalDetailsGet200ResponseRetrievalDetails>"
    }
];
class ReportingV3RetrievalDetailsGet200ResponseRetrievalDetails {
    static getAttributeTypeMap() {
        return ReportingV3RetrievalDetailsGet200ResponseRetrievalDetails.attributeTypeMap;
    }
}
exports.ReportingV3RetrievalDetailsGet200ResponseRetrievalDetails = ReportingV3RetrievalDetailsGet200ResponseRetrievalDetails;
ReportingV3RetrievalDetailsGet200ResponseRetrievalDetails.discriminator = undefined;
ReportingV3RetrievalDetailsGet200ResponseRetrievalDetails.attributeTypeMap = [
    {
        "name": "processorMerchantId",
        "baseName": "processorMerchantId",
        "type": "string"
    },
    {
        "name": "merchantName",
        "baseName": "merchantName",
        "type": "string"
    },
    {
        "name": "transactionReferenceNumber",
        "baseName": "transactionReferenceNumber",
        "type": "string"
    },
    {
        "name": "merchantReferenceNumber",
        "baseName": "merchantReferenceNumber",
        "type": "string"
    },
    {
        "name": "natureOfDispute",
        "baseName": "natureOfDispute",
        "type": "string"
    },
    {
        "name": "alertType",
        "baseName": "alertType",
        "type": "string"
    },
    {
        "name": "amount",
        "baseName": "amount",
        "type": "string"
    },
    {
        "name": "sign",
        "baseName": "sign",
        "type": "string"
    },
    {
        "name": "action",
        "baseName": "action",
        "type": "string"
    },
    {
        "name": "cardType",
        "baseName": "cardType",
        "type": "string"
    },
    {
        "name": "originalSettlementTime",
        "baseName": "originalSettlementTime",
        "type": "Date"
    },
    {
        "name": "trackingNumber",
        "baseName": "trackingNumber",
        "type": "string"
    },
    {
        "name": "currencyCode",
        "baseName": "currencyCode",
        "type": "string"
    },
    {
        "name": "requestId",
        "baseName": "requestId",
        "type": "string"
    },
    {
        "name": "responseDueTime",
        "baseName": "responseDueTime",
        "type": "Date"
    },
    {
        "name": "time",
        "baseName": "time",
        "type": "Date"
    },
    {
        "name": "actionDescription",
        "baseName": "actionDescription",
        "type": "string"
    },
    {
        "name": "customerId",
        "baseName": "customerId",
        "type": "string"
    },
    {
        "name": "reasonCode",
        "baseName": "reasonCode",
        "type": "string"
    },
    {
        "name": "representmentCPTime",
        "baseName": "representmentCPTime",
        "type": "Date"
    },
    {
        "name": "applications",
        "baseName": "applications",
        "type": "string"
    },
    {
        "name": "eventRequestedTime",
        "baseName": "eventRequestedTime",
        "type": "Date"
    }
];
class ReportingV3RetrievalSummariesGet200Response {
    static getAttributeTypeMap() {
        return ReportingV3RetrievalSummariesGet200Response.attributeTypeMap;
    }
}
exports.ReportingV3RetrievalSummariesGet200Response = ReportingV3RetrievalSummariesGet200Response;
ReportingV3RetrievalSummariesGet200Response.discriminator = undefined;
ReportingV3RetrievalSummariesGet200Response.attributeTypeMap = [
    {
        "name": "organizationId",
        "baseName": "organizationId",
        "type": "string"
    },
    {
        "name": "startTime",
        "baseName": "startTime",
        "type": "Date"
    },
    {
        "name": "endTime",
        "baseName": "endTime",
        "type": "string"
    },
    {
        "name": "retrievalSummaries",
        "baseName": "retrievalSummaries",
        "type": "Array<ReportingV3ChargebackSummariesGet200ResponseChargebackSummaries>"
    }
];
/**
* HTTP status code for client application
*/
class Reportingv3ReportDownloadsGet400Response {
    static getAttributeTypeMap() {
        return Reportingv3ReportDownloadsGet400Response.attributeTypeMap;
    }
}
exports.Reportingv3ReportDownloadsGet400Response = Reportingv3ReportDownloadsGet400Response;
Reportingv3ReportDownloadsGet400Response.discriminator = undefined;
Reportingv3ReportDownloadsGet400Response.attributeTypeMap = [
    {
        "name": "submitTimeUtc",
        "baseName": "submitTimeUtc",
        "type": "Date"
    },
    {
        "name": "reason",
        "baseName": "reason",
        "type": "string"
    },
    {
        "name": "message",
        "baseName": "message",
        "type": "string"
    },
    {
        "name": "details",
        "baseName": "details",
        "type": "Array<Reportingv3ReportDownloadsGet400ResponseDetails>"
    }
];
/**
* Provides failed validation input field detail
*/
class Reportingv3ReportDownloadsGet400ResponseDetails {
    static getAttributeTypeMap() {
        return Reportingv3ReportDownloadsGet400ResponseDetails.attributeTypeMap;
    }
}
exports.Reportingv3ReportDownloadsGet400ResponseDetails = Reportingv3ReportDownloadsGet400ResponseDetails;
Reportingv3ReportDownloadsGet400ResponseDetails.discriminator = undefined;
Reportingv3ReportDownloadsGet400ResponseDetails.attributeTypeMap = [
    {
        "name": "field",
        "baseName": "field",
        "type": "string"
    },
    {
        "name": "reason",
        "baseName": "reason",
        "type": "string"
    }
];
class Reportingv3reportsReportFilters {
    static getAttributeTypeMap() {
        return Reportingv3reportsReportFilters.attributeTypeMap;
    }
}
exports.Reportingv3reportsReportFilters = Reportingv3reportsReportFilters;
Reportingv3reportsReportFilters.discriminator = undefined;
Reportingv3reportsReportFilters.attributeTypeMap = [
    {
        "name": "applicationName",
        "baseName": "Application.Name",
        "type": "Array<string>"
    },
    {
        "name": "firstName",
        "baseName": "firstName",
        "type": "Array<string>"
    },
    {
        "name": "lastName",
        "baseName": "lastName",
        "type": "Array<string>"
    },
    {
        "name": "email",
        "baseName": "email",
        "type": "Array<string>"
    }
];
/**
* Report Preferences
*/
class Reportingv3reportsReportPreferences {
    static getAttributeTypeMap() {
        return Reportingv3reportsReportPreferences.attributeTypeMap;
    }
}
exports.Reportingv3reportsReportPreferences = Reportingv3reportsReportPreferences;
Reportingv3reportsReportPreferences.discriminator = undefined;
Reportingv3reportsReportPreferences.attributeTypeMap = [
    {
        "name": "signedAmounts",
        "baseName": "signedAmounts",
        "type": "boolean"
    },
    {
        "name": "fieldNameConvention",
        "baseName": "fieldNameConvention",
        "type": "string"
    }
];
class Request {
    static getAttributeTypeMap() {
        return Request.attributeTypeMap;
    }
}
exports.Request = Request;
Request.discriminator = undefined;
Request.attributeTypeMap = [
    {
        "name": "processingInformation",
        "baseName": "processingInformation",
        "type": "Ptsv2paymenttokensProcessingInformation"
    },
    {
        "name": "paymentInformation",
        "baseName": "paymentInformation",
        "type": "Ptsv2paymenttokensPaymentInformation"
    }
];
class RevokeCertificateRequest {
    static getAttributeTypeMap() {
        return RevokeCertificateRequest.attributeTypeMap;
    }
}
exports.RevokeCertificateRequest = RevokeCertificateRequest;
RevokeCertificateRequest.discriminator = undefined;
RevokeCertificateRequest.attributeTypeMap = [
    {
        "name": "merchantId",
        "baseName": "merchantId",
        "type": "string"
    },
    {
        "name": "deviceId",
        "baseName": "deviceId",
        "type": "string"
    },
    {
        "name": "deviceType",
        "baseName": "deviceType",
        "type": "string"
    }
];
class RiskProducts {
    static getAttributeTypeMap() {
        return RiskProducts.attributeTypeMap;
    }
}
exports.RiskProducts = RiskProducts;
RiskProducts.discriminator = undefined;
RiskProducts.attributeTypeMap = [
    {
        "name": "fraudManagementEssentials",
        "baseName": "fraudManagementEssentials",
        "type": "RiskProductsFraudManagementEssentials"
    },
    {
        "name": "decisionManager",
        "baseName": "decisionManager",
        "type": "RiskProductsDecisionManager"
    },
    {
        "name": "portfolioRiskControls",
        "baseName": "portfolioRiskControls",
        "type": "RiskProductsPortfolioRiskControls"
    }
];
class RiskProductsDecisionManager {
    static getAttributeTypeMap() {
        return RiskProductsDecisionManager.attributeTypeMap;
    }
}
exports.RiskProductsDecisionManager = RiskProductsDecisionManager;
RiskProductsDecisionManager.discriminator = undefined;
RiskProductsDecisionManager.attributeTypeMap = [
    {
        "name": "subscriptionInformation",
        "baseName": "subscriptionInformation",
        "type": "PaymentsProductsAlternativePaymentMethodsSubscriptionInformation"
    },
    {
        "name": "configurationInformation",
        "baseName": "configurationInformation",
        "type": "RiskProductsDecisionManagerConfigurationInformation"
    }
];
class RiskProductsDecisionManagerConfigurationInformation {
    static getAttributeTypeMap() {
        return RiskProductsDecisionManagerConfigurationInformation.attributeTypeMap;
    }
}
exports.RiskProductsDecisionManagerConfigurationInformation = RiskProductsDecisionManagerConfigurationInformation;
RiskProductsDecisionManagerConfigurationInformation.discriminator = undefined;
RiskProductsDecisionManagerConfigurationInformation.attributeTypeMap = [
    {
        "name": "templateId",
        "baseName": "templateId",
        "type": "string"
    },
    {
        "name": "configurations",
        "baseName": "configurations",
        "type": "DmConfig"
    }
];
class RiskProductsFraudManagementEssentials {
    static getAttributeTypeMap() {
        return RiskProductsFraudManagementEssentials.attributeTypeMap;
    }
}
exports.RiskProductsFraudManagementEssentials = RiskProductsFraudManagementEssentials;
RiskProductsFraudManagementEssentials.discriminator = undefined;
RiskProductsFraudManagementEssentials.attributeTypeMap = [
    {
        "name": "subscriptionInformation",
        "baseName": "subscriptionInformation",
        "type": "PaymentsProductsAlternativePaymentMethodsSubscriptionInformation"
    },
    {
        "name": "configurationInformation",
        "baseName": "configurationInformation",
        "type": "RiskProductsFraudManagementEssentialsConfigurationInformation"
    }
];
class RiskProductsFraudManagementEssentialsConfigurationInformation {
    static getAttributeTypeMap() {
        return RiskProductsFraudManagementEssentialsConfigurationInformation.attributeTypeMap;
    }
}
exports.RiskProductsFraudManagementEssentialsConfigurationInformation = RiskProductsFraudManagementEssentialsConfigurationInformation;
RiskProductsFraudManagementEssentialsConfigurationInformation.discriminator = undefined;
RiskProductsFraudManagementEssentialsConfigurationInformation.attributeTypeMap = [
    {
        "name": "templateId",
        "baseName": "templateId",
        "type": "string"
    }
];
class RiskProductsPortfolioRiskControls {
    static getAttributeTypeMap() {
        return RiskProductsPortfolioRiskControls.attributeTypeMap;
    }
}
exports.RiskProductsPortfolioRiskControls = RiskProductsPortfolioRiskControls;
RiskProductsPortfolioRiskControls.discriminator = undefined;
RiskProductsPortfolioRiskControls.attributeTypeMap = [
    {
        "name": "subscriptionInformation",
        "baseName": "subscriptionInformation",
        "type": "PaymentsProductsAlternativePaymentMethodsSubscriptionInformation"
    },
    {
        "name": "configurationInformation",
        "baseName": "configurationInformation",
        "type": "RiskProductsPortfolioRiskControlsConfigurationInformation"
    }
];
class RiskProductsPortfolioRiskControlsConfigurationInformation {
    static getAttributeTypeMap() {
        return RiskProductsPortfolioRiskControlsConfigurationInformation.attributeTypeMap;
    }
}
exports.RiskProductsPortfolioRiskControlsConfigurationInformation = RiskProductsPortfolioRiskControlsConfigurationInformation;
RiskProductsPortfolioRiskControlsConfigurationInformation.discriminator = undefined;
RiskProductsPortfolioRiskControlsConfigurationInformation.attributeTypeMap = [
    {
        "name": "configurations",
        "baseName": "configurations",
        "type": "RiskProductsPortfolioRiskControlsConfigurationInformationConfigurations"
    }
];
class RiskProductsPortfolioRiskControlsConfigurationInformationConfigurations {
    static getAttributeTypeMap() {
        return RiskProductsPortfolioRiskControlsConfigurationInformationConfigurations.attributeTypeMap;
    }
}
exports.RiskProductsPortfolioRiskControlsConfigurationInformationConfigurations = RiskProductsPortfolioRiskControlsConfigurationInformationConfigurations;
RiskProductsPortfolioRiskControlsConfigurationInformationConfigurations.discriminator = undefined;
RiskProductsPortfolioRiskControlsConfigurationInformationConfigurations.attributeTypeMap = [
    {
        "name": "profileId",
        "baseName": "profileId",
        "type": "string"
    }
];
class RiskV1AddressVerificationsPost201Response {
    static getAttributeTypeMap() {
        return RiskV1AddressVerificationsPost201Response.attributeTypeMap;
    }
}
exports.RiskV1AddressVerificationsPost201Response = RiskV1AddressVerificationsPost201Response;
RiskV1AddressVerificationsPost201Response.discriminator = undefined;
RiskV1AddressVerificationsPost201Response.attributeTypeMap = [
    {
        "name": "links",
        "baseName": "_links",
        "type": "PtsV2IncrementalAuthorizationPatch201ResponseLinks"
    },
    {
        "name": "id",
        "baseName": "id",
        "type": "string"
    },
    {
        "name": "submitTimeUtc",
        "baseName": "submitTimeUtc",
        "type": "string"
    },
    {
        "name": "submitTimeLocal",
        "baseName": "submitTimeLocal",
        "type": "string"
    },
    {
        "name": "status",
        "baseName": "status",
        "type": "string"
    },
    {
        "name": "message",
        "baseName": "message",
        "type": "string"
    },
    {
        "name": "clientReferenceInformation",
        "baseName": "clientReferenceInformation",
        "type": "RiskV1DecisionsPost201ResponseClientReferenceInformation"
    },
    {
        "name": "addressVerificationInformation",
        "baseName": "addressVerificationInformation",
        "type": "RiskV1AddressVerificationsPost201ResponseAddressVerificationInformation"
    },
    {
        "name": "errorInformation",
        "baseName": "errorInformation",
        "type": "RiskV1AddressVerificationsPost201ResponseErrorInformation"
    }
];
class RiskV1AddressVerificationsPost201ResponseAddressVerificationInformation {
    static getAttributeTypeMap() {
        return RiskV1AddressVerificationsPost201ResponseAddressVerificationInformation.attributeTypeMap;
    }
}
exports.RiskV1AddressVerificationsPost201ResponseAddressVerificationInformation = RiskV1AddressVerificationsPost201ResponseAddressVerificationInformation;
RiskV1AddressVerificationsPost201ResponseAddressVerificationInformation.discriminator = undefined;
RiskV1AddressVerificationsPost201ResponseAddressVerificationInformation.attributeTypeMap = [
    {
        "name": "addressType",
        "baseName": "addressType",
        "type": "string"
    },
    {
        "name": "barCode",
        "baseName": "barCode",
        "type": "RiskV1AddressVerificationsPost201ResponseAddressVerificationInformationBarCode"
    },
    {
        "name": "applicableRegion",
        "baseName": "applicableRegion",
        "type": "string"
    },
    {
        "name": "errorCode",
        "baseName": "errorCode",
        "type": "string"
    },
    {
        "name": "statusCode",
        "baseName": "statusCode",
        "type": "string"
    },
    {
        "name": "careOf",
        "baseName": "careOf",
        "type": "string"
    },
    {
        "name": "matchScore",
        "baseName": "matchScore",
        "type": "number"
    },
    {
        "name": "standardAddress",
        "baseName": "standardAddress",
        "type": "RiskV1AddressVerificationsPost201ResponseAddressVerificationInformationStandardAddress"
    }
];
class RiskV1AddressVerificationsPost201ResponseAddressVerificationInformationBarCode {
    static getAttributeTypeMap() {
        return RiskV1AddressVerificationsPost201ResponseAddressVerificationInformationBarCode.attributeTypeMap;
    }
}
exports.RiskV1AddressVerificationsPost201ResponseAddressVerificationInformationBarCode = RiskV1AddressVerificationsPost201ResponseAddressVerificationInformationBarCode;
RiskV1AddressVerificationsPost201ResponseAddressVerificationInformationBarCode.discriminator = undefined;
RiskV1AddressVerificationsPost201ResponseAddressVerificationInformationBarCode.attributeTypeMap = [
    {
        "name": "value",
        "baseName": "value",
        "type": "string"
    },
    {
        "name": "checkDigit",
        "baseName": "checkDigit",
        "type": "number"
    }
];
class RiskV1AddressVerificationsPost201ResponseAddressVerificationInformationStandardAddress {
    static getAttributeTypeMap() {
        return RiskV1AddressVerificationsPost201ResponseAddressVerificationInformationStandardAddress.attributeTypeMap;
    }
}
exports.RiskV1AddressVerificationsPost201ResponseAddressVerificationInformationStandardAddress = RiskV1AddressVerificationsPost201ResponseAddressVerificationInformationStandardAddress;
RiskV1AddressVerificationsPost201ResponseAddressVerificationInformationStandardAddress.discriminator = undefined;
RiskV1AddressVerificationsPost201ResponseAddressVerificationInformationStandardAddress.attributeTypeMap = [
    {
        "name": "address1",
        "baseName": "address1",
        "type": "RiskV1AddressVerificationsPost201ResponseAddressVerificationInformationStandardAddressAddress1"
    },
    {
        "name": "address2",
        "baseName": "address2",
        "type": "string"
    },
    {
        "name": "address3",
        "baseName": "address3",
        "type": "string"
    },
    {
        "name": "address4",
        "baseName": "address4",
        "type": "string"
    },
    {
        "name": "locality",
        "baseName": "locality",
        "type": "string"
    },
    {
        "name": "county",
        "baseName": "county",
        "type": "string"
    },
    {
        "name": "country",
        "baseName": "country",
        "type": "string"
    },
    {
        "name": "csz",
        "baseName": "csz",
        "type": "string"
    },
    {
        "name": "isoCountry",
        "baseName": "isoCountry",
        "type": "string"
    },
    {
        "name": "administrativeArea",
        "baseName": "administrativeArea",
        "type": "string"
    },
    {
        "name": "postalCode",
        "baseName": "postalCode",
        "type": "string"
    }
];
class RiskV1AddressVerificationsPost201ResponseAddressVerificationInformationStandardAddressAddress1 {
    static getAttributeTypeMap() {
        return RiskV1AddressVerificationsPost201ResponseAddressVerificationInformationStandardAddressAddress1.attributeTypeMap;
    }
}
exports.RiskV1AddressVerificationsPost201ResponseAddressVerificationInformationStandardAddressAddress1 = RiskV1AddressVerificationsPost201ResponseAddressVerificationInformationStandardAddressAddress1;
RiskV1AddressVerificationsPost201ResponseAddressVerificationInformationStandardAddressAddress1.discriminator = undefined;
RiskV1AddressVerificationsPost201ResponseAddressVerificationInformationStandardAddressAddress1.attributeTypeMap = [
    {
        "name": "withApartment",
        "baseName": "withApartment",
        "type": "string"
    },
    {
        "name": "withoutApartment",
        "baseName": "withoutApartment",
        "type": "string"
    }
];
class RiskV1AddressVerificationsPost201ResponseErrorInformation {
    static getAttributeTypeMap() {
        return RiskV1AddressVerificationsPost201ResponseErrorInformation.attributeTypeMap;
    }
}
exports.RiskV1AddressVerificationsPost201ResponseErrorInformation = RiskV1AddressVerificationsPost201ResponseErrorInformation;
RiskV1AddressVerificationsPost201ResponseErrorInformation.discriminator = undefined;
RiskV1AddressVerificationsPost201ResponseErrorInformation.attributeTypeMap = [
    {
        "name": "reason",
        "baseName": "reason",
        "type": "string"
    },
    {
        "name": "message",
        "baseName": "message",
        "type": "string"
    },
    {
        "name": "details",
        "baseName": "details",
        "type": "Array<PtsV2PaymentsPost201ResponseErrorInformationDetails>"
    }
];
class RiskV1AuthenticationResultsPost201Response {
    static getAttributeTypeMap() {
        return RiskV1AuthenticationResultsPost201Response.attributeTypeMap;
    }
}
exports.RiskV1AuthenticationResultsPost201Response = RiskV1AuthenticationResultsPost201Response;
RiskV1AuthenticationResultsPost201Response.discriminator = undefined;
RiskV1AuthenticationResultsPost201Response.attributeTypeMap = [
    {
        "name": "links",
        "baseName": "_links",
        "type": "PtsV2IncrementalAuthorizationPatch201ResponseLinks"
    },
    {
        "name": "id",
        "baseName": "id",
        "type": "string"
    },
    {
        "name": "submitTimeUtc",
        "baseName": "submitTimeUtc",
        "type": "string"
    },
    {
        "name": "status",
        "baseName": "status",
        "type": "string"
    },
    {
        "name": "message",
        "baseName": "message",
        "type": "string"
    },
    {
        "name": "clientReferenceInformation",
        "baseName": "clientReferenceInformation",
        "type": "RiskV1DecisionsPost201ResponseClientReferenceInformation"
    },
    {
        "name": "consumerAuthenticationInformation",
        "baseName": "consumerAuthenticationInformation",
        "type": "RiskV1AuthenticationResultsPost201ResponseConsumerAuthenticationInformation"
    },
    {
        "name": "errorInformation",
        "baseName": "errorInformation",
        "type": "RiskV1AuthenticationsPost201ResponseErrorInformation"
    }
];
class RiskV1AuthenticationResultsPost201ResponseConsumerAuthenticationInformation {
    static getAttributeTypeMap() {
        return RiskV1AuthenticationResultsPost201ResponseConsumerAuthenticationInformation.attributeTypeMap;
    }
}
exports.RiskV1AuthenticationResultsPost201ResponseConsumerAuthenticationInformation = RiskV1AuthenticationResultsPost201ResponseConsumerAuthenticationInformation;
RiskV1AuthenticationResultsPost201ResponseConsumerAuthenticationInformation.discriminator = undefined;
RiskV1AuthenticationResultsPost201ResponseConsumerAuthenticationInformation.attributeTypeMap = [
    {
        "name": "acsRenderingType",
        "baseName": "acsRenderingType",
        "type": "string"
    },
    {
        "name": "acsReferenceNumber",
        "baseName": "acsReferenceNumber",
        "type": "string"
    },
    {
        "name": "acsTransactionId",
        "baseName": "acsTransactionId",
        "type": "string"
    },
    {
        "name": "acsOperatorID",
        "baseName": "acsOperatorID",
        "type": "string"
    },
    {
        "name": "authenticationResult",
        "baseName": "authenticationResult",
        "type": "string"
    },
    {
        "name": "authenticationType",
        "baseName": "authenticationType",
        "type": "string"
    },
    {
        "name": "authenticationStatusMsg",
        "baseName": "authenticationStatusMsg",
        "type": "string"
    },
    {
        "name": "authenticationTransactionId",
        "baseName": "authenticationTransactionId",
        "type": "string"
    },
    {
        "name": "authenticationTransactionContextId",
        "baseName": "authenticationTransactionContextId",
        "type": "string"
    },
    {
        "name": "transactionToken",
        "baseName": "transactionToken",
        "type": "string"
    },
    {
        "name": "authorizationPayload",
        "baseName": "authorizationPayload",
        "type": "string"
    },
    {
        "name": "cavv",
        "baseName": "cavv",
        "type": "string"
    },
    {
        "name": "cavvAlgorithm",
        "baseName": "cavvAlgorithm",
        "type": "string"
    },
    {
        "name": "challengeCancelCode",
        "baseName": "challengeCancelCode",
        "type": "string"
    },
    {
        "name": "directoryServerErrorCode",
        "baseName": "directoryServerErrorCode",
        "type": "string"
    },
    {
        "name": "directoryServerErrorDescription",
        "baseName": "directoryServerErrorDescription",
        "type": "string"
    },
    {
        "name": "effectiveAuthenticationType",
        "baseName": "effectiveAuthenticationType",
        "type": "string"
    },
    {
        "name": "indicator",
        "baseName": "indicator",
        "type": "string"
    },
    {
        "name": "interactionCounter",
        "baseName": "interactionCounter",
        "type": "string"
    },
    {
        "name": "eci",
        "baseName": "eci",
        "type": "string"
    },
    {
        "name": "eciRaw",
        "baseName": "eciRaw",
        "type": "string"
    },
    {
        "name": "paresStatus",
        "baseName": "paresStatus",
        "type": "string"
    },
    {
        "name": "sdkTransactionId",
        "baseName": "sdkTransactionId",
        "type": "string"
    },
    {
        "name": "specificationVersion",
        "baseName": "specificationVersion",
        "type": "string"
    },
    {
        "name": "threeDSServerTransactionId",
        "baseName": "threeDSServerTransactionId",
        "type": "string"
    },
    {
        "name": "ucafAuthenticationData",
        "baseName": "ucafAuthenticationData",
        "type": "string"
    },
    {
        "name": "ucafCollectionIndicator",
        "baseName": "ucafCollectionIndicator",
        "type": "string"
    },
    {
        "name": "whiteListStatus",
        "baseName": "whiteListStatus",
        "type": "string"
    },
    {
        "name": "whiteListStatusSource",
        "baseName": "whiteListStatusSource",
        "type": "string"
    },
    {
        "name": "xid",
        "baseName": "xid",
        "type": "string"
    },
    {
        "name": "directoryServerTransactionId",
        "baseName": "directoryServerTransactionId",
        "type": "string"
    }
];
class RiskV1AuthenticationSetupsPost201Response {
    static getAttributeTypeMap() {
        return RiskV1AuthenticationSetupsPost201Response.attributeTypeMap;
    }
}
exports.RiskV1AuthenticationSetupsPost201Response = RiskV1AuthenticationSetupsPost201Response;
RiskV1AuthenticationSetupsPost201Response.discriminator = undefined;
RiskV1AuthenticationSetupsPost201Response.attributeTypeMap = [
    {
        "name": "links",
        "baseName": "_links",
        "type": "PtsV2IncrementalAuthorizationPatch201ResponseLinks"
    },
    {
        "name": "id",
        "baseName": "id",
        "type": "string"
    },
    {
        "name": "submitTimeUtc",
        "baseName": "submitTimeUtc",
        "type": "string"
    },
    {
        "name": "status",
        "baseName": "status",
        "type": "string"
    },
    {
        "name": "consumerAuthenticationInformation",
        "baseName": "consumerAuthenticationInformation",
        "type": "RiskV1AuthenticationSetupsPost201ResponseConsumerAuthenticationInformation"
    },
    {
        "name": "clientReferenceInformation",
        "baseName": "clientReferenceInformation",
        "type": "RiskV1DecisionsPost201ResponseClientReferenceInformation"
    },
    {
        "name": "errorInformation",
        "baseName": "errorInformation",
        "type": "RiskV1AuthenticationSetupsPost201ResponseErrorInformation"
    }
];
class RiskV1AuthenticationSetupsPost201ResponseConsumerAuthenticationInformation {
    static getAttributeTypeMap() {
        return RiskV1AuthenticationSetupsPost201ResponseConsumerAuthenticationInformation.attributeTypeMap;
    }
}
exports.RiskV1AuthenticationSetupsPost201ResponseConsumerAuthenticationInformation = RiskV1AuthenticationSetupsPost201ResponseConsumerAuthenticationInformation;
RiskV1AuthenticationSetupsPost201ResponseConsumerAuthenticationInformation.discriminator = undefined;
RiskV1AuthenticationSetupsPost201ResponseConsumerAuthenticationInformation.attributeTypeMap = [
    {
        "name": "accessToken",
        "baseName": "accessToken",
        "type": "string"
    },
    {
        "name": "referenceId",
        "baseName": "referenceId",
        "type": "string"
    },
    {
        "name": "deviceDataCollectionUrl",
        "baseName": "deviceDataCollectionUrl",
        "type": "string"
    }
];
class RiskV1AuthenticationSetupsPost201ResponseErrorInformation {
    static getAttributeTypeMap() {
        return RiskV1AuthenticationSetupsPost201ResponseErrorInformation.attributeTypeMap;
    }
}
exports.RiskV1AuthenticationSetupsPost201ResponseErrorInformation = RiskV1AuthenticationSetupsPost201ResponseErrorInformation;
RiskV1AuthenticationSetupsPost201ResponseErrorInformation.discriminator = undefined;
RiskV1AuthenticationSetupsPost201ResponseErrorInformation.attributeTypeMap = [
    {
        "name": "reason",
        "baseName": "reason",
        "type": "string"
    },
    {
        "name": "message",
        "baseName": "message",
        "type": "string"
    },
    {
        "name": "details",
        "baseName": "details",
        "type": "Array<PtsV2PaymentsPost201ResponseErrorInformationDetails>"
    }
];
class RiskV1AuthenticationsPost201Response {
    static getAttributeTypeMap() {
        return RiskV1AuthenticationsPost201Response.attributeTypeMap;
    }
}
exports.RiskV1AuthenticationsPost201Response = RiskV1AuthenticationsPost201Response;
RiskV1AuthenticationsPost201Response.discriminator = undefined;
RiskV1AuthenticationsPost201Response.attributeTypeMap = [
    {
        "name": "links",
        "baseName": "_links",
        "type": "PtsV2IncrementalAuthorizationPatch201ResponseLinks"
    },
    {
        "name": "id",
        "baseName": "id",
        "type": "string"
    },
    {
        "name": "submitTimeUtc",
        "baseName": "submitTimeUtc",
        "type": "string"
    },
    {
        "name": "status",
        "baseName": "status",
        "type": "string"
    },
    {
        "name": "message",
        "baseName": "message",
        "type": "string"
    },
    {
        "name": "clientReferenceInformation",
        "baseName": "clientReferenceInformation",
        "type": "RiskV1DecisionsPost201ResponseClientReferenceInformation"
    },
    {
        "name": "orderInformation",
        "baseName": "orderInformation",
        "type": "RiskV1DecisionsPost201ResponseOrderInformation"
    },
    {
        "name": "consumerAuthenticationInformation",
        "baseName": "consumerAuthenticationInformation",
        "type": "RiskV1DecisionsPost201ResponseConsumerAuthenticationInformation"
    },
    {
        "name": "errorInformation",
        "baseName": "errorInformation",
        "type": "RiskV1AuthenticationsPost201ResponseErrorInformation"
    }
];
class RiskV1AuthenticationsPost201ResponseErrorInformation {
    static getAttributeTypeMap() {
        return RiskV1AuthenticationsPost201ResponseErrorInformation.attributeTypeMap;
    }
}
exports.RiskV1AuthenticationsPost201ResponseErrorInformation = RiskV1AuthenticationsPost201ResponseErrorInformation;
RiskV1AuthenticationsPost201ResponseErrorInformation.discriminator = undefined;
RiskV1AuthenticationsPost201ResponseErrorInformation.attributeTypeMap = [
    {
        "name": "reason",
        "baseName": "reason",
        "type": "string"
    },
    {
        "name": "message",
        "baseName": "message",
        "type": "string"
    },
    {
        "name": "details",
        "baseName": "details",
        "type": "Array<PtsV2PaymentsPost201ResponseErrorInformationDetails>"
    }
];
class RiskV1AuthenticationsPost400Response {
    static getAttributeTypeMap() {
        return RiskV1AuthenticationsPost400Response.attributeTypeMap;
    }
}
exports.RiskV1AuthenticationsPost400Response = RiskV1AuthenticationsPost400Response;
RiskV1AuthenticationsPost400Response.discriminator = undefined;
RiskV1AuthenticationsPost400Response.attributeTypeMap = [
    {
        "name": "submitTimeUtc",
        "baseName": "submitTimeUtc",
        "type": "string"
    },
    {
        "name": "status",
        "baseName": "status",
        "type": "string"
    },
    {
        "name": "reason",
        "baseName": "reason",
        "type": "string"
    },
    {
        "name": "message",
        "baseName": "message",
        "type": "string"
    },
    {
        "name": "details",
        "baseName": "details",
        "type": "Array<PtsV2PaymentsPost201ResponseErrorInformationDetails>"
    }
];
class RiskV1AuthenticationsPost400Response1 {
    static getAttributeTypeMap() {
        return RiskV1AuthenticationsPost400Response1.attributeTypeMap;
    }
}
exports.RiskV1AuthenticationsPost400Response1 = RiskV1AuthenticationsPost400Response1;
RiskV1AuthenticationsPost400Response1.discriminator = undefined;
RiskV1AuthenticationsPost400Response1.attributeTypeMap = [
    {
        "name": "submitTimeUtc",
        "baseName": "submitTimeUtc",
        "type": "string"
    },
    {
        "name": "status",
        "baseName": "status",
        "type": "string"
    },
    {
        "name": "reason",
        "baseName": "reason",
        "type": "string"
    },
    {
        "name": "message",
        "baseName": "message",
        "type": "string"
    },
    {
        "name": "details",
        "baseName": "details",
        "type": "Array<PtsV2PaymentsPost201ResponseErrorInformationDetails>"
    }
];
class RiskV1DecisionsPost201Response {
    static getAttributeTypeMap() {
        return RiskV1DecisionsPost201Response.attributeTypeMap;
    }
}
exports.RiskV1DecisionsPost201Response = RiskV1DecisionsPost201Response;
RiskV1DecisionsPost201Response.discriminator = undefined;
RiskV1DecisionsPost201Response.attributeTypeMap = [
    {
        "name": "links",
        "baseName": "_links",
        "type": "PtsV2PaymentsPost201ResponseLinks"
    },
    {
        "name": "id",
        "baseName": "id",
        "type": "string"
    },
    {
        "name": "submitTimeUtc",
        "baseName": "submitTimeUtc",
        "type": "string"
    },
    {
        "name": "submitTimeLocal",
        "baseName": "submitTimeLocal",
        "type": "string"
    },
    {
        "name": "status",
        "baseName": "status",
        "type": "string"
    },
    {
        "name": "riskInformation",
        "baseName": "riskInformation",
        "type": "PtsV2PaymentsPost201ResponseRiskInformation"
    },
    {
        "name": "paymentInformation",
        "baseName": "paymentInformation",
        "type": "RiskV1DecisionsPost201ResponsePaymentInformation"
    },
    {
        "name": "clientReferenceInformation",
        "baseName": "clientReferenceInformation",
        "type": "RiskV1DecisionsPost201ResponseClientReferenceInformation"
    },
    {
        "name": "orderInformation",
        "baseName": "orderInformation",
        "type": "RiskV1DecisionsPost201ResponseOrderInformation"
    },
    {
        "name": "consumerAuthenticationInformation",
        "baseName": "consumerAuthenticationInformation",
        "type": "RiskV1DecisionsPost201ResponseConsumerAuthenticationInformation"
    },
    {
        "name": "watchlistScreeningInformation",
        "baseName": "watchlistScreeningInformation",
        "type": "PtsV2PaymentsPost201ResponseWatchlistScreeningInformation"
    },
    {
        "name": "errorInformation",
        "baseName": "errorInformation",
        "type": "RiskV1DecisionsPost201ResponseErrorInformation"
    }
];
class RiskV1DecisionsPost201ResponseClientReferenceInformation {
    static getAttributeTypeMap() {
        return RiskV1DecisionsPost201ResponseClientReferenceInformation.attributeTypeMap;
    }
}
exports.RiskV1DecisionsPost201ResponseClientReferenceInformation = RiskV1DecisionsPost201ResponseClientReferenceInformation;
RiskV1DecisionsPost201ResponseClientReferenceInformation.discriminator = undefined;
RiskV1DecisionsPost201ResponseClientReferenceInformation.attributeTypeMap = [
    {
        "name": "code",
        "baseName": "code",
        "type": "string"
    },
    {
        "name": "comments",
        "baseName": "comments",
        "type": "string"
    },
    {
        "name": "partner",
        "baseName": "partner",
        "type": "Riskv1decisionsClientReferenceInformationPartner"
    }
];
class RiskV1DecisionsPost201ResponseConsumerAuthenticationInformation {
    static getAttributeTypeMap() {
        return RiskV1DecisionsPost201ResponseConsumerAuthenticationInformation.attributeTypeMap;
    }
}
exports.RiskV1DecisionsPost201ResponseConsumerAuthenticationInformation = RiskV1DecisionsPost201ResponseConsumerAuthenticationInformation;
RiskV1DecisionsPost201ResponseConsumerAuthenticationInformation.discriminator = undefined;
RiskV1DecisionsPost201ResponseConsumerAuthenticationInformation.attributeTypeMap = [
    {
        "name": "accessToken",
        "baseName": "accessToken",
        "type": "string"
    },
    {
        "name": "acsRenderingType",
        "baseName": "acsRenderingType",
        "type": "string"
    },
    {
        "name": "acsTransactionId",
        "baseName": "acsTransactionId",
        "type": "string"
    },
    {
        "name": "acsUrl",
        "baseName": "acsUrl",
        "type": "string"
    },
    {
        "name": "authenticationPath",
        "baseName": "authenticationPath",
        "type": "string"
    },
    {
        "name": "authorizationPayload",
        "baseName": "authorizationPayload",
        "type": "string"
    },
    {
        "name": "authenticationType",
        "baseName": "authenticationType",
        "type": "string"
    },
    {
        "name": "authenticationTransactionId",
        "baseName": "authenticationTransactionId",
        "type": "string"
    },
    {
        "name": "authenticationTransactionContextId",
        "baseName": "authenticationTransactionContextId",
        "type": "string"
    },
    {
        "name": "validityPeriod",
        "baseName": "validityPeriod",
        "type": "number"
    },
    {
        "name": "cardholderMessage",
        "baseName": "cardholderMessage",
        "type": "string"
    },
    {
        "name": "cavv",
        "baseName": "cavv",
        "type": "string"
    },
    {
        "name": "cavvAlgorithm",
        "baseName": "cavvAlgorithm",
        "type": "string"
    },
    {
        "name": "challengeCancelCode",
        "baseName": "challengeCancelCode",
        "type": "string"
    },
    {
        "name": "challengeRequired",
        "baseName": "challengeRequired",
        "type": "string"
    },
    {
        "name": "decoupledAuthenticationIndicator",
        "baseName": "decoupledAuthenticationIndicator",
        "type": "string"
    },
    {
        "name": "directoryServerErrorCode",
        "baseName": "directoryServerErrorCode",
        "type": "string"
    },
    {
        "name": "directoryServerErrorDescription",
        "baseName": "directoryServerErrorDescription",
        "type": "string"
    },
    {
        "name": "ecommerceIndicator",
        "baseName": "ecommerceIndicator",
        "type": "string"
    },
    {
        "name": "eci",
        "baseName": "eci",
        "type": "string"
    },
    {
        "name": "eciRaw",
        "baseName": "eciRaw",
        "type": "string"
    },
    {
        "name": "effectiveAuthenticationType",
        "baseName": "effectiveAuthenticationType",
        "type": "string"
    },
    {
        "name": "exemptionDataRaw",
        "baseName": "exemptionDataRaw",
        "type": "string"
    },
    {
        "name": "ivr",
        "baseName": "ivr",
        "type": "PtsV2PaymentsPost201ResponseConsumerAuthenticationInformationIvr"
    },
    {
        "name": "networkScore",
        "baseName": "networkScore",
        "type": "string"
    },
    {
        "name": "pareq",
        "baseName": "pareq",
        "type": "string"
    },
    {
        "name": "paresStatus",
        "baseName": "paresStatus",
        "type": "string"
    },
    {
        "name": "proofXml",
        "baseName": "proofXml",
        "type": "string"
    },
    {
        "name": "proxyPan",
        "baseName": "proxyPan",
        "type": "string"
    },
    {
        "name": "sdkTransactionId",
        "baseName": "sdkTransactionId",
        "type": "string"
    },
    {
        "name": "signedParesStatusReason",
        "baseName": "signedParesStatusReason",
        "type": "string"
    },
    {
        "name": "specificationVersion",
        "baseName": "specificationVersion",
        "type": "string"
    },
    {
        "name": "stepUpUrl",
        "baseName": "stepUpUrl",
        "type": "string"
    },
    {
        "name": "threeDSServerTransactionId",
        "baseName": "threeDSServerTransactionId",
        "type": "string"
    },
    {
        "name": "ucafAuthenticationData",
        "baseName": "ucafAuthenticationData",
        "type": "string"
    },
    {
        "name": "ucafCollectionIndicator",
        "baseName": "ucafCollectionIndicator",
        "type": "string"
    },
    {
        "name": "veresEnrolled",
        "baseName": "veresEnrolled",
        "type": "string"
    },
    {
        "name": "whiteListStatusSource",
        "baseName": "whiteListStatusSource",
        "type": "string"
    },
    {
        "name": "xid",
        "baseName": "xid",
        "type": "string"
    },
    {
        "name": "directoryServerTransactionId",
        "baseName": "directoryServerTransactionId",
        "type": "string"
    },
    {
        "name": "acsOperatorID",
        "baseName": "acsOperatorID",
        "type": "string"
    },
    {
        "name": "acsReferenceNumber",
        "baseName": "acsReferenceNumber",
        "type": "string"
    },
    {
        "name": "idciDecision",
        "baseName": "idciDecision",
        "type": "string"
    },
    {
        "name": "idciReasonCode1",
        "baseName": "idciReasonCode1",
        "type": "string"
    },
    {
        "name": "idciReasonCode2",
        "baseName": "idciReasonCode2",
        "type": "string"
    },
    {
        "name": "idciScore",
        "baseName": "idciScore",
        "type": "number"
    }
];
class RiskV1DecisionsPost201ResponseErrorInformation {
    static getAttributeTypeMap() {
        return RiskV1DecisionsPost201ResponseErrorInformation.attributeTypeMap;
    }
}
exports.RiskV1DecisionsPost201ResponseErrorInformation = RiskV1DecisionsPost201ResponseErrorInformation;
RiskV1DecisionsPost201ResponseErrorInformation.discriminator = undefined;
RiskV1DecisionsPost201ResponseErrorInformation.attributeTypeMap = [
    {
        "name": "reason",
        "baseName": "reason",
        "type": "string"
    },
    {
        "name": "message",
        "baseName": "message",
        "type": "string"
    },
    {
        "name": "details",
        "baseName": "details",
        "type": "Array<PtsV2PaymentsPost201ResponseErrorInformationDetails>"
    }
];
class RiskV1DecisionsPost201ResponseOrderInformation {
    static getAttributeTypeMap() {
        return RiskV1DecisionsPost201ResponseOrderInformation.attributeTypeMap;
    }
}
exports.RiskV1DecisionsPost201ResponseOrderInformation = RiskV1DecisionsPost201ResponseOrderInformation;
RiskV1DecisionsPost201ResponseOrderInformation.discriminator = undefined;
RiskV1DecisionsPost201ResponseOrderInformation.attributeTypeMap = [
    {
        "name": "amountDetails",
        "baseName": "amountDetails",
        "type": "RiskV1DecisionsPost201ResponseOrderInformationAmountDetails"
    }
];
class RiskV1DecisionsPost201ResponseOrderInformationAmountDetails {
    static getAttributeTypeMap() {
        return RiskV1DecisionsPost201ResponseOrderInformationAmountDetails.attributeTypeMap;
    }
}
exports.RiskV1DecisionsPost201ResponseOrderInformationAmountDetails = RiskV1DecisionsPost201ResponseOrderInformationAmountDetails;
RiskV1DecisionsPost201ResponseOrderInformationAmountDetails.discriminator = undefined;
RiskV1DecisionsPost201ResponseOrderInformationAmountDetails.attributeTypeMap = [
    {
        "name": "currency",
        "baseName": "currency",
        "type": "string"
    }
];
/**
* Contains response information about the payment.
*/
class RiskV1DecisionsPost201ResponsePaymentInformation {
    static getAttributeTypeMap() {
        return RiskV1DecisionsPost201ResponsePaymentInformation.attributeTypeMap;
    }
}
exports.RiskV1DecisionsPost201ResponsePaymentInformation = RiskV1DecisionsPost201ResponsePaymentInformation;
RiskV1DecisionsPost201ResponsePaymentInformation.discriminator = undefined;
RiskV1DecisionsPost201ResponsePaymentInformation.attributeTypeMap = [
    {
        "name": "binCountry",
        "baseName": "binCountry",
        "type": "string"
    },
    {
        "name": "accountType",
        "baseName": "accountType",
        "type": "string"
    },
    {
        "name": "issuer",
        "baseName": "issuer",
        "type": "string"
    },
    {
        "name": "scheme",
        "baseName": "scheme",
        "type": "string"
    },
    {
        "name": "bin",
        "baseName": "bin",
        "type": "string"
    }
];
class RiskV1DecisionsPost400Response {
    static getAttributeTypeMap() {
        return RiskV1DecisionsPost400Response.attributeTypeMap;
    }
}
exports.RiskV1DecisionsPost400Response = RiskV1DecisionsPost400Response;
RiskV1DecisionsPost400Response.discriminator = undefined;
RiskV1DecisionsPost400Response.attributeTypeMap = [
    {
        "name": "submitTimeUtc",
        "baseName": "submitTimeUtc",
        "type": "string"
    },
    {
        "name": "status",
        "baseName": "status",
        "type": "string"
    },
    {
        "name": "reason",
        "baseName": "reason",
        "type": "string"
    },
    {
        "name": "message",
        "baseName": "message",
        "type": "string"
    },
    {
        "name": "details",
        "baseName": "details",
        "type": "Array<PtsV2PaymentsPost201ResponseErrorInformationDetails>"
    }
];
class RiskV1DecisionsPost400Response1 {
    static getAttributeTypeMap() {
        return RiskV1DecisionsPost400Response1.attributeTypeMap;
    }
}
exports.RiskV1DecisionsPost400Response1 = RiskV1DecisionsPost400Response1;
RiskV1DecisionsPost400Response1.discriminator = undefined;
RiskV1DecisionsPost400Response1.attributeTypeMap = [
    {
        "name": "submitTimeUtc",
        "baseName": "submitTimeUtc",
        "type": "string"
    },
    {
        "name": "status",
        "baseName": "status",
        "type": "string"
    },
    {
        "name": "reason",
        "baseName": "reason",
        "type": "string"
    },
    {
        "name": "message",
        "baseName": "message",
        "type": "string"
    },
    {
        "name": "details",
        "baseName": "details",
        "type": "Array<PtsV2PaymentsPost201ResponseErrorInformationDetails>"
    }
];
class RiskV1ExportComplianceInquiriesPost201Response {
    static getAttributeTypeMap() {
        return RiskV1ExportComplianceInquiriesPost201Response.attributeTypeMap;
    }
}
exports.RiskV1ExportComplianceInquiriesPost201Response = RiskV1ExportComplianceInquiriesPost201Response;
RiskV1ExportComplianceInquiriesPost201Response.discriminator = undefined;
RiskV1ExportComplianceInquiriesPost201Response.attributeTypeMap = [
    {
        "name": "links",
        "baseName": "_links",
        "type": "PtsV2IncrementalAuthorizationPatch201ResponseLinks"
    },
    {
        "name": "id",
        "baseName": "id",
        "type": "string"
    },
    {
        "name": "submitTimeUtc",
        "baseName": "submitTimeUtc",
        "type": "string"
    },
    {
        "name": "submitTimeLocal",
        "baseName": "submitTimeLocal",
        "type": "string"
    },
    {
        "name": "status",
        "baseName": "status",
        "type": "string"
    },
    {
        "name": "message",
        "baseName": "message",
        "type": "string"
    },
    {
        "name": "clientReferenceInformation",
        "baseName": "clientReferenceInformation",
        "type": "RiskV1DecisionsPost201ResponseClientReferenceInformation"
    },
    {
        "name": "exportComplianceInformation",
        "baseName": "exportComplianceInformation",
        "type": "PtsV2PaymentsPost201ResponseWatchlistScreeningInformation"
    },
    {
        "name": "errorInformation",
        "baseName": "errorInformation",
        "type": "RiskV1ExportComplianceInquiriesPost201ResponseErrorInformation"
    }
];
class RiskV1ExportComplianceInquiriesPost201ResponseErrorInformation {
    static getAttributeTypeMap() {
        return RiskV1ExportComplianceInquiriesPost201ResponseErrorInformation.attributeTypeMap;
    }
}
exports.RiskV1ExportComplianceInquiriesPost201ResponseErrorInformation = RiskV1ExportComplianceInquiriesPost201ResponseErrorInformation;
RiskV1ExportComplianceInquiriesPost201ResponseErrorInformation.discriminator = undefined;
RiskV1ExportComplianceInquiriesPost201ResponseErrorInformation.attributeTypeMap = [
    {
        "name": "reason",
        "baseName": "reason",
        "type": "string"
    },
    {
        "name": "message",
        "baseName": "message",
        "type": "string"
    },
    {
        "name": "details",
        "baseName": "details",
        "type": "Array<PtsV2PaymentsPost201ResponseErrorInformationDetails>"
    }
];
class RiskV1UpdatePost201Response {
    static getAttributeTypeMap() {
        return RiskV1UpdatePost201Response.attributeTypeMap;
    }
}
exports.RiskV1UpdatePost201Response = RiskV1UpdatePost201Response;
RiskV1UpdatePost201Response.discriminator = undefined;
RiskV1UpdatePost201Response.attributeTypeMap = [
    {
        "name": "links",
        "baseName": "_links",
        "type": "PtsV2IncrementalAuthorizationPatch201ResponseLinks"
    },
    {
        "name": "clientReferenceInformaton",
        "baseName": "clientReferenceInformaton",
        "type": "RiskV1DecisionsPost201ResponseClientReferenceInformation"
    },
    {
        "name": "id",
        "baseName": "id",
        "type": "string"
    },
    {
        "name": "status",
        "baseName": "status",
        "type": "string"
    },
    {
        "name": "submitTimeUtc",
        "baseName": "submitTimeUtc",
        "type": "string"
    }
];
class Riskv1addressverificationsBuyerInformation {
    static getAttributeTypeMap() {
        return Riskv1addressverificationsBuyerInformation.attributeTypeMap;
    }
}
exports.Riskv1addressverificationsBuyerInformation = Riskv1addressverificationsBuyerInformation;
Riskv1addressverificationsBuyerInformation.discriminator = undefined;
Riskv1addressverificationsBuyerInformation.attributeTypeMap = [
    {
        "name": "merchantCustomerId",
        "baseName": "merchantCustomerId",
        "type": "string"
    }
];
class Riskv1addressverificationsOrderInformation {
    static getAttributeTypeMap() {
        return Riskv1addressverificationsOrderInformation.attributeTypeMap;
    }
}
exports.Riskv1addressverificationsOrderInformation = Riskv1addressverificationsOrderInformation;
Riskv1addressverificationsOrderInformation.discriminator = undefined;
Riskv1addressverificationsOrderInformation.attributeTypeMap = [
    {
        "name": "billTo",
        "baseName": "billTo",
        "type": "Riskv1addressverificationsOrderInformationBillTo"
    },
    {
        "name": "shipTo",
        "baseName": "shipTo",
        "type": "Riskv1addressverificationsOrderInformationShipTo"
    },
    {
        "name": "lineItems",
        "baseName": "lineItems",
        "type": "Array<Riskv1addressverificationsOrderInformationLineItems>"
    }
];
class Riskv1addressverificationsOrderInformationBillTo {
    static getAttributeTypeMap() {
        return Riskv1addressverificationsOrderInformationBillTo.attributeTypeMap;
    }
}
exports.Riskv1addressverificationsOrderInformationBillTo = Riskv1addressverificationsOrderInformationBillTo;
Riskv1addressverificationsOrderInformationBillTo.discriminator = undefined;
Riskv1addressverificationsOrderInformationBillTo.attributeTypeMap = [
    {
        "name": "address1",
        "baseName": "address1",
        "type": "string"
    },
    {
        "name": "address2",
        "baseName": "address2",
        "type": "string"
    },
    {
        "name": "address3",
        "baseName": "address3",
        "type": "string"
    },
    {
        "name": "address4",
        "baseName": "address4",
        "type": "string"
    },
    {
        "name": "administrativeArea",
        "baseName": "administrativeArea",
        "type": "string"
    },
    {
        "name": "country",
        "baseName": "country",
        "type": "string"
    },
    {
        "name": "locality",
        "baseName": "locality",
        "type": "string"
    },
    {
        "name": "postalCode",
        "baseName": "postalCode",
        "type": "string"
    }
];
class Riskv1addressverificationsOrderInformationLineItems {
    static getAttributeTypeMap() {
        return Riskv1addressverificationsOrderInformationLineItems.attributeTypeMap;
    }
}
exports.Riskv1addressverificationsOrderInformationLineItems = Riskv1addressverificationsOrderInformationLineItems;
Riskv1addressverificationsOrderInformationLineItems.discriminator = undefined;
Riskv1addressverificationsOrderInformationLineItems.attributeTypeMap = [
    {
        "name": "unitPrice",
        "baseName": "unitPrice",
        "type": "string"
    },
    {
        "name": "quantity",
        "baseName": "quantity",
        "type": "number"
    },
    {
        "name": "productSKU",
        "baseName": "productSKU",
        "type": "string"
    },
    {
        "name": "productRisk",
        "baseName": "productRisk",
        "type": "string"
    },
    {
        "name": "productName",
        "baseName": "productName",
        "type": "string"
    },
    {
        "name": "productCode",
        "baseName": "productCode",
        "type": "string"
    }
];
class Riskv1addressverificationsOrderInformationShipTo {
    static getAttributeTypeMap() {
        return Riskv1addressverificationsOrderInformationShipTo.attributeTypeMap;
    }
}
exports.Riskv1addressverificationsOrderInformationShipTo = Riskv1addressverificationsOrderInformationShipTo;
Riskv1addressverificationsOrderInformationShipTo.discriminator = undefined;
Riskv1addressverificationsOrderInformationShipTo.attributeTypeMap = [
    {
        "name": "address1",
        "baseName": "address1",
        "type": "string"
    },
    {
        "name": "address2",
        "baseName": "address2",
        "type": "string"
    },
    {
        "name": "address3",
        "baseName": "address3",
        "type": "string"
    },
    {
        "name": "address4",
        "baseName": "address4",
        "type": "string"
    },
    {
        "name": "administrativeArea",
        "baseName": "administrativeArea",
        "type": "string"
    },
    {
        "name": "country",
        "baseName": "country",
        "type": "string"
    },
    {
        "name": "locality",
        "baseName": "locality",
        "type": "string"
    },
    {
        "name": "postalCode",
        "baseName": "postalCode",
        "type": "string"
    }
];
class Riskv1authenticationresultsConsumerAuthenticationInformation {
    static getAttributeTypeMap() {
        return Riskv1authenticationresultsConsumerAuthenticationInformation.attributeTypeMap;
    }
}
exports.Riskv1authenticationresultsConsumerAuthenticationInformation = Riskv1authenticationresultsConsumerAuthenticationInformation;
Riskv1authenticationresultsConsumerAuthenticationInformation.discriminator = undefined;
Riskv1authenticationresultsConsumerAuthenticationInformation.attributeTypeMap = [
    {
        "name": "authenticationTransactionId",
        "baseName": "authenticationTransactionId",
        "type": "string"
    },
    {
        "name": "authenticationTransactionContext",
        "baseName": "authenticationTransactionContext",
        "type": "string"
    },
    {
        "name": "otpToken",
        "baseName": "otpToken",
        "type": "string"
    },
    {
        "name": "responseAccessToken",
        "baseName": "responseAccessToken",
        "type": "string"
    },
    {
        "name": "signedParesStatusReason",
        "baseName": "signedParesStatusReason",
        "type": "string"
    },
    {
        "name": "signedPares",
        "baseName": "signedPares",
        "type": "string"
    },
    {
        "name": "whiteListStatus",
        "baseName": "whiteListStatus",
        "type": "string"
    },
    {
        "name": "credentialEncrypted",
        "baseName": "credentialEncrypted",
        "type": "string"
    }
];
class Riskv1authenticationresultsDeviceInformation {
    static getAttributeTypeMap() {
        return Riskv1authenticationresultsDeviceInformation.attributeTypeMap;
    }
}
exports.Riskv1authenticationresultsDeviceInformation = Riskv1authenticationresultsDeviceInformation;
Riskv1authenticationresultsDeviceInformation.discriminator = undefined;
Riskv1authenticationresultsDeviceInformation.attributeTypeMap = [
    {
        "name": "ipAddress",
        "baseName": "ipAddress",
        "type": "string"
    }
];
class Riskv1authenticationresultsOrderInformation {
    static getAttributeTypeMap() {
        return Riskv1authenticationresultsOrderInformation.attributeTypeMap;
    }
}
exports.Riskv1authenticationresultsOrderInformation = Riskv1authenticationresultsOrderInformation;
Riskv1authenticationresultsOrderInformation.discriminator = undefined;
Riskv1authenticationresultsOrderInformation.attributeTypeMap = [
    {
        "name": "amountDetails",
        "baseName": "amountDetails",
        "type": "Riskv1authenticationresultsOrderInformationAmountDetails"
    }
];
/**
* Contains `currency` and `totalAmount` for this order.
*/
class Riskv1authenticationresultsOrderInformationAmountDetails {
    static getAttributeTypeMap() {
        return Riskv1authenticationresultsOrderInformationAmountDetails.attributeTypeMap;
    }
}
exports.Riskv1authenticationresultsOrderInformationAmountDetails = Riskv1authenticationresultsOrderInformationAmountDetails;
Riskv1authenticationresultsOrderInformationAmountDetails.discriminator = undefined;
Riskv1authenticationresultsOrderInformationAmountDetails.attributeTypeMap = [
    {
        "name": "currency",
        "baseName": "currency",
        "type": "string"
    },
    {
        "name": "totalAmount",
        "baseName": "totalAmount",
        "type": "string"
    }
];
class Riskv1authenticationresultsPaymentInformation {
    static getAttributeTypeMap() {
        return Riskv1authenticationresultsPaymentInformation.attributeTypeMap;
    }
}
exports.Riskv1authenticationresultsPaymentInformation = Riskv1authenticationresultsPaymentInformation;
Riskv1authenticationresultsPaymentInformation.discriminator = undefined;
Riskv1authenticationresultsPaymentInformation.attributeTypeMap = [
    {
        "name": "card",
        "baseName": "card",
        "type": "Riskv1authenticationresultsPaymentInformationCard"
    },
    {
        "name": "tokenizedCard",
        "baseName": "tokenizedCard",
        "type": "Riskv1authenticationresultsPaymentInformationTokenizedCard"
    },
    {
        "name": "fluidData",
        "baseName": "fluidData",
        "type": "Riskv1authenticationresultsPaymentInformationFluidData"
    },
    {
        "name": "customer",
        "baseName": "customer",
        "type": "Riskv1authenticationsPaymentInformationCustomer"
    }
];
class Riskv1authenticationresultsPaymentInformationCard {
    static getAttributeTypeMap() {
        return Riskv1authenticationresultsPaymentInformationCard.attributeTypeMap;
    }
}
exports.Riskv1authenticationresultsPaymentInformationCard = Riskv1authenticationresultsPaymentInformationCard;
Riskv1authenticationresultsPaymentInformationCard.discriminator = undefined;
Riskv1authenticationresultsPaymentInformationCard.attributeTypeMap = [
    {
        "name": "type",
        "baseName": "type",
        "type": "string"
    },
    {
        "name": "expirationMonth",
        "baseName": "expirationMonth",
        "type": "string"
    },
    {
        "name": "expirationYear",
        "baseName": "expirationYear",
        "type": "string"
    },
    {
        "name": "number",
        "baseName": "number",
        "type": "string"
    }
];
class Riskv1authenticationresultsPaymentInformationFluidData {
    static getAttributeTypeMap() {
        return Riskv1authenticationresultsPaymentInformationFluidData.attributeTypeMap;
    }
}
exports.Riskv1authenticationresultsPaymentInformationFluidData = Riskv1authenticationresultsPaymentInformationFluidData;
Riskv1authenticationresultsPaymentInformationFluidData.discriminator = undefined;
Riskv1authenticationresultsPaymentInformationFluidData.attributeTypeMap = [
    {
        "name": "value",
        "baseName": "value",
        "type": "string"
    },
    {
        "name": "keySerialNumber",
        "baseName": "keySerialNumber",
        "type": "string"
    },
    {
        "name": "descriptor",
        "baseName": "descriptor",
        "type": "string"
    },
    {
        "name": "encoding",
        "baseName": "encoding",
        "type": "string"
    }
];
class Riskv1authenticationresultsPaymentInformationTokenizedCard {
    static getAttributeTypeMap() {
        return Riskv1authenticationresultsPaymentInformationTokenizedCard.attributeTypeMap;
    }
}
exports.Riskv1authenticationresultsPaymentInformationTokenizedCard = Riskv1authenticationresultsPaymentInformationTokenizedCard;
Riskv1authenticationresultsPaymentInformationTokenizedCard.discriminator = undefined;
Riskv1authenticationresultsPaymentInformationTokenizedCard.attributeTypeMap = [
    {
        "name": "transactionType",
        "baseName": "transactionType",
        "type": "string"
    },
    {
        "name": "type",
        "baseName": "type",
        "type": "string"
    },
    {
        "name": "expirationMonth",
        "baseName": "expirationMonth",
        "type": "string"
    },
    {
        "name": "expirationYear",
        "baseName": "expirationYear",
        "type": "string"
    },
    {
        "name": "number",
        "baseName": "number",
        "type": "string"
    }
];
class Riskv1authenticationsBuyerInformation {
    static getAttributeTypeMap() {
        return Riskv1authenticationsBuyerInformation.attributeTypeMap;
    }
}
exports.Riskv1authenticationsBuyerInformation = Riskv1authenticationsBuyerInformation;
Riskv1authenticationsBuyerInformation.discriminator = undefined;
Riskv1authenticationsBuyerInformation.attributeTypeMap = [
    {
        "name": "merchantCustomerId",
        "baseName": "merchantCustomerId",
        "type": "string"
    },
    {
        "name": "personalIdentification",
        "baseName": "personalIdentification",
        "type": "Array<Ptsv2paymentsBuyerInformationPersonalIdentification>"
    },
    {
        "name": "mobilePhone",
        "baseName": "mobilePhone",
        "type": "number"
    },
    {
        "name": "workPhone",
        "baseName": "workPhone",
        "type": "number"
    }
];
class Riskv1authenticationsDeviceInformation {
    static getAttributeTypeMap() {
        return Riskv1authenticationsDeviceInformation.attributeTypeMap;
    }
}
exports.Riskv1authenticationsDeviceInformation = Riskv1authenticationsDeviceInformation;
Riskv1authenticationsDeviceInformation.discriminator = undefined;
Riskv1authenticationsDeviceInformation.attributeTypeMap = [
    {
        "name": "ipAddress",
        "baseName": "ipAddress",
        "type": "string"
    },
    {
        "name": "rawData",
        "baseName": "rawData",
        "type": "Array<Ptsv2paymentsDeviceInformationRawData>"
    },
    {
        "name": "httpAcceptBrowserValue",
        "baseName": "httpAcceptBrowserValue",
        "type": "string"
    },
    {
        "name": "httpAcceptContent",
        "baseName": "httpAcceptContent",
        "type": "string"
    },
    {
        "name": "httpBrowserLanguage",
        "baseName": "httpBrowserLanguage",
        "type": "string"
    },
    {
        "name": "httpBrowserJavaEnabled",
        "baseName": "httpBrowserJavaEnabled",
        "type": "boolean"
    },
    {
        "name": "httpBrowserJavaScriptEnabled",
        "baseName": "httpBrowserJavaScriptEnabled",
        "type": "boolean"
    },
    {
        "name": "httpBrowserColorDepth",
        "baseName": "httpBrowserColorDepth",
        "type": "string"
    },
    {
        "name": "httpBrowserScreenHeight",
        "baseName": "httpBrowserScreenHeight",
        "type": "string"
    },
    {
        "name": "httpBrowserScreenWidth",
        "baseName": "httpBrowserScreenWidth",
        "type": "string"
    },
    {
        "name": "httpBrowserTimeDifference",
        "baseName": "httpBrowserTimeDifference",
        "type": "string"
    },
    {
        "name": "userAgentBrowserValue",
        "baseName": "userAgentBrowserValue",
        "type": "string"
    }
];
class Riskv1authenticationsOrderInformation {
    static getAttributeTypeMap() {
        return Riskv1authenticationsOrderInformation.attributeTypeMap;
    }
}
exports.Riskv1authenticationsOrderInformation = Riskv1authenticationsOrderInformation;
Riskv1authenticationsOrderInformation.discriminator = undefined;
Riskv1authenticationsOrderInformation.attributeTypeMap = [
    {
        "name": "amountDetails",
        "baseName": "amountDetails",
        "type": "Riskv1authenticationsOrderInformationAmountDetails"
    },
    {
        "name": "preOrder",
        "baseName": "preOrder",
        "type": "string"
    },
    {
        "name": "preOrderDate",
        "baseName": "preOrderDate",
        "type": "string"
    },
    {
        "name": "reordered",
        "baseName": "reordered",
        "type": "boolean"
    },
    {
        "name": "shipTo",
        "baseName": "shipTo",
        "type": "Riskv1decisionsOrderInformationShipTo"
    },
    {
        "name": "lineItems",
        "baseName": "lineItems",
        "type": "Array<Riskv1authenticationsOrderInformationLineItems>"
    },
    {
        "name": "billTo",
        "baseName": "billTo",
        "type": "Riskv1authenticationsOrderInformationBillTo"
    },
    {
        "name": "totalOffersCount",
        "baseName": "totalOffersCount",
        "type": "string"
    }
];
/**
* Contains `currency` and `totalAmount` for this order.
*/
class Riskv1authenticationsOrderInformationAmountDetails {
    static getAttributeTypeMap() {
        return Riskv1authenticationsOrderInformationAmountDetails.attributeTypeMap;
    }
}
exports.Riskv1authenticationsOrderInformationAmountDetails = Riskv1authenticationsOrderInformationAmountDetails;
Riskv1authenticationsOrderInformationAmountDetails.discriminator = undefined;
Riskv1authenticationsOrderInformationAmountDetails.attributeTypeMap = [
    {
        "name": "currency",
        "baseName": "currency",
        "type": "string"
    },
    {
        "name": "totalAmount",
        "baseName": "totalAmount",
        "type": "string"
    }
];
class Riskv1authenticationsOrderInformationBillTo {
    static getAttributeTypeMap() {
        return Riskv1authenticationsOrderInformationBillTo.attributeTypeMap;
    }
}
exports.Riskv1authenticationsOrderInformationBillTo = Riskv1authenticationsOrderInformationBillTo;
Riskv1authenticationsOrderInformationBillTo.discriminator = undefined;
Riskv1authenticationsOrderInformationBillTo.attributeTypeMap = [
    {
        "name": "address1",
        "baseName": "address1",
        "type": "string"
    },
    {
        "name": "address2",
        "baseName": "address2",
        "type": "string"
    },
    {
        "name": "address3",
        "baseName": "address3",
        "type": "string"
    },
    {
        "name": "administrativeArea",
        "baseName": "administrativeArea",
        "type": "string"
    },
    {
        "name": "country",
        "baseName": "country",
        "type": "string"
    },
    {
        "name": "locality",
        "baseName": "locality",
        "type": "string"
    },
    {
        "name": "firstName",
        "baseName": "firstName",
        "type": "string"
    },
    {
        "name": "lastName",
        "baseName": "lastName",
        "type": "string"
    },
    {
        "name": "phoneNumber",
        "baseName": "phoneNumber",
        "type": "string"
    },
    {
        "name": "email",
        "baseName": "email",
        "type": "string"
    },
    {
        "name": "postalCode",
        "baseName": "postalCode",
        "type": "string"
    }
];
class Riskv1authenticationsOrderInformationLineItems {
    static getAttributeTypeMap() {
        return Riskv1authenticationsOrderInformationLineItems.attributeTypeMap;
    }
}
exports.Riskv1authenticationsOrderInformationLineItems = Riskv1authenticationsOrderInformationLineItems;
Riskv1authenticationsOrderInformationLineItems.discriminator = undefined;
Riskv1authenticationsOrderInformationLineItems.attributeTypeMap = [
    {
        "name": "totalAmount",
        "baseName": "totalAmount",
        "type": "string"
    },
    {
        "name": "unitPrice",
        "baseName": "unitPrice",
        "type": "string"
    },
    {
        "name": "quantity",
        "baseName": "quantity",
        "type": "number"
    },
    {
        "name": "giftCardCurrency",
        "baseName": "giftCardCurrency",
        "type": "number"
    },
    {
        "name": "productSKU",
        "baseName": "productSKU",
        "type": "string"
    },
    {
        "name": "productDescription",
        "baseName": "productDescription",
        "type": "string"
    },
    {
        "name": "productName",
        "baseName": "productName",
        "type": "string"
    },
    {
        "name": "passenger",
        "baseName": "passenger",
        "type": "Ptsv2paymentsOrderInformationPassenger"
    },
    {
        "name": "shippingDestinationTypes",
        "baseName": "shippingDestinationTypes",
        "type": "string"
    },
    {
        "name": "taxAmount",
        "baseName": "taxAmount",
        "type": "string"
    },
    {
        "name": "shippingAddress1",
        "baseName": "shippingAddress1",
        "type": "string"
    },
    {
        "name": "shippingAddress2",
        "baseName": "shippingAddress2",
        "type": "string"
    },
    {
        "name": "shippingCity",
        "baseName": "shippingCity",
        "type": "string"
    },
    {
        "name": "shippingCountryCode",
        "baseName": "shippingCountryCode",
        "type": "string"
    },
    {
        "name": "shippingFirstName",
        "baseName": "shippingFirstName",
        "type": "string"
    },
    {
        "name": "shippingLastName",
        "baseName": "shippingLastName",
        "type": "string"
    },
    {
        "name": "shippingMiddleName",
        "baseName": "shippingMiddleName",
        "type": "string"
    },
    {
        "name": "shippingPhone",
        "baseName": "shippingPhone",
        "type": "number"
    },
    {
        "name": "shippingPostalCode",
        "baseName": "shippingPostalCode",
        "type": "number"
    },
    {
        "name": "shippingState",
        "baseName": "shippingState",
        "type": "string"
    }
];
class Riskv1authenticationsPaymentInformation {
    static getAttributeTypeMap() {
        return Riskv1authenticationsPaymentInformation.attributeTypeMap;
    }
}
exports.Riskv1authenticationsPaymentInformation = Riskv1authenticationsPaymentInformation;
Riskv1authenticationsPaymentInformation.discriminator = undefined;
Riskv1authenticationsPaymentInformation.attributeTypeMap = [
    {
        "name": "card",
        "baseName": "card",
        "type": "Riskv1authenticationsetupsPaymentInformationCard"
    },
    {
        "name": "tokenizedCard",
        "baseName": "tokenizedCard",
        "type": "Riskv1authenticationsPaymentInformationTokenizedCard"
    },
    {
        "name": "fluidData",
        "baseName": "fluidData",
        "type": "Riskv1authenticationsetupsPaymentInformationFluidData"
    },
    {
        "name": "customer",
        "baseName": "customer",
        "type": "Riskv1authenticationsPaymentInformationCustomer"
    }
];
class Riskv1authenticationsPaymentInformationCustomer {
    static getAttributeTypeMap() {
        return Riskv1authenticationsPaymentInformationCustomer.attributeTypeMap;
    }
}
exports.Riskv1authenticationsPaymentInformationCustomer = Riskv1authenticationsPaymentInformationCustomer;
Riskv1authenticationsPaymentInformationCustomer.discriminator = undefined;
Riskv1authenticationsPaymentInformationCustomer.attributeTypeMap = [
    {
        "name": "customerId",
        "baseName": "customerId",
        "type": "string"
    },
    {
        "name": "id",
        "baseName": "id",
        "type": "string"
    }
];
class Riskv1authenticationsPaymentInformationTokenizedCard {
    static getAttributeTypeMap() {
        return Riskv1authenticationsPaymentInformationTokenizedCard.attributeTypeMap;
    }
}
exports.Riskv1authenticationsPaymentInformationTokenizedCard = Riskv1authenticationsPaymentInformationTokenizedCard;
Riskv1authenticationsPaymentInformationTokenizedCard.discriminator = undefined;
Riskv1authenticationsPaymentInformationTokenizedCard.attributeTypeMap = [
    {
        "name": "transactionType",
        "baseName": "transactionType",
        "type": "string"
    },
    {
        "name": "type",
        "baseName": "type",
        "type": "string"
    },
    {
        "name": "expirationMonth",
        "baseName": "expirationMonth",
        "type": "string"
    },
    {
        "name": "expirationYear",
        "baseName": "expirationYear",
        "type": "string"
    },
    {
        "name": "cryptogram",
        "baseName": "cryptogram",
        "type": "string"
    },
    {
        "name": "securityCode",
        "baseName": "securityCode",
        "type": "string"
    },
    {
        "name": "number",
        "baseName": "number",
        "type": "string"
    }
];
class Riskv1authenticationsRiskInformation {
    static getAttributeTypeMap() {
        return Riskv1authenticationsRiskInformation.attributeTypeMap;
    }
}
exports.Riskv1authenticationsRiskInformation = Riskv1authenticationsRiskInformation;
Riskv1authenticationsRiskInformation.discriminator = undefined;
Riskv1authenticationsRiskInformation.attributeTypeMap = [
    {
        "name": "buyerHistory",
        "baseName": "buyerHistory",
        "type": "Ptsv2paymentsRiskInformationBuyerHistory"
    }
];
class Riskv1authenticationsTravelInformation {
    static getAttributeTypeMap() {
        return Riskv1authenticationsTravelInformation.attributeTypeMap;
    }
}
exports.Riskv1authenticationsTravelInformation = Riskv1authenticationsTravelInformation;
Riskv1authenticationsTravelInformation.discriminator = undefined;
Riskv1authenticationsTravelInformation.attributeTypeMap = [
    {
        "name": "legs",
        "baseName": "legs",
        "type": "Array<Riskv1decisionsTravelInformationLegs>"
    },
    {
        "name": "numberOfPassengers",
        "baseName": "numberOfPassengers",
        "type": "number"
    },
    {
        "name": "passengers",
        "baseName": "passengers",
        "type": "Array<Riskv1decisionsTravelInformationPassengers>"
    }
];
class Riskv1authenticationsetupsClientReferenceInformation {
    static getAttributeTypeMap() {
        return Riskv1authenticationsetupsClientReferenceInformation.attributeTypeMap;
    }
}
exports.Riskv1authenticationsetupsClientReferenceInformation = Riskv1authenticationsetupsClientReferenceInformation;
Riskv1authenticationsetupsClientReferenceInformation.discriminator = undefined;
Riskv1authenticationsetupsClientReferenceInformation.attributeTypeMap = [
    {
        "name": "code",
        "baseName": "code",
        "type": "string"
    },
    {
        "name": "pausedRequestId",
        "baseName": "pausedRequestId",
        "type": "string"
    },
    {
        "name": "comments",
        "baseName": "comments",
        "type": "string"
    },
    {
        "name": "partner",
        "baseName": "partner",
        "type": "Riskv1decisionsClientReferenceInformationPartner"
    }
];
class Riskv1authenticationsetupsPaymentInformation {
    static getAttributeTypeMap() {
        return Riskv1authenticationsetupsPaymentInformation.attributeTypeMap;
    }
}
exports.Riskv1authenticationsetupsPaymentInformation = Riskv1authenticationsetupsPaymentInformation;
Riskv1authenticationsetupsPaymentInformation.discriminator = undefined;
Riskv1authenticationsetupsPaymentInformation.attributeTypeMap = [
    {
        "name": "card",
        "baseName": "card",
        "type": "Riskv1authenticationsetupsPaymentInformationCard"
    },
    {
        "name": "tokenizedCard",
        "baseName": "tokenizedCard",
        "type": "Riskv1authenticationsetupsPaymentInformationTokenizedCard"
    },
    {
        "name": "fluidData",
        "baseName": "fluidData",
        "type": "Riskv1authenticationsetupsPaymentInformationFluidData"
    },
    {
        "name": "customer",
        "baseName": "customer",
        "type": "Riskv1authenticationsetupsPaymentInformationCustomer"
    }
];
class Riskv1authenticationsetupsPaymentInformationCard {
    static getAttributeTypeMap() {
        return Riskv1authenticationsetupsPaymentInformationCard.attributeTypeMap;
    }
}
exports.Riskv1authenticationsetupsPaymentInformationCard = Riskv1authenticationsetupsPaymentInformationCard;
Riskv1authenticationsetupsPaymentInformationCard.discriminator = undefined;
Riskv1authenticationsetupsPaymentInformationCard.attributeTypeMap = [
    {
        "name": "type",
        "baseName": "type",
        "type": "string"
    },
    {
        "name": "expirationMonth",
        "baseName": "expirationMonth",
        "type": "string"
    },
    {
        "name": "expirationYear",
        "baseName": "expirationYear",
        "type": "string"
    },
    {
        "name": "number",
        "baseName": "number",
        "type": "string"
    }
];
class Riskv1authenticationsetupsPaymentInformationCustomer {
    static getAttributeTypeMap() {
        return Riskv1authenticationsetupsPaymentInformationCustomer.attributeTypeMap;
    }
}
exports.Riskv1authenticationsetupsPaymentInformationCustomer = Riskv1authenticationsetupsPaymentInformationCustomer;
Riskv1authenticationsetupsPaymentInformationCustomer.discriminator = undefined;
Riskv1authenticationsetupsPaymentInformationCustomer.attributeTypeMap = [
    {
        "name": "customerId",
        "baseName": "customerId",
        "type": "string"
    }
];
class Riskv1authenticationsetupsPaymentInformationFluidData {
    static getAttributeTypeMap() {
        return Riskv1authenticationsetupsPaymentInformationFluidData.attributeTypeMap;
    }
}
exports.Riskv1authenticationsetupsPaymentInformationFluidData = Riskv1authenticationsetupsPaymentInformationFluidData;
Riskv1authenticationsetupsPaymentInformationFluidData.discriminator = undefined;
Riskv1authenticationsetupsPaymentInformationFluidData.attributeTypeMap = [
    {
        "name": "value",
        "baseName": "value",
        "type": "string"
    },
    {
        "name": "keySerialNumber",
        "baseName": "keySerialNumber",
        "type": "string"
    },
    {
        "name": "descriptor",
        "baseName": "descriptor",
        "type": "string"
    },
    {
        "name": "encoding",
        "baseName": "encoding",
        "type": "string"
    }
];
class Riskv1authenticationsetupsPaymentInformationTokenizedCard {
    static getAttributeTypeMap() {
        return Riskv1authenticationsetupsPaymentInformationTokenizedCard.attributeTypeMap;
    }
}
exports.Riskv1authenticationsetupsPaymentInformationTokenizedCard = Riskv1authenticationsetupsPaymentInformationTokenizedCard;
Riskv1authenticationsetupsPaymentInformationTokenizedCard.discriminator = undefined;
Riskv1authenticationsetupsPaymentInformationTokenizedCard.attributeTypeMap = [
    {
        "name": "transactionType",
        "baseName": "transactionType",
        "type": "string"
    },
    {
        "name": "type",
        "baseName": "type",
        "type": "string"
    },
    {
        "name": "expirationMonth",
        "baseName": "expirationMonth",
        "type": "string"
    },
    {
        "name": "expirationYear",
        "baseName": "expirationYear",
        "type": "string"
    },
    {
        "name": "number",
        "baseName": "number",
        "type": "string"
    }
];
class Riskv1authenticationsetupsProcessingInformation {
    static getAttributeTypeMap() {
        return Riskv1authenticationsetupsProcessingInformation.attributeTypeMap;
    }
}
exports.Riskv1authenticationsetupsProcessingInformation = Riskv1authenticationsetupsProcessingInformation;
Riskv1authenticationsetupsProcessingInformation.discriminator = undefined;
Riskv1authenticationsetupsProcessingInformation.attributeTypeMap = [
    {
        "name": "paymentSolution",
        "baseName": "paymentSolution",
        "type": "string"
    },
    {
        "name": "visaCheckoutId",
        "baseName": "visaCheckoutId",
        "type": "string"
    }
];
class Riskv1authenticationsetupsTokenInformation {
    static getAttributeTypeMap() {
        return Riskv1authenticationsetupsTokenInformation.attributeTypeMap;
    }
}
exports.Riskv1authenticationsetupsTokenInformation = Riskv1authenticationsetupsTokenInformation;
Riskv1authenticationsetupsTokenInformation.discriminator = undefined;
Riskv1authenticationsetupsTokenInformation.attributeTypeMap = [
    {
        "name": "transientToken",
        "baseName": "transientToken",
        "type": "string"
    },
    {
        "name": "jti",
        "baseName": "jti",
        "type": "string"
    }
];
class Riskv1decisionsAcquirerInformation {
    static getAttributeTypeMap() {
        return Riskv1decisionsAcquirerInformation.attributeTypeMap;
    }
}
exports.Riskv1decisionsAcquirerInformation = Riskv1decisionsAcquirerInformation;
Riskv1decisionsAcquirerInformation.discriminator = undefined;
Riskv1decisionsAcquirerInformation.attributeTypeMap = [
    {
        "name": "acquirerBin",
        "baseName": "acquirerBin",
        "type": "string"
    },
    {
        "name": "country",
        "baseName": "country",
        "type": "string"
    },
    {
        "name": "password",
        "baseName": "password",
        "type": "string"
    },
    {
        "name": "merchantId",
        "baseName": "merchantId",
        "type": "string"
    }
];
/**
* Contains information about the buyer.
*/
class Riskv1decisionsBuyerInformation {
    static getAttributeTypeMap() {
        return Riskv1decisionsBuyerInformation.attributeTypeMap;
    }
}
exports.Riskv1decisionsBuyerInformation = Riskv1decisionsBuyerInformation;
Riskv1decisionsBuyerInformation.discriminator = undefined;
Riskv1decisionsBuyerInformation.attributeTypeMap = [
    {
        "name": "merchantCustomerId",
        "baseName": "merchantCustomerId",
        "type": "string"
    },
    {
        "name": "username",
        "baseName": "username",
        "type": "string"
    },
    {
        "name": "hashedPassword",
        "baseName": "hashedPassword",
        "type": "string"
    },
    {
        "name": "dateOfBirth",
        "baseName": "dateOfBirth",
        "type": "string"
    },
    {
        "name": "personalIdentification",
        "baseName": "personalIdentification",
        "type": "Array<Ptsv2paymentsBuyerInformationPersonalIdentification>"
    }
];
class Riskv1decisionsClientReferenceInformation {
    static getAttributeTypeMap() {
        return Riskv1decisionsClientReferenceInformation.attributeTypeMap;
    }
}
exports.Riskv1decisionsClientReferenceInformation = Riskv1decisionsClientReferenceInformation;
Riskv1decisionsClientReferenceInformation.discriminator = undefined;
Riskv1decisionsClientReferenceInformation.attributeTypeMap = [
    {
        "name": "code",
        "baseName": "code",
        "type": "string"
    },
    {
        "name": "pausedRequestId",
        "baseName": "pausedRequestId",
        "type": "string"
    },
    {
        "name": "comments",
        "baseName": "comments",
        "type": "string"
    },
    {
        "name": "partner",
        "baseName": "partner",
        "type": "Riskv1decisionsClientReferenceInformationPartner"
    }
];
class Riskv1decisionsClientReferenceInformationPartner {
    static getAttributeTypeMap() {
        return Riskv1decisionsClientReferenceInformationPartner.attributeTypeMap;
    }
}
exports.Riskv1decisionsClientReferenceInformationPartner = Riskv1decisionsClientReferenceInformationPartner;
Riskv1decisionsClientReferenceInformationPartner.discriminator = undefined;
Riskv1decisionsClientReferenceInformationPartner.attributeTypeMap = [
    {
        "name": "developerId",
        "baseName": "developerId",
        "type": "string"
    },
    {
        "name": "solutionId",
        "baseName": "solutionId",
        "type": "string"
    }
];
class Riskv1decisionsConsumerAuthenticationInformation {
    static getAttributeTypeMap() {
        return Riskv1decisionsConsumerAuthenticationInformation.attributeTypeMap;
    }
}
exports.Riskv1decisionsConsumerAuthenticationInformation = Riskv1decisionsConsumerAuthenticationInformation;
Riskv1decisionsConsumerAuthenticationInformation.discriminator = undefined;
Riskv1decisionsConsumerAuthenticationInformation.attributeTypeMap = [
    {
        "name": "strongAuthentication",
        "baseName": "strongAuthentication",
        "type": "Riskv1decisionsConsumerAuthenticationInformationStrongAuthentication"
    },
    {
        "name": "acsWindowSize",
        "baseName": "acsWindowSize",
        "type": "string"
    },
    {
        "name": "alternateAuthenticationData",
        "baseName": "alternateAuthenticationData",
        "type": "string"
    },
    {
        "name": "alternateAuthenticationDate",
        "baseName": "alternateAuthenticationDate",
        "type": "string"
    },
    {
        "name": "alternateAuthenticationMethod",
        "baseName": "alternateAuthenticationMethod",
        "type": "string"
    },
    {
        "name": "authenticationDate",
        "baseName": "authenticationDate",
        "type": "string"
    },
    {
        "name": "authenticationTransactionId",
        "baseName": "authenticationTransactionId",
        "type": "string"
    },
    {
        "name": "transactionFlowIndicator",
        "baseName": "transactionFlowIndicator",
        "type": "number"
    },
    {
        "name": "challengeCode",
        "baseName": "challengeCode",
        "type": "string"
    },
    {
        "name": "challengeStatus",
        "baseName": "challengeStatus",
        "type": "string"
    },
    {
        "name": "customerCardAlias",
        "baseName": "customerCardAlias",
        "type": "string"
    },
    {
        "name": "decoupledAuthenticationIndicator",
        "baseName": "decoupledAuthenticationIndicator",
        "type": "string"
    },
    {
        "name": "decoupledAuthenticationMaxTime",
        "baseName": "decoupledAuthenticationMaxTime",
        "type": "string"
    },
    {
        "name": "defaultCard",
        "baseName": "defaultCard",
        "type": "boolean"
    },
    {
        "name": "deviceChannel",
        "baseName": "deviceChannel",
        "type": "string"
    },
    {
        "name": "installmentTotalCount",
        "baseName": "installmentTotalCount",
        "type": "number"
    },
    {
        "name": "merchantFraudRate",
        "baseName": "merchantFraudRate",
        "type": "string"
    },
    {
        "name": "marketingOptIn",
        "baseName": "marketingOptIn",
        "type": "boolean"
    },
    {
        "name": "marketingSource",
        "baseName": "marketingSource",
        "type": "string"
    },
    {
        "name": "mcc",
        "baseName": "mcc",
        "type": "string"
    },
    {
        "name": "merchantScore",
        "baseName": "merchantScore",
        "type": "number"
    },
    {
        "name": "messageCategory",
        "baseName": "messageCategory",
        "type": "string"
    },
    {
        "name": "npaCode",
        "baseName": "npaCode",
        "type": "string"
    },
    {
        "name": "overridePaymentMethod",
        "baseName": "overridePaymentMethod",
        "type": "string"
    },
    {
        "name": "overrideCountryCode",
        "baseName": "overrideCountryCode",
        "type": "string"
    },
    {
        "name": "priorAuthenticationData",
        "baseName": "priorAuthenticationData",
        "type": "string"
    },
    {
        "name": "priorAuthenticationMethod",
        "baseName": "priorAuthenticationMethod",
        "type": "string"
    },
    {
        "name": "priorAuthenticationReferenceId",
        "baseName": "priorAuthenticationReferenceId",
        "type": "string"
    },
    {
        "name": "priorAuthenticationTime",
        "baseName": "priorAuthenticationTime",
        "type": "string"
    },
    {
        "name": "productCode",
        "baseName": "productCode",
        "type": "string"
    },
    {
        "name": "returnUrl",
        "baseName": "returnUrl",
        "type": "string"
    },
    {
        "name": "requestorId",
        "baseName": "requestorId",
        "type": "string"
    },
    {
        "name": "requestorInitiatedAuthenticationIndicator",
        "baseName": "requestorInitiatedAuthenticationIndicator",
        "type": "string"
    },
    {
        "name": "requestorName",
        "baseName": "requestorName",
        "type": "string"
    },
    {
        "name": "referenceId",
        "baseName": "referenceId",
        "type": "string"
    },
    {
        "name": "sdkMaxTimeout",
        "baseName": "sdkMaxTimeout",
        "type": "string"
    },
    {
        "name": "secureCorporatePaymentIndicator",
        "baseName": "secureCorporatePaymentIndicator",
        "type": "string"
    },
    {
        "name": "transactionMode",
        "baseName": "transactionMode",
        "type": "string"
    },
    {
        "name": "whiteListStatus",
        "baseName": "whiteListStatus",
        "type": "string"
    },
    {
        "name": "scoreRequest",
        "baseName": "scoreRequest",
        "type": "number"
    }
];
class Riskv1decisionsConsumerAuthenticationInformationStrongAuthentication {
    static getAttributeTypeMap() {
        return Riskv1decisionsConsumerAuthenticationInformationStrongAuthentication.attributeTypeMap;
    }
}
exports.Riskv1decisionsConsumerAuthenticationInformationStrongAuthentication = Riskv1decisionsConsumerAuthenticationInformationStrongAuthentication;
Riskv1decisionsConsumerAuthenticationInformationStrongAuthentication.discriminator = undefined;
Riskv1decisionsConsumerAuthenticationInformationStrongAuthentication.attributeTypeMap = [
    {
        "name": "authenticationIndicator",
        "baseName": "authenticationIndicator",
        "type": "string"
    }
];
class Riskv1decisionsDeviceInformation {
    static getAttributeTypeMap() {
        return Riskv1decisionsDeviceInformation.attributeTypeMap;
    }
}
exports.Riskv1decisionsDeviceInformation = Riskv1decisionsDeviceInformation;
Riskv1decisionsDeviceInformation.discriminator = undefined;
Riskv1decisionsDeviceInformation.attributeTypeMap = [
    {
        "name": "cookiesAccepted",
        "baseName": "cookiesAccepted",
        "type": "string"
    },
    {
        "name": "ipAddress",
        "baseName": "ipAddress",
        "type": "string"
    },
    {
        "name": "hostName",
        "baseName": "hostName",
        "type": "string"
    },
    {
        "name": "fingerprintSessionId",
        "baseName": "fingerprintSessionId",
        "type": "string"
    },
    {
        "name": "httpBrowserEmail",
        "baseName": "httpBrowserEmail",
        "type": "string"
    },
    {
        "name": "userAgent",
        "baseName": "userAgent",
        "type": "string"
    },
    {
        "name": "rawData",
        "baseName": "rawData",
        "type": "Array<Ptsv2paymentsDeviceInformationRawData>"
    },
    {
        "name": "httpAcceptBrowserValue",
        "baseName": "httpAcceptBrowserValue",
        "type": "string"
    },
    {
        "name": "httpAcceptContent",
        "baseName": "httpAcceptContent",
        "type": "string"
    },
    {
        "name": "httpBrowserLanguage",
        "baseName": "httpBrowserLanguage",
        "type": "string"
    },
    {
        "name": "httpBrowserJavaEnabled",
        "baseName": "httpBrowserJavaEnabled",
        "type": "boolean"
    },
    {
        "name": "httpBrowserJavaScriptEnabled",
        "baseName": "httpBrowserJavaScriptEnabled",
        "type": "boolean"
    },
    {
        "name": "httpBrowserColorDepth",
        "baseName": "httpBrowserColorDepth",
        "type": "string"
    },
    {
        "name": "httpBrowserScreenHeight",
        "baseName": "httpBrowserScreenHeight",
        "type": "string"
    },
    {
        "name": "httpBrowserScreenWidth",
        "baseName": "httpBrowserScreenWidth",
        "type": "string"
    },
    {
        "name": "httpBrowserTimeDifference",
        "baseName": "httpBrowserTimeDifference",
        "type": "string"
    },
    {
        "name": "userAgentBrowserValue",
        "baseName": "userAgentBrowserValue",
        "type": "string"
    }
];
/**
* Contains merchant-defined key-value pairs.
*/
class Riskv1decisionsMerchantDefinedInformation {
    static getAttributeTypeMap() {
        return Riskv1decisionsMerchantDefinedInformation.attributeTypeMap;
    }
}
exports.Riskv1decisionsMerchantDefinedInformation = Riskv1decisionsMerchantDefinedInformation;
Riskv1decisionsMerchantDefinedInformation.discriminator = undefined;
Riskv1decisionsMerchantDefinedInformation.attributeTypeMap = [
    {
        "name": "key",
        "baseName": "key",
        "type": "string"
    },
    {
        "name": "value",
        "baseName": "value",
        "type": "string"
    }
];
class Riskv1decisionsMerchantInformation {
    static getAttributeTypeMap() {
        return Riskv1decisionsMerchantInformation.attributeTypeMap;
    }
}
exports.Riskv1decisionsMerchantInformation = Riskv1decisionsMerchantInformation;
Riskv1decisionsMerchantInformation.discriminator = undefined;
Riskv1decisionsMerchantInformation.attributeTypeMap = [
    {
        "name": "merchantDescriptor",
        "baseName": "merchantDescriptor",
        "type": "Riskv1decisionsMerchantInformationMerchantDescriptor"
    },
    {
        "name": "merchantName",
        "baseName": "merchantName",
        "type": "string"
    }
];
class Riskv1decisionsMerchantInformationMerchantDescriptor {
    static getAttributeTypeMap() {
        return Riskv1decisionsMerchantInformationMerchantDescriptor.attributeTypeMap;
    }
}
exports.Riskv1decisionsMerchantInformationMerchantDescriptor = Riskv1decisionsMerchantInformationMerchantDescriptor;
Riskv1decisionsMerchantInformationMerchantDescriptor.discriminator = undefined;
Riskv1decisionsMerchantInformationMerchantDescriptor.attributeTypeMap = [
    {
        "name": "name",
        "baseName": "name",
        "type": "string"
    },
    {
        "name": "url",
        "baseName": "url",
        "type": "string"
    }
];
/**
* Contains detailed order-level information.
*/
class Riskv1decisionsOrderInformation {
    static getAttributeTypeMap() {
        return Riskv1decisionsOrderInformation.attributeTypeMap;
    }
}
exports.Riskv1decisionsOrderInformation = Riskv1decisionsOrderInformation;
Riskv1decisionsOrderInformation.discriminator = undefined;
Riskv1decisionsOrderInformation.attributeTypeMap = [
    {
        "name": "amountDetails",
        "baseName": "amountDetails",
        "type": "Riskv1decisionsOrderInformationAmountDetails"
    },
    {
        "name": "preOrder",
        "baseName": "preOrder",
        "type": "string"
    },
    {
        "name": "preOrderDate",
        "baseName": "preOrderDate",
        "type": "string"
    },
    {
        "name": "cutoffDateTime",
        "baseName": "cutoffDateTime",
        "type": "string"
    },
    {
        "name": "reordered",
        "baseName": "reordered",
        "type": "boolean"
    },
    {
        "name": "shippingDetails",
        "baseName": "shippingDetails",
        "type": "Riskv1decisionsOrderInformationShippingDetails"
    },
    {
        "name": "shipTo",
        "baseName": "shipTo",
        "type": "Riskv1decisionsOrderInformationShipTo"
    },
    {
        "name": "returnsAccepted",
        "baseName": "returnsAccepted",
        "type": "boolean"
    },
    {
        "name": "lineItems",
        "baseName": "lineItems",
        "type": "Array<Riskv1decisionsOrderInformationLineItems>"
    },
    {
        "name": "billTo",
        "baseName": "billTo",
        "type": "Riskv1decisionsOrderInformationBillTo"
    },
    {
        "name": "totalOffersCount",
        "baseName": "totalOffersCount",
        "type": "string"
    }
];
/**
* Contains `currency` and `totalAmount` for this order.
*/
class Riskv1decisionsOrderInformationAmountDetails {
    static getAttributeTypeMap() {
        return Riskv1decisionsOrderInformationAmountDetails.attributeTypeMap;
    }
}
exports.Riskv1decisionsOrderInformationAmountDetails = Riskv1decisionsOrderInformationAmountDetails;
Riskv1decisionsOrderInformationAmountDetails.discriminator = undefined;
Riskv1decisionsOrderInformationAmountDetails.attributeTypeMap = [
    {
        "name": "currency",
        "baseName": "currency",
        "type": "string"
    },
    {
        "name": "totalAmount",
        "baseName": "totalAmount",
        "type": "string"
    }
];
class Riskv1decisionsOrderInformationBillTo {
    static getAttributeTypeMap() {
        return Riskv1decisionsOrderInformationBillTo.attributeTypeMap;
    }
}
exports.Riskv1decisionsOrderInformationBillTo = Riskv1decisionsOrderInformationBillTo;
Riskv1decisionsOrderInformationBillTo.discriminator = undefined;
Riskv1decisionsOrderInformationBillTo.attributeTypeMap = [
    {
        "name": "address1",
        "baseName": "address1",
        "type": "string"
    },
    {
        "name": "address2",
        "baseName": "address2",
        "type": "string"
    },
    {
        "name": "administrativeArea",
        "baseName": "administrativeArea",
        "type": "string"
    },
    {
        "name": "country",
        "baseName": "country",
        "type": "string"
    },
    {
        "name": "locality",
        "baseName": "locality",
        "type": "string"
    },
    {
        "name": "firstName",
        "baseName": "firstName",
        "type": "string"
    },
    {
        "name": "lastName",
        "baseName": "lastName",
        "type": "string"
    },
    {
        "name": "phoneNumber",
        "baseName": "phoneNumber",
        "type": "string"
    },
    {
        "name": "email",
        "baseName": "email",
        "type": "string"
    },
    {
        "name": "postalCode",
        "baseName": "postalCode",
        "type": "string"
    }
];
class Riskv1decisionsOrderInformationLineItems {
    static getAttributeTypeMap() {
        return Riskv1decisionsOrderInformationLineItems.attributeTypeMap;
    }
}
exports.Riskv1decisionsOrderInformationLineItems = Riskv1decisionsOrderInformationLineItems;
Riskv1decisionsOrderInformationLineItems.discriminator = undefined;
Riskv1decisionsOrderInformationLineItems.attributeTypeMap = [
    {
        "name": "totalAmount",
        "baseName": "totalAmount",
        "type": "string"
    },
    {
        "name": "unitPrice",
        "baseName": "unitPrice",
        "type": "string"
    },
    {
        "name": "quantity",
        "baseName": "quantity",
        "type": "number"
    },
    {
        "name": "giftCardCurrency",
        "baseName": "giftCardCurrency",
        "type": "number"
    },
    {
        "name": "productSKU",
        "baseName": "productSKU",
        "type": "string"
    },
    {
        "name": "productRisk",
        "baseName": "productRisk",
        "type": "string"
    },
    {
        "name": "productDescription",
        "baseName": "productDescription",
        "type": "string"
    },
    {
        "name": "productName",
        "baseName": "productName",
        "type": "string"
    },
    {
        "name": "productCode",
        "baseName": "productCode",
        "type": "string"
    },
    {
        "name": "gift",
        "baseName": "gift",
        "type": "boolean"
    },
    {
        "name": "distributorProductSku",
        "baseName": "distributorProductSku",
        "type": "string"
    },
    {
        "name": "passenger",
        "baseName": "passenger",
        "type": "Ptsv2paymentsOrderInformationPassenger"
    },
    {
        "name": "shippingDestinationTypes",
        "baseName": "shippingDestinationTypes",
        "type": "string"
    },
    {
        "name": "taxAmount",
        "baseName": "taxAmount",
        "type": "string"
    },
    {
        "name": "allowedExportCountries",
        "baseName": "allowedExportCountries",
        "type": "Array<string>"
    },
    {
        "name": "restrictedExportCountries",
        "baseName": "restrictedExportCountries",
        "type": "Array<string>"
    }
];
class Riskv1decisionsOrderInformationShipTo {
    static getAttributeTypeMap() {
        return Riskv1decisionsOrderInformationShipTo.attributeTypeMap;
    }
}
exports.Riskv1decisionsOrderInformationShipTo = Riskv1decisionsOrderInformationShipTo;
Riskv1decisionsOrderInformationShipTo.discriminator = undefined;
Riskv1decisionsOrderInformationShipTo.attributeTypeMap = [
    {
        "name": "address1",
        "baseName": "address1",
        "type": "string"
    },
    {
        "name": "address2",
        "baseName": "address2",
        "type": "string"
    },
    {
        "name": "address3",
        "baseName": "address3",
        "type": "string"
    },
    {
        "name": "administrativeArea",
        "baseName": "administrativeArea",
        "type": "string"
    },
    {
        "name": "country",
        "baseName": "country",
        "type": "string"
    },
    {
        "name": "destinationTypes",
        "baseName": "destinationTypes",
        "type": "string"
    },
    {
        "name": "locality",
        "baseName": "locality",
        "type": "string"
    },
    {
        "name": "firstName",
        "baseName": "firstName",
        "type": "string"
    },
    {
        "name": "lastName",
        "baseName": "lastName",
        "type": "string"
    },
    {
        "name": "middleName",
        "baseName": "middleName",
        "type": "string"
    },
    {
        "name": "phoneNumber",
        "baseName": "phoneNumber",
        "type": "string"
    },
    {
        "name": "postalCode",
        "baseName": "postalCode",
        "type": "string"
    },
    {
        "name": "destinationCode",
        "baseName": "destinationCode",
        "type": "number"
    },
    {
        "name": "method",
        "baseName": "method",
        "type": "string"
    }
];
/**
* Contains shipping information not related to address.
*/
class Riskv1decisionsOrderInformationShippingDetails {
    static getAttributeTypeMap() {
        return Riskv1decisionsOrderInformationShippingDetails.attributeTypeMap;
    }
}
exports.Riskv1decisionsOrderInformationShippingDetails = Riskv1decisionsOrderInformationShippingDetails;
Riskv1decisionsOrderInformationShippingDetails.discriminator = undefined;
Riskv1decisionsOrderInformationShippingDetails.attributeTypeMap = [
    {
        "name": "giftWrap",
        "baseName": "giftWrap",
        "type": "boolean"
    },
    {
        "name": "shippingMethod",
        "baseName": "shippingMethod",
        "type": "string"
    }
];
/**
* Contains the payment data for this transaction.
*/
class Riskv1decisionsPaymentInformation {
    static getAttributeTypeMap() {
        return Riskv1decisionsPaymentInformation.attributeTypeMap;
    }
}
exports.Riskv1decisionsPaymentInformation = Riskv1decisionsPaymentInformation;
Riskv1decisionsPaymentInformation.discriminator = undefined;
Riskv1decisionsPaymentInformation.attributeTypeMap = [
    {
        "name": "card",
        "baseName": "card",
        "type": "Riskv1decisionsPaymentInformationCard"
    },
    {
        "name": "tokenizedCard",
        "baseName": "tokenizedCard",
        "type": "Riskv1decisionsPaymentInformationTokenizedCard"
    },
    {
        "name": "customer",
        "baseName": "customer",
        "type": "Ptsv2paymentsPaymentInformationCustomer"
    },
    {
        "name": "bank",
        "baseName": "bank",
        "type": "Ptsv2paymentsPaymentInformationBank"
    },
    {
        "name": "method",
        "baseName": "method",
        "type": "string"
    }
];
/**
* Use this for a non-tokenized payment card.
*/
class Riskv1decisionsPaymentInformationCard {
    static getAttributeTypeMap() {
        return Riskv1decisionsPaymentInformationCard.attributeTypeMap;
    }
}
exports.Riskv1decisionsPaymentInformationCard = Riskv1decisionsPaymentInformationCard;
Riskv1decisionsPaymentInformationCard.discriminator = undefined;
Riskv1decisionsPaymentInformationCard.attributeTypeMap = [
    {
        "name": "number",
        "baseName": "number",
        "type": "string"
    },
    {
        "name": "type",
        "baseName": "type",
        "type": "string"
    },
    {
        "name": "bin",
        "baseName": "bin",
        "type": "string"
    },
    {
        "name": "expirationMonth",
        "baseName": "expirationMonth",
        "type": "string"
    },
    {
        "name": "expirationYear",
        "baseName": "expirationYear",
        "type": "string"
    }
];
/**
* Use this object to submit a payment network token instead of card-based values.
*/
class Riskv1decisionsPaymentInformationTokenizedCard {
    static getAttributeTypeMap() {
        return Riskv1decisionsPaymentInformationTokenizedCard.attributeTypeMap;
    }
}
exports.Riskv1decisionsPaymentInformationTokenizedCard = Riskv1decisionsPaymentInformationTokenizedCard;
Riskv1decisionsPaymentInformationTokenizedCard.discriminator = undefined;
Riskv1decisionsPaymentInformationTokenizedCard.attributeTypeMap = [
    {
        "name": "transactionType",
        "baseName": "transactionType",
        "type": "string"
    },
    {
        "name": "type",
        "baseName": "type",
        "type": "string"
    },
    {
        "name": "number",
        "baseName": "number",
        "type": "string"
    },
    {
        "name": "expirationMonth",
        "baseName": "expirationMonth",
        "type": "string"
    },
    {
        "name": "expirationYear",
        "baseName": "expirationYear",
        "type": "string"
    }
];
/**
* Decides whether to call Payer Authentication or Watchlist Screening service along with DM or not.
*/
class Riskv1decisionsProcessingInformation {
    static getAttributeTypeMap() {
        return Riskv1decisionsProcessingInformation.attributeTypeMap;
    }
}
exports.Riskv1decisionsProcessingInformation = Riskv1decisionsProcessingInformation;
Riskv1decisionsProcessingInformation.discriminator = undefined;
Riskv1decisionsProcessingInformation.attributeTypeMap = [
    {
        "name": "actionList",
        "baseName": "actionList",
        "type": "Array<string>"
    }
];
/**
* Contains information related to the payment processor.
*/
class Riskv1decisionsProcessorInformation {
    static getAttributeTypeMap() {
        return Riskv1decisionsProcessorInformation.attributeTypeMap;
    }
}
exports.Riskv1decisionsProcessorInformation = Riskv1decisionsProcessorInformation;
Riskv1decisionsProcessorInformation.discriminator = undefined;
Riskv1decisionsProcessorInformation.attributeTypeMap = [
    {
        "name": "avs",
        "baseName": "avs",
        "type": "Riskv1decisionsProcessorInformationAvs"
    },
    {
        "name": "cardVerification",
        "baseName": "cardVerification",
        "type": "Riskv1decisionsProcessorInformationCardVerification"
    }
];
/**
* Address Verification Service
*/
class Riskv1decisionsProcessorInformationAvs {
    static getAttributeTypeMap() {
        return Riskv1decisionsProcessorInformationAvs.attributeTypeMap;
    }
}
exports.Riskv1decisionsProcessorInformationAvs = Riskv1decisionsProcessorInformationAvs;
Riskv1decisionsProcessorInformationAvs.discriminator = undefined;
Riskv1decisionsProcessorInformationAvs.attributeTypeMap = [
    {
        "name": "code",
        "baseName": "code",
        "type": "string"
    }
];
class Riskv1decisionsProcessorInformationCardVerification {
    static getAttributeTypeMap() {
        return Riskv1decisionsProcessorInformationCardVerification.attributeTypeMap;
    }
}
exports.Riskv1decisionsProcessorInformationCardVerification = Riskv1decisionsProcessorInformationCardVerification;
Riskv1decisionsProcessorInformationCardVerification.discriminator = undefined;
Riskv1decisionsProcessorInformationCardVerification.attributeTypeMap = [
    {
        "name": "resultCode",
        "baseName": "resultCode",
        "type": "string"
    }
];
class Riskv1decisionsRiskInformation {
    static getAttributeTypeMap() {
        return Riskv1decisionsRiskInformation.attributeTypeMap;
    }
}
exports.Riskv1decisionsRiskInformation = Riskv1decisionsRiskInformation;
Riskv1decisionsRiskInformation.discriminator = undefined;
Riskv1decisionsRiskInformation.attributeTypeMap = [
    {
        "name": "profile",
        "baseName": "profile",
        "type": "Ptsv2paymentsRiskInformationProfile"
    },
    {
        "name": "eventType",
        "baseName": "eventType",
        "type": "string"
    },
    {
        "name": "buyerHistory",
        "baseName": "buyerHistory",
        "type": "Ptsv2paymentsRiskInformationBuyerHistory"
    },
    {
        "name": "auxiliaryData",
        "baseName": "auxiliaryData",
        "type": "Array<Ptsv2paymentsRiskInformationAuxiliaryData>"
    }
];
class Riskv1decisionsTokenInformation {
    static getAttributeTypeMap() {
        return Riskv1decisionsTokenInformation.attributeTypeMap;
    }
}
exports.Riskv1decisionsTokenInformation = Riskv1decisionsTokenInformation;
Riskv1decisionsTokenInformation.discriminator = undefined;
Riskv1decisionsTokenInformation.attributeTypeMap = [
    {
        "name": "jti",
        "baseName": "jti",
        "type": "string"
    }
];
class Riskv1decisionsTravelInformation {
    static getAttributeTypeMap() {
        return Riskv1decisionsTravelInformation.attributeTypeMap;
    }
}
exports.Riskv1decisionsTravelInformation = Riskv1decisionsTravelInformation;
Riskv1decisionsTravelInformation.discriminator = undefined;
Riskv1decisionsTravelInformation.attributeTypeMap = [
    {
        "name": "actualFinalDestination",
        "baseName": "actualFinalDestination",
        "type": "string"
    },
    {
        "name": "completeRoute",
        "baseName": "completeRoute",
        "type": "string"
    },
    {
        "name": "departureTime",
        "baseName": "departureTime",
        "type": "string"
    },
    {
        "name": "journeyType",
        "baseName": "journeyType",
        "type": "string"
    },
    {
        "name": "legs",
        "baseName": "legs",
        "type": "Array<Riskv1decisionsTravelInformationLegs>"
    },
    {
        "name": "numberOfPassengers",
        "baseName": "numberOfPassengers",
        "type": "number"
    },
    {
        "name": "passengers",
        "baseName": "passengers",
        "type": "Array<Riskv1decisionsTravelInformationPassengers>"
    }
];
class Riskv1decisionsTravelInformationLegs {
    static getAttributeTypeMap() {
        return Riskv1decisionsTravelInformationLegs.attributeTypeMap;
    }
}
exports.Riskv1decisionsTravelInformationLegs = Riskv1decisionsTravelInformationLegs;
Riskv1decisionsTravelInformationLegs.discriminator = undefined;
Riskv1decisionsTravelInformationLegs.attributeTypeMap = [
    {
        "name": "origination",
        "baseName": "origination",
        "type": "string"
    },
    {
        "name": "destination",
        "baseName": "destination",
        "type": "string"
    },
    {
        "name": "carrierCode",
        "baseName": "carrierCode",
        "type": "string"
    },
    {
        "name": "departureDate",
        "baseName": "departureDate",
        "type": "string"
    },
    {
        "name": "departureTime",
        "baseName": "departureTime",
        "type": "number"
    }
];
class Riskv1decisionsTravelInformationPassengers {
    static getAttributeTypeMap() {
        return Riskv1decisionsTravelInformationPassengers.attributeTypeMap;
    }
}
exports.Riskv1decisionsTravelInformationPassengers = Riskv1decisionsTravelInformationPassengers;
Riskv1decisionsTravelInformationPassengers.discriminator = undefined;
Riskv1decisionsTravelInformationPassengers.attributeTypeMap = [
    {
        "name": "firstName",
        "baseName": "firstName",
        "type": "string"
    },
    {
        "name": "lastName",
        "baseName": "lastName",
        "type": "string"
    }
];
class Riskv1decisionsidactionsDecisionInformation {
    static getAttributeTypeMap() {
        return Riskv1decisionsidactionsDecisionInformation.attributeTypeMap;
    }
}
exports.Riskv1decisionsidactionsDecisionInformation = Riskv1decisionsidactionsDecisionInformation;
Riskv1decisionsidactionsDecisionInformation.discriminator = undefined;
Riskv1decisionsidactionsDecisionInformation.attributeTypeMap = [
    {
        "name": "decision",
        "baseName": "decision",
        "type": "string"
    },
    {
        "name": "comments",
        "baseName": "comments",
        "type": "string"
    }
];
class Riskv1decisionsidactionsProcessingInformation {
    static getAttributeTypeMap() {
        return Riskv1decisionsidactionsProcessingInformation.attributeTypeMap;
    }
}
exports.Riskv1decisionsidactionsProcessingInformation = Riskv1decisionsidactionsProcessingInformation;
Riskv1decisionsidactionsProcessingInformation.discriminator = undefined;
Riskv1decisionsidactionsProcessingInformation.attributeTypeMap = [
    {
        "name": "actionList",
        "baseName": "actionList",
        "type": "Array<string>"
    }
];
class Riskv1decisionsidmarkingRiskInformation {
    static getAttributeTypeMap() {
        return Riskv1decisionsidmarkingRiskInformation.attributeTypeMap;
    }
}
exports.Riskv1decisionsidmarkingRiskInformation = Riskv1decisionsidmarkingRiskInformation;
Riskv1decisionsidmarkingRiskInformation.discriminator = undefined;
Riskv1decisionsidmarkingRiskInformation.attributeTypeMap = [
    {
        "name": "markingDetails",
        "baseName": "markingDetails",
        "type": "Riskv1decisionsidmarkingRiskInformationMarkingDetails"
    }
];
/**
* Details for marking the transaction.
*/
class Riskv1decisionsidmarkingRiskInformationMarkingDetails {
    static getAttributeTypeMap() {
        return Riskv1decisionsidmarkingRiskInformationMarkingDetails.attributeTypeMap;
    }
}
exports.Riskv1decisionsidmarkingRiskInformationMarkingDetails = Riskv1decisionsidmarkingRiskInformationMarkingDetails;
Riskv1decisionsidmarkingRiskInformationMarkingDetails.discriminator = undefined;
Riskv1decisionsidmarkingRiskInformationMarkingDetails.attributeTypeMap = [
    {
        "name": "notes",
        "baseName": "notes",
        "type": "string"
    },
    {
        "name": "reason",
        "baseName": "reason",
        "type": "string"
    },
    {
        "name": "fieldsIncluded",
        "baseName": "fieldsIncluded",
        "type": "Array<string>"
    },
    {
        "name": "action",
        "baseName": "action",
        "type": "string"
    }
];
class Riskv1exportcomplianceinquiriesDeviceInformation {
    static getAttributeTypeMap() {
        return Riskv1exportcomplianceinquiriesDeviceInformation.attributeTypeMap;
    }
}
exports.Riskv1exportcomplianceinquiriesDeviceInformation = Riskv1exportcomplianceinquiriesDeviceInformation;
Riskv1exportcomplianceinquiriesDeviceInformation.discriminator = undefined;
Riskv1exportcomplianceinquiriesDeviceInformation.attributeTypeMap = [
    {
        "name": "ipAddress",
        "baseName": "ipAddress",
        "type": "string"
    },
    {
        "name": "hostName",
        "baseName": "hostName",
        "type": "string"
    }
];
class Riskv1exportcomplianceinquiriesExportComplianceInformation {
    static getAttributeTypeMap() {
        return Riskv1exportcomplianceinquiriesExportComplianceInformation.attributeTypeMap;
    }
}
exports.Riskv1exportcomplianceinquiriesExportComplianceInformation = Riskv1exportcomplianceinquiriesExportComplianceInformation;
Riskv1exportcomplianceinquiriesExportComplianceInformation.discriminator = undefined;
Riskv1exportcomplianceinquiriesExportComplianceInformation.attributeTypeMap = [
    {
        "name": "addressOperator",
        "baseName": "addressOperator",
        "type": "string"
    },
    {
        "name": "weights",
        "baseName": "weights",
        "type": "Ptsv2paymentsWatchlistScreeningInformationWeights"
    },
    {
        "name": "sanctionLists",
        "baseName": "sanctionLists",
        "type": "Array<string>"
    }
];
class Riskv1exportcomplianceinquiriesOrderInformation {
    static getAttributeTypeMap() {
        return Riskv1exportcomplianceinquiriesOrderInformation.attributeTypeMap;
    }
}
exports.Riskv1exportcomplianceinquiriesOrderInformation = Riskv1exportcomplianceinquiriesOrderInformation;
Riskv1exportcomplianceinquiriesOrderInformation.discriminator = undefined;
Riskv1exportcomplianceinquiriesOrderInformation.attributeTypeMap = [
    {
        "name": "billTo",
        "baseName": "billTo",
        "type": "Riskv1exportcomplianceinquiriesOrderInformationBillTo"
    },
    {
        "name": "shipTo",
        "baseName": "shipTo",
        "type": "Riskv1exportcomplianceinquiriesOrderInformationShipTo"
    },
    {
        "name": "lineItems",
        "baseName": "lineItems",
        "type": "Array<Riskv1exportcomplianceinquiriesOrderInformationLineItems>"
    }
];
class Riskv1exportcomplianceinquiriesOrderInformationBillTo {
    static getAttributeTypeMap() {
        return Riskv1exportcomplianceinquiriesOrderInformationBillTo.attributeTypeMap;
    }
}
exports.Riskv1exportcomplianceinquiriesOrderInformationBillTo = Riskv1exportcomplianceinquiriesOrderInformationBillTo;
Riskv1exportcomplianceinquiriesOrderInformationBillTo.discriminator = undefined;
Riskv1exportcomplianceinquiriesOrderInformationBillTo.attributeTypeMap = [
    {
        "name": "address1",
        "baseName": "address1",
        "type": "string"
    },
    {
        "name": "address2",
        "baseName": "address2",
        "type": "string"
    },
    {
        "name": "address3",
        "baseName": "address3",
        "type": "string"
    },
    {
        "name": "address4",
        "baseName": "address4",
        "type": "string"
    },
    {
        "name": "administrativeArea",
        "baseName": "administrativeArea",
        "type": "string"
    },
    {
        "name": "country",
        "baseName": "country",
        "type": "string"
    },
    {
        "name": "locality",
        "baseName": "locality",
        "type": "string"
    },
    {
        "name": "postalCode",
        "baseName": "postalCode",
        "type": "string"
    },
    {
        "name": "company",
        "baseName": "company",
        "type": "Riskv1exportcomplianceinquiriesOrderInformationBillToCompany"
    },
    {
        "name": "firstName",
        "baseName": "firstName",
        "type": "string"
    },
    {
        "name": "lastName",
        "baseName": "lastName",
        "type": "string"
    },
    {
        "name": "email",
        "baseName": "email",
        "type": "string"
    }
];
class Riskv1exportcomplianceinquiriesOrderInformationBillToCompany {
    static getAttributeTypeMap() {
        return Riskv1exportcomplianceinquiriesOrderInformationBillToCompany.attributeTypeMap;
    }
}
exports.Riskv1exportcomplianceinquiriesOrderInformationBillToCompany = Riskv1exportcomplianceinquiriesOrderInformationBillToCompany;
Riskv1exportcomplianceinquiriesOrderInformationBillToCompany.discriminator = undefined;
Riskv1exportcomplianceinquiriesOrderInformationBillToCompany.attributeTypeMap = [
    {
        "name": "name",
        "baseName": "name",
        "type": "string"
    }
];
class Riskv1exportcomplianceinquiriesOrderInformationLineItems {
    static getAttributeTypeMap() {
        return Riskv1exportcomplianceinquiriesOrderInformationLineItems.attributeTypeMap;
    }
}
exports.Riskv1exportcomplianceinquiriesOrderInformationLineItems = Riskv1exportcomplianceinquiriesOrderInformationLineItems;
Riskv1exportcomplianceinquiriesOrderInformationLineItems.discriminator = undefined;
Riskv1exportcomplianceinquiriesOrderInformationLineItems.attributeTypeMap = [
    {
        "name": "unitPrice",
        "baseName": "unitPrice",
        "type": "string"
    },
    {
        "name": "allowedExportCountries",
        "baseName": "allowedExportCountries",
        "type": "Array<string>"
    },
    {
        "name": "restrictedExportCountries",
        "baseName": "restrictedExportCountries",
        "type": "Array<string>"
    },
    {
        "name": "quantity",
        "baseName": "quantity",
        "type": "number"
    },
    {
        "name": "productSKU",
        "baseName": "productSKU",
        "type": "string"
    },
    {
        "name": "productRisk",
        "baseName": "productRisk",
        "type": "string"
    },
    {
        "name": "productName",
        "baseName": "productName",
        "type": "string"
    },
    {
        "name": "productCode",
        "baseName": "productCode",
        "type": "string"
    }
];
class Riskv1exportcomplianceinquiriesOrderInformationShipTo {
    static getAttributeTypeMap() {
        return Riskv1exportcomplianceinquiriesOrderInformationShipTo.attributeTypeMap;
    }
}
exports.Riskv1exportcomplianceinquiriesOrderInformationShipTo = Riskv1exportcomplianceinquiriesOrderInformationShipTo;
Riskv1exportcomplianceinquiriesOrderInformationShipTo.discriminator = undefined;
Riskv1exportcomplianceinquiriesOrderInformationShipTo.attributeTypeMap = [
    {
        "name": "country",
        "baseName": "country",
        "type": "string"
    },
    {
        "name": "firstName",
        "baseName": "firstName",
        "type": "string"
    },
    {
        "name": "lastName",
        "baseName": "lastName",
        "type": "string"
    }
];
/**
* Contains information about the buyer.
*/
class Riskv1liststypeentriesBuyerInformation {
    static getAttributeTypeMap() {
        return Riskv1liststypeentriesBuyerInformation.attributeTypeMap;
    }
}
exports.Riskv1liststypeentriesBuyerInformation = Riskv1liststypeentriesBuyerInformation;
Riskv1liststypeentriesBuyerInformation.discriminator = undefined;
Riskv1liststypeentriesBuyerInformation.attributeTypeMap = [
    {
        "name": "personalIdentification",
        "baseName": "personalIdentification",
        "type": "Array<Ptsv2paymentsBuyerInformationPersonalIdentification>"
    }
];
class Riskv1liststypeentriesClientReferenceInformation {
    static getAttributeTypeMap() {
        return Riskv1liststypeentriesClientReferenceInformation.attributeTypeMap;
    }
}
exports.Riskv1liststypeentriesClientReferenceInformation = Riskv1liststypeentriesClientReferenceInformation;
Riskv1liststypeentriesClientReferenceInformation.discriminator = undefined;
Riskv1liststypeentriesClientReferenceInformation.attributeTypeMap = [
    {
        "name": "code",
        "baseName": "code",
        "type": "string"
    },
    {
        "name": "comments",
        "baseName": "comments",
        "type": "string"
    },
    {
        "name": "partner",
        "baseName": "partner",
        "type": "Riskv1decisionsClientReferenceInformationPartner"
    }
];
class Riskv1liststypeentriesDeviceInformation {
    static getAttributeTypeMap() {
        return Riskv1liststypeentriesDeviceInformation.attributeTypeMap;
    }
}
exports.Riskv1liststypeentriesDeviceInformation = Riskv1liststypeentriesDeviceInformation;
Riskv1liststypeentriesDeviceInformation.discriminator = undefined;
Riskv1liststypeentriesDeviceInformation.attributeTypeMap = [
    {
        "name": "ipAddress",
        "baseName": "ipAddress",
        "type": "string"
    },
    {
        "name": "networkIpAddress",
        "baseName": "networkIpAddress",
        "type": "string"
    }
];
class Riskv1liststypeentriesOrderInformation {
    static getAttributeTypeMap() {
        return Riskv1liststypeentriesOrderInformation.attributeTypeMap;
    }
}
exports.Riskv1liststypeentriesOrderInformation = Riskv1liststypeentriesOrderInformation;
Riskv1liststypeentriesOrderInformation.discriminator = undefined;
Riskv1liststypeentriesOrderInformation.attributeTypeMap = [
    {
        "name": "address",
        "baseName": "address",
        "type": "Riskv1liststypeentriesOrderInformationAddress"
    },
    {
        "name": "billTo",
        "baseName": "billTo",
        "type": "Riskv1liststypeentriesOrderInformationBillTo"
    },
    {
        "name": "shipTo",
        "baseName": "shipTo",
        "type": "Riskv1liststypeentriesOrderInformationShipTo"
    },
    {
        "name": "lineItems",
        "baseName": "lineItems",
        "type": "Array<Riskv1liststypeentriesOrderInformationLineItems>"
    }
];
/**
* Contains address information related to the order
*/
class Riskv1liststypeentriesOrderInformationAddress {
    static getAttributeTypeMap() {
        return Riskv1liststypeentriesOrderInformationAddress.attributeTypeMap;
    }
}
exports.Riskv1liststypeentriesOrderInformationAddress = Riskv1liststypeentriesOrderInformationAddress;
Riskv1liststypeentriesOrderInformationAddress.discriminator = undefined;
Riskv1liststypeentriesOrderInformationAddress.attributeTypeMap = [
    {
        "name": "address1",
        "baseName": "address1",
        "type": "string"
    },
    {
        "name": "address2",
        "baseName": "address2",
        "type": "string"
    },
    {
        "name": "locality",
        "baseName": "locality",
        "type": "string"
    },
    {
        "name": "country",
        "baseName": "country",
        "type": "string"
    },
    {
        "name": "administrativeArea",
        "baseName": "administrativeArea",
        "type": "string"
    },
    {
        "name": "postalCode",
        "baseName": "postalCode",
        "type": "string"
    }
];
class Riskv1liststypeentriesOrderInformationBillTo {
    static getAttributeTypeMap() {
        return Riskv1liststypeentriesOrderInformationBillTo.attributeTypeMap;
    }
}
exports.Riskv1liststypeentriesOrderInformationBillTo = Riskv1liststypeentriesOrderInformationBillTo;
Riskv1liststypeentriesOrderInformationBillTo.discriminator = undefined;
Riskv1liststypeentriesOrderInformationBillTo.attributeTypeMap = [
    {
        "name": "address1",
        "baseName": "address1",
        "type": "string"
    },
    {
        "name": "address2",
        "baseName": "address2",
        "type": "string"
    },
    {
        "name": "administrativeArea",
        "baseName": "administrativeArea",
        "type": "string"
    },
    {
        "name": "country",
        "baseName": "country",
        "type": "string"
    },
    {
        "name": "locality",
        "baseName": "locality",
        "type": "string"
    },
    {
        "name": "postalCode",
        "baseName": "postalCode",
        "type": "string"
    },
    {
        "name": "firstName",
        "baseName": "firstName",
        "type": "string"
    },
    {
        "name": "lastName",
        "baseName": "lastName",
        "type": "string"
    },
    {
        "name": "phoneNumber",
        "baseName": "phoneNumber",
        "type": "string"
    },
    {
        "name": "email",
        "baseName": "email",
        "type": "string"
    },
    {
        "name": "emailDomain",
        "baseName": "emailDomain",
        "type": "string"
    }
];
class Riskv1liststypeentriesOrderInformationLineItems {
    static getAttributeTypeMap() {
        return Riskv1liststypeentriesOrderInformationLineItems.attributeTypeMap;
    }
}
exports.Riskv1liststypeentriesOrderInformationLineItems = Riskv1liststypeentriesOrderInformationLineItems;
Riskv1liststypeentriesOrderInformationLineItems.discriminator = undefined;
Riskv1liststypeentriesOrderInformationLineItems.attributeTypeMap = [
    {
        "name": "unitPrice",
        "baseName": "unitPrice",
        "type": "string"
    }
];
/**
* Contains recipient shipping information.
*/
class Riskv1liststypeentriesOrderInformationShipTo {
    static getAttributeTypeMap() {
        return Riskv1liststypeentriesOrderInformationShipTo.attributeTypeMap;
    }
}
exports.Riskv1liststypeentriesOrderInformationShipTo = Riskv1liststypeentriesOrderInformationShipTo;
Riskv1liststypeentriesOrderInformationShipTo.discriminator = undefined;
Riskv1liststypeentriesOrderInformationShipTo.attributeTypeMap = [
    {
        "name": "address1",
        "baseName": "address1",
        "type": "string"
    },
    {
        "name": "address2",
        "baseName": "address2",
        "type": "string"
    },
    {
        "name": "administrativeArea",
        "baseName": "administrativeArea",
        "type": "string"
    },
    {
        "name": "country",
        "baseName": "country",
        "type": "string"
    },
    {
        "name": "locality",
        "baseName": "locality",
        "type": "string"
    },
    {
        "name": "postalCode",
        "baseName": "postalCode",
        "type": "string"
    }
];
/**
* Contains the payment data for updating in List Management.
*/
class Riskv1liststypeentriesPaymentInformation {
    static getAttributeTypeMap() {
        return Riskv1liststypeentriesPaymentInformation.attributeTypeMap;
    }
}
exports.Riskv1liststypeentriesPaymentInformation = Riskv1liststypeentriesPaymentInformation;
Riskv1liststypeentriesPaymentInformation.discriminator = undefined;
Riskv1liststypeentriesPaymentInformation.attributeTypeMap = [
    {
        "name": "card",
        "baseName": "card",
        "type": "Riskv1liststypeentriesPaymentInformationCard"
    },
    {
        "name": "bank",
        "baseName": "bank",
        "type": "Riskv1liststypeentriesPaymentInformationBank"
    }
];
/**
* Customer's bank account details
*/
class Riskv1liststypeentriesPaymentInformationBank {
    static getAttributeTypeMap() {
        return Riskv1liststypeentriesPaymentInformationBank.attributeTypeMap;
    }
}
exports.Riskv1liststypeentriesPaymentInformationBank = Riskv1liststypeentriesPaymentInformationBank;
Riskv1liststypeentriesPaymentInformationBank.discriminator = undefined;
Riskv1liststypeentriesPaymentInformationBank.attributeTypeMap = [
    {
        "name": "accountNumber",
        "baseName": "accountNumber",
        "type": "string"
    },
    {
        "name": "code",
        "baseName": "code",
        "type": "string"
    },
    {
        "name": "country",
        "baseName": "country",
        "type": "string"
    },
    {
        "name": "iban",
        "baseName": "iban",
        "type": "string"
    }
];
class Riskv1liststypeentriesPaymentInformationCard {
    static getAttributeTypeMap() {
        return Riskv1liststypeentriesPaymentInformationCard.attributeTypeMap;
    }
}
exports.Riskv1liststypeentriesPaymentInformationCard = Riskv1liststypeentriesPaymentInformationCard;
Riskv1liststypeentriesPaymentInformationCard.discriminator = undefined;
Riskv1liststypeentriesPaymentInformationCard.attributeTypeMap = [
    {
        "name": "number",
        "baseName": "number",
        "type": "string"
    },
    {
        "name": "type",
        "baseName": "type",
        "type": "string"
    },
    {
        "name": "bin",
        "baseName": "bin",
        "type": "string"
    }
];
class Riskv1liststypeentriesRiskInformation {
    static getAttributeTypeMap() {
        return Riskv1liststypeentriesRiskInformation.attributeTypeMap;
    }
}
exports.Riskv1liststypeentriesRiskInformation = Riskv1liststypeentriesRiskInformation;
Riskv1liststypeentriesRiskInformation.discriminator = undefined;
Riskv1liststypeentriesRiskInformation.attributeTypeMap = [
    {
        "name": "markingDetails",
        "baseName": "markingDetails",
        "type": "Riskv1liststypeentriesRiskInformationMarkingDetails"
    }
];
/**
* Details for marking the transaction as either positive or negative.
*/
class Riskv1liststypeentriesRiskInformationMarkingDetails {
    static getAttributeTypeMap() {
        return Riskv1liststypeentriesRiskInformationMarkingDetails.attributeTypeMap;
    }
}
exports.Riskv1liststypeentriesRiskInformationMarkingDetails = Riskv1liststypeentriesRiskInformationMarkingDetails;
Riskv1liststypeentriesRiskInformationMarkingDetails.discriminator = undefined;
Riskv1liststypeentriesRiskInformationMarkingDetails.attributeTypeMap = [
    {
        "name": "notes",
        "baseName": "notes",
        "type": "string"
    },
    {
        "name": "reason",
        "baseName": "reason",
        "type": "string"
    },
    {
        "name": "recordName",
        "baseName": "recordName",
        "type": "string"
    },
    {
        "name": "action",
        "baseName": "action",
        "type": "string"
    }
];
class SAConfig {
    static getAttributeTypeMap() {
        return SAConfig.attributeTypeMap;
    }
}
exports.SAConfig = SAConfig;
SAConfig.discriminator = undefined;
SAConfig.attributeTypeMap = [
    {
        "name": "parentProfileId",
        "baseName": "parentProfileId",
        "type": "string"
    },
    {
        "name": "contactInformation",
        "baseName": "contactInformation",
        "type": "SAConfigContactInformation"
    },
    {
        "name": "notifications",
        "baseName": "notifications",
        "type": "SAConfigNotifications"
    },
    {
        "name": "service",
        "baseName": "service",
        "type": "SAConfigService"
    },
    {
        "name": "paymentMethods",
        "baseName": "paymentMethods",
        "type": "SAConfigPaymentMethods"
    },
    {
        "name": "checkout",
        "baseName": "checkout",
        "type": "SAConfigCheckout"
    },
    {
        "name": "paymentTypes",
        "baseName": "paymentTypes",
        "type": "SAConfigPaymentTypes"
    }
];
class SAConfigCheckout {
    static getAttributeTypeMap() {
        return SAConfigCheckout.attributeTypeMap;
    }
}
exports.SAConfigCheckout = SAConfigCheckout;
SAConfigCheckout.discriminator = undefined;
SAConfigCheckout.attributeTypeMap = [
    {
        "name": "displayTaxAmount",
        "baseName": "displayTaxAmount",
        "type": "boolean"
    },
    {
        "name": "templateType",
        "baseName": "templateType",
        "type": "string"
    },
    {
        "name": "returnToMerchantSiteUrl",
        "baseName": "returnToMerchantSiteUrl",
        "type": "string"
    }
];
/**
* Optional contact information to be associated with the Secure Acceptance profile - for example the developer of the integration to the Hosted Checkout.
*/
class SAConfigContactInformation {
    static getAttributeTypeMap() {
        return SAConfigContactInformation.attributeTypeMap;
    }
}
exports.SAConfigContactInformation = SAConfigContactInformation;
SAConfigContactInformation.discriminator = undefined;
SAConfigContactInformation.attributeTypeMap = [
    {
        "name": "phone",
        "baseName": "phone",
        "type": "string"
    },
    {
        "name": "companyName",
        "baseName": "companyName",
        "type": "string"
    },
    {
        "name": "email",
        "baseName": "email",
        "type": "string"
    },
    {
        "name": "name",
        "baseName": "name",
        "type": "string"
    }
];
class SAConfigNotifications {
    static getAttributeTypeMap() {
        return SAConfigNotifications.attributeTypeMap;
    }
}
exports.SAConfigNotifications = SAConfigNotifications;
SAConfigNotifications.discriminator = undefined;
SAConfigNotifications.attributeTypeMap = [
    {
        "name": "merchantNotifications",
        "baseName": "merchantNotifications",
        "type": "SAConfigNotificationsMerchantNotifications"
    },
    {
        "name": "customerNotifications",
        "baseName": "customerNotifications",
        "type": "SAConfigNotificationsCustomerNotifications"
    }
];
/**
* Features relating to notifications being sent directly to the payer using the Hosted Checkout.
*/
class SAConfigNotificationsCustomerNotifications {
    static getAttributeTypeMap() {
        return SAConfigNotificationsCustomerNotifications.attributeTypeMap;
    }
}
exports.SAConfigNotificationsCustomerNotifications = SAConfigNotificationsCustomerNotifications;
SAConfigNotificationsCustomerNotifications.discriminator = undefined;
SAConfigNotificationsCustomerNotifications.attributeTypeMap = [
    {
        "name": "customReceiptPageEnabled",
        "baseName": "customReceiptPageEnabled",
        "type": "boolean"
    },
    {
        "name": "receiptEmailAddress",
        "baseName": "receiptEmailAddress",
        "type": "string"
    },
    {
        "name": "customerReceiptEmailEnabled",
        "baseName": "customerReceiptEmailEnabled",
        "type": "boolean"
    },
    {
        "name": "customCancelPage",
        "baseName": "customCancelPage",
        "type": "string"
    },
    {
        "name": "customReceiptPage",
        "baseName": "customReceiptPage",
        "type": "string"
    },
    {
        "name": "customCancelPageEnabled",
        "baseName": "customCancelPageEnabled",
        "type": "boolean"
    },
    {
        "name": "notificationReceiptEmailEnabled",
        "baseName": "notificationReceiptEmailEnabled",
        "type": "boolean"
    }
];
class SAConfigNotificationsMerchantNotifications {
    static getAttributeTypeMap() {
        return SAConfigNotificationsMerchantNotifications.attributeTypeMap;
    }
}
exports.SAConfigNotificationsMerchantNotifications = SAConfigNotificationsMerchantNotifications;
SAConfigNotificationsMerchantNotifications.discriminator = undefined;
SAConfigNotificationsMerchantNotifications.attributeTypeMap = [
    {
        "name": "backofficePostEnabled",
        "baseName": "backofficePostEnabled",
        "type": "boolean"
    },
    {
        "name": "backofficeEmailAddress",
        "baseName": "backofficeEmailAddress",
        "type": "string"
    },
    {
        "name": "backofficeEmailEnabled",
        "baseName": "backofficeEmailEnabled",
        "type": "boolean"
    },
    {
        "name": "backofficePostUrl",
        "baseName": "backofficePostUrl",
        "type": "string"
    },
    {
        "name": "cardNumberFormat",
        "baseName": "cardNumberFormat",
        "type": "string"
    }
];
class SAConfigPaymentMethods {
    static getAttributeTypeMap() {
        return SAConfigPaymentMethods.attributeTypeMap;
    }
}
exports.SAConfigPaymentMethods = SAConfigPaymentMethods;
SAConfigPaymentMethods.discriminator = undefined;
SAConfigPaymentMethods.attributeTypeMap = [
    {
        "name": "enabledPaymentMethods",
        "baseName": "enabledPaymentMethods",
        "type": "Array<SAConfigPaymentMethods.EnabledPaymentMethodsEnum>"
    }
];
(function (SAConfigPaymentMethods) {
    let EnabledPaymentMethodsEnum;
    (function (EnabledPaymentMethodsEnum) {
        EnabledPaymentMethodsEnum[EnabledPaymentMethodsEnum["CARD"] = 'CARD'] = "CARD";
        EnabledPaymentMethodsEnum[EnabledPaymentMethodsEnum["ECHECK"] = 'ECHECK'] = "ECHECK";
        EnabledPaymentMethodsEnum[EnabledPaymentMethodsEnum["VISACHECKOUT"] = 'VISACHECKOUT'] = "VISACHECKOUT";
        EnabledPaymentMethodsEnum[EnabledPaymentMethodsEnum["PAYPAL"] = 'PAYPAL'] = "PAYPAL";
    })(EnabledPaymentMethodsEnum = SAConfigPaymentMethods.EnabledPaymentMethodsEnum || (SAConfigPaymentMethods.EnabledPaymentMethodsEnum = {}));
})(SAConfigPaymentMethods = exports.SAConfigPaymentMethods || (exports.SAConfigPaymentMethods = {}));
/**
* Object containing Payment Types supported
*/
class SAConfigPaymentTypes {
    static getAttributeTypeMap() {
        return SAConfigPaymentTypes.attributeTypeMap;
    }
}
exports.SAConfigPaymentTypes = SAConfigPaymentTypes;
SAConfigPaymentTypes.discriminator = undefined;
SAConfigPaymentTypes.attributeTypeMap = [
    {
        "name": "cardTypes",
        "baseName": "cardTypes",
        "type": "SAConfigPaymentTypesCardTypes"
    }
];
class SAConfigPaymentTypesCardTypes {
    static getAttributeTypeMap() {
        return SAConfigPaymentTypesCardTypes.attributeTypeMap;
    }
}
exports.SAConfigPaymentTypesCardTypes = SAConfigPaymentTypesCardTypes;
SAConfigPaymentTypesCardTypes.discriminator = undefined;
SAConfigPaymentTypesCardTypes.attributeTypeMap = [
    {
        "name": "discover",
        "baseName": "discover",
        "type": "SAConfigPaymentTypesCardTypesDiscover"
    },
    {
        "name": "amex",
        "baseName": "amex",
        "type": "SAConfigPaymentTypesCardTypesDiscover"
    },
    {
        "name": "masterCard",
        "baseName": "masterCard",
        "type": "SAConfigPaymentTypesCardTypesDiscover"
    },
    {
        "name": "visa",
        "baseName": "visa",
        "type": "SAConfigPaymentTypesCardTypesDiscover"
    }
];
/**
* Object containing supported Card Types and settings
*/
class SAConfigPaymentTypesCardTypesDiscover {
    static getAttributeTypeMap() {
        return SAConfigPaymentTypesCardTypesDiscover.attributeTypeMap;
    }
}
exports.SAConfigPaymentTypesCardTypesDiscover = SAConfigPaymentTypesCardTypesDiscover;
SAConfigPaymentTypesCardTypesDiscover.discriminator = undefined;
SAConfigPaymentTypesCardTypesDiscover.attributeTypeMap = [
    {
        "name": "cardVerificationNumberSupported",
        "baseName": "cardVerificationNumberSupported",
        "type": "boolean"
    },
    {
        "name": "cardVerificationNumberDisplay",
        "baseName": "cardVerificationNumberDisplay",
        "type": "boolean"
    },
    {
        "name": "payerAuthenticationSupported",
        "baseName": "payerAuthenticationSupported",
        "type": "boolean"
    },
    {
        "name": "supportedCurrencies",
        "baseName": "supportedCurrencies",
        "type": "Array<string>"
    },
    {
        "name": "method",
        "baseName": "method",
        "type": "string"
    },
    {
        "name": "cardVerificationNumberRequired",
        "baseName": "cardVerificationNumberRequired",
        "type": "boolean"
    },
    {
        "name": "payerAuthenticationEnabled",
        "baseName": "payerAuthenticationEnabled",
        "type": "boolean"
    }
];
class SAConfigService {
    static getAttributeTypeMap() {
        return SAConfigService.attributeTypeMap;
    }
}
exports.SAConfigService = SAConfigService;
SAConfigService.discriminator = undefined;
SAConfigService.attributeTypeMap = [
    {
        "name": "decisionManagerVerboseEnabled",
        "baseName": "decisionManagerVerboseEnabled",
        "type": "boolean"
    },
    {
        "name": "declinedRetryLimit",
        "baseName": "declinedRetryLimit",
        "type": "number"
    },
    {
        "name": "decisionManagerEnabled",
        "baseName": "decisionManagerEnabled",
        "type": "boolean"
    },
    {
        "name": "tokenizationEnabled",
        "baseName": "tokenizationEnabled",
        "type": "boolean"
    },
    {
        "name": "reverseAuthOnAddressVerificationSystemFailure",
        "baseName": "reverseAuthOnAddressVerificationSystemFailure",
        "type": "boolean"
    },
    {
        "name": "deviceFingerprintEnabled",
        "baseName": "deviceFingerprintEnabled",
        "type": "boolean"
    },
    {
        "name": "reverseAuthOnCardVerificationNumberFailure",
        "baseName": "reverseAuthOnCardVerificationNumberFailure",
        "type": "boolean"
    }
];
class SaveAsymEgressKey {
    static getAttributeTypeMap() {
        return SaveAsymEgressKey.attributeTypeMap;
    }
}
exports.SaveAsymEgressKey = SaveAsymEgressKey;
SaveAsymEgressKey.discriminator = undefined;
SaveAsymEgressKey.attributeTypeMap = [
    {
        "name": "clientReferenceInformation",
        "baseName": "clientReferenceInformation",
        "type": "Kmsegressv2keysasymClientReferenceInformation"
    },
    {
        "name": "clientRequestAction",
        "baseName": "clientRequestAction",
        "type": "string"
    },
    {
        "name": "keyInformation",
        "baseName": "keyInformation",
        "type": "Kmsegressv2keysasymKeyInformation"
    }
];
class SaveSymEgressKey {
    static getAttributeTypeMap() {
        return SaveSymEgressKey.attributeTypeMap;
    }
}
exports.SaveSymEgressKey = SaveSymEgressKey;
SaveSymEgressKey.discriminator = undefined;
SaveSymEgressKey.attributeTypeMap = [
    {
        "name": "clientReferenceInformation",
        "baseName": "clientReferenceInformation",
        "type": "Kmsegressv2keyssymClientReferenceInformation"
    },
    {
        "name": "clientRequestAction",
        "baseName": "clientRequestAction",
        "type": "string"
    },
    {
        "name": "keyInformation",
        "baseName": "keyInformation",
        "type": "Kmsegressv2keyssymKeyInformation"
    }
];
class SearchRequest {
    static getAttributeTypeMap() {
        return SearchRequest.attributeTypeMap;
    }
}
exports.SearchRequest = SearchRequest;
SearchRequest.discriminator = undefined;
SearchRequest.attributeTypeMap = [
    {
        "name": "organizationId",
        "baseName": "organizationId",
        "type": "string"
    },
    {
        "name": "userName",
        "baseName": "userName",
        "type": "string"
    },
    {
        "name": "roleId",
        "baseName": "roleId",
        "type": "string"
    },
    {
        "name": "permissionId",
        "baseName": "permissionId",
        "type": "string"
    }
];
/**
* A paginated container of Shipping Addresses.
*/
class ShippingAddressListForCustomer {
    static getAttributeTypeMap() {
        return ShippingAddressListForCustomer.attributeTypeMap;
    }
}
exports.ShippingAddressListForCustomer = ShippingAddressListForCustomer;
ShippingAddressListForCustomer.discriminator = undefined;
ShippingAddressListForCustomer.attributeTypeMap = [
    {
        "name": "links",
        "baseName": "_links",
        "type": "ShippingAddressListForCustomerLinks"
    },
    {
        "name": "offset",
        "baseName": "offset",
        "type": "number"
    },
    {
        "name": "limit",
        "baseName": "limit",
        "type": "number"
    },
    {
        "name": "count",
        "baseName": "count",
        "type": "number"
    },
    {
        "name": "total",
        "baseName": "total",
        "type": "number"
    },
    {
        "name": "embedded",
        "baseName": "_embedded",
        "type": "ShippingAddressListForCustomerEmbedded"
    }
];
/**
* Shipping Address Resources.
*/
class ShippingAddressListForCustomerEmbedded {
    static getAttributeTypeMap() {
        return ShippingAddressListForCustomerEmbedded.attributeTypeMap;
    }
}
exports.ShippingAddressListForCustomerEmbedded = ShippingAddressListForCustomerEmbedded;
ShippingAddressListForCustomerEmbedded.discriminator = undefined;
ShippingAddressListForCustomerEmbedded.attributeTypeMap = [
    {
        "name": "shippingAddresses",
        "baseName": "shippingAddresses",
        "type": "Array<Tmsv2customersEmbeddedDefaultShippingAddress>"
    }
];
class ShippingAddressListForCustomerLinks {
    static getAttributeTypeMap() {
        return ShippingAddressListForCustomerLinks.attributeTypeMap;
    }
}
exports.ShippingAddressListForCustomerLinks = ShippingAddressListForCustomerLinks;
ShippingAddressListForCustomerLinks.discriminator = undefined;
ShippingAddressListForCustomerLinks.attributeTypeMap = [
    {
        "name": "self",
        "baseName": "self",
        "type": "ShippingAddressListForCustomerLinksSelf"
    },
    {
        "name": "first",
        "baseName": "first",
        "type": "ShippingAddressListForCustomerLinksFirst"
    },
    {
        "name": "prev",
        "baseName": "prev",
        "type": "ShippingAddressListForCustomerLinksPrev"
    },
    {
        "name": "next",
        "baseName": "next",
        "type": "ShippingAddressListForCustomerLinksNext"
    },
    {
        "name": "last",
        "baseName": "last",
        "type": "ShippingAddressListForCustomerLinksLast"
    }
];
class ShippingAddressListForCustomerLinksFirst {
    static getAttributeTypeMap() {
        return ShippingAddressListForCustomerLinksFirst.attributeTypeMap;
    }
}
exports.ShippingAddressListForCustomerLinksFirst = ShippingAddressListForCustomerLinksFirst;
ShippingAddressListForCustomerLinksFirst.discriminator = undefined;
ShippingAddressListForCustomerLinksFirst.attributeTypeMap = [
    {
        "name": "href",
        "baseName": "href",
        "type": "string"
    }
];
class ShippingAddressListForCustomerLinksLast {
    static getAttributeTypeMap() {
        return ShippingAddressListForCustomerLinksLast.attributeTypeMap;
    }
}
exports.ShippingAddressListForCustomerLinksLast = ShippingAddressListForCustomerLinksLast;
ShippingAddressListForCustomerLinksLast.discriminator = undefined;
ShippingAddressListForCustomerLinksLast.attributeTypeMap = [
    {
        "name": "href",
        "baseName": "href",
        "type": "string"
    }
];
class ShippingAddressListForCustomerLinksNext {
    static getAttributeTypeMap() {
        return ShippingAddressListForCustomerLinksNext.attributeTypeMap;
    }
}
exports.ShippingAddressListForCustomerLinksNext = ShippingAddressListForCustomerLinksNext;
ShippingAddressListForCustomerLinksNext.discriminator = undefined;
ShippingAddressListForCustomerLinksNext.attributeTypeMap = [
    {
        "name": "href",
        "baseName": "href",
        "type": "string"
    }
];
class ShippingAddressListForCustomerLinksPrev {
    static getAttributeTypeMap() {
        return ShippingAddressListForCustomerLinksPrev.attributeTypeMap;
    }
}
exports.ShippingAddressListForCustomerLinksPrev = ShippingAddressListForCustomerLinksPrev;
ShippingAddressListForCustomerLinksPrev.discriminator = undefined;
ShippingAddressListForCustomerLinksPrev.attributeTypeMap = [
    {
        "name": "href",
        "baseName": "href",
        "type": "string"
    }
];
class ShippingAddressListForCustomerLinksSelf {
    static getAttributeTypeMap() {
        return ShippingAddressListForCustomerLinksSelf.attributeTypeMap;
    }
}
exports.ShippingAddressListForCustomerLinksSelf = ShippingAddressListForCustomerLinksSelf;
ShippingAddressListForCustomerLinksSelf.discriminator = undefined;
ShippingAddressListForCustomerLinksSelf.attributeTypeMap = [
    {
        "name": "href",
        "baseName": "href",
        "type": "string"
    }
];
class SuspendSubscriptionResponse {
    static getAttributeTypeMap() {
        return SuspendSubscriptionResponse.attributeTypeMap;
    }
}
exports.SuspendSubscriptionResponse = SuspendSubscriptionResponse;
SuspendSubscriptionResponse.discriminator = undefined;
SuspendSubscriptionResponse.attributeTypeMap = [
    {
        "name": "links",
        "baseName": "_links",
        "type": "PtsV2IncrementalAuthorizationPatch201ResponseLinks"
    },
    {
        "name": "id",
        "baseName": "id",
        "type": "string"
    },
    {
        "name": "submitTimeUtc",
        "baseName": "submitTimeUtc",
        "type": "string"
    },
    {
        "name": "status",
        "baseName": "status",
        "type": "string"
    },
    {
        "name": "subscriptionInformation",
        "baseName": "subscriptionInformation",
        "type": "SuspendSubscriptionResponseSubscriptionInformation"
    }
];
class SuspendSubscriptionResponseSubscriptionInformation {
    static getAttributeTypeMap() {
        return SuspendSubscriptionResponseSubscriptionInformation.attributeTypeMap;
    }
}
exports.SuspendSubscriptionResponseSubscriptionInformation = SuspendSubscriptionResponseSubscriptionInformation;
SuspendSubscriptionResponseSubscriptionInformation.discriminator = undefined;
SuspendSubscriptionResponseSubscriptionInformation.attributeTypeMap = [
    {
        "name": "code",
        "baseName": "code",
        "type": "string"
    },
    {
        "name": "status",
        "baseName": "status",
        "type": "string"
    }
];
class TaxRequest {
    static getAttributeTypeMap() {
        return TaxRequest.attributeTypeMap;
    }
}
exports.TaxRequest = TaxRequest;
TaxRequest.discriminator = undefined;
TaxRequest.attributeTypeMap = [
    {
        "name": "clientReferenceInformation",
        "baseName": "clientReferenceInformation",
        "type": "Vasv2taxClientReferenceInformation"
    },
    {
        "name": "taxInformation",
        "baseName": "taxInformation",
        "type": "Vasv2taxTaxInformation"
    },
    {
        "name": "orderInformation",
        "baseName": "orderInformation",
        "type": "Vasv2taxOrderInformation"
    },
    {
        "name": "merchantInformation",
        "baseName": "merchantInformation",
        "type": "Vasv2taxMerchantInformation"
    },
    {
        "name": "buyerInformation",
        "baseName": "buyerInformation",
        "type": "Vasv2taxBuyerInformation"
    }
];
class TmsAuthorizationOptions {
    static getAttributeTypeMap() {
        return TmsAuthorizationOptions.attributeTypeMap;
    }
}
exports.TmsAuthorizationOptions = TmsAuthorizationOptions;
TmsAuthorizationOptions.discriminator = undefined;
TmsAuthorizationOptions.attributeTypeMap = [
    {
        "name": "initiator",
        "baseName": "initiator",
        "type": "TmsAuthorizationOptionsInitiator"
    }
];
class TmsAuthorizationOptionsInitiator {
    static getAttributeTypeMap() {
        return TmsAuthorizationOptionsInitiator.attributeTypeMap;
    }
}
exports.TmsAuthorizationOptionsInitiator = TmsAuthorizationOptionsInitiator;
TmsAuthorizationOptionsInitiator.discriminator = undefined;
TmsAuthorizationOptionsInitiator.attributeTypeMap = [
    {
        "name": "merchantInitiatedTransaction",
        "baseName": "merchantInitiatedTransaction",
        "type": "TmsAuthorizationOptionsInitiatorMerchantInitiatedTransaction"
    }
];
class TmsAuthorizationOptionsInitiatorMerchantInitiatedTransaction {
    static getAttributeTypeMap() {
        return TmsAuthorizationOptionsInitiatorMerchantInitiatedTransaction.attributeTypeMap;
    }
}
exports.TmsAuthorizationOptionsInitiatorMerchantInitiatedTransaction = TmsAuthorizationOptionsInitiatorMerchantInitiatedTransaction;
TmsAuthorizationOptionsInitiatorMerchantInitiatedTransaction.discriminator = undefined;
TmsAuthorizationOptionsInitiatorMerchantInitiatedTransaction.attributeTypeMap = [
    {
        "name": "previousTransactionId",
        "baseName": "previousTransactionId",
        "type": "string"
    },
    {
        "name": "originalAuthorizedAmount",
        "baseName": "originalAuthorizedAmount",
        "type": "string"
    }
];
/**
* Bin Information of the PAN provided by BinLookUp Service. This is only retrieved when retrieveBinDetails=true is passed as a query parameter.
*/
class TmsBinLookup {
    static getAttributeTypeMap() {
        return TmsBinLookup.attributeTypeMap;
    }
}
exports.TmsBinLookup = TmsBinLookup;
TmsBinLookup.discriminator = undefined;
TmsBinLookup.attributeTypeMap = [
    {
        "name": "paymentAccountInformation",
        "baseName": "paymentAccountInformation",
        "type": "TmsBinLookupPaymentAccountInformation"
    },
    {
        "name": "issuerInformation",
        "baseName": "issuerInformation",
        "type": "TmsBinLookupIssuerInformation"
    }
];
class TmsBinLookupIssuerInformation {
    static getAttributeTypeMap() {
        return TmsBinLookupIssuerInformation.attributeTypeMap;
    }
}
exports.TmsBinLookupIssuerInformation = TmsBinLookupIssuerInformation;
TmsBinLookupIssuerInformation.discriminator = undefined;
TmsBinLookupIssuerInformation.attributeTypeMap = [
    {
        "name": "name",
        "baseName": "name",
        "type": "string"
    },
    {
        "name": "country",
        "baseName": "country",
        "type": "string"
    },
    {
        "name": "binLength",
        "baseName": "binLength",
        "type": "string"
    },
    {
        "name": "accountPrefix",
        "baseName": "accountPrefix",
        "type": "string"
    },
    {
        "name": "phoneNumber",
        "baseName": "phoneNumber",
        "type": "string"
    }
];
class TmsBinLookupPaymentAccountInformation {
    static getAttributeTypeMap() {
        return TmsBinLookupPaymentAccountInformation.attributeTypeMap;
    }
}
exports.TmsBinLookupPaymentAccountInformation = TmsBinLookupPaymentAccountInformation;
TmsBinLookupPaymentAccountInformation.discriminator = undefined;
TmsBinLookupPaymentAccountInformation.attributeTypeMap = [
    {
        "name": "card",
        "baseName": "card",
        "type": "TmsBinLookupPaymentAccountInformationCard"
    },
    {
        "name": "features",
        "baseName": "features",
        "type": "TmsBinLookupPaymentAccountInformationFeatures"
    },
    {
        "name": "network",
        "baseName": "network",
        "type": "TmsBinLookupPaymentAccountInformationNetwork"
    }
];
class TmsBinLookupPaymentAccountInformationCard {
    static getAttributeTypeMap() {
        return TmsBinLookupPaymentAccountInformationCard.attributeTypeMap;
    }
}
exports.TmsBinLookupPaymentAccountInformationCard = TmsBinLookupPaymentAccountInformationCard;
TmsBinLookupPaymentAccountInformationCard.discriminator = undefined;
TmsBinLookupPaymentAccountInformationCard.attributeTypeMap = [
    {
        "name": "type",
        "baseName": "type",
        "type": "string"
    },
    {
        "name": "brandName",
        "baseName": "brandName",
        "type": "string"
    },
    {
        "name": "currency",
        "baseName": "currency",
        "type": "string"
    },
    {
        "name": "maxLength",
        "baseName": "maxLength",
        "type": "string"
    },
    {
        "name": "credentialType",
        "baseName": "credentialType",
        "type": "string"
    },
    {
        "name": "brands",
        "baseName": "brands",
        "type": "Array<TmsBinLookupPaymentAccountInformationCardBrands>"
    }
];
class TmsBinLookupPaymentAccountInformationCardBrands {
    static getAttributeTypeMap() {
        return TmsBinLookupPaymentAccountInformationCardBrands.attributeTypeMap;
    }
}
exports.TmsBinLookupPaymentAccountInformationCardBrands = TmsBinLookupPaymentAccountInformationCardBrands;
TmsBinLookupPaymentAccountInformationCardBrands.discriminator = undefined;
TmsBinLookupPaymentAccountInformationCardBrands.attributeTypeMap = [
    {
        "name": "type",
        "baseName": "type",
        "type": "string"
    },
    {
        "name": "brandName",
        "baseName": "brandName",
        "type": "string"
    }
];
class TmsBinLookupPaymentAccountInformationFeatures {
    static getAttributeTypeMap() {
        return TmsBinLookupPaymentAccountInformationFeatures.attributeTypeMap;
    }
}
exports.TmsBinLookupPaymentAccountInformationFeatures = TmsBinLookupPaymentAccountInformationFeatures;
TmsBinLookupPaymentAccountInformationFeatures.discriminator = undefined;
TmsBinLookupPaymentAccountInformationFeatures.attributeTypeMap = [
    {
        "name": "accountFundingSource",
        "baseName": "accountFundingSource",
        "type": "string"
    },
    {
        "name": "accountFundingSourceSubType",
        "baseName": "accountFundingSourceSubType",
        "type": "string"
    },
    {
        "name": "cardProduct",
        "baseName": "cardProduct",
        "type": "string"
    },
    {
        "name": "messageType",
        "baseName": "messageType",
        "type": "string"
    },
    {
        "name": "acceptanceLevel",
        "baseName": "acceptanceLevel",
        "type": "string"
    },
    {
        "name": "cardPlatform",
        "baseName": "cardPlatform",
        "type": "string"
    },
    {
        "name": "comboCard",
        "baseName": "comboCard",
        "type": "string"
    },
    {
        "name": "corporatePurchase",
        "baseName": "corporatePurchase",
        "type": "boolean"
    },
    {
        "name": "healthCard",
        "baseName": "healthCard",
        "type": "boolean"
    },
    {
        "name": "sharedBIN",
        "baseName": "sharedBIN",
        "type": "boolean"
    },
    {
        "name": "posDomesticOnly",
        "baseName": "posDomesticOnly",
        "type": "boolean"
    },
    {
        "name": "gamblingAllowed",
        "baseName": "gamblingAllowed",
        "type": "boolean"
    },
    {
        "name": "commercialCardLevel2",
        "baseName": "commercialCardLevel2",
        "type": "boolean"
    },
    {
        "name": "commercialCardLevel3",
        "baseName": "commercialCardLevel3",
        "type": "boolean"
    },
    {
        "name": "exemptBIN",
        "baseName": "exemptBIN",
        "type": "boolean"
    },
    {
        "name": "accountLevelManagement",
        "baseName": "accountLevelManagement",
        "type": "boolean"
    },
    {
        "name": "onlineGamblingBlock",
        "baseName": "onlineGamblingBlock",
        "type": "boolean"
    },
    {
        "name": "autoSubstantiation",
        "baseName": "autoSubstantiation",
        "type": "boolean"
    },
    {
        "name": "flexCredential",
        "baseName": "flexCredential",
        "type": "boolean"
    }
];
class TmsBinLookupPaymentAccountInformationNetwork {
    static getAttributeTypeMap() {
        return TmsBinLookupPaymentAccountInformationNetwork.attributeTypeMap;
    }
}
exports.TmsBinLookupPaymentAccountInformationNetwork = TmsBinLookupPaymentAccountInformationNetwork;
TmsBinLookupPaymentAccountInformationNetwork.discriminator = undefined;
TmsBinLookupPaymentAccountInformationNetwork.attributeTypeMap = [
    {
        "name": "id",
        "baseName": "id",
        "type": "string"
    }
];
class TmsBusinessInformation {
    static getAttributeTypeMap() {
        return TmsBusinessInformation.attributeTypeMap;
    }
}
exports.TmsBusinessInformation = TmsBusinessInformation;
TmsBusinessInformation.discriminator = undefined;
TmsBusinessInformation.attributeTypeMap = [
    {
        "name": "name",
        "baseName": "name",
        "type": "string"
    },
    {
        "name": "doingBusinessAs",
        "baseName": "doingBusinessAs",
        "type": "string"
    },
    {
        "name": "address",
        "baseName": "address",
        "type": "TmsBusinessInformationAddress"
    },
    {
        "name": "websiteUrl",
        "baseName": "websiteUrl",
        "type": "string"
    },
    {
        "name": "businessIdentificationType",
        "baseName": "businessIdentificationType",
        "type": "string"
    },
    {
        "name": "businessIdentificationValue",
        "baseName": "businessIdentificationValue",
        "type": "string"
    },
    {
        "name": "acquirer",
        "baseName": "acquirer",
        "type": "TmsBusinessInformationAcquirer"
    }
];
class TmsBusinessInformationAcquirer {
    static getAttributeTypeMap() {
        return TmsBusinessInformationAcquirer.attributeTypeMap;
    }
}
exports.TmsBusinessInformationAcquirer = TmsBusinessInformationAcquirer;
TmsBusinessInformationAcquirer.discriminator = undefined;
TmsBusinessInformationAcquirer.attributeTypeMap = [
    {
        "name": "acquirerId",
        "baseName": "acquirerId",
        "type": "string"
    },
    {
        "name": "acquirerMerchantId",
        "baseName": "acquirerMerchantId",
        "type": "string"
    }
];
class TmsBusinessInformationAddress {
    static getAttributeTypeMap() {
        return TmsBusinessInformationAddress.attributeTypeMap;
    }
}
exports.TmsBusinessInformationAddress = TmsBusinessInformationAddress;
TmsBusinessInformationAddress.discriminator = undefined;
TmsBusinessInformationAddress.attributeTypeMap = [
    {
        "name": "country",
        "baseName": "country",
        "type": "string"
    },
    {
        "name": "locality",
        "baseName": "locality",
        "type": "string"
    }
];
/**
* Card art associated with the tokenized card.
*/
class TmsCardArt {
    static getAttributeTypeMap() {
        return TmsCardArt.attributeTypeMap;
    }
}
exports.TmsCardArt = TmsCardArt;
TmsCardArt.discriminator = undefined;
TmsCardArt.attributeTypeMap = [
    {
        "name": "foregroundColor",
        "baseName": "foregroundColor",
        "type": "string"
    },
    {
        "name": "combinedAsset",
        "baseName": "combinedAsset",
        "type": "TmsCardArtCombinedAsset"
    },
    {
        "name": "brandLogoAsset",
        "baseName": "brandLogoAsset",
        "type": "TmsCardArtBrandLogoAsset"
    },
    {
        "name": "issuerLogoAsset",
        "baseName": "issuerLogoAsset",
        "type": "TmsCardArtIssuerLogoAsset"
    },
    {
        "name": "iconAsset",
        "baseName": "iconAsset",
        "type": "TmsCardArtIconAsset"
    }
];
/**
* Brand logo card art asset associated with the tokenized card.
*/
class TmsCardArtBrandLogoAsset {
    static getAttributeTypeMap() {
        return TmsCardArtBrandLogoAsset.attributeTypeMap;
    }
}
exports.TmsCardArtBrandLogoAsset = TmsCardArtBrandLogoAsset;
TmsCardArtBrandLogoAsset.discriminator = undefined;
TmsCardArtBrandLogoAsset.attributeTypeMap = [
    {
        "name": "id",
        "baseName": "id",
        "type": "string"
    },
    {
        "name": "links",
        "baseName": "_links",
        "type": "TmsCardArtBrandLogoAssetLinks"
    }
];
class TmsCardArtBrandLogoAssetLinks {
    static getAttributeTypeMap() {
        return TmsCardArtBrandLogoAssetLinks.attributeTypeMap;
    }
}
exports.TmsCardArtBrandLogoAssetLinks = TmsCardArtBrandLogoAssetLinks;
TmsCardArtBrandLogoAssetLinks.discriminator = undefined;
TmsCardArtBrandLogoAssetLinks.attributeTypeMap = [
    {
        "name": "self",
        "baseName": "self",
        "type": "TmsCardArtBrandLogoAssetLinksSelf"
    }
];
class TmsCardArtBrandLogoAssetLinksSelf {
    static getAttributeTypeMap() {
        return TmsCardArtBrandLogoAssetLinksSelf.attributeTypeMap;
    }
}
exports.TmsCardArtBrandLogoAssetLinksSelf = TmsCardArtBrandLogoAssetLinksSelf;
TmsCardArtBrandLogoAssetLinksSelf.discriminator = undefined;
TmsCardArtBrandLogoAssetLinksSelf.attributeTypeMap = [
    {
        "name": "href",
        "baseName": "href",
        "type": "string"
    }
];
/**
* Combined card art asset associated with the tokenized card.
*/
class TmsCardArtCombinedAsset {
    static getAttributeTypeMap() {
        return TmsCardArtCombinedAsset.attributeTypeMap;
    }
}
exports.TmsCardArtCombinedAsset = TmsCardArtCombinedAsset;
TmsCardArtCombinedAsset.discriminator = undefined;
TmsCardArtCombinedAsset.attributeTypeMap = [
    {
        "name": "id",
        "baseName": "id",
        "type": "string"
    },
    {
        "name": "links",
        "baseName": "_links",
        "type": "TmsCardArtCombinedAssetLinks"
    }
];
class TmsCardArtCombinedAssetLinks {
    static getAttributeTypeMap() {
        return TmsCardArtCombinedAssetLinks.attributeTypeMap;
    }
}
exports.TmsCardArtCombinedAssetLinks = TmsCardArtCombinedAssetLinks;
TmsCardArtCombinedAssetLinks.discriminator = undefined;
TmsCardArtCombinedAssetLinks.attributeTypeMap = [
    {
        "name": "self",
        "baseName": "self",
        "type": "TmsCardArtCombinedAssetLinksSelf"
    }
];
class TmsCardArtCombinedAssetLinksSelf {
    static getAttributeTypeMap() {
        return TmsCardArtCombinedAssetLinksSelf.attributeTypeMap;
    }
}
exports.TmsCardArtCombinedAssetLinksSelf = TmsCardArtCombinedAssetLinksSelf;
TmsCardArtCombinedAssetLinksSelf.discriminator = undefined;
TmsCardArtCombinedAssetLinksSelf.attributeTypeMap = [
    {
        "name": "href",
        "baseName": "href",
        "type": "string"
    }
];
/**
* Icon card art asset associated with the tokenized card.
*/
class TmsCardArtIconAsset {
    static getAttributeTypeMap() {
        return TmsCardArtIconAsset.attributeTypeMap;
    }
}
exports.TmsCardArtIconAsset = TmsCardArtIconAsset;
TmsCardArtIconAsset.discriminator = undefined;
TmsCardArtIconAsset.attributeTypeMap = [
    {
        "name": "id",
        "baseName": "id",
        "type": "string"
    },
    {
        "name": "links",
        "baseName": "_links",
        "type": "TmsCardArtIconAssetLinks"
    }
];
class TmsCardArtIconAssetLinks {
    static getAttributeTypeMap() {
        return TmsCardArtIconAssetLinks.attributeTypeMap;
    }
}
exports.TmsCardArtIconAssetLinks = TmsCardArtIconAssetLinks;
TmsCardArtIconAssetLinks.discriminator = undefined;
TmsCardArtIconAssetLinks.attributeTypeMap = [
    {
        "name": "self",
        "baseName": "self",
        "type": "TmsCardArtIconAssetLinksSelf"
    }
];
class TmsCardArtIconAssetLinksSelf {
    static getAttributeTypeMap() {
        return TmsCardArtIconAssetLinksSelf.attributeTypeMap;
    }
}
exports.TmsCardArtIconAssetLinksSelf = TmsCardArtIconAssetLinksSelf;
TmsCardArtIconAssetLinksSelf.discriminator = undefined;
TmsCardArtIconAssetLinksSelf.attributeTypeMap = [
    {
        "name": "href",
        "baseName": "href",
        "type": "string"
    }
];
/**
* Issuer logo card art asset associated with the tokenized card.
*/
class TmsCardArtIssuerLogoAsset {
    static getAttributeTypeMap() {
        return TmsCardArtIssuerLogoAsset.attributeTypeMap;
    }
}
exports.TmsCardArtIssuerLogoAsset = TmsCardArtIssuerLogoAsset;
TmsCardArtIssuerLogoAsset.discriminator = undefined;
TmsCardArtIssuerLogoAsset.attributeTypeMap = [
    {
        "name": "id",
        "baseName": "id",
        "type": "string"
    },
    {
        "name": "links",
        "baseName": "_links",
        "type": "TmsCardArtIssuerLogoAssetLinks"
    }
];
class TmsCardArtIssuerLogoAssetLinks {
    static getAttributeTypeMap() {
        return TmsCardArtIssuerLogoAssetLinks.attributeTypeMap;
    }
}
exports.TmsCardArtIssuerLogoAssetLinks = TmsCardArtIssuerLogoAssetLinks;
TmsCardArtIssuerLogoAssetLinks.discriminator = undefined;
TmsCardArtIssuerLogoAssetLinks.attributeTypeMap = [
    {
        "name": "self",
        "baseName": "self",
        "type": "TmsCardArtIssuerLogoAssetLinksSelf"
    }
];
class TmsCardArtIssuerLogoAssetLinksSelf {
    static getAttributeTypeMap() {
        return TmsCardArtIssuerLogoAssetLinksSelf.attributeTypeMap;
    }
}
exports.TmsCardArtIssuerLogoAssetLinksSelf = TmsCardArtIssuerLogoAssetLinksSelf;
TmsCardArtIssuerLogoAssetLinksSelf.discriminator = undefined;
TmsCardArtIssuerLogoAssetLinksSelf.attributeTypeMap = [
    {
        "name": "href",
        "baseName": "href",
        "type": "string"
    }
];
class TmsEmbeddedInstrumentIdentifier {
    static getAttributeTypeMap() {
        return TmsEmbeddedInstrumentIdentifier.attributeTypeMap;
    }
}
exports.TmsEmbeddedInstrumentIdentifier = TmsEmbeddedInstrumentIdentifier;
TmsEmbeddedInstrumentIdentifier.discriminator = undefined;
TmsEmbeddedInstrumentIdentifier.attributeTypeMap = [
    {
        "name": "links",
        "baseName": "_links",
        "type": "TmsEmbeddedInstrumentIdentifierLinks"
    },
    {
        "name": "id",
        "baseName": "id",
        "type": "string"
    },
    {
        "name": "object",
        "baseName": "object",
        "type": "string"
    },
    {
        "name": "state",
        "baseName": "state",
        "type": "string"
    },
    {
        "name": "type",
        "baseName": "type",
        "type": "string"
    },
    {
        "name": "tokenProvisioningInformation",
        "baseName": "tokenProvisioningInformation",
        "type": "Ptsv2paymentsTokenInformationTokenProvisioningInformation"
    },
    {
        "name": "card",
        "baseName": "card",
        "type": "TmsEmbeddedInstrumentIdentifierCard"
    },
    {
        "name": "bankAccount",
        "baseName": "bankAccount",
        "type": "TmsEmbeddedInstrumentIdentifierBankAccount"
    },
    {
        "name": "tokenizedCard",
        "baseName": "tokenizedCard",
        "type": "Tmsv2TokenizedCard"
    },
    {
        "name": "issuer",
        "baseName": "issuer",
        "type": "TmsEmbeddedInstrumentIdentifierIssuer"
    },
    {
        "name": "processingInformation",
        "baseName": "processingInformation",
        "type": "TmsEmbeddedInstrumentIdentifierProcessingInformation"
    },
    {
        "name": "billTo",
        "baseName": "billTo",
        "type": "TmsEmbeddedInstrumentIdentifierBillTo"
    },
    {
        "name": "metadata",
        "baseName": "metadata",
        "type": "TmsEmbeddedInstrumentIdentifierMetadata"
    },
    {
        "name": "embedded",
        "baseName": "_embedded",
        "type": "TmsEmbeddedInstrumentIdentifierEmbedded"
    }
];
class TmsEmbeddedInstrumentIdentifierBankAccount {
    static getAttributeTypeMap() {
        return TmsEmbeddedInstrumentIdentifierBankAccount.attributeTypeMap;
    }
}
exports.TmsEmbeddedInstrumentIdentifierBankAccount = TmsEmbeddedInstrumentIdentifierBankAccount;
TmsEmbeddedInstrumentIdentifierBankAccount.discriminator = undefined;
TmsEmbeddedInstrumentIdentifierBankAccount.attributeTypeMap = [
    {
        "name": "number",
        "baseName": "number",
        "type": "string"
    },
    {
        "name": "routingNumber",
        "baseName": "routingNumber",
        "type": "string"
    }
];
/**
* This information is sent to the issuer as part of network token enrollment and is not stored under the Instrument Identifier.
*/
class TmsEmbeddedInstrumentIdentifierBillTo {
    static getAttributeTypeMap() {
        return TmsEmbeddedInstrumentIdentifierBillTo.attributeTypeMap;
    }
}
exports.TmsEmbeddedInstrumentIdentifierBillTo = TmsEmbeddedInstrumentIdentifierBillTo;
TmsEmbeddedInstrumentIdentifierBillTo.discriminator = undefined;
TmsEmbeddedInstrumentIdentifierBillTo.attributeTypeMap = [
    {
        "name": "address1",
        "baseName": "address1",
        "type": "string"
    },
    {
        "name": "address2",
        "baseName": "address2",
        "type": "string"
    },
    {
        "name": "locality",
        "baseName": "locality",
        "type": "string"
    },
    {
        "name": "administrativeArea",
        "baseName": "administrativeArea",
        "type": "string"
    },
    {
        "name": "postalCode",
        "baseName": "postalCode",
        "type": "string"
    },
    {
        "name": "country",
        "baseName": "country",
        "type": "string"
    }
];
/**
* The expirationMonth, expirationYear and securityCode is sent to the issuer as part of network token enrollment and is not stored under the Instrument Identifier.
*/
class TmsEmbeddedInstrumentIdentifierCard {
    static getAttributeTypeMap() {
        return TmsEmbeddedInstrumentIdentifierCard.attributeTypeMap;
    }
}
exports.TmsEmbeddedInstrumentIdentifierCard = TmsEmbeddedInstrumentIdentifierCard;
TmsEmbeddedInstrumentIdentifierCard.discriminator = undefined;
TmsEmbeddedInstrumentIdentifierCard.attributeTypeMap = [
    {
        "name": "number",
        "baseName": "number",
        "type": "string"
    },
    {
        "name": "expirationMonth",
        "baseName": "expirationMonth",
        "type": "string"
    },
    {
        "name": "expirationYear",
        "baseName": "expirationYear",
        "type": "string"
    },
    {
        "name": "securityCode",
        "baseName": "securityCode",
        "type": "string"
    }
];
class TmsEmbeddedInstrumentIdentifierEmbedded {
    static getAttributeTypeMap() {
        return TmsEmbeddedInstrumentIdentifierEmbedded.attributeTypeMap;
    }
}
exports.TmsEmbeddedInstrumentIdentifierEmbedded = TmsEmbeddedInstrumentIdentifierEmbedded;
TmsEmbeddedInstrumentIdentifierEmbedded.discriminator = undefined;
TmsEmbeddedInstrumentIdentifierEmbedded.attributeTypeMap = [
    {
        "name": "binLookup",
        "baseName": "binLookup",
        "type": "TmsBinLookup"
    }
];
class TmsEmbeddedInstrumentIdentifierIssuer {
    static getAttributeTypeMap() {
        return TmsEmbeddedInstrumentIdentifierIssuer.attributeTypeMap;
    }
}
exports.TmsEmbeddedInstrumentIdentifierIssuer = TmsEmbeddedInstrumentIdentifierIssuer;
TmsEmbeddedInstrumentIdentifierIssuer.discriminator = undefined;
TmsEmbeddedInstrumentIdentifierIssuer.attributeTypeMap = [
    {
        "name": "paymentAccountReference",
        "baseName": "paymentAccountReference",
        "type": "string"
    }
];
class TmsEmbeddedInstrumentIdentifierLinks {
    static getAttributeTypeMap() {
        return TmsEmbeddedInstrumentIdentifierLinks.attributeTypeMap;
    }
}
exports.TmsEmbeddedInstrumentIdentifierLinks = TmsEmbeddedInstrumentIdentifierLinks;
TmsEmbeddedInstrumentIdentifierLinks.discriminator = undefined;
TmsEmbeddedInstrumentIdentifierLinks.attributeTypeMap = [
    {
        "name": "self",
        "baseName": "self",
        "type": "TmsEmbeddedInstrumentIdentifierLinksSelf"
    },
    {
        "name": "paymentInstruments",
        "baseName": "paymentInstruments",
        "type": "TmsEmbeddedInstrumentIdentifierLinksPaymentInstruments"
    }
];
class TmsEmbeddedInstrumentIdentifierLinksPaymentInstruments {
    static getAttributeTypeMap() {
        return TmsEmbeddedInstrumentIdentifierLinksPaymentInstruments.attributeTypeMap;
    }
}
exports.TmsEmbeddedInstrumentIdentifierLinksPaymentInstruments = TmsEmbeddedInstrumentIdentifierLinksPaymentInstruments;
TmsEmbeddedInstrumentIdentifierLinksPaymentInstruments.discriminator = undefined;
TmsEmbeddedInstrumentIdentifierLinksPaymentInstruments.attributeTypeMap = [
    {
        "name": "href",
        "baseName": "href",
        "type": "string"
    }
];
class TmsEmbeddedInstrumentIdentifierLinksSelf {
    static getAttributeTypeMap() {
        return TmsEmbeddedInstrumentIdentifierLinksSelf.attributeTypeMap;
    }
}
exports.TmsEmbeddedInstrumentIdentifierLinksSelf = TmsEmbeddedInstrumentIdentifierLinksSelf;
TmsEmbeddedInstrumentIdentifierLinksSelf.discriminator = undefined;
TmsEmbeddedInstrumentIdentifierLinksSelf.attributeTypeMap = [
    {
        "name": "href",
        "baseName": "href",
        "type": "string"
    }
];
class TmsEmbeddedInstrumentIdentifierMetadata {
    static getAttributeTypeMap() {
        return TmsEmbeddedInstrumentIdentifierMetadata.attributeTypeMap;
    }
}
exports.TmsEmbeddedInstrumentIdentifierMetadata = TmsEmbeddedInstrumentIdentifierMetadata;
TmsEmbeddedInstrumentIdentifierMetadata.discriminator = undefined;
TmsEmbeddedInstrumentIdentifierMetadata.attributeTypeMap = [
    {
        "name": "creator",
        "baseName": "creator",
        "type": "string"
    }
];
class TmsEmbeddedInstrumentIdentifierProcessingInformation {
    static getAttributeTypeMap() {
        return TmsEmbeddedInstrumentIdentifierProcessingInformation.attributeTypeMap;
    }
}
exports.TmsEmbeddedInstrumentIdentifierProcessingInformation = TmsEmbeddedInstrumentIdentifierProcessingInformation;
TmsEmbeddedInstrumentIdentifierProcessingInformation.discriminator = undefined;
TmsEmbeddedInstrumentIdentifierProcessingInformation.attributeTypeMap = [
    {
        "name": "authorizationOptions",
        "baseName": "authorizationOptions",
        "type": "TmsAuthorizationOptions"
    }
];
class TmsNetworkTokenServices {
    static getAttributeTypeMap() {
        return TmsNetworkTokenServices.attributeTypeMap;
    }
}
exports.TmsNetworkTokenServices = TmsNetworkTokenServices;
TmsNetworkTokenServices.discriminator = undefined;
TmsNetworkTokenServices.attributeTypeMap = [
    {
        "name": "notifications",
        "baseName": "notifications",
        "type": "TmsNetworkTokenServicesNotifications"
    },
    {
        "name": "paymentCredentials",
        "baseName": "paymentCredentials",
        "type": "TmsNetworkTokenServicesPaymentCredentials"
    },
    {
        "name": "synchronousProvisioning",
        "baseName": "synchronousProvisioning",
        "type": "TmsNetworkTokenServicesSynchronousProvisioning"
    },
    {
        "name": "visaTokenService",
        "baseName": "visaTokenService",
        "type": "TmsNetworkTokenServicesVisaTokenService"
    },
    {
        "name": "mastercardDigitalEnablementService",
        "baseName": "mastercardDigitalEnablementService",
        "type": "TmsNetworkTokenServicesMastercardDigitalEnablementService"
    },
    {
        "name": "americanExpressTokenService",
        "baseName": "americanExpressTokenService",
        "type": "TmsNetworkTokenServicesAmericanExpressTokenService"
    }
];
class TmsNetworkTokenServicesAmericanExpressTokenService {
    static getAttributeTypeMap() {
        return TmsNetworkTokenServicesAmericanExpressTokenService.attributeTypeMap;
    }
}
exports.TmsNetworkTokenServicesAmericanExpressTokenService = TmsNetworkTokenServicesAmericanExpressTokenService;
TmsNetworkTokenServicesAmericanExpressTokenService.discriminator = undefined;
TmsNetworkTokenServicesAmericanExpressTokenService.attributeTypeMap = [
    {
        "name": "enableService",
        "baseName": "enableService",
        "type": "boolean"
    },
    {
        "name": "enableTransactionalTokens",
        "baseName": "enableTransactionalTokens",
        "type": "boolean"
    },
    {
        "name": "tokenRequestorId",
        "baseName": "tokenRequestorId",
        "type": "string"
    },
    {
        "name": "seNumber",
        "baseName": "seNumber",
        "type": "string"
    }
];
class TmsNetworkTokenServicesMastercardDigitalEnablementService {
    static getAttributeTypeMap() {
        return TmsNetworkTokenServicesMastercardDigitalEnablementService.attributeTypeMap;
    }
}
exports.TmsNetworkTokenServicesMastercardDigitalEnablementService = TmsNetworkTokenServicesMastercardDigitalEnablementService;
TmsNetworkTokenServicesMastercardDigitalEnablementService.discriminator = undefined;
TmsNetworkTokenServicesMastercardDigitalEnablementService.attributeTypeMap = [
    {
        "name": "enableService",
        "baseName": "enableService",
        "type": "boolean"
    },
    {
        "name": "enableTransactionalTokens",
        "baseName": "enableTransactionalTokens",
        "type": "boolean"
    },
    {
        "name": "tokenRequestorId",
        "baseName": "tokenRequestorId",
        "type": "string"
    }
];
class TmsNetworkTokenServicesNotifications {
    static getAttributeTypeMap() {
        return TmsNetworkTokenServicesNotifications.attributeTypeMap;
    }
}
exports.TmsNetworkTokenServicesNotifications = TmsNetworkTokenServicesNotifications;
TmsNetworkTokenServicesNotifications.discriminator = undefined;
TmsNetworkTokenServicesNotifications.attributeTypeMap = [
    {
        "name": "enabled",
        "baseName": "enabled",
        "type": "boolean"
    }
];
class TmsNetworkTokenServicesPaymentCredentials {
    static getAttributeTypeMap() {
        return TmsNetworkTokenServicesPaymentCredentials.attributeTypeMap;
    }
}
exports.TmsNetworkTokenServicesPaymentCredentials = TmsNetworkTokenServicesPaymentCredentials;
TmsNetworkTokenServicesPaymentCredentials.discriminator = undefined;
TmsNetworkTokenServicesPaymentCredentials.attributeTypeMap = [
    {
        "name": "enabled",
        "baseName": "enabled",
        "type": "boolean"
    }
];
class TmsNetworkTokenServicesSynchronousProvisioning {
    static getAttributeTypeMap() {
        return TmsNetworkTokenServicesSynchronousProvisioning.attributeTypeMap;
    }
}
exports.TmsNetworkTokenServicesSynchronousProvisioning = TmsNetworkTokenServicesSynchronousProvisioning;
TmsNetworkTokenServicesSynchronousProvisioning.discriminator = undefined;
TmsNetworkTokenServicesSynchronousProvisioning.attributeTypeMap = [
    {
        "name": "enabled",
        "baseName": "enabled",
        "type": "boolean"
    }
];
class TmsNetworkTokenServicesVisaTokenService {
    static getAttributeTypeMap() {
        return TmsNetworkTokenServicesVisaTokenService.attributeTypeMap;
    }
}
exports.TmsNetworkTokenServicesVisaTokenService = TmsNetworkTokenServicesVisaTokenService;
TmsNetworkTokenServicesVisaTokenService.discriminator = undefined;
TmsNetworkTokenServicesVisaTokenService.attributeTypeMap = [
    {
        "name": "enableService",
        "baseName": "enableService",
        "type": "boolean"
    },
    {
        "name": "enableTransactionalTokens",
        "baseName": "enableTransactionalTokens",
        "type": "boolean"
    },
    {
        "name": "tokenRequestorId",
        "baseName": "tokenRequestorId",
        "type": "string"
    },
    {
        "name": "relationshipId",
        "baseName": "relationshipId",
        "type": "string"
    }
];
class TmsNullify {
    static getAttributeTypeMap() {
        return TmsNullify.attributeTypeMap;
    }
}
exports.TmsNullify = TmsNullify;
TmsNullify.discriminator = undefined;
TmsNullify.attributeTypeMap = [
    {
        "name": "instrumentIdentifierCardNumber",
        "baseName": "instrumentIdentifierCardNumber",
        "type": "boolean"
    },
    {
        "name": "instrumentIdentifierCardExpiration",
        "baseName": "instrumentIdentifierCardExpiration",
        "type": "boolean"
    },
    {
        "name": "paymentInstrumentCardDetails",
        "baseName": "paymentInstrumentCardDetails",
        "type": "boolean"
    }
];
class TmsPaymentInstrumentProcessingInfo {
    static getAttributeTypeMap() {
        return TmsPaymentInstrumentProcessingInfo.attributeTypeMap;
    }
}
exports.TmsPaymentInstrumentProcessingInfo = TmsPaymentInstrumentProcessingInfo;
TmsPaymentInstrumentProcessingInfo.discriminator = undefined;
TmsPaymentInstrumentProcessingInfo.attributeTypeMap = [
    {
        "name": "billPaymentProgramEnabled",
        "baseName": "billPaymentProgramEnabled",
        "type": "boolean"
    },
    {
        "name": "bankTransferOptions",
        "baseName": "bankTransferOptions",
        "type": "TmsPaymentInstrumentProcessingInfoBankTransferOptions"
    }
];
class TmsPaymentInstrumentProcessingInfoBankTransferOptions {
    static getAttributeTypeMap() {
        return TmsPaymentInstrumentProcessingInfoBankTransferOptions.attributeTypeMap;
    }
}
exports.TmsPaymentInstrumentProcessingInfoBankTransferOptions = TmsPaymentInstrumentProcessingInfoBankTransferOptions;
TmsPaymentInstrumentProcessingInfoBankTransferOptions.discriminator = undefined;
TmsPaymentInstrumentProcessingInfoBankTransferOptions.attributeTypeMap = [
    {
        "name": "sECCode",
        "baseName": "SECCode",
        "type": "string"
    }
];
class TmsSensitivePrivileges {
    static getAttributeTypeMap() {
        return TmsSensitivePrivileges.attributeTypeMap;
    }
}
exports.TmsSensitivePrivileges = TmsSensitivePrivileges;
TmsSensitivePrivileges.discriminator = undefined;
TmsSensitivePrivileges.attributeTypeMap = [
    {
        "name": "cardNumberMaskingFormat",
        "baseName": "cardNumberMaskingFormat",
        "type": "TmsSensitivePrivileges.CardNumberMaskingFormatEnum"
    }
];
(function (TmsSensitivePrivileges) {
    let CardNumberMaskingFormatEnum;
    (function (CardNumberMaskingFormatEnum) {
        CardNumberMaskingFormatEnum[CardNumberMaskingFormatEnum["FIRST6LAST4"] = 'FIRST_6_LAST_4'] = "FIRST6LAST4";
        CardNumberMaskingFormatEnum[CardNumberMaskingFormatEnum["LAST4"] = 'LAST_4'] = "LAST4";
        CardNumberMaskingFormatEnum[CardNumberMaskingFormatEnum["MASKED"] = 'MASKED'] = "MASKED";
    })(CardNumberMaskingFormatEnum = TmsSensitivePrivileges.CardNumberMaskingFormatEnum || (TmsSensitivePrivileges.CardNumberMaskingFormatEnum = {}));
})(TmsSensitivePrivileges = exports.TmsSensitivePrivileges || (exports.TmsSensitivePrivileges = {}));
class TmsTokenFormats {
    static getAttributeTypeMap() {
        return TmsTokenFormats.attributeTypeMap;
    }
}
exports.TmsTokenFormats = TmsTokenFormats;
TmsTokenFormats.discriminator = undefined;
TmsTokenFormats.attributeTypeMap = [
    {
        "name": "customer",
        "baseName": "customer",
        "type": "TmsTokenFormats.CustomerEnum"
    },
    {
        "name": "paymentInstrument",
        "baseName": "paymentInstrument",
        "type": "TmsTokenFormats.PaymentInstrumentEnum"
    },
    {
        "name": "instrumentIdentifierCard",
        "baseName": "instrumentIdentifierCard",
        "type": "TmsTokenFormats.InstrumentIdentifierCardEnum"
    },
    {
        "name": "instrumentIdentifierBankAccount",
        "baseName": "instrumentIdentifierBankAccount",
        "type": "TmsTokenFormats.InstrumentIdentifierBankAccountEnum"
    }
];
(function (TmsTokenFormats) {
    let CustomerEnum;
    (function (CustomerEnum) {
        CustomerEnum[CustomerEnum["_16DIGIT"] = '16_DIGIT'] = "_16DIGIT";
        CustomerEnum[CustomerEnum["_19DIGIT"] = '19_DIGIT'] = "_19DIGIT";
        CustomerEnum[CustomerEnum["_22DIGIT"] = '22_DIGIT'] = "_22DIGIT";
        CustomerEnum[CustomerEnum["_32HEX"] = '32_HEX'] = "_32HEX";
    })(CustomerEnum = TmsTokenFormats.CustomerEnum || (TmsTokenFormats.CustomerEnum = {}));
    let PaymentInstrumentEnum;
    (function (PaymentInstrumentEnum) {
        PaymentInstrumentEnum[PaymentInstrumentEnum["_16DIGIT"] = '16_DIGIT'] = "_16DIGIT";
        PaymentInstrumentEnum[PaymentInstrumentEnum["_19DIGIT"] = '19_DIGIT'] = "_19DIGIT";
        PaymentInstrumentEnum[PaymentInstrumentEnum["_22DIGIT"] = '22_DIGIT'] = "_22DIGIT";
        PaymentInstrumentEnum[PaymentInstrumentEnum["_32HEX"] = '32_HEX'] = "_32HEX";
    })(PaymentInstrumentEnum = TmsTokenFormats.PaymentInstrumentEnum || (TmsTokenFormats.PaymentInstrumentEnum = {}));
    let InstrumentIdentifierCardEnum;
    (function (InstrumentIdentifierCardEnum) {
        InstrumentIdentifierCardEnum[InstrumentIdentifierCardEnum["_16DIGIT"] = '16_DIGIT'] = "_16DIGIT";
        InstrumentIdentifierCardEnum[InstrumentIdentifierCardEnum["_16DIGITLAST4"] = '16_DIGIT_LAST_4'] = "_16DIGITLAST4";
        InstrumentIdentifierCardEnum[InstrumentIdentifierCardEnum["_19DIGIT"] = '19_DIGIT'] = "_19DIGIT";
        InstrumentIdentifierCardEnum[InstrumentIdentifierCardEnum["_19DIGITLAST4"] = '19_DIGIT_LAST_4'] = "_19DIGITLAST4";
        InstrumentIdentifierCardEnum[InstrumentIdentifierCardEnum["_22DIGIT"] = '22_DIGIT'] = "_22DIGIT";
        InstrumentIdentifierCardEnum[InstrumentIdentifierCardEnum["_32HEX"] = '32_HEX'] = "_32HEX";
    })(InstrumentIdentifierCardEnum = TmsTokenFormats.InstrumentIdentifierCardEnum || (TmsTokenFormats.InstrumentIdentifierCardEnum = {}));
    let InstrumentIdentifierBankAccountEnum;
    (function (InstrumentIdentifierBankAccountEnum) {
        InstrumentIdentifierBankAccountEnum[InstrumentIdentifierBankAccountEnum["_16DIGIT"] = '16_DIGIT'] = "_16DIGIT";
        InstrumentIdentifierBankAccountEnum[InstrumentIdentifierBankAccountEnum["_19DIGIT"] = '19_DIGIT'] = "_19DIGIT";
        InstrumentIdentifierBankAccountEnum[InstrumentIdentifierBankAccountEnum["_22DIGIT"] = '22_DIGIT'] = "_22DIGIT";
        InstrumentIdentifierBankAccountEnum[InstrumentIdentifierBankAccountEnum["_32HEX"] = '32_HEX'] = "_32HEX";
    })(InstrumentIdentifierBankAccountEnum = TmsTokenFormats.InstrumentIdentifierBankAccountEnum || (TmsTokenFormats.InstrumentIdentifierBankAccountEnum = {}));
})(TmsTokenFormats = exports.TmsTokenFormats || (exports.TmsTokenFormats = {}));
class Tmsv2TokenizedCard {
    static getAttributeTypeMap() {
        return Tmsv2TokenizedCard.attributeTypeMap;
    }
}
exports.Tmsv2TokenizedCard = Tmsv2TokenizedCard;
Tmsv2TokenizedCard.discriminator = undefined;
Tmsv2TokenizedCard.attributeTypeMap = [
    {
        "name": "links",
        "baseName": "_links",
        "type": "Tmsv2TokenizedCardLinks"
    },
    {
        "name": "id",
        "baseName": "id",
        "type": "string"
    },
    {
        "name": "object",
        "baseName": "object",
        "type": "string"
    },
    {
        "name": "accountReferenceId",
        "baseName": "accountReferenceId",
        "type": "string"
    },
    {
        "name": "consumerId",
        "baseName": "consumerId",
        "type": "string"
    },
    {
        "name": "createInstrumentIdentifier",
        "baseName": "createInstrumentIdentifier",
        "type": "boolean"
    },
    {
        "name": "source",
        "baseName": "source",
        "type": "string"
    },
    {
        "name": "state",
        "baseName": "state",
        "type": "string"
    },
    {
        "name": "reason",
        "baseName": "reason",
        "type": "string"
    },
    {
        "name": "number",
        "baseName": "number",
        "type": "string"
    },
    {
        "name": "expirationMonth",
        "baseName": "expirationMonth",
        "type": "string"
    },
    {
        "name": "expirationYear",
        "baseName": "expirationYear",
        "type": "string"
    },
    {
        "name": "type",
        "baseName": "type",
        "type": "string"
    },
    {
        "name": "cryptogram",
        "baseName": "cryptogram",
        "type": "string"
    },
    {
        "name": "securityCode",
        "baseName": "securityCode",
        "type": "string"
    },
    {
        "name": "eci",
        "baseName": "eci",
        "type": "string"
    },
    {
        "name": "requestorId",
        "baseName": "requestorId",
        "type": "string"
    },
    {
        "name": "enrollmentId",
        "baseName": "enrollmentId",
        "type": "string"
    },
    {
        "name": "tokenReferenceId",
        "baseName": "tokenReferenceId",
        "type": "string"
    },
    {
        "name": "paymentAccountReference",
        "baseName": "paymentAccountReference",
        "type": "string"
    },
    {
        "name": "card",
        "baseName": "card",
        "type": "Tmsv2TokenizedCardCard"
    },
    {
        "name": "passcode",
        "baseName": "passcode",
        "type": "Tmsv2TokenizedCardPasscode"
    },
    {
        "name": "metadata",
        "baseName": "metadata",
        "type": "Tmsv2TokenizedCardMetadata"
    }
];
/**
* Card object used to create a network token
*/
class Tmsv2TokenizedCardCard {
    static getAttributeTypeMap() {
        return Tmsv2TokenizedCardCard.attributeTypeMap;
    }
}
exports.Tmsv2TokenizedCardCard = Tmsv2TokenizedCardCard;
Tmsv2TokenizedCardCard.discriminator = undefined;
Tmsv2TokenizedCardCard.attributeTypeMap = [
    {
        "name": "number",
        "baseName": "number",
        "type": "string"
    },
    {
        "name": "expirationMonth",
        "baseName": "expirationMonth",
        "type": "string"
    },
    {
        "name": "expirationYear",
        "baseName": "expirationYear",
        "type": "string"
    },
    {
        "name": "type",
        "baseName": "type",
        "type": "string"
    },
    {
        "name": "suffix",
        "baseName": "suffix",
        "type": "string"
    }
];
class Tmsv2TokenizedCardLinks {
    static getAttributeTypeMap() {
        return Tmsv2TokenizedCardLinks.attributeTypeMap;
    }
}
exports.Tmsv2TokenizedCardLinks = Tmsv2TokenizedCardLinks;
Tmsv2TokenizedCardLinks.discriminator = undefined;
Tmsv2TokenizedCardLinks.attributeTypeMap = [
    {
        "name": "self",
        "baseName": "self",
        "type": "Tmsv2TokenizedCardLinksSelf"
    }
];
class Tmsv2TokenizedCardLinksSelf {
    static getAttributeTypeMap() {
        return Tmsv2TokenizedCardLinksSelf.attributeTypeMap;
    }
}
exports.Tmsv2TokenizedCardLinksSelf = Tmsv2TokenizedCardLinksSelf;
Tmsv2TokenizedCardLinksSelf.discriminator = undefined;
Tmsv2TokenizedCardLinksSelf.attributeTypeMap = [
    {
        "name": "href",
        "baseName": "href",
        "type": "string"
    }
];
/**
* Metadata associated with the tokenized card.
*/
class Tmsv2TokenizedCardMetadata {
    static getAttributeTypeMap() {
        return Tmsv2TokenizedCardMetadata.attributeTypeMap;
    }
}
exports.Tmsv2TokenizedCardMetadata = Tmsv2TokenizedCardMetadata;
Tmsv2TokenizedCardMetadata.discriminator = undefined;
Tmsv2TokenizedCardMetadata.attributeTypeMap = [
    {
        "name": "cardArt",
        "baseName": "cardArt",
        "type": "TmsCardArt"
    },
    {
        "name": "issuer",
        "baseName": "issuer",
        "type": "Tmsv2TokenizedCardMetadataIssuer"
    }
];
/**
* Issuer associated with the tokenized card.
*/
class Tmsv2TokenizedCardMetadataIssuer {
    static getAttributeTypeMap() {
        return Tmsv2TokenizedCardMetadataIssuer.attributeTypeMap;
    }
}
exports.Tmsv2TokenizedCardMetadataIssuer = Tmsv2TokenizedCardMetadataIssuer;
Tmsv2TokenizedCardMetadataIssuer.discriminator = undefined;
Tmsv2TokenizedCardMetadataIssuer.attributeTypeMap = [
    {
        "name": "name",
        "baseName": "name",
        "type": "string"
    },
    {
        "name": "shortDescription",
        "baseName": "shortDescription",
        "type": "string"
    },
    {
        "name": "longDescription",
        "baseName": "longDescription",
        "type": "string"
    }
];
/**
* Passcode by issuer for ID&V.
*/
class Tmsv2TokenizedCardPasscode {
    static getAttributeTypeMap() {
        return Tmsv2TokenizedCardPasscode.attributeTypeMap;
    }
}
exports.Tmsv2TokenizedCardPasscode = Tmsv2TokenizedCardPasscode;
Tmsv2TokenizedCardPasscode.discriminator = undefined;
Tmsv2TokenizedCardPasscode.attributeTypeMap = [
    {
        "name": "value",
        "baseName": "value",
        "type": "string"
    }
];
class Tmsv2customersBuyerInformation {
    static getAttributeTypeMap() {
        return Tmsv2customersBuyerInformation.attributeTypeMap;
    }
}
exports.Tmsv2customersBuyerInformation = Tmsv2customersBuyerInformation;
Tmsv2customersBuyerInformation.discriminator = undefined;
Tmsv2customersBuyerInformation.attributeTypeMap = [
    {
        "name": "merchantCustomerID",
        "baseName": "merchantCustomerID",
        "type": "string"
    },
    {
        "name": "email",
        "baseName": "email",
        "type": "string"
    }
];
class Tmsv2customersClientReferenceInformation {
    static getAttributeTypeMap() {
        return Tmsv2customersClientReferenceInformation.attributeTypeMap;
    }
}
exports.Tmsv2customersClientReferenceInformation = Tmsv2customersClientReferenceInformation;
Tmsv2customersClientReferenceInformation.discriminator = undefined;
Tmsv2customersClientReferenceInformation.attributeTypeMap = [
    {
        "name": "code",
        "baseName": "code",
        "type": "string"
    }
];
class Tmsv2customersDefaultPaymentInstrument {
    static getAttributeTypeMap() {
        return Tmsv2customersDefaultPaymentInstrument.attributeTypeMap;
    }
}
exports.Tmsv2customersDefaultPaymentInstrument = Tmsv2customersDefaultPaymentInstrument;
Tmsv2customersDefaultPaymentInstrument.discriminator = undefined;
Tmsv2customersDefaultPaymentInstrument.attributeTypeMap = [
    {
        "name": "id",
        "baseName": "id",
        "type": "string"
    }
];
class Tmsv2customersDefaultShippingAddress {
    static getAttributeTypeMap() {
        return Tmsv2customersDefaultShippingAddress.attributeTypeMap;
    }
}
exports.Tmsv2customersDefaultShippingAddress = Tmsv2customersDefaultShippingAddress;
Tmsv2customersDefaultShippingAddress.discriminator = undefined;
Tmsv2customersDefaultShippingAddress.attributeTypeMap = [
    {
        "name": "id",
        "baseName": "id",
        "type": "string"
    }
];
/**
* Additional resources for the Customer.
*/
class Tmsv2customersEmbedded {
    static getAttributeTypeMap() {
        return Tmsv2customersEmbedded.attributeTypeMap;
    }
}
exports.Tmsv2customersEmbedded = Tmsv2customersEmbedded;
Tmsv2customersEmbedded.discriminator = undefined;
Tmsv2customersEmbedded.attributeTypeMap = [
    {
        "name": "defaultPaymentInstrument",
        "baseName": "defaultPaymentInstrument",
        "type": "Tmsv2customersEmbeddedDefaultPaymentInstrument"
    },
    {
        "name": "defaultShippingAddress",
        "baseName": "defaultShippingAddress",
        "type": "Tmsv2customersEmbeddedDefaultShippingAddress"
    }
];
class Tmsv2customersEmbeddedDefaultPaymentInstrument {
    static getAttributeTypeMap() {
        return Tmsv2customersEmbeddedDefaultPaymentInstrument.attributeTypeMap;
    }
}
exports.Tmsv2customersEmbeddedDefaultPaymentInstrument = Tmsv2customersEmbeddedDefaultPaymentInstrument;
Tmsv2customersEmbeddedDefaultPaymentInstrument.discriminator = undefined;
Tmsv2customersEmbeddedDefaultPaymentInstrument.attributeTypeMap = [
    {
        "name": "links",
        "baseName": "_links",
        "type": "Tmsv2customersEmbeddedDefaultPaymentInstrumentLinks"
    },
    {
        "name": "id",
        "baseName": "id",
        "type": "string"
    },
    {
        "name": "object",
        "baseName": "object",
        "type": "string"
    },
    {
        "name": "_default",
        "baseName": "default",
        "type": "boolean"
    },
    {
        "name": "state",
        "baseName": "state",
        "type": "string"
    },
    {
        "name": "type",
        "baseName": "type",
        "type": "string"
    },
    {
        "name": "bankAccount",
        "baseName": "bankAccount",
        "type": "Tmsv2customersEmbeddedDefaultPaymentInstrumentBankAccount"
    },
    {
        "name": "card",
        "baseName": "card",
        "type": "Tmsv2customersEmbeddedDefaultPaymentInstrumentCard"
    },
    {
        "name": "buyerInformation",
        "baseName": "buyerInformation",
        "type": "Tmsv2customersEmbeddedDefaultPaymentInstrumentBuyerInformation"
    },
    {
        "name": "billTo",
        "baseName": "billTo",
        "type": "Tmsv2customersEmbeddedDefaultPaymentInstrumentBillTo"
    },
    {
        "name": "processingInformation",
        "baseName": "processingInformation",
        "type": "TmsPaymentInstrumentProcessingInfo"
    },
    {
        "name": "merchantInformation",
        "baseName": "merchantInformation",
        "type": "Tmsv2customersEmbeddedDefaultPaymentInstrumentMerchantInformation"
    },
    {
        "name": "instrumentIdentifier",
        "baseName": "instrumentIdentifier",
        "type": "Tmsv2customersEmbeddedDefaultPaymentInstrumentInstrumentIdentifier"
    },
    {
        "name": "metadata",
        "baseName": "metadata",
        "type": "Tmsv2customersEmbeddedDefaultPaymentInstrumentMetadata"
    },
    {
        "name": "embedded",
        "baseName": "_embedded",
        "type": "Tmsv2customersEmbeddedDefaultPaymentInstrumentEmbedded"
    }
];
class Tmsv2customersEmbeddedDefaultPaymentInstrumentBankAccount {
    static getAttributeTypeMap() {
        return Tmsv2customersEmbeddedDefaultPaymentInstrumentBankAccount.attributeTypeMap;
    }
}
exports.Tmsv2customersEmbeddedDefaultPaymentInstrumentBankAccount = Tmsv2customersEmbeddedDefaultPaymentInstrumentBankAccount;
Tmsv2customersEmbeddedDefaultPaymentInstrumentBankAccount.discriminator = undefined;
Tmsv2customersEmbeddedDefaultPaymentInstrumentBankAccount.attributeTypeMap = [
    {
        "name": "type",
        "baseName": "type",
        "type": "string"
    }
];
class Tmsv2customersEmbeddedDefaultPaymentInstrumentBillTo {
    static getAttributeTypeMap() {
        return Tmsv2customersEmbeddedDefaultPaymentInstrumentBillTo.attributeTypeMap;
    }
}
exports.Tmsv2customersEmbeddedDefaultPaymentInstrumentBillTo = Tmsv2customersEmbeddedDefaultPaymentInstrumentBillTo;
Tmsv2customersEmbeddedDefaultPaymentInstrumentBillTo.discriminator = undefined;
Tmsv2customersEmbeddedDefaultPaymentInstrumentBillTo.attributeTypeMap = [
    {
        "name": "firstName",
        "baseName": "firstName",
        "type": "string"
    },
    {
        "name": "lastName",
        "baseName": "lastName",
        "type": "string"
    },
    {
        "name": "company",
        "baseName": "company",
        "type": "string"
    },
    {
        "name": "address1",
        "baseName": "address1",
        "type": "string"
    },
    {
        "name": "address2",
        "baseName": "address2",
        "type": "string"
    },
    {
        "name": "locality",
        "baseName": "locality",
        "type": "string"
    },
    {
        "name": "administrativeArea",
        "baseName": "administrativeArea",
        "type": "string"
    },
    {
        "name": "postalCode",
        "baseName": "postalCode",
        "type": "string"
    },
    {
        "name": "country",
        "baseName": "country",
        "type": "string"
    },
    {
        "name": "email",
        "baseName": "email",
        "type": "string"
    },
    {
        "name": "phoneNumber",
        "baseName": "phoneNumber",
        "type": "string"
    }
];
class Tmsv2customersEmbeddedDefaultPaymentInstrumentBuyerInformation {
    static getAttributeTypeMap() {
        return Tmsv2customersEmbeddedDefaultPaymentInstrumentBuyerInformation.attributeTypeMap;
    }
}
exports.Tmsv2customersEmbeddedDefaultPaymentInstrumentBuyerInformation = Tmsv2customersEmbeddedDefaultPaymentInstrumentBuyerInformation;
Tmsv2customersEmbeddedDefaultPaymentInstrumentBuyerInformation.discriminator = undefined;
Tmsv2customersEmbeddedDefaultPaymentInstrumentBuyerInformation.attributeTypeMap = [
    {
        "name": "companyTaxID",
        "baseName": "companyTaxID",
        "type": "string"
    },
    {
        "name": "currency",
        "baseName": "currency",
        "type": "string"
    },
    {
        "name": "dateOfBirth",
        "baseName": "dateOfBirth",
        "type": "string"
    },
    {
        "name": "personalIdentification",
        "baseName": "personalIdentification",
        "type": "Array<Tmsv2customersEmbeddedDefaultPaymentInstrumentBuyerInformationPersonalIdentification>"
    }
];
class Tmsv2customersEmbeddedDefaultPaymentInstrumentBuyerInformationIssuedBy {
    static getAttributeTypeMap() {
        return Tmsv2customersEmbeddedDefaultPaymentInstrumentBuyerInformationIssuedBy.attributeTypeMap;
    }
}
exports.Tmsv2customersEmbeddedDefaultPaymentInstrumentBuyerInformationIssuedBy = Tmsv2customersEmbeddedDefaultPaymentInstrumentBuyerInformationIssuedBy;
Tmsv2customersEmbeddedDefaultPaymentInstrumentBuyerInformationIssuedBy.discriminator = undefined;
Tmsv2customersEmbeddedDefaultPaymentInstrumentBuyerInformationIssuedBy.attributeTypeMap = [
    {
        "name": "administrativeArea",
        "baseName": "administrativeArea",
        "type": "string"
    }
];
class Tmsv2customersEmbeddedDefaultPaymentInstrumentBuyerInformationPersonalIdentification {
    static getAttributeTypeMap() {
        return Tmsv2customersEmbeddedDefaultPaymentInstrumentBuyerInformationPersonalIdentification.attributeTypeMap;
    }
}
exports.Tmsv2customersEmbeddedDefaultPaymentInstrumentBuyerInformationPersonalIdentification = Tmsv2customersEmbeddedDefaultPaymentInstrumentBuyerInformationPersonalIdentification;
Tmsv2customersEmbeddedDefaultPaymentInstrumentBuyerInformationPersonalIdentification.discriminator = undefined;
Tmsv2customersEmbeddedDefaultPaymentInstrumentBuyerInformationPersonalIdentification.attributeTypeMap = [
    {
        "name": "id",
        "baseName": "id",
        "type": "string"
    },
    {
        "name": "type",
        "baseName": "type",
        "type": "string"
    },
    {
        "name": "issuedBy",
        "baseName": "issuedBy",
        "type": "Tmsv2customersEmbeddedDefaultPaymentInstrumentBuyerInformationIssuedBy"
    }
];
class Tmsv2customersEmbeddedDefaultPaymentInstrumentCard {
    static getAttributeTypeMap() {
        return Tmsv2customersEmbeddedDefaultPaymentInstrumentCard.attributeTypeMap;
    }
}
exports.Tmsv2customersEmbeddedDefaultPaymentInstrumentCard = Tmsv2customersEmbeddedDefaultPaymentInstrumentCard;
Tmsv2customersEmbeddedDefaultPaymentInstrumentCard.discriminator = undefined;
Tmsv2customersEmbeddedDefaultPaymentInstrumentCard.attributeTypeMap = [
    {
        "name": "expirationMonth",
        "baseName": "expirationMonth",
        "type": "string"
    },
    {
        "name": "expirationYear",
        "baseName": "expirationYear",
        "type": "string"
    },
    {
        "name": "type",
        "baseName": "type",
        "type": "string"
    },
    {
        "name": "issueNumber",
        "baseName": "issueNumber",
        "type": "string"
    },
    {
        "name": "startMonth",
        "baseName": "startMonth",
        "type": "string"
    },
    {
        "name": "startYear",
        "baseName": "startYear",
        "type": "string"
    },
    {
        "name": "useAs",
        "baseName": "useAs",
        "type": "string"
    },
    {
        "name": "hash",
        "baseName": "hash",
        "type": "string"
    },
    {
        "name": "tokenizedInformation",
        "baseName": "tokenizedInformation",
        "type": "Tmsv2customersEmbeddedDefaultPaymentInstrumentCardTokenizedInformation"
    }
];
class Tmsv2customersEmbeddedDefaultPaymentInstrumentCardTokenizedInformation {
    static getAttributeTypeMap() {
        return Tmsv2customersEmbeddedDefaultPaymentInstrumentCardTokenizedInformation.attributeTypeMap;
    }
}
exports.Tmsv2customersEmbeddedDefaultPaymentInstrumentCardTokenizedInformation = Tmsv2customersEmbeddedDefaultPaymentInstrumentCardTokenizedInformation;
Tmsv2customersEmbeddedDefaultPaymentInstrumentCardTokenizedInformation.discriminator = undefined;
Tmsv2customersEmbeddedDefaultPaymentInstrumentCardTokenizedInformation.attributeTypeMap = [
    {
        "name": "requestorID",
        "baseName": "requestorID",
        "type": "string"
    },
    {
        "name": "transactionType",
        "baseName": "transactionType",
        "type": "string"
    }
];
/**
* Additional resources for the Payment Instrument.
*/
class Tmsv2customersEmbeddedDefaultPaymentInstrumentEmbedded {
    static getAttributeTypeMap() {
        return Tmsv2customersEmbeddedDefaultPaymentInstrumentEmbedded.attributeTypeMap;
    }
}
exports.Tmsv2customersEmbeddedDefaultPaymentInstrumentEmbedded = Tmsv2customersEmbeddedDefaultPaymentInstrumentEmbedded;
Tmsv2customersEmbeddedDefaultPaymentInstrumentEmbedded.discriminator = undefined;
Tmsv2customersEmbeddedDefaultPaymentInstrumentEmbedded.attributeTypeMap = [
    {
        "name": "instrumentIdentifier",
        "baseName": "instrumentIdentifier",
        "type": "TmsEmbeddedInstrumentIdentifier"
    }
];
class Tmsv2customersEmbeddedDefaultPaymentInstrumentInstrumentIdentifier {
    static getAttributeTypeMap() {
        return Tmsv2customersEmbeddedDefaultPaymentInstrumentInstrumentIdentifier.attributeTypeMap;
    }
}
exports.Tmsv2customersEmbeddedDefaultPaymentInstrumentInstrumentIdentifier = Tmsv2customersEmbeddedDefaultPaymentInstrumentInstrumentIdentifier;
Tmsv2customersEmbeddedDefaultPaymentInstrumentInstrumentIdentifier.discriminator = undefined;
Tmsv2customersEmbeddedDefaultPaymentInstrumentInstrumentIdentifier.attributeTypeMap = [
    {
        "name": "id",
        "baseName": "id",
        "type": "string"
    }
];
class Tmsv2customersEmbeddedDefaultPaymentInstrumentLinks {
    static getAttributeTypeMap() {
        return Tmsv2customersEmbeddedDefaultPaymentInstrumentLinks.attributeTypeMap;
    }
}
exports.Tmsv2customersEmbeddedDefaultPaymentInstrumentLinks = Tmsv2customersEmbeddedDefaultPaymentInstrumentLinks;
Tmsv2customersEmbeddedDefaultPaymentInstrumentLinks.discriminator = undefined;
Tmsv2customersEmbeddedDefaultPaymentInstrumentLinks.attributeTypeMap = [
    {
        "name": "self",
        "baseName": "self",
        "type": "Tmsv2customersEmbeddedDefaultPaymentInstrumentLinksSelf"
    },
    {
        "name": "customer",
        "baseName": "customer",
        "type": "Tmsv2customersLinksSelf"
    }
];
class Tmsv2customersEmbeddedDefaultPaymentInstrumentLinksSelf {
    static getAttributeTypeMap() {
        return Tmsv2customersEmbeddedDefaultPaymentInstrumentLinksSelf.attributeTypeMap;
    }
}
exports.Tmsv2customersEmbeddedDefaultPaymentInstrumentLinksSelf = Tmsv2customersEmbeddedDefaultPaymentInstrumentLinksSelf;
Tmsv2customersEmbeddedDefaultPaymentInstrumentLinksSelf.discriminator = undefined;
Tmsv2customersEmbeddedDefaultPaymentInstrumentLinksSelf.attributeTypeMap = [
    {
        "name": "href",
        "baseName": "href",
        "type": "string"
    }
];
class Tmsv2customersEmbeddedDefaultPaymentInstrumentMerchantInformation {
    static getAttributeTypeMap() {
        return Tmsv2customersEmbeddedDefaultPaymentInstrumentMerchantInformation.attributeTypeMap;
    }
}
exports.Tmsv2customersEmbeddedDefaultPaymentInstrumentMerchantInformation = Tmsv2customersEmbeddedDefaultPaymentInstrumentMerchantInformation;
Tmsv2customersEmbeddedDefaultPaymentInstrumentMerchantInformation.discriminator = undefined;
Tmsv2customersEmbeddedDefaultPaymentInstrumentMerchantInformation.attributeTypeMap = [
    {
        "name": "merchantDescriptor",
        "baseName": "merchantDescriptor",
        "type": "Tmsv2customersEmbeddedDefaultPaymentInstrumentMerchantInformationMerchantDescriptor"
    }
];
class Tmsv2customersEmbeddedDefaultPaymentInstrumentMerchantInformationMerchantDescriptor {
    static getAttributeTypeMap() {
        return Tmsv2customersEmbeddedDefaultPaymentInstrumentMerchantInformationMerchantDescriptor.attributeTypeMap;
    }
}
exports.Tmsv2customersEmbeddedDefaultPaymentInstrumentMerchantInformationMerchantDescriptor = Tmsv2customersEmbeddedDefaultPaymentInstrumentMerchantInformationMerchantDescriptor;
Tmsv2customersEmbeddedDefaultPaymentInstrumentMerchantInformationMerchantDescriptor.discriminator = undefined;
Tmsv2customersEmbeddedDefaultPaymentInstrumentMerchantInformationMerchantDescriptor.attributeTypeMap = [
    {
        "name": "alternateName",
        "baseName": "alternateName",
        "type": "string"
    }
];
class Tmsv2customersEmbeddedDefaultPaymentInstrumentMetadata {
    static getAttributeTypeMap() {
        return Tmsv2customersEmbeddedDefaultPaymentInstrumentMetadata.attributeTypeMap;
    }
}
exports.Tmsv2customersEmbeddedDefaultPaymentInstrumentMetadata = Tmsv2customersEmbeddedDefaultPaymentInstrumentMetadata;
Tmsv2customersEmbeddedDefaultPaymentInstrumentMetadata.discriminator = undefined;
Tmsv2customersEmbeddedDefaultPaymentInstrumentMetadata.attributeTypeMap = [
    {
        "name": "creator",
        "baseName": "creator",
        "type": "string"
    }
];
class Tmsv2customersEmbeddedDefaultShippingAddress {
    static getAttributeTypeMap() {
        return Tmsv2customersEmbeddedDefaultShippingAddress.attributeTypeMap;
    }
}
exports.Tmsv2customersEmbeddedDefaultShippingAddress = Tmsv2customersEmbeddedDefaultShippingAddress;
Tmsv2customersEmbeddedDefaultShippingAddress.discriminator = undefined;
Tmsv2customersEmbeddedDefaultShippingAddress.attributeTypeMap = [
    {
        "name": "links",
        "baseName": "_links",
        "type": "Tmsv2customersEmbeddedDefaultShippingAddressLinks"
    },
    {
        "name": "id",
        "baseName": "id",
        "type": "string"
    },
    {
        "name": "_default",
        "baseName": "default",
        "type": "boolean"
    },
    {
        "name": "shipTo",
        "baseName": "shipTo",
        "type": "Tmsv2customersEmbeddedDefaultShippingAddressShipTo"
    },
    {
        "name": "metadata",
        "baseName": "metadata",
        "type": "Tmsv2customersEmbeddedDefaultShippingAddressMetadata"
    }
];
class Tmsv2customersEmbeddedDefaultShippingAddressLinks {
    static getAttributeTypeMap() {
        return Tmsv2customersEmbeddedDefaultShippingAddressLinks.attributeTypeMap;
    }
}
exports.Tmsv2customersEmbeddedDefaultShippingAddressLinks = Tmsv2customersEmbeddedDefaultShippingAddressLinks;
Tmsv2customersEmbeddedDefaultShippingAddressLinks.discriminator = undefined;
Tmsv2customersEmbeddedDefaultShippingAddressLinks.attributeTypeMap = [
    {
        "name": "self",
        "baseName": "self",
        "type": "Tmsv2customersEmbeddedDefaultShippingAddressLinksSelf"
    },
    {
        "name": "customer",
        "baseName": "customer",
        "type": "Tmsv2customersEmbeddedDefaultShippingAddressLinksCustomer"
    }
];
class Tmsv2customersEmbeddedDefaultShippingAddressLinksCustomer {
    static getAttributeTypeMap() {
        return Tmsv2customersEmbeddedDefaultShippingAddressLinksCustomer.attributeTypeMap;
    }
}
exports.Tmsv2customersEmbeddedDefaultShippingAddressLinksCustomer = Tmsv2customersEmbeddedDefaultShippingAddressLinksCustomer;
Tmsv2customersEmbeddedDefaultShippingAddressLinksCustomer.discriminator = undefined;
Tmsv2customersEmbeddedDefaultShippingAddressLinksCustomer.attributeTypeMap = [
    {
        "name": "href",
        "baseName": "href",
        "type": "string"
    }
];
class Tmsv2customersEmbeddedDefaultShippingAddressLinksSelf {
    static getAttributeTypeMap() {
        return Tmsv2customersEmbeddedDefaultShippingAddressLinksSelf.attributeTypeMap;
    }
}
exports.Tmsv2customersEmbeddedDefaultShippingAddressLinksSelf = Tmsv2customersEmbeddedDefaultShippingAddressLinksSelf;
Tmsv2customersEmbeddedDefaultShippingAddressLinksSelf.discriminator = undefined;
Tmsv2customersEmbeddedDefaultShippingAddressLinksSelf.attributeTypeMap = [
    {
        "name": "href",
        "baseName": "href",
        "type": "string"
    }
];
class Tmsv2customersEmbeddedDefaultShippingAddressMetadata {
    static getAttributeTypeMap() {
        return Tmsv2customersEmbeddedDefaultShippingAddressMetadata.attributeTypeMap;
    }
}
exports.Tmsv2customersEmbeddedDefaultShippingAddressMetadata = Tmsv2customersEmbeddedDefaultShippingAddressMetadata;
Tmsv2customersEmbeddedDefaultShippingAddressMetadata.discriminator = undefined;
Tmsv2customersEmbeddedDefaultShippingAddressMetadata.attributeTypeMap = [
    {
        "name": "creator",
        "baseName": "creator",
        "type": "string"
    }
];
class Tmsv2customersEmbeddedDefaultShippingAddressShipTo {
    static getAttributeTypeMap() {
        return Tmsv2customersEmbeddedDefaultShippingAddressShipTo.attributeTypeMap;
    }
}
exports.Tmsv2customersEmbeddedDefaultShippingAddressShipTo = Tmsv2customersEmbeddedDefaultShippingAddressShipTo;
Tmsv2customersEmbeddedDefaultShippingAddressShipTo.discriminator = undefined;
Tmsv2customersEmbeddedDefaultShippingAddressShipTo.attributeTypeMap = [
    {
        "name": "firstName",
        "baseName": "firstName",
        "type": "string"
    },
    {
        "name": "lastName",
        "baseName": "lastName",
        "type": "string"
    },
    {
        "name": "company",
        "baseName": "company",
        "type": "string"
    },
    {
        "name": "address1",
        "baseName": "address1",
        "type": "string"
    },
    {
        "name": "address2",
        "baseName": "address2",
        "type": "string"
    },
    {
        "name": "locality",
        "baseName": "locality",
        "type": "string"
    },
    {
        "name": "administrativeArea",
        "baseName": "administrativeArea",
        "type": "string"
    },
    {
        "name": "postalCode",
        "baseName": "postalCode",
        "type": "string"
    },
    {
        "name": "country",
        "baseName": "country",
        "type": "string"
    },
    {
        "name": "email",
        "baseName": "email",
        "type": "string"
    },
    {
        "name": "phoneNumber",
        "baseName": "phoneNumber",
        "type": "string"
    }
];
class Tmsv2customersLinks {
    static getAttributeTypeMap() {
        return Tmsv2customersLinks.attributeTypeMap;
    }
}
exports.Tmsv2customersLinks = Tmsv2customersLinks;
Tmsv2customersLinks.discriminator = undefined;
Tmsv2customersLinks.attributeTypeMap = [
    {
        "name": "self",
        "baseName": "self",
        "type": "Tmsv2customersLinksSelf"
    },
    {
        "name": "paymentInstruments",
        "baseName": "paymentInstruments",
        "type": "Tmsv2customersLinksPaymentInstruments"
    },
    {
        "name": "shippingAddress",
        "baseName": "shippingAddress",
        "type": "Tmsv2customersLinksShippingAddress"
    }
];
class Tmsv2customersLinksPaymentInstruments {
    static getAttributeTypeMap() {
        return Tmsv2customersLinksPaymentInstruments.attributeTypeMap;
    }
}
exports.Tmsv2customersLinksPaymentInstruments = Tmsv2customersLinksPaymentInstruments;
Tmsv2customersLinksPaymentInstruments.discriminator = undefined;
Tmsv2customersLinksPaymentInstruments.attributeTypeMap = [
    {
        "name": "href",
        "baseName": "href",
        "type": "string"
    }
];
class Tmsv2customersLinksSelf {
    static getAttributeTypeMap() {
        return Tmsv2customersLinksSelf.attributeTypeMap;
    }
}
exports.Tmsv2customersLinksSelf = Tmsv2customersLinksSelf;
Tmsv2customersLinksSelf.discriminator = undefined;
Tmsv2customersLinksSelf.attributeTypeMap = [
    {
        "name": "href",
        "baseName": "href",
        "type": "string"
    }
];
class Tmsv2customersLinksShippingAddress {
    static getAttributeTypeMap() {
        return Tmsv2customersLinksShippingAddress.attributeTypeMap;
    }
}
exports.Tmsv2customersLinksShippingAddress = Tmsv2customersLinksShippingAddress;
Tmsv2customersLinksShippingAddress.discriminator = undefined;
Tmsv2customersLinksShippingAddress.attributeTypeMap = [
    {
        "name": "href",
        "baseName": "href",
        "type": "string"
    }
];
class Tmsv2customersMerchantDefinedInformation {
    static getAttributeTypeMap() {
        return Tmsv2customersMerchantDefinedInformation.attributeTypeMap;
    }
}
exports.Tmsv2customersMerchantDefinedInformation = Tmsv2customersMerchantDefinedInformation;
Tmsv2customersMerchantDefinedInformation.discriminator = undefined;
Tmsv2customersMerchantDefinedInformation.attributeTypeMap = [
    {
        "name": "name",
        "baseName": "name",
        "type": "string"
    },
    {
        "name": "value",
        "baseName": "value",
        "type": "string"
    }
];
class Tmsv2customersMetadata {
    static getAttributeTypeMap() {
        return Tmsv2customersMetadata.attributeTypeMap;
    }
}
exports.Tmsv2customersMetadata = Tmsv2customersMetadata;
Tmsv2customersMetadata.discriminator = undefined;
Tmsv2customersMetadata.attributeTypeMap = [
    {
        "name": "creator",
        "baseName": "creator",
        "type": "string"
    }
];
class Tmsv2customersObjectInformation {
    static getAttributeTypeMap() {
        return Tmsv2customersObjectInformation.attributeTypeMap;
    }
}
exports.Tmsv2customersObjectInformation = Tmsv2customersObjectInformation;
Tmsv2customersObjectInformation.discriminator = undefined;
Tmsv2customersObjectInformation.attributeTypeMap = [
    {
        "name": "title",
        "baseName": "title",
        "type": "string"
    },
    {
        "name": "comment",
        "baseName": "comment",
        "type": "string"
    }
];
class TokenPermissions {
    static getAttributeTypeMap() {
        return TokenPermissions.attributeTypeMap;
    }
}
exports.TokenPermissions = TokenPermissions;
TokenPermissions.discriminator = undefined;
TokenPermissions.attributeTypeMap = [
    {
        "name": "create",
        "baseName": "create",
        "type": "boolean"
    },
    {
        "name": "read",
        "baseName": "read",
        "type": "boolean"
    },
    {
        "name": "update",
        "baseName": "update",
        "type": "boolean"
    },
    {
        "name": "_delete",
        "baseName": "delete",
        "type": "boolean"
    }
];
class TokenizedcardRequest {
    static getAttributeTypeMap() {
        return TokenizedcardRequest.attributeTypeMap;
    }
}
exports.TokenizedcardRequest = TokenizedcardRequest;
TokenizedcardRequest.discriminator = undefined;
TokenizedcardRequest.attributeTypeMap = [
    {
        "name": "links",
        "baseName": "_links",
        "type": "Tmsv2TokenizedCardLinks"
    },
    {
        "name": "id",
        "baseName": "id",
        "type": "string"
    },
    {
        "name": "object",
        "baseName": "object",
        "type": "string"
    },
    {
        "name": "accountReferenceId",
        "baseName": "accountReferenceId",
        "type": "string"
    },
    {
        "name": "consumerId",
        "baseName": "consumerId",
        "type": "string"
    },
    {
        "name": "createInstrumentIdentifier",
        "baseName": "createInstrumentIdentifier",
        "type": "boolean"
    },
    {
        "name": "source",
        "baseName": "source",
        "type": "string"
    },
    {
        "name": "state",
        "baseName": "state",
        "type": "string"
    },
    {
        "name": "reason",
        "baseName": "reason",
        "type": "string"
    },
    {
        "name": "number",
        "baseName": "number",
        "type": "string"
    },
    {
        "name": "expirationMonth",
        "baseName": "expirationMonth",
        "type": "string"
    },
    {
        "name": "expirationYear",
        "baseName": "expirationYear",
        "type": "string"
    },
    {
        "name": "type",
        "baseName": "type",
        "type": "string"
    },
    {
        "name": "cryptogram",
        "baseName": "cryptogram",
        "type": "string"
    },
    {
        "name": "securityCode",
        "baseName": "securityCode",
        "type": "string"
    },
    {
        "name": "eci",
        "baseName": "eci",
        "type": "string"
    },
    {
        "name": "requestorId",
        "baseName": "requestorId",
        "type": "string"
    },
    {
        "name": "enrollmentId",
        "baseName": "enrollmentId",
        "type": "string"
    },
    {
        "name": "tokenReferenceId",
        "baseName": "tokenReferenceId",
        "type": "string"
    },
    {
        "name": "paymentAccountReference",
        "baseName": "paymentAccountReference",
        "type": "string"
    },
    {
        "name": "card",
        "baseName": "card",
        "type": "Tmsv2TokenizedCardCard"
    },
    {
        "name": "passcode",
        "baseName": "passcode",
        "type": "Tmsv2TokenizedCardPasscode"
    },
    {
        "name": "metadata",
        "baseName": "metadata",
        "type": "Tmsv2TokenizedCardMetadata"
    }
];
class TssV2TransactionsGet200Response {
    static getAttributeTypeMap() {
        return TssV2TransactionsGet200Response.attributeTypeMap;
    }
}
exports.TssV2TransactionsGet200Response = TssV2TransactionsGet200Response;
TssV2TransactionsGet200Response.discriminator = undefined;
TssV2TransactionsGet200Response.attributeTypeMap = [
    {
        "name": "id",
        "baseName": "id",
        "type": "string"
    },
    {
        "name": "rootId",
        "baseName": "rootId",
        "type": "string"
    },
    {
        "name": "reconciliationId",
        "baseName": "reconciliationId",
        "type": "string"
    },
    {
        "name": "merchantId",
        "baseName": "merchantId",
        "type": "string"
    },
    {
        "name": "submitTimeUTC",
        "baseName": "submitTimeUTC",
        "type": "string"
    },
    {
        "name": "status",
        "baseName": "status",
        "type": "string"
    },
    {
        "name": "applicationInformation",
        "baseName": "applicationInformation",
        "type": "TssV2TransactionsGet200ResponseApplicationInformation"
    },
    {
        "name": "bankAccountValidation",
        "baseName": "bankAccountValidation",
        "type": "TssV2TransactionsGet200ResponseBankAccountValidation"
    },
    {
        "name": "buyerInformation",
        "baseName": "buyerInformation",
        "type": "TssV2TransactionsGet200ResponseBuyerInformation"
    },
    {
        "name": "clientReferenceInformation",
        "baseName": "clientReferenceInformation",
        "type": "TssV2TransactionsGet200ResponseClientReferenceInformation"
    },
    {
        "name": "consumerAuthenticationInformation",
        "baseName": "consumerAuthenticationInformation",
        "type": "TssV2TransactionsGet200ResponseConsumerAuthenticationInformation"
    },
    {
        "name": "deviceInformation",
        "baseName": "deviceInformation",
        "type": "TssV2TransactionsGet200ResponseDeviceInformation"
    },
    {
        "name": "errorInformation",
        "baseName": "errorInformation",
        "type": "TssV2TransactionsGet200ResponseErrorInformation"
    },
    {
        "name": "installmentInformation",
        "baseName": "installmentInformation",
        "type": "TssV2TransactionsGet200ResponseInstallmentInformation"
    },
    {
        "name": "fraudMarkingInformation",
        "baseName": "fraudMarkingInformation",
        "type": "TssV2TransactionsGet200ResponseFraudMarkingInformation"
    },
    {
        "name": "healthCareInformation",
        "baseName": "healthCareInformation",
        "type": "Ptsv2paymentsHealthCareInformation"
    },
    {
        "name": "merchantDefinedInformation",
        "baseName": "merchantDefinedInformation",
        "type": "Array<Ptsv2paymentsMerchantDefinedInformation>"
    },
    {
        "name": "merchantInformation",
        "baseName": "merchantInformation",
        "type": "TssV2TransactionsGet200ResponseMerchantInformation"
    },
    {
        "name": "orderInformation",
        "baseName": "orderInformation",
        "type": "TssV2TransactionsGet200ResponseOrderInformation"
    },
    {
        "name": "paymentInformation",
        "baseName": "paymentInformation",
        "type": "TssV2TransactionsGet200ResponsePaymentInformation"
    },
    {
        "name": "paymentInsightsInformation",
        "baseName": "paymentInsightsInformation",
        "type": "PtsV2PaymentsPost201ResponsePaymentInsightsInformation"
    },
    {
        "name": "payoutOptions",
        "baseName": "payoutOptions",
        "type": "TssV2TransactionsGet200ResponsePayoutOptions"
    },
    {
        "name": "unscheduledPaymentInformation",
        "baseName": "unscheduledPaymentInformation",
        "type": "Ptsv2paymentsUnscheduledPaymentInformation"
    },
    {
        "name": "processingInformation",
        "baseName": "processingInformation",
        "type": "TssV2TransactionsGet200ResponseProcessingInformation"
    },
    {
        "name": "processorInformation",
        "baseName": "processorInformation",
        "type": "TssV2TransactionsGet200ResponseProcessorInformation"
    },
    {
        "name": "recurringPaymentInformation",
        "baseName": "recurringPaymentInformation",
        "type": "TssV2TransactionsGet200ResponseRecurringPaymentInformation"
    },
    {
        "name": "pointOfSaleInformation",
        "baseName": "pointOfSaleInformation",
        "type": "TssV2TransactionsGet200ResponsePointOfSaleInformation"
    },
    {
        "name": "riskInformation",
        "baseName": "riskInformation",
        "type": "TssV2TransactionsGet200ResponseRiskInformation"
    },
    {
        "name": "senderInformation",
        "baseName": "senderInformation",
        "type": "TssV2TransactionsGet200ResponseSenderInformation"
    },
    {
        "name": "tokenInformation",
        "baseName": "tokenInformation",
        "type": "TssV2TransactionsGet200ResponseTokenInformation"
    },
    {
        "name": "links",
        "baseName": "_links",
        "type": "TssV2TransactionsGet200ResponseLinks"
    }
];
class TssV2TransactionsGet200ResponseApplicationInformation {
    static getAttributeTypeMap() {
        return TssV2TransactionsGet200ResponseApplicationInformation.attributeTypeMap;
    }
}
exports.TssV2TransactionsGet200ResponseApplicationInformation = TssV2TransactionsGet200ResponseApplicationInformation;
TssV2TransactionsGet200ResponseApplicationInformation.discriminator = undefined;
TssV2TransactionsGet200ResponseApplicationInformation.attributeTypeMap = [
    {
        "name": "status",
        "baseName": "status",
        "type": "string"
    },
    {
        "name": "reasonCode",
        "baseName": "reasonCode",
        "type": "string"
    },
    {
        "name": "rCode",
        "baseName": "rCode",
        "type": "string"
    },
    {
        "name": "rFlag",
        "baseName": "rFlag",
        "type": "string"
    },
    {
        "name": "applications",
        "baseName": "applications",
        "type": "Array<TssV2TransactionsGet200ResponseApplicationInformationApplications>"
    }
];
class TssV2TransactionsGet200ResponseApplicationInformationApplications {
    static getAttributeTypeMap() {
        return TssV2TransactionsGet200ResponseApplicationInformationApplications.attributeTypeMap;
    }
}
exports.TssV2TransactionsGet200ResponseApplicationInformationApplications = TssV2TransactionsGet200ResponseApplicationInformationApplications;
TssV2TransactionsGet200ResponseApplicationInformationApplications.discriminator = undefined;
TssV2TransactionsGet200ResponseApplicationInformationApplications.attributeTypeMap = [
    {
        "name": "name",
        "baseName": "name",
        "type": "string"
    },
    {
        "name": "status",
        "baseName": "status",
        "type": "string"
    },
    {
        "name": "reasonCode",
        "baseName": "reasonCode",
        "type": "string"
    },
    {
        "name": "rCode",
        "baseName": "rCode",
        "type": "string"
    },
    {
        "name": "rFlag",
        "baseName": "rFlag",
        "type": "string"
    },
    {
        "name": "reconciliationId",
        "baseName": "reconciliationId",
        "type": "string"
    },
    {
        "name": "rMessage",
        "baseName": "rMessage",
        "type": "string"
    },
    {
        "name": "returnCode",
        "baseName": "returnCode",
        "type": "number"
    }
];
class TssV2TransactionsGet200ResponseBankAccountValidation {
    static getAttributeTypeMap() {
        return TssV2TransactionsGet200ResponseBankAccountValidation.attributeTypeMap;
    }
}
exports.TssV2TransactionsGet200ResponseBankAccountValidation = TssV2TransactionsGet200ResponseBankAccountValidation;
TssV2TransactionsGet200ResponseBankAccountValidation.discriminator = undefined;
TssV2TransactionsGet200ResponseBankAccountValidation.attributeTypeMap = [
    {
        "name": "rawValidationCode",
        "baseName": "rawValidationCode",
        "type": "number"
    },
    {
        "name": "resultCode",
        "baseName": "resultCode",
        "type": "number"
    },
    {
        "name": "resultMessage",
        "baseName": "resultMessage",
        "type": "string"
    }
];
class TssV2TransactionsGet200ResponseBuyerInformation {
    static getAttributeTypeMap() {
        return TssV2TransactionsGet200ResponseBuyerInformation.attributeTypeMap;
    }
}
exports.TssV2TransactionsGet200ResponseBuyerInformation = TssV2TransactionsGet200ResponseBuyerInformation;
TssV2TransactionsGet200ResponseBuyerInformation.discriminator = undefined;
TssV2TransactionsGet200ResponseBuyerInformation.attributeTypeMap = [
    {
        "name": "merchantCustomerId",
        "baseName": "merchantCustomerId",
        "type": "string"
    },
    {
        "name": "hashedPassword",
        "baseName": "hashedPassword",
        "type": "string"
    }
];
class TssV2TransactionsGet200ResponseClientReferenceInformation {
    static getAttributeTypeMap() {
        return TssV2TransactionsGet200ResponseClientReferenceInformation.attributeTypeMap;
    }
}
exports.TssV2TransactionsGet200ResponseClientReferenceInformation = TssV2TransactionsGet200ResponseClientReferenceInformation;
TssV2TransactionsGet200ResponseClientReferenceInformation.discriminator = undefined;
TssV2TransactionsGet200ResponseClientReferenceInformation.attributeTypeMap = [
    {
        "name": "code",
        "baseName": "code",
        "type": "string"
    },
    {
        "name": "applicationVersion",
        "baseName": "applicationVersion",
        "type": "string"
    },
    {
        "name": "applicationName",
        "baseName": "applicationName",
        "type": "string"
    },
    {
        "name": "applicationUser",
        "baseName": "applicationUser",
        "type": "string"
    },
    {
        "name": "partner",
        "baseName": "partner",
        "type": "TssV2TransactionsGet200ResponseClientReferenceInformationPartner"
    },
    {
        "name": "comments",
        "baseName": "comments",
        "type": "string"
    }
];
class TssV2TransactionsGet200ResponseClientReferenceInformationPartner {
    static getAttributeTypeMap() {
        return TssV2TransactionsGet200ResponseClientReferenceInformationPartner.attributeTypeMap;
    }
}
exports.TssV2TransactionsGet200ResponseClientReferenceInformationPartner = TssV2TransactionsGet200ResponseClientReferenceInformationPartner;
TssV2TransactionsGet200ResponseClientReferenceInformationPartner.discriminator = undefined;
TssV2TransactionsGet200ResponseClientReferenceInformationPartner.attributeTypeMap = [
    {
        "name": "solutionId",
        "baseName": "solutionId",
        "type": "string"
    },
    {
        "name": "thirdPartyCertificationNumber",
        "baseName": "thirdPartyCertificationNumber",
        "type": "string"
    }
];
class TssV2TransactionsGet200ResponseConsumerAuthenticationInformation {
    static getAttributeTypeMap() {
        return TssV2TransactionsGet200ResponseConsumerAuthenticationInformation.attributeTypeMap;
    }
}
exports.TssV2TransactionsGet200ResponseConsumerAuthenticationInformation = TssV2TransactionsGet200ResponseConsumerAuthenticationInformation;
TssV2TransactionsGet200ResponseConsumerAuthenticationInformation.discriminator = undefined;
TssV2TransactionsGet200ResponseConsumerAuthenticationInformation.attributeTypeMap = [
    {
        "name": "eciRaw",
        "baseName": "eciRaw",
        "type": "string"
    },
    {
        "name": "cavv",
        "baseName": "cavv",
        "type": "string"
    },
    {
        "name": "xid",
        "baseName": "xid",
        "type": "string"
    },
    {
        "name": "transactionId",
        "baseName": "transactionId",
        "type": "string"
    },
    {
        "name": "strongAuthentication",
        "baseName": "strongAuthentication",
        "type": "TssV2TransactionsGet200ResponseConsumerAuthenticationInformationStrongAuthentication"
    }
];
class TssV2TransactionsGet200ResponseConsumerAuthenticationInformationStrongAuthentication {
    static getAttributeTypeMap() {
        return TssV2TransactionsGet200ResponseConsumerAuthenticationInformationStrongAuthentication.attributeTypeMap;
    }
}
exports.TssV2TransactionsGet200ResponseConsumerAuthenticationInformationStrongAuthentication = TssV2TransactionsGet200ResponseConsumerAuthenticationInformationStrongAuthentication;
TssV2TransactionsGet200ResponseConsumerAuthenticationInformationStrongAuthentication.discriminator = undefined;
TssV2TransactionsGet200ResponseConsumerAuthenticationInformationStrongAuthentication.attributeTypeMap = [
    {
        "name": "lowValueExemptionIndicator",
        "baseName": "lowValueExemptionIndicator",
        "type": "string"
    },
    {
        "name": "riskAnalysisExemptionIndicator",
        "baseName": "riskAnalysisExemptionIndicator",
        "type": "string"
    },
    {
        "name": "trustedMerchantExemptionIndicator",
        "baseName": "trustedMerchantExemptionIndicator",
        "type": "string"
    },
    {
        "name": "secureCorporatePaymentIndicator",
        "baseName": "secureCorporatePaymentIndicator",
        "type": "string"
    },
    {
        "name": "delegatedAuthenticationExemptionIndicator",
        "baseName": "delegatedAuthenticationExemptionIndicator",
        "type": "string"
    }
];
class TssV2TransactionsGet200ResponseDeviceInformation {
    static getAttributeTypeMap() {
        return TssV2TransactionsGet200ResponseDeviceInformation.attributeTypeMap;
    }
}
exports.TssV2TransactionsGet200ResponseDeviceInformation = TssV2TransactionsGet200ResponseDeviceInformation;
TssV2TransactionsGet200ResponseDeviceInformation.discriminator = undefined;
TssV2TransactionsGet200ResponseDeviceInformation.attributeTypeMap = [
    {
        "name": "ipAddress",
        "baseName": "ipAddress",
        "type": "string"
    },
    {
        "name": "hostName",
        "baseName": "hostName",
        "type": "string"
    },
    {
        "name": "cookiesAccepted",
        "baseName": "cookiesAccepted",
        "type": "string"
    }
];
class TssV2TransactionsGet200ResponseErrorInformation {
    static getAttributeTypeMap() {
        return TssV2TransactionsGet200ResponseErrorInformation.attributeTypeMap;
    }
}
exports.TssV2TransactionsGet200ResponseErrorInformation = TssV2TransactionsGet200ResponseErrorInformation;
TssV2TransactionsGet200ResponseErrorInformation.discriminator = undefined;
TssV2TransactionsGet200ResponseErrorInformation.attributeTypeMap = [
    {
        "name": "reason",
        "baseName": "reason",
        "type": "string"
    },
    {
        "name": "message",
        "baseName": "message",
        "type": "string"
    },
    {
        "name": "details",
        "baseName": "details",
        "type": "Array<PtsV2PaymentsPost201ResponseErrorInformationDetails>"
    }
];
class TssV2TransactionsGet200ResponseFraudMarkingInformation {
    static getAttributeTypeMap() {
        return TssV2TransactionsGet200ResponseFraudMarkingInformation.attributeTypeMap;
    }
}
exports.TssV2TransactionsGet200ResponseFraudMarkingInformation = TssV2TransactionsGet200ResponseFraudMarkingInformation;
TssV2TransactionsGet200ResponseFraudMarkingInformation.discriminator = undefined;
TssV2TransactionsGet200ResponseFraudMarkingInformation.attributeTypeMap = [
    {
        "name": "reason",
        "baseName": "reason",
        "type": "string"
    }
];
class TssV2TransactionsGet200ResponseInstallmentInformation {
    static getAttributeTypeMap() {
        return TssV2TransactionsGet200ResponseInstallmentInformation.attributeTypeMap;
    }
}
exports.TssV2TransactionsGet200ResponseInstallmentInformation = TssV2TransactionsGet200ResponseInstallmentInformation;
TssV2TransactionsGet200ResponseInstallmentInformation.discriminator = undefined;
TssV2TransactionsGet200ResponseInstallmentInformation.attributeTypeMap = [
    {
        "name": "numberOfInstallments",
        "baseName": "numberOfInstallments",
        "type": "string"
    },
    {
        "name": "identifier",
        "baseName": "identifier",
        "type": "string"
    }
];
class TssV2TransactionsGet200ResponseLinks {
    static getAttributeTypeMap() {
        return TssV2TransactionsGet200ResponseLinks.attributeTypeMap;
    }
}
exports.TssV2TransactionsGet200ResponseLinks = TssV2TransactionsGet200ResponseLinks;
TssV2TransactionsGet200ResponseLinks.discriminator = undefined;
TssV2TransactionsGet200ResponseLinks.attributeTypeMap = [
    {
        "name": "self",
        "baseName": "self",
        "type": "PtsV2PaymentsPost201ResponseLinksSelf"
    },
    {
        "name": "relatedTransactions",
        "baseName": "relatedTransactions",
        "type": "Array<PtsV2PaymentsPost201ResponseLinksSelf>"
    }
];
class TssV2TransactionsGet200ResponseMerchantInformation {
    static getAttributeTypeMap() {
        return TssV2TransactionsGet200ResponseMerchantInformation.attributeTypeMap;
    }
}
exports.TssV2TransactionsGet200ResponseMerchantInformation = TssV2TransactionsGet200ResponseMerchantInformation;
TssV2TransactionsGet200ResponseMerchantInformation.discriminator = undefined;
TssV2TransactionsGet200ResponseMerchantInformation.attributeTypeMap = [
    {
        "name": "merchantDescriptor",
        "baseName": "merchantDescriptor",
        "type": "TssV2TransactionsGet200ResponseMerchantInformationMerchantDescriptor"
    }
];
class TssV2TransactionsGet200ResponseMerchantInformationMerchantDescriptor {
    static getAttributeTypeMap() {
        return TssV2TransactionsGet200ResponseMerchantInformationMerchantDescriptor.attributeTypeMap;
    }
}
exports.TssV2TransactionsGet200ResponseMerchantInformationMerchantDescriptor = TssV2TransactionsGet200ResponseMerchantInformationMerchantDescriptor;
TssV2TransactionsGet200ResponseMerchantInformationMerchantDescriptor.discriminator = undefined;
TssV2TransactionsGet200ResponseMerchantInformationMerchantDescriptor.attributeTypeMap = [
    {
        "name": "name",
        "baseName": "name",
        "type": "string"
    }
];
class TssV2TransactionsGet200ResponseOrderInformation {
    static getAttributeTypeMap() {
        return TssV2TransactionsGet200ResponseOrderInformation.attributeTypeMap;
    }
}
exports.TssV2TransactionsGet200ResponseOrderInformation = TssV2TransactionsGet200ResponseOrderInformation;
TssV2TransactionsGet200ResponseOrderInformation.discriminator = undefined;
TssV2TransactionsGet200ResponseOrderInformation.attributeTypeMap = [
    {
        "name": "billTo",
        "baseName": "billTo",
        "type": "TssV2TransactionsGet200ResponseOrderInformationBillTo"
    },
    {
        "name": "shipTo",
        "baseName": "shipTo",
        "type": "TssV2TransactionsGet200ResponseOrderInformationShipTo"
    },
    {
        "name": "lineItems",
        "baseName": "lineItems",
        "type": "Array<TssV2TransactionsGet200ResponseOrderInformationLineItems>"
    },
    {
        "name": "amountDetails",
        "baseName": "amountDetails",
        "type": "TssV2TransactionsGet200ResponseOrderInformationAmountDetails"
    },
    {
        "name": "shippingDetails",
        "baseName": "shippingDetails",
        "type": "TssV2TransactionsGet200ResponseOrderInformationShippingDetails"
    },
    {
        "name": "invoiceDetails",
        "baseName": "invoiceDetails",
        "type": "TssV2TransactionsGet200ResponseOrderInformationInvoiceDetails"
    }
];
class TssV2TransactionsGet200ResponseOrderInformationAmountDetails {
    static getAttributeTypeMap() {
        return TssV2TransactionsGet200ResponseOrderInformationAmountDetails.attributeTypeMap;
    }
}
exports.TssV2TransactionsGet200ResponseOrderInformationAmountDetails = TssV2TransactionsGet200ResponseOrderInformationAmountDetails;
TssV2TransactionsGet200ResponseOrderInformationAmountDetails.discriminator = undefined;
TssV2TransactionsGet200ResponseOrderInformationAmountDetails.attributeTypeMap = [
    {
        "name": "totalAmount",
        "baseName": "totalAmount",
        "type": "string"
    },
    {
        "name": "currency",
        "baseName": "currency",
        "type": "string"
    },
    {
        "name": "taxAmount",
        "baseName": "taxAmount",
        "type": "string"
    },
    {
        "name": "authorizedAmount",
        "baseName": "authorizedAmount",
        "type": "string"
    },
    {
        "name": "settlementAmount",
        "baseName": "settlementAmount",
        "type": "string"
    },
    {
        "name": "settlementCurrency",
        "baseName": "settlementCurrency",
        "type": "string"
    },
    {
        "name": "surcharge",
        "baseName": "surcharge",
        "type": "Ptsv2payoutsOrderInformationAmountDetailsSurcharge"
    }
];
class TssV2TransactionsGet200ResponseOrderInformationBillTo {
    static getAttributeTypeMap() {
        return TssV2TransactionsGet200ResponseOrderInformationBillTo.attributeTypeMap;
    }
}
exports.TssV2TransactionsGet200ResponseOrderInformationBillTo = TssV2TransactionsGet200ResponseOrderInformationBillTo;
TssV2TransactionsGet200ResponseOrderInformationBillTo.discriminator = undefined;
TssV2TransactionsGet200ResponseOrderInformationBillTo.attributeTypeMap = [
    {
        "name": "firstName",
        "baseName": "firstName",
        "type": "string"
    },
    {
        "name": "lastName",
        "baseName": "lastName",
        "type": "string"
    },
    {
        "name": "middleName",
        "baseName": "middleName",
        "type": "string"
    },
    {
        "name": "nameSuffix",
        "baseName": "nameSuffix",
        "type": "string"
    },
    {
        "name": "address1",
        "baseName": "address1",
        "type": "string"
    },
    {
        "name": "address2",
        "baseName": "address2",
        "type": "string"
    },
    {
        "name": "locality",
        "baseName": "locality",
        "type": "string"
    },
    {
        "name": "administrativeArea",
        "baseName": "administrativeArea",
        "type": "string"
    },
    {
        "name": "postalCode",
        "baseName": "postalCode",
        "type": "string"
    },
    {
        "name": "company",
        "baseName": "company",
        "type": "string"
    },
    {
        "name": "email",
        "baseName": "email",
        "type": "string"
    },
    {
        "name": "country",
        "baseName": "country",
        "type": "string"
    },
    {
        "name": "title",
        "baseName": "title",
        "type": "string"
    },
    {
        "name": "phoneNumber",
        "baseName": "phoneNumber",
        "type": "string"
    }
];
class TssV2TransactionsGet200ResponseOrderInformationInvoiceDetails {
    static getAttributeTypeMap() {
        return TssV2TransactionsGet200ResponseOrderInformationInvoiceDetails.attributeTypeMap;
    }
}
exports.TssV2TransactionsGet200ResponseOrderInformationInvoiceDetails = TssV2TransactionsGet200ResponseOrderInformationInvoiceDetails;
TssV2TransactionsGet200ResponseOrderInformationInvoiceDetails.discriminator = undefined;
TssV2TransactionsGet200ResponseOrderInformationInvoiceDetails.attributeTypeMap = [
    {
        "name": "salesSlipNumber",
        "baseName": "salesSlipNumber",
        "type": "number"
    }
];
class TssV2TransactionsGet200ResponseOrderInformationLineItems {
    static getAttributeTypeMap() {
        return TssV2TransactionsGet200ResponseOrderInformationLineItems.attributeTypeMap;
    }
}
exports.TssV2TransactionsGet200ResponseOrderInformationLineItems = TssV2TransactionsGet200ResponseOrderInformationLineItems;
TssV2TransactionsGet200ResponseOrderInformationLineItems.discriminator = undefined;
TssV2TransactionsGet200ResponseOrderInformationLineItems.attributeTypeMap = [
    {
        "name": "productCode",
        "baseName": "productCode",
        "type": "string"
    },
    {
        "name": "productName",
        "baseName": "productName",
        "type": "string"
    },
    {
        "name": "productSku",
        "baseName": "productSku",
        "type": "string"
    },
    {
        "name": "taxAmount",
        "baseName": "taxAmount",
        "type": "string"
    },
    {
        "name": "quantity",
        "baseName": "quantity",
        "type": "number"
    },
    {
        "name": "unitPrice",
        "baseName": "unitPrice",
        "type": "string"
    },
    {
        "name": "fulfillmentType",
        "baseName": "fulfillmentType",
        "type": "string"
    }
];
class TssV2TransactionsGet200ResponseOrderInformationShipTo {
    static getAttributeTypeMap() {
        return TssV2TransactionsGet200ResponseOrderInformationShipTo.attributeTypeMap;
    }
}
exports.TssV2TransactionsGet200ResponseOrderInformationShipTo = TssV2TransactionsGet200ResponseOrderInformationShipTo;
TssV2TransactionsGet200ResponseOrderInformationShipTo.discriminator = undefined;
TssV2TransactionsGet200ResponseOrderInformationShipTo.attributeTypeMap = [
    {
        "name": "firstName",
        "baseName": "firstName",
        "type": "string"
    },
    {
        "name": "lastName",
        "baseName": "lastName",
        "type": "string"
    },
    {
        "name": "address1",
        "baseName": "address1",
        "type": "string"
    },
    {
        "name": "address2",
        "baseName": "address2",
        "type": "string"
    },
    {
        "name": "locality",
        "baseName": "locality",
        "type": "string"
    },
    {
        "name": "administrativeArea",
        "baseName": "administrativeArea",
        "type": "string"
    },
    {
        "name": "postalCode",
        "baseName": "postalCode",
        "type": "string"
    },
    {
        "name": "company",
        "baseName": "company",
        "type": "string"
    },
    {
        "name": "country",
        "baseName": "country",
        "type": "string"
    },
    {
        "name": "phoneNumber",
        "baseName": "phoneNumber",
        "type": "string"
    }
];
class TssV2TransactionsGet200ResponseOrderInformationShippingDetails {
    static getAttributeTypeMap() {
        return TssV2TransactionsGet200ResponseOrderInformationShippingDetails.attributeTypeMap;
    }
}
exports.TssV2TransactionsGet200ResponseOrderInformationShippingDetails = TssV2TransactionsGet200ResponseOrderInformationShippingDetails;
TssV2TransactionsGet200ResponseOrderInformationShippingDetails.discriminator = undefined;
TssV2TransactionsGet200ResponseOrderInformationShippingDetails.attributeTypeMap = [
    {
        "name": "giftWrap",
        "baseName": "giftWrap",
        "type": "boolean"
    },
    {
        "name": "shippingMethod",
        "baseName": "shippingMethod",
        "type": "string"
    }
];
class TssV2TransactionsGet200ResponsePaymentInformation {
    static getAttributeTypeMap() {
        return TssV2TransactionsGet200ResponsePaymentInformation.attributeTypeMap;
    }
}
exports.TssV2TransactionsGet200ResponsePaymentInformation = TssV2TransactionsGet200ResponsePaymentInformation;
TssV2TransactionsGet200ResponsePaymentInformation.discriminator = undefined;
TssV2TransactionsGet200ResponsePaymentInformation.attributeTypeMap = [
    {
        "name": "paymentType",
        "baseName": "paymentType",
        "type": "TssV2TransactionsGet200ResponsePaymentInformationPaymentType"
    },
    {
        "name": "customer",
        "baseName": "customer",
        "type": "TssV2TransactionsGet200ResponsePaymentInformationCustomer"
    },
    {
        "name": "card",
        "baseName": "card",
        "type": "TssV2TransactionsGet200ResponsePaymentInformationCard"
    },
    {
        "name": "brands",
        "baseName": "brands",
        "type": "Array<TssV2TransactionsGet200ResponsePaymentInformationBrands>"
    },
    {
        "name": "features",
        "baseName": "features",
        "type": "TssV2TransactionsGet200ResponsePaymentInformationFeatures"
    },
    {
        "name": "invoice",
        "baseName": "invoice",
        "type": "TssV2TransactionsGet200ResponsePaymentInformationInvoice"
    },
    {
        "name": "network",
        "baseName": "network",
        "type": "TssV2TransactionsGet200ResponsePaymentInformationNetwork"
    },
    {
        "name": "issuerInformation",
        "baseName": "issuerInformation",
        "type": "TssV2TransactionsGet200ResponsePaymentInformationIssuerInformation"
    },
    {
        "name": "bank",
        "baseName": "bank",
        "type": "TssV2TransactionsGet200ResponsePaymentInformationBank"
    },
    {
        "name": "accountFeatures",
        "baseName": "accountFeatures",
        "type": "TssV2TransactionsGet200ResponsePaymentInformationAccountFeatures"
    },
    {
        "name": "paymentInstrument",
        "baseName": "paymentInstrument",
        "type": "PtsV2PaymentsPost201ResponseTokenInformationPaymentInstrument"
    },
    {
        "name": "instrumentIdentifier",
        "baseName": "instrumentIdentifier",
        "type": "TssV2TransactionsGet200ResponsePaymentInformationInstrumentIdentifier"
    },
    {
        "name": "shippingAddress",
        "baseName": "shippingAddress",
        "type": "PtsV2PaymentsPost201ResponseTokenInformationShippingAddress"
    },
    {
        "name": "fluidData",
        "baseName": "fluidData",
        "type": "TssV2TransactionsGet200ResponsePaymentInformationFluidData"
    }
];
class TssV2TransactionsGet200ResponsePaymentInformationAccountFeatures {
    static getAttributeTypeMap() {
        return TssV2TransactionsGet200ResponsePaymentInformationAccountFeatures.attributeTypeMap;
    }
}
exports.TssV2TransactionsGet200ResponsePaymentInformationAccountFeatures = TssV2TransactionsGet200ResponsePaymentInformationAccountFeatures;
TssV2TransactionsGet200ResponsePaymentInformationAccountFeatures.discriminator = undefined;
TssV2TransactionsGet200ResponsePaymentInformationAccountFeatures.attributeTypeMap = [
    {
        "name": "balanceAmount",
        "baseName": "balanceAmount",
        "type": "string"
    },
    {
        "name": "previousBalanceAmount",
        "baseName": "previousBalanceAmount",
        "type": "string"
    },
    {
        "name": "currency",
        "baseName": "currency",
        "type": "string"
    }
];
class TssV2TransactionsGet200ResponsePaymentInformationBank {
    static getAttributeTypeMap() {
        return TssV2TransactionsGet200ResponsePaymentInformationBank.attributeTypeMap;
    }
}
exports.TssV2TransactionsGet200ResponsePaymentInformationBank = TssV2TransactionsGet200ResponsePaymentInformationBank;
TssV2TransactionsGet200ResponsePaymentInformationBank.discriminator = undefined;
TssV2TransactionsGet200ResponsePaymentInformationBank.attributeTypeMap = [
    {
        "name": "routingNumber",
        "baseName": "routingNumber",
        "type": "string"
    },
    {
        "name": "branchCode",
        "baseName": "branchCode",
        "type": "string"
    },
    {
        "name": "swiftCode",
        "baseName": "swiftCode",
        "type": "string"
    },
    {
        "name": "bankCode",
        "baseName": "bankCode",
        "type": "string"
    },
    {
        "name": "iban",
        "baseName": "iban",
        "type": "string"
    },
    {
        "name": "account",
        "baseName": "account",
        "type": "TssV2TransactionsGet200ResponsePaymentInformationBankAccount"
    },
    {
        "name": "mandate",
        "baseName": "mandate",
        "type": "TssV2TransactionsGet200ResponsePaymentInformationBankMandate"
    }
];
class TssV2TransactionsGet200ResponsePaymentInformationBankAccount {
    static getAttributeTypeMap() {
        return TssV2TransactionsGet200ResponsePaymentInformationBankAccount.attributeTypeMap;
    }
}
exports.TssV2TransactionsGet200ResponsePaymentInformationBankAccount = TssV2TransactionsGet200ResponsePaymentInformationBankAccount;
TssV2TransactionsGet200ResponsePaymentInformationBankAccount.discriminator = undefined;
TssV2TransactionsGet200ResponsePaymentInformationBankAccount.attributeTypeMap = [
    {
        "name": "suffix",
        "baseName": "suffix",
        "type": "string"
    },
    {
        "name": "prefix",
        "baseName": "prefix",
        "type": "string"
    },
    {
        "name": "checkNumber",
        "baseName": "checkNumber",
        "type": "string"
    },
    {
        "name": "type",
        "baseName": "type",
        "type": "string"
    },
    {
        "name": "name",
        "baseName": "name",
        "type": "string"
    },
    {
        "name": "checkDigit",
        "baseName": "checkDigit",
        "type": "string"
    },
    {
        "name": "encoderId",
        "baseName": "encoderId",
        "type": "string"
    }
];
class TssV2TransactionsGet200ResponsePaymentInformationBankMandate {
    static getAttributeTypeMap() {
        return TssV2TransactionsGet200ResponsePaymentInformationBankMandate.attributeTypeMap;
    }
}
exports.TssV2TransactionsGet200ResponsePaymentInformationBankMandate = TssV2TransactionsGet200ResponsePaymentInformationBankMandate;
TssV2TransactionsGet200ResponsePaymentInformationBankMandate.discriminator = undefined;
TssV2TransactionsGet200ResponsePaymentInformationBankMandate.attributeTypeMap = [
    {
        "name": "referenceNumber",
        "baseName": "referenceNumber",
        "type": "string"
    },
    {
        "name": "recurringType",
        "baseName": "recurringType",
        "type": "string"
    },
    {
        "name": "id",
        "baseName": "id",
        "type": "string"
    }
];
class TssV2TransactionsGet200ResponsePaymentInformationBrands {
    static getAttributeTypeMap() {
        return TssV2TransactionsGet200ResponsePaymentInformationBrands.attributeTypeMap;
    }
}
exports.TssV2TransactionsGet200ResponsePaymentInformationBrands = TssV2TransactionsGet200ResponsePaymentInformationBrands;
TssV2TransactionsGet200ResponsePaymentInformationBrands.discriminator = undefined;
TssV2TransactionsGet200ResponsePaymentInformationBrands.attributeTypeMap = [
    {
        "name": "type",
        "baseName": "type",
        "type": "string"
    },
    {
        "name": "brandName",
        "baseName": "brandName",
        "type": "string"
    }
];
class TssV2TransactionsGet200ResponsePaymentInformationCard {
    static getAttributeTypeMap() {
        return TssV2TransactionsGet200ResponsePaymentInformationCard.attributeTypeMap;
    }
}
exports.TssV2TransactionsGet200ResponsePaymentInformationCard = TssV2TransactionsGet200ResponsePaymentInformationCard;
TssV2TransactionsGet200ResponsePaymentInformationCard.discriminator = undefined;
TssV2TransactionsGet200ResponsePaymentInformationCard.attributeTypeMap = [
    {
        "name": "suffix",
        "baseName": "suffix",
        "type": "string"
    },
    {
        "name": "prefix",
        "baseName": "prefix",
        "type": "string"
    },
    {
        "name": "expirationMonth",
        "baseName": "expirationMonth",
        "type": "string"
    },
    {
        "name": "expirationYear",
        "baseName": "expirationYear",
        "type": "string"
    },
    {
        "name": "startMonth",
        "baseName": "startMonth",
        "type": "string"
    },
    {
        "name": "startYear",
        "baseName": "startYear",
        "type": "string"
    },
    {
        "name": "issueNumber",
        "baseName": "issueNumber",
        "type": "string"
    },
    {
        "name": "type",
        "baseName": "type",
        "type": "string"
    },
    {
        "name": "brandName",
        "baseName": "brandName",
        "type": "string"
    },
    {
        "name": "currency",
        "baseName": "currency",
        "type": "string"
    },
    {
        "name": "accountEncoderId",
        "baseName": "accountEncoderId",
        "type": "string"
    },
    {
        "name": "useAs",
        "baseName": "useAs",
        "type": "string"
    }
];
class TssV2TransactionsGet200ResponsePaymentInformationCustomer {
    static getAttributeTypeMap() {
        return TssV2TransactionsGet200ResponsePaymentInformationCustomer.attributeTypeMap;
    }
}
exports.TssV2TransactionsGet200ResponsePaymentInformationCustomer = TssV2TransactionsGet200ResponsePaymentInformationCustomer;
TssV2TransactionsGet200ResponsePaymentInformationCustomer.discriminator = undefined;
TssV2TransactionsGet200ResponsePaymentInformationCustomer.attributeTypeMap = [
    {
        "name": "customerId",
        "baseName": "customerId",
        "type": "string"
    },
    {
        "name": "id",
        "baseName": "id",
        "type": "string"
    }
];
class TssV2TransactionsGet200ResponsePaymentInformationFeatures {
    static getAttributeTypeMap() {
        return TssV2TransactionsGet200ResponsePaymentInformationFeatures.attributeTypeMap;
    }
}
exports.TssV2TransactionsGet200ResponsePaymentInformationFeatures = TssV2TransactionsGet200ResponsePaymentInformationFeatures;
TssV2TransactionsGet200ResponsePaymentInformationFeatures.discriminator = undefined;
TssV2TransactionsGet200ResponsePaymentInformationFeatures.attributeTypeMap = [
    {
        "name": "accountFundingSource",
        "baseName": "accountFundingSource",
        "type": "string"
    },
    {
        "name": "accountFundingSourceSubType",
        "baseName": "accountFundingSourceSubType",
        "type": "string"
    },
    {
        "name": "cardProduct",
        "baseName": "cardProduct",
        "type": "string"
    },
    {
        "name": "messageType",
        "baseName": "messageType",
        "type": "string"
    },
    {
        "name": "acceptanceLevel",
        "baseName": "acceptanceLevel",
        "type": "string"
    },
    {
        "name": "cardPlatform",
        "baseName": "cardPlatform",
        "type": "string"
    },
    {
        "name": "comboCard",
        "baseName": "comboCard",
        "type": "string"
    }
];
class TssV2TransactionsGet200ResponsePaymentInformationFluidData {
    static getAttributeTypeMap() {
        return TssV2TransactionsGet200ResponsePaymentInformationFluidData.attributeTypeMap;
    }
}
exports.TssV2TransactionsGet200ResponsePaymentInformationFluidData = TssV2TransactionsGet200ResponsePaymentInformationFluidData;
TssV2TransactionsGet200ResponsePaymentInformationFluidData.discriminator = undefined;
TssV2TransactionsGet200ResponsePaymentInformationFluidData.attributeTypeMap = [
    {
        "name": "descriptor",
        "baseName": "descriptor",
        "type": "string"
    }
];
class TssV2TransactionsGet200ResponsePaymentInformationInstrumentIdentifier {
    static getAttributeTypeMap() {
        return TssV2TransactionsGet200ResponsePaymentInformationInstrumentIdentifier.attributeTypeMap;
    }
}
exports.TssV2TransactionsGet200ResponsePaymentInformationInstrumentIdentifier = TssV2TransactionsGet200ResponsePaymentInformationInstrumentIdentifier;
TssV2TransactionsGet200ResponsePaymentInformationInstrumentIdentifier.discriminator = undefined;
TssV2TransactionsGet200ResponsePaymentInformationInstrumentIdentifier.attributeTypeMap = [
    {
        "name": "id",
        "baseName": "id",
        "type": "string"
    }
];
class TssV2TransactionsGet200ResponsePaymentInformationInvoice {
    static getAttributeTypeMap() {
        return TssV2TransactionsGet200ResponsePaymentInformationInvoice.attributeTypeMap;
    }
}
exports.TssV2TransactionsGet200ResponsePaymentInformationInvoice = TssV2TransactionsGet200ResponsePaymentInformationInvoice;
TssV2TransactionsGet200ResponsePaymentInformationInvoice.discriminator = undefined;
TssV2TransactionsGet200ResponsePaymentInformationInvoice.attributeTypeMap = [
    {
        "name": "number",
        "baseName": "number",
        "type": "string"
    },
    {
        "name": "barcodeNumber",
        "baseName": "barcodeNumber",
        "type": "string"
    },
    {
        "name": "expirationDate",
        "baseName": "expirationDate",
        "type": "string"
    }
];
class TssV2TransactionsGet200ResponsePaymentInformationIssuerInformation {
    static getAttributeTypeMap() {
        return TssV2TransactionsGet200ResponsePaymentInformationIssuerInformation.attributeTypeMap;
    }
}
exports.TssV2TransactionsGet200ResponsePaymentInformationIssuerInformation = TssV2TransactionsGet200ResponsePaymentInformationIssuerInformation;
TssV2TransactionsGet200ResponsePaymentInformationIssuerInformation.discriminator = undefined;
TssV2TransactionsGet200ResponsePaymentInformationIssuerInformation.attributeTypeMap = [
    {
        "name": "name",
        "baseName": "name",
        "type": "string"
    },
    {
        "name": "country",
        "baseName": "country",
        "type": "string"
    },
    {
        "name": "binLength",
        "baseName": "binLength",
        "type": "string"
    },
    {
        "name": "phoneNumber",
        "baseName": "phoneNumber",
        "type": "string"
    },
    {
        "name": "transactionInformation",
        "baseName": "transactionInformation",
        "type": "string"
    }
];
class TssV2TransactionsGet200ResponsePaymentInformationNetwork {
    static getAttributeTypeMap() {
        return TssV2TransactionsGet200ResponsePaymentInformationNetwork.attributeTypeMap;
    }
}
exports.TssV2TransactionsGet200ResponsePaymentInformationNetwork = TssV2TransactionsGet200ResponsePaymentInformationNetwork;
TssV2TransactionsGet200ResponsePaymentInformationNetwork.discriminator = undefined;
TssV2TransactionsGet200ResponsePaymentInformationNetwork.attributeTypeMap = [
    {
        "name": "id",
        "baseName": "id",
        "type": "string"
    }
];
class TssV2TransactionsGet200ResponsePaymentInformationPaymentType {
    static getAttributeTypeMap() {
        return TssV2TransactionsGet200ResponsePaymentInformationPaymentType.attributeTypeMap;
    }
}
exports.TssV2TransactionsGet200ResponsePaymentInformationPaymentType = TssV2TransactionsGet200ResponsePaymentInformationPaymentType;
TssV2TransactionsGet200ResponsePaymentInformationPaymentType.discriminator = undefined;
TssV2TransactionsGet200ResponsePaymentInformationPaymentType.attributeTypeMap = [
    {
        "name": "name",
        "baseName": "name",
        "type": "string"
    },
    {
        "name": "type",
        "baseName": "type",
        "type": "string"
    },
    {
        "name": "method",
        "baseName": "method",
        "type": "string"
    }
];
class TssV2TransactionsGet200ResponsePayoutOptions {
    static getAttributeTypeMap() {
        return TssV2TransactionsGet200ResponsePayoutOptions.attributeTypeMap;
    }
}
exports.TssV2TransactionsGet200ResponsePayoutOptions = TssV2TransactionsGet200ResponsePayoutOptions;
TssV2TransactionsGet200ResponsePayoutOptions.discriminator = undefined;
TssV2TransactionsGet200ResponsePayoutOptions.attributeTypeMap = [
    {
        "name": "payoutInquiry",
        "baseName": "payoutInquiry",
        "type": "string"
    }
];
class TssV2TransactionsGet200ResponsePointOfSaleInformation {
    static getAttributeTypeMap() {
        return TssV2TransactionsGet200ResponsePointOfSaleInformation.attributeTypeMap;
    }
}
exports.TssV2TransactionsGet200ResponsePointOfSaleInformation = TssV2TransactionsGet200ResponsePointOfSaleInformation;
TssV2TransactionsGet200ResponsePointOfSaleInformation.discriminator = undefined;
TssV2TransactionsGet200ResponsePointOfSaleInformation.attributeTypeMap = [
    {
        "name": "terminalId",
        "baseName": "terminalId",
        "type": "string"
    },
    {
        "name": "entryMode",
        "baseName": "entryMode",
        "type": "string"
    },
    {
        "name": "terminalCapability",
        "baseName": "terminalCapability",
        "type": "number"
    },
    {
        "name": "cardholderVerificationMethodUsed",
        "baseName": "cardholderVerificationMethodUsed",
        "type": "number"
    },
    {
        "name": "emv",
        "baseName": "emv",
        "type": "Ptsv2paymentsidreversalsPointOfSaleInformationEmv"
    }
];
class TssV2TransactionsGet200ResponseProcessingInformation {
    static getAttributeTypeMap() {
        return TssV2TransactionsGet200ResponseProcessingInformation.attributeTypeMap;
    }
}
exports.TssV2TransactionsGet200ResponseProcessingInformation = TssV2TransactionsGet200ResponseProcessingInformation;
TssV2TransactionsGet200ResponseProcessingInformation.discriminator = undefined;
TssV2TransactionsGet200ResponseProcessingInformation.attributeTypeMap = [
    {
        "name": "binSource",
        "baseName": "binSource",
        "type": "string"
    },
    {
        "name": "industryDataType",
        "baseName": "industryDataType",
        "type": "string"
    },
    {
        "name": "paymentSolution",
        "baseName": "paymentSolution",
        "type": "string"
    },
    {
        "name": "commerceIndicator",
        "baseName": "commerceIndicator",
        "type": "string"
    },
    {
        "name": "commerceIndicatorLabel",
        "baseName": "commerceIndicatorLabel",
        "type": "string"
    },
    {
        "name": "businessApplicationId",
        "baseName": "businessApplicationId",
        "type": "string"
    },
    {
        "name": "authorizationOptions",
        "baseName": "authorizationOptions",
        "type": "TssV2TransactionsGet200ResponseProcessingInformationAuthorizationOptions"
    },
    {
        "name": "bankTransferOptions",
        "baseName": "bankTransferOptions",
        "type": "TssV2TransactionsGet200ResponseProcessingInformationBankTransferOptions"
    },
    {
        "name": "captureOptions",
        "baseName": "captureOptions",
        "type": "TssV2TransactionsGet200ResponseProcessingInformationCaptureOptions"
    },
    {
        "name": "reconciliationId",
        "baseName": "reconciliationId",
        "type": "string"
    },
    {
        "name": "japanPaymentOptions",
        "baseName": "japanPaymentOptions",
        "type": "TssV2TransactionsGet200ResponseProcessingInformationJapanPaymentOptions"
    },
    {
        "name": "validationLevel",
        "baseName": "validationLevel",
        "type": "number"
    }
];
class TssV2TransactionsGet200ResponseProcessingInformationAuthorizationOptions {
    static getAttributeTypeMap() {
        return TssV2TransactionsGet200ResponseProcessingInformationAuthorizationOptions.attributeTypeMap;
    }
}
exports.TssV2TransactionsGet200ResponseProcessingInformationAuthorizationOptions = TssV2TransactionsGet200ResponseProcessingInformationAuthorizationOptions;
TssV2TransactionsGet200ResponseProcessingInformationAuthorizationOptions.discriminator = undefined;
TssV2TransactionsGet200ResponseProcessingInformationAuthorizationOptions.attributeTypeMap = [
    {
        "name": "authType",
        "baseName": "authType",
        "type": "string"
    },
    {
        "name": "authIndicator",
        "baseName": "authIndicator",
        "type": "string"
    },
    {
        "name": "extendAuthIndicator",
        "baseName": "extendAuthIndicator",
        "type": "string"
    },
    {
        "name": "cardVerificationIndicator",
        "baseName": "cardVerificationIndicator",
        "type": "boolean"
    },
    {
        "name": "initiator",
        "baseName": "initiator",
        "type": "TssV2TransactionsGet200ResponseProcessingInformationAuthorizationOptionsInitiator"
    }
];
class TssV2TransactionsGet200ResponseProcessingInformationAuthorizationOptionsInitiator {
    static getAttributeTypeMap() {
        return TssV2TransactionsGet200ResponseProcessingInformationAuthorizationOptionsInitiator.attributeTypeMap;
    }
}
exports.TssV2TransactionsGet200ResponseProcessingInformationAuthorizationOptionsInitiator = TssV2TransactionsGet200ResponseProcessingInformationAuthorizationOptionsInitiator;
TssV2TransactionsGet200ResponseProcessingInformationAuthorizationOptionsInitiator.discriminator = undefined;
TssV2TransactionsGet200ResponseProcessingInformationAuthorizationOptionsInitiator.attributeTypeMap = [
    {
        "name": "type",
        "baseName": "type",
        "type": "string"
    },
    {
        "name": "credentialStoredOnFile",
        "baseName": "credentialStoredOnFile",
        "type": "string"
    },
    {
        "name": "storedCredentialUsed",
        "baseName": "storedCredentialUsed",
        "type": "string"
    },
    {
        "name": "merchantInitiatedTransaction",
        "baseName": "merchantInitiatedTransaction",
        "type": "MerchantInitiatedTransactionObject"
    }
];
class TssV2TransactionsGet200ResponseProcessingInformationBankTransferOptions {
    static getAttributeTypeMap() {
        return TssV2TransactionsGet200ResponseProcessingInformationBankTransferOptions.attributeTypeMap;
    }
}
exports.TssV2TransactionsGet200ResponseProcessingInformationBankTransferOptions = TssV2TransactionsGet200ResponseProcessingInformationBankTransferOptions;
TssV2TransactionsGet200ResponseProcessingInformationBankTransferOptions.discriminator = undefined;
TssV2TransactionsGet200ResponseProcessingInformationBankTransferOptions.attributeTypeMap = [
    {
        "name": "secCode",
        "baseName": "secCode",
        "type": "string"
    }
];
class TssV2TransactionsGet200ResponseProcessingInformationCaptureOptions {
    static getAttributeTypeMap() {
        return TssV2TransactionsGet200ResponseProcessingInformationCaptureOptions.attributeTypeMap;
    }
}
exports.TssV2TransactionsGet200ResponseProcessingInformationCaptureOptions = TssV2TransactionsGet200ResponseProcessingInformationCaptureOptions;
TssV2TransactionsGet200ResponseProcessingInformationCaptureOptions.discriminator = undefined;
TssV2TransactionsGet200ResponseProcessingInformationCaptureOptions.attributeTypeMap = [
    {
        "name": "totalCaptureCount",
        "baseName": "totalCaptureCount",
        "type": "number"
    },
    {
        "name": "captureSequenceNumber",
        "baseName": "captureSequenceNumber",
        "type": "number"
    }
];
class TssV2TransactionsGet200ResponseProcessingInformationJapanPaymentOptions {
    static getAttributeTypeMap() {
        return TssV2TransactionsGet200ResponseProcessingInformationJapanPaymentOptions.attributeTypeMap;
    }
}
exports.TssV2TransactionsGet200ResponseProcessingInformationJapanPaymentOptions = TssV2TransactionsGet200ResponseProcessingInformationJapanPaymentOptions;
TssV2TransactionsGet200ResponseProcessingInformationJapanPaymentOptions.discriminator = undefined;
TssV2TransactionsGet200ResponseProcessingInformationJapanPaymentOptions.attributeTypeMap = [
    {
        "name": "paymentMethod",
        "baseName": "paymentMethod",
        "type": "string"
    },
    {
        "name": "terminalId",
        "baseName": "terminalId",
        "type": "string"
    },
    {
        "name": "businessName",
        "baseName": "businessName",
        "type": "string"
    },
    {
        "name": "businessNameKatakana",
        "baseName": "businessNameKatakana",
        "type": "string"
    },
    {
        "name": "businessNameEnglish",
        "baseName": "businessNameEnglish",
        "type": "string"
    },
    {
        "name": "bonuses",
        "baseName": "bonuses",
        "type": "Array<Ptsv2paymentsProcessingInformationJapanPaymentOptionsBonuses>"
    },
    {
        "name": "firstBillingMonth",
        "baseName": "firstBillingMonth",
        "type": "string"
    },
    {
        "name": "numberOfInstallments",
        "baseName": "numberOfInstallments",
        "type": "string"
    },
    {
        "name": "preApprovalType",
        "baseName": "preApprovalType",
        "type": "string"
    }
];
class TssV2TransactionsGet200ResponseProcessorInformation {
    static getAttributeTypeMap() {
        return TssV2TransactionsGet200ResponseProcessorInformation.attributeTypeMap;
    }
}
exports.TssV2TransactionsGet200ResponseProcessorInformation = TssV2TransactionsGet200ResponseProcessorInformation;
TssV2TransactionsGet200ResponseProcessorInformation.discriminator = undefined;
TssV2TransactionsGet200ResponseProcessorInformation.attributeTypeMap = [
    {
        "name": "processor",
        "baseName": "processor",
        "type": "TssV2TransactionsGet200ResponseProcessorInformationProcessor"
    },
    {
        "name": "multiProcessorRouting",
        "baseName": "multiProcessorRouting",
        "type": "Array<TssV2TransactionsGet200ResponseProcessorInformationMultiProcessorRouting>"
    },
    {
        "name": "transactionId",
        "baseName": "transactionId",
        "type": "string"
    },
    {
        "name": "networkTransactionId",
        "baseName": "networkTransactionId",
        "type": "string"
    },
    {
        "name": "retrievalReferenceNumber",
        "baseName": "retrievalReferenceNumber",
        "type": "string"
    },
    {
        "name": "responseId",
        "baseName": "responseId",
        "type": "string"
    },
    {
        "name": "approvalCode",
        "baseName": "approvalCode",
        "type": "string"
    },
    {
        "name": "responseCode",
        "baseName": "responseCode",
        "type": "string"
    },
    {
        "name": "avs",
        "baseName": "avs",
        "type": "PtsV2PaymentsPost201ResponseProcessorInformationAvs"
    },
    {
        "name": "cardVerification",
        "baseName": "cardVerification",
        "type": "Riskv1decisionsProcessorInformationCardVerification"
    },
    {
        "name": "achVerification",
        "baseName": "achVerification",
        "type": "PtsV2PaymentsPost201ResponseProcessorInformationAchVerification"
    },
    {
        "name": "electronicVerificationResults",
        "baseName": "electronicVerificationResults",
        "type": "TssV2TransactionsGet200ResponseProcessorInformationElectronicVerificationResults"
    },
    {
        "name": "eventStatus",
        "baseName": "eventStatus",
        "type": "string"
    },
    {
        "name": "systemTraceAuditNumber",
        "baseName": "systemTraceAuditNumber",
        "type": "string"
    },
    {
        "name": "responseCodeSource",
        "baseName": "responseCodeSource",
        "type": "string"
    },
    {
        "name": "paymentAccountReferenceNumber",
        "baseName": "paymentAccountReferenceNumber",
        "type": "string"
    },
    {
        "name": "routing",
        "baseName": "routing",
        "type": "PtsV2PaymentsPost201ResponseProcessorInformationRouting"
    }
];
class TssV2TransactionsGet200ResponseProcessorInformationElectronicVerificationResults {
    static getAttributeTypeMap() {
        return TssV2TransactionsGet200ResponseProcessorInformationElectronicVerificationResults.attributeTypeMap;
    }
}
exports.TssV2TransactionsGet200ResponseProcessorInformationElectronicVerificationResults = TssV2TransactionsGet200ResponseProcessorInformationElectronicVerificationResults;
TssV2TransactionsGet200ResponseProcessorInformationElectronicVerificationResults.discriminator = undefined;
TssV2TransactionsGet200ResponseProcessorInformationElectronicVerificationResults.attributeTypeMap = [
    {
        "name": "email",
        "baseName": "email",
        "type": "string"
    },
    {
        "name": "emailRaw",
        "baseName": "emailRaw",
        "type": "string"
    },
    {
        "name": "name",
        "baseName": "name",
        "type": "string"
    },
    {
        "name": "nameRaw",
        "baseName": "nameRaw",
        "type": "string"
    },
    {
        "name": "phoneNumber",
        "baseName": "phoneNumber",
        "type": "string"
    },
    {
        "name": "phoneNumberRaw",
        "baseName": "phoneNumberRaw",
        "type": "string"
    },
    {
        "name": "street",
        "baseName": "street",
        "type": "string"
    },
    {
        "name": "streetRaw",
        "baseName": "streetRaw",
        "type": "string"
    },
    {
        "name": "postalCode",
        "baseName": "postalCode",
        "type": "string"
    },
    {
        "name": "postalCodeRaw",
        "baseName": "postalCodeRaw",
        "type": "string"
    }
];
class TssV2TransactionsGet200ResponseProcessorInformationMultiProcessorRouting {
    static getAttributeTypeMap() {
        return TssV2TransactionsGet200ResponseProcessorInformationMultiProcessorRouting.attributeTypeMap;
    }
}
exports.TssV2TransactionsGet200ResponseProcessorInformationMultiProcessorRouting = TssV2TransactionsGet200ResponseProcessorInformationMultiProcessorRouting;
TssV2TransactionsGet200ResponseProcessorInformationMultiProcessorRouting.discriminator = undefined;
TssV2TransactionsGet200ResponseProcessorInformationMultiProcessorRouting.attributeTypeMap = [
    {
        "name": "name",
        "baseName": "name",
        "type": "string"
    },
    {
        "name": "responseCode",
        "baseName": "responseCode",
        "type": "string"
    },
    {
        "name": "reasonCode",
        "baseName": "reasonCode",
        "type": "string"
    },
    {
        "name": "sequence",
        "baseName": "sequence",
        "type": "string"
    }
];
class TssV2TransactionsGet200ResponseProcessorInformationProcessor {
    static getAttributeTypeMap() {
        return TssV2TransactionsGet200ResponseProcessorInformationProcessor.attributeTypeMap;
    }
}
exports.TssV2TransactionsGet200ResponseProcessorInformationProcessor = TssV2TransactionsGet200ResponseProcessorInformationProcessor;
TssV2TransactionsGet200ResponseProcessorInformationProcessor.discriminator = undefined;
TssV2TransactionsGet200ResponseProcessorInformationProcessor.attributeTypeMap = [
    {
        "name": "name",
        "baseName": "name",
        "type": "string"
    }
];
class TssV2TransactionsGet200ResponseRecurringPaymentInformation {
    static getAttributeTypeMap() {
        return TssV2TransactionsGet200ResponseRecurringPaymentInformation.attributeTypeMap;
    }
}
exports.TssV2TransactionsGet200ResponseRecurringPaymentInformation = TssV2TransactionsGet200ResponseRecurringPaymentInformation;
TssV2TransactionsGet200ResponseRecurringPaymentInformation.discriminator = undefined;
TssV2TransactionsGet200ResponseRecurringPaymentInformation.attributeTypeMap = [
    {
        "name": "amountType",
        "baseName": "amountType",
        "type": "string"
    }
];
class TssV2TransactionsGet200ResponseRiskInformation {
    static getAttributeTypeMap() {
        return TssV2TransactionsGet200ResponseRiskInformation.attributeTypeMap;
    }
}
exports.TssV2TransactionsGet200ResponseRiskInformation = TssV2TransactionsGet200ResponseRiskInformation;
TssV2TransactionsGet200ResponseRiskInformation.discriminator = undefined;
TssV2TransactionsGet200ResponseRiskInformation.attributeTypeMap = [
    {
        "name": "profile",
        "baseName": "profile",
        "type": "TssV2TransactionsGet200ResponseRiskInformationProfile"
    },
    {
        "name": "rules",
        "baseName": "rules",
        "type": "Array<TssV2TransactionsGet200ResponseRiskInformationRules>"
    },
    {
        "name": "passiveProfile",
        "baseName": "passiveProfile",
        "type": "TssV2TransactionsGet200ResponseRiskInformationProfile"
    },
    {
        "name": "passiveRules",
        "baseName": "passiveRules",
        "type": "Array<TssV2TransactionsGet200ResponseRiskInformationRules>"
    },
    {
        "name": "score",
        "baseName": "score",
        "type": "TssV2TransactionsGet200ResponseRiskInformationScore"
    },
    {
        "name": "localTime",
        "baseName": "localTime",
        "type": "string"
    }
];
class TssV2TransactionsGet200ResponseRiskInformationProfile {
    static getAttributeTypeMap() {
        return TssV2TransactionsGet200ResponseRiskInformationProfile.attributeTypeMap;
    }
}
exports.TssV2TransactionsGet200ResponseRiskInformationProfile = TssV2TransactionsGet200ResponseRiskInformationProfile;
TssV2TransactionsGet200ResponseRiskInformationProfile.discriminator = undefined;
TssV2TransactionsGet200ResponseRiskInformationProfile.attributeTypeMap = [
    {
        "name": "name",
        "baseName": "name",
        "type": "string"
    },
    {
        "name": "decision",
        "baseName": "decision",
        "type": "string"
    }
];
/**
* Names of one or more rules that were processed, and the decisions made by the rules.
*/
class TssV2TransactionsGet200ResponseRiskInformationRules {
    static getAttributeTypeMap() {
        return TssV2TransactionsGet200ResponseRiskInformationRules.attributeTypeMap;
    }
}
exports.TssV2TransactionsGet200ResponseRiskInformationRules = TssV2TransactionsGet200ResponseRiskInformationRules;
TssV2TransactionsGet200ResponseRiskInformationRules.discriminator = undefined;
TssV2TransactionsGet200ResponseRiskInformationRules.attributeTypeMap = [
    {
        "name": "name",
        "baseName": "name",
        "type": "string"
    },
    {
        "name": "decision",
        "baseName": "decision",
        "type": "string"
    }
];
class TssV2TransactionsGet200ResponseRiskInformationScore {
    static getAttributeTypeMap() {
        return TssV2TransactionsGet200ResponseRiskInformationScore.attributeTypeMap;
    }
}
exports.TssV2TransactionsGet200ResponseRiskInformationScore = TssV2TransactionsGet200ResponseRiskInformationScore;
TssV2TransactionsGet200ResponseRiskInformationScore.discriminator = undefined;
TssV2TransactionsGet200ResponseRiskInformationScore.attributeTypeMap = [
    {
        "name": "factorCodes",
        "baseName": "factorCodes",
        "type": "Array<string>"
    },
    {
        "name": "result",
        "baseName": "result",
        "type": "number"
    }
];
class TssV2TransactionsGet200ResponseSenderInformation {
    static getAttributeTypeMap() {
        return TssV2TransactionsGet200ResponseSenderInformation.attributeTypeMap;
    }
}
exports.TssV2TransactionsGet200ResponseSenderInformation = TssV2TransactionsGet200ResponseSenderInformation;
TssV2TransactionsGet200ResponseSenderInformation.discriminator = undefined;
TssV2TransactionsGet200ResponseSenderInformation.attributeTypeMap = [
    {
        "name": "referenceNumber",
        "baseName": "referenceNumber",
        "type": "string"
    }
];
class TssV2TransactionsGet200ResponseTokenInformation {
    static getAttributeTypeMap() {
        return TssV2TransactionsGet200ResponseTokenInformation.attributeTypeMap;
    }
}
exports.TssV2TransactionsGet200ResponseTokenInformation = TssV2TransactionsGet200ResponseTokenInformation;
TssV2TransactionsGet200ResponseTokenInformation.discriminator = undefined;
TssV2TransactionsGet200ResponseTokenInformation.attributeTypeMap = [
    {
        "name": "customer",
        "baseName": "customer",
        "type": "PtsV2PaymentsPost201ResponseTokenInformationCustomer"
    },
    {
        "name": "paymentInstrument",
        "baseName": "paymentInstrument",
        "type": "PtsV2PaymentsPost201ResponseTokenInformationPaymentInstrument"
    },
    {
        "name": "shippingAddress",
        "baseName": "shippingAddress",
        "type": "PtsV2PaymentsPost201ResponseTokenInformationShippingAddress"
    },
    {
        "name": "instrumentIdentifier",
        "baseName": "instrumentIdentifier",
        "type": "TssV2TransactionsGet200ResponsePaymentInformationInstrumentIdentifier"
    },
    {
        "name": "jti",
        "baseName": "jti",
        "type": "string"
    },
    {
        "name": "transientTokenJwt",
        "baseName": "transientTokenJwt",
        "type": "string"
    }
];
class TssV2TransactionsPost201Response {
    static getAttributeTypeMap() {
        return TssV2TransactionsPost201Response.attributeTypeMap;
    }
}
exports.TssV2TransactionsPost201Response = TssV2TransactionsPost201Response;
TssV2TransactionsPost201Response.discriminator = undefined;
TssV2TransactionsPost201Response.attributeTypeMap = [
    {
        "name": "searchId",
        "baseName": "searchId",
        "type": "string"
    },
    {
        "name": "save",
        "baseName": "save",
        "type": "boolean"
    },
    {
        "name": "name",
        "baseName": "name",
        "type": "string"
    },
    {
        "name": "timezone",
        "baseName": "timezone",
        "type": "string"
    },
    {
        "name": "query",
        "baseName": "query",
        "type": "string"
    },
    {
        "name": "offset",
        "baseName": "offset",
        "type": "number"
    },
    {
        "name": "limit",
        "baseName": "limit",
        "type": "number"
    },
    {
        "name": "sort",
        "baseName": "sort",
        "type": "string"
    },
    {
        "name": "count",
        "baseName": "count",
        "type": "number"
    },
    {
        "name": "totalCount",
        "baseName": "totalCount",
        "type": "number"
    },
    {
        "name": "submitTimeUtc",
        "baseName": "submitTimeUtc",
        "type": "string"
    },
    {
        "name": "embedded",
        "baseName": "_embedded",
        "type": "TssV2TransactionsPost201ResponseEmbedded"
    },
    {
        "name": "links",
        "baseName": "_links",
        "type": "PtsV2IncrementalAuthorizationPatch201ResponseLinks"
    }
];
class TssV2TransactionsPost201ResponseEmbedded {
    static getAttributeTypeMap() {
        return TssV2TransactionsPost201ResponseEmbedded.attributeTypeMap;
    }
}
exports.TssV2TransactionsPost201ResponseEmbedded = TssV2TransactionsPost201ResponseEmbedded;
TssV2TransactionsPost201ResponseEmbedded.discriminator = undefined;
TssV2TransactionsPost201ResponseEmbedded.attributeTypeMap = [
    {
        "name": "transactionSummaries",
        "baseName": "transactionSummaries",
        "type": "Array<TssV2TransactionsPost201ResponseEmbeddedTransactionSummaries>"
    }
];
class TssV2TransactionsPost201ResponseEmbeddedApplicationInformation {
    static getAttributeTypeMap() {
        return TssV2TransactionsPost201ResponseEmbeddedApplicationInformation.attributeTypeMap;
    }
}
exports.TssV2TransactionsPost201ResponseEmbeddedApplicationInformation = TssV2TransactionsPost201ResponseEmbeddedApplicationInformation;
TssV2TransactionsPost201ResponseEmbeddedApplicationInformation.discriminator = undefined;
TssV2TransactionsPost201ResponseEmbeddedApplicationInformation.attributeTypeMap = [
    {
        "name": "reasonCode",
        "baseName": "reasonCode",
        "type": "string"
    },
    {
        "name": "rCode",
        "baseName": "rCode",
        "type": "string"
    },
    {
        "name": "rFlag",
        "baseName": "rFlag",
        "type": "string"
    },
    {
        "name": "applications",
        "baseName": "applications",
        "type": "Array<TssV2TransactionsPost201ResponseEmbeddedApplicationInformationApplications>"
    },
    {
        "name": "returnCode",
        "baseName": "returnCode",
        "type": "number"
    }
];
class TssV2TransactionsPost201ResponseEmbeddedApplicationInformationApplications {
    static getAttributeTypeMap() {
        return TssV2TransactionsPost201ResponseEmbeddedApplicationInformationApplications.attributeTypeMap;
    }
}
exports.TssV2TransactionsPost201ResponseEmbeddedApplicationInformationApplications = TssV2TransactionsPost201ResponseEmbeddedApplicationInformationApplications;
TssV2TransactionsPost201ResponseEmbeddedApplicationInformationApplications.discriminator = undefined;
TssV2TransactionsPost201ResponseEmbeddedApplicationInformationApplications.attributeTypeMap = [
    {
        "name": "name",
        "baseName": "name",
        "type": "string"
    },
    {
        "name": "reasonCode",
        "baseName": "reasonCode",
        "type": "string"
    },
    {
        "name": "status",
        "baseName": "status",
        "type": "string"
    },
    {
        "name": "reason",
        "baseName": "reason",
        "type": "string"
    },
    {
        "name": "rCode",
        "baseName": "rCode",
        "type": "string"
    },
    {
        "name": "rFlag",
        "baseName": "rFlag",
        "type": "string"
    },
    {
        "name": "reconciliationId",
        "baseName": "reconciliationId",
        "type": "string"
    },
    {
        "name": "rMessage",
        "baseName": "rMessage",
        "type": "string"
    },
    {
        "name": "returnCode",
        "baseName": "returnCode",
        "type": "number"
    }
];
class TssV2TransactionsPost201ResponseEmbeddedClientReferenceInformation {
    static getAttributeTypeMap() {
        return TssV2TransactionsPost201ResponseEmbeddedClientReferenceInformation.attributeTypeMap;
    }
}
exports.TssV2TransactionsPost201ResponseEmbeddedClientReferenceInformation = TssV2TransactionsPost201ResponseEmbeddedClientReferenceInformation;
TssV2TransactionsPost201ResponseEmbeddedClientReferenceInformation.discriminator = undefined;
TssV2TransactionsPost201ResponseEmbeddedClientReferenceInformation.attributeTypeMap = [
    {
        "name": "code",
        "baseName": "code",
        "type": "string"
    },
    {
        "name": "applicationName",
        "baseName": "applicationName",
        "type": "string"
    },
    {
        "name": "applicationUser",
        "baseName": "applicationUser",
        "type": "string"
    },
    {
        "name": "partner",
        "baseName": "partner",
        "type": "TssV2TransactionsPost201ResponseEmbeddedClientReferenceInformationPartner"
    }
];
class TssV2TransactionsPost201ResponseEmbeddedClientReferenceInformationPartner {
    static getAttributeTypeMap() {
        return TssV2TransactionsPost201ResponseEmbeddedClientReferenceInformationPartner.attributeTypeMap;
    }
}
exports.TssV2TransactionsPost201ResponseEmbeddedClientReferenceInformationPartner = TssV2TransactionsPost201ResponseEmbeddedClientReferenceInformationPartner;
TssV2TransactionsPost201ResponseEmbeddedClientReferenceInformationPartner.discriminator = undefined;
TssV2TransactionsPost201ResponseEmbeddedClientReferenceInformationPartner.attributeTypeMap = [
    {
        "name": "solutionId",
        "baseName": "solutionId",
        "type": "string"
    }
];
class TssV2TransactionsPost201ResponseEmbeddedConsumerAuthenticationInformation {
    static getAttributeTypeMap() {
        return TssV2TransactionsPost201ResponseEmbeddedConsumerAuthenticationInformation.attributeTypeMap;
    }
}
exports.TssV2TransactionsPost201ResponseEmbeddedConsumerAuthenticationInformation = TssV2TransactionsPost201ResponseEmbeddedConsumerAuthenticationInformation;
TssV2TransactionsPost201ResponseEmbeddedConsumerAuthenticationInformation.discriminator = undefined;
TssV2TransactionsPost201ResponseEmbeddedConsumerAuthenticationInformation.attributeTypeMap = [
    {
        "name": "xid",
        "baseName": "xid",
        "type": "string"
    },
    {
        "name": "transactionId",
        "baseName": "transactionId",
        "type": "string"
    },
    {
        "name": "eciRaw",
        "baseName": "eciRaw",
        "type": "string"
    }
];
class TssV2TransactionsPost201ResponseEmbeddedErrorInformation {
    static getAttributeTypeMap() {
        return TssV2TransactionsPost201ResponseEmbeddedErrorInformation.attributeTypeMap;
    }
}
exports.TssV2TransactionsPost201ResponseEmbeddedErrorInformation = TssV2TransactionsPost201ResponseEmbeddedErrorInformation;
TssV2TransactionsPost201ResponseEmbeddedErrorInformation.discriminator = undefined;
TssV2TransactionsPost201ResponseEmbeddedErrorInformation.attributeTypeMap = [
    {
        "name": "reason",
        "baseName": "reason",
        "type": "string"
    }
];
class TssV2TransactionsPost201ResponseEmbeddedLinks {
    static getAttributeTypeMap() {
        return TssV2TransactionsPost201ResponseEmbeddedLinks.attributeTypeMap;
    }
}
exports.TssV2TransactionsPost201ResponseEmbeddedLinks = TssV2TransactionsPost201ResponseEmbeddedLinks;
TssV2TransactionsPost201ResponseEmbeddedLinks.discriminator = undefined;
TssV2TransactionsPost201ResponseEmbeddedLinks.attributeTypeMap = [
    {
        "name": "transactionDetail",
        "baseName": "transactionDetail",
        "type": "PtsV2PaymentsPost201ResponseLinksSelf"
    }
];
class TssV2TransactionsPost201ResponseEmbeddedMerchantInformation {
    static getAttributeTypeMap() {
        return TssV2TransactionsPost201ResponseEmbeddedMerchantInformation.attributeTypeMap;
    }
}
exports.TssV2TransactionsPost201ResponseEmbeddedMerchantInformation = TssV2TransactionsPost201ResponseEmbeddedMerchantInformation;
TssV2TransactionsPost201ResponseEmbeddedMerchantInformation.discriminator = undefined;
TssV2TransactionsPost201ResponseEmbeddedMerchantInformation.attributeTypeMap = [
    {
        "name": "resellerId",
        "baseName": "resellerId",
        "type": "string"
    }
];
class TssV2TransactionsPost201ResponseEmbeddedOrderInformation {
    static getAttributeTypeMap() {
        return TssV2TransactionsPost201ResponseEmbeddedOrderInformation.attributeTypeMap;
    }
}
exports.TssV2TransactionsPost201ResponseEmbeddedOrderInformation = TssV2TransactionsPost201ResponseEmbeddedOrderInformation;
TssV2TransactionsPost201ResponseEmbeddedOrderInformation.discriminator = undefined;
TssV2TransactionsPost201ResponseEmbeddedOrderInformation.attributeTypeMap = [
    {
        "name": "billTo",
        "baseName": "billTo",
        "type": "TssV2TransactionsPost201ResponseEmbeddedOrderInformationBillTo"
    },
    {
        "name": "shipTo",
        "baseName": "shipTo",
        "type": "TssV2TransactionsPost201ResponseEmbeddedOrderInformationShipTo"
    },
    {
        "name": "amountDetails",
        "baseName": "amountDetails",
        "type": "Ptsv2paymentsidreversalsReversalInformationAmountDetails"
    }
];
class TssV2TransactionsPost201ResponseEmbeddedOrderInformationBillTo {
    static getAttributeTypeMap() {
        return TssV2TransactionsPost201ResponseEmbeddedOrderInformationBillTo.attributeTypeMap;
    }
}
exports.TssV2TransactionsPost201ResponseEmbeddedOrderInformationBillTo = TssV2TransactionsPost201ResponseEmbeddedOrderInformationBillTo;
TssV2TransactionsPost201ResponseEmbeddedOrderInformationBillTo.discriminator = undefined;
TssV2TransactionsPost201ResponseEmbeddedOrderInformationBillTo.attributeTypeMap = [
    {
        "name": "firstName",
        "baseName": "firstName",
        "type": "string"
    },
    {
        "name": "lastName",
        "baseName": "lastName",
        "type": "string"
    },
    {
        "name": "address1",
        "baseName": "address1",
        "type": "string"
    },
    {
        "name": "email",
        "baseName": "email",
        "type": "string"
    },
    {
        "name": "country",
        "baseName": "country",
        "type": "string"
    },
    {
        "name": "phoneNumber",
        "baseName": "phoneNumber",
        "type": "string"
    }
];
class TssV2TransactionsPost201ResponseEmbeddedOrderInformationShipTo {
    static getAttributeTypeMap() {
        return TssV2TransactionsPost201ResponseEmbeddedOrderInformationShipTo.attributeTypeMap;
    }
}
exports.TssV2TransactionsPost201ResponseEmbeddedOrderInformationShipTo = TssV2TransactionsPost201ResponseEmbeddedOrderInformationShipTo;
TssV2TransactionsPost201ResponseEmbeddedOrderInformationShipTo.discriminator = undefined;
TssV2TransactionsPost201ResponseEmbeddedOrderInformationShipTo.attributeTypeMap = [
    {
        "name": "firstName",
        "baseName": "firstName",
        "type": "string"
    },
    {
        "name": "lastName",
        "baseName": "lastName",
        "type": "string"
    },
    {
        "name": "address1",
        "baseName": "address1",
        "type": "string"
    },
    {
        "name": "country",
        "baseName": "country",
        "type": "string"
    },
    {
        "name": "phoneNumber",
        "baseName": "phoneNumber",
        "type": "string"
    }
];
class TssV2TransactionsPost201ResponseEmbeddedPaymentInformation {
    static getAttributeTypeMap() {
        return TssV2TransactionsPost201ResponseEmbeddedPaymentInformation.attributeTypeMap;
    }
}
exports.TssV2TransactionsPost201ResponseEmbeddedPaymentInformation = TssV2TransactionsPost201ResponseEmbeddedPaymentInformation;
TssV2TransactionsPost201ResponseEmbeddedPaymentInformation.discriminator = undefined;
TssV2TransactionsPost201ResponseEmbeddedPaymentInformation.attributeTypeMap = [
    {
        "name": "paymentType",
        "baseName": "paymentType",
        "type": "TssV2TransactionsPost201ResponseEmbeddedPaymentInformationPaymentType"
    },
    {
        "name": "customer",
        "baseName": "customer",
        "type": "Ptsv2refreshpaymentstatusidPaymentInformationCustomer"
    },
    {
        "name": "card",
        "baseName": "card",
        "type": "TssV2TransactionsPost201ResponseEmbeddedPaymentInformationCard"
    },
    {
        "name": "bank",
        "baseName": "bank",
        "type": "TssV2TransactionsPost201ResponseEmbeddedPaymentInformationBank"
    }
];
class TssV2TransactionsPost201ResponseEmbeddedPaymentInformationBank {
    static getAttributeTypeMap() {
        return TssV2TransactionsPost201ResponseEmbeddedPaymentInformationBank.attributeTypeMap;
    }
}
exports.TssV2TransactionsPost201ResponseEmbeddedPaymentInformationBank = TssV2TransactionsPost201ResponseEmbeddedPaymentInformationBank;
TssV2TransactionsPost201ResponseEmbeddedPaymentInformationBank.discriminator = undefined;
TssV2TransactionsPost201ResponseEmbeddedPaymentInformationBank.attributeTypeMap = [
    {
        "name": "account",
        "baseName": "account",
        "type": "TssV2TransactionsPost201ResponseEmbeddedPaymentInformationBankAccount"
    }
];
class TssV2TransactionsPost201ResponseEmbeddedPaymentInformationBankAccount {
    static getAttributeTypeMap() {
        return TssV2TransactionsPost201ResponseEmbeddedPaymentInformationBankAccount.attributeTypeMap;
    }
}
exports.TssV2TransactionsPost201ResponseEmbeddedPaymentInformationBankAccount = TssV2TransactionsPost201ResponseEmbeddedPaymentInformationBankAccount;
TssV2TransactionsPost201ResponseEmbeddedPaymentInformationBankAccount.discriminator = undefined;
TssV2TransactionsPost201ResponseEmbeddedPaymentInformationBankAccount.attributeTypeMap = [
    {
        "name": "suffix",
        "baseName": "suffix",
        "type": "string"
    },
    {
        "name": "prefix",
        "baseName": "prefix",
        "type": "string"
    }
];
class TssV2TransactionsPost201ResponseEmbeddedPaymentInformationCard {
    static getAttributeTypeMap() {
        return TssV2TransactionsPost201ResponseEmbeddedPaymentInformationCard.attributeTypeMap;
    }
}
exports.TssV2TransactionsPost201ResponseEmbeddedPaymentInformationCard = TssV2TransactionsPost201ResponseEmbeddedPaymentInformationCard;
TssV2TransactionsPost201ResponseEmbeddedPaymentInformationCard.discriminator = undefined;
TssV2TransactionsPost201ResponseEmbeddedPaymentInformationCard.attributeTypeMap = [
    {
        "name": "suffix",
        "baseName": "suffix",
        "type": "string"
    },
    {
        "name": "prefix",
        "baseName": "prefix",
        "type": "string"
    },
    {
        "name": "type",
        "baseName": "type",
        "type": "string"
    }
];
class TssV2TransactionsPost201ResponseEmbeddedPaymentInformationPaymentType {
    static getAttributeTypeMap() {
        return TssV2TransactionsPost201ResponseEmbeddedPaymentInformationPaymentType.attributeTypeMap;
    }
}
exports.TssV2TransactionsPost201ResponseEmbeddedPaymentInformationPaymentType = TssV2TransactionsPost201ResponseEmbeddedPaymentInformationPaymentType;
TssV2TransactionsPost201ResponseEmbeddedPaymentInformationPaymentType.discriminator = undefined;
TssV2TransactionsPost201ResponseEmbeddedPaymentInformationPaymentType.attributeTypeMap = [
    {
        "name": "type",
        "baseName": "type",
        "type": "string"
    },
    {
        "name": "method",
        "baseName": "method",
        "type": "string"
    }
];
class TssV2TransactionsPost201ResponseEmbeddedPointOfSaleInformation {
    static getAttributeTypeMap() {
        return TssV2TransactionsPost201ResponseEmbeddedPointOfSaleInformation.attributeTypeMap;
    }
}
exports.TssV2TransactionsPost201ResponseEmbeddedPointOfSaleInformation = TssV2TransactionsPost201ResponseEmbeddedPointOfSaleInformation;
TssV2TransactionsPost201ResponseEmbeddedPointOfSaleInformation.discriminator = undefined;
TssV2TransactionsPost201ResponseEmbeddedPointOfSaleInformation.attributeTypeMap = [
    {
        "name": "terminalId",
        "baseName": "terminalId",
        "type": "string"
    },
    {
        "name": "terminalSerialNumber",
        "baseName": "terminalSerialNumber",
        "type": "string"
    },
    {
        "name": "deviceId",
        "baseName": "deviceId",
        "type": "string"
    },
    {
        "name": "partner",
        "baseName": "partner",
        "type": "TssV2TransactionsPost201ResponseEmbeddedPointOfSaleInformationPartner"
    },
    {
        "name": "emv",
        "baseName": "emv",
        "type": "Ptsv2paymentsidreversalsPointOfSaleInformationEmv"
    }
];
class TssV2TransactionsPost201ResponseEmbeddedPointOfSaleInformationPartner {
    static getAttributeTypeMap() {
        return TssV2TransactionsPost201ResponseEmbeddedPointOfSaleInformationPartner.attributeTypeMap;
    }
}
exports.TssV2TransactionsPost201ResponseEmbeddedPointOfSaleInformationPartner = TssV2TransactionsPost201ResponseEmbeddedPointOfSaleInformationPartner;
TssV2TransactionsPost201ResponseEmbeddedPointOfSaleInformationPartner.discriminator = undefined;
TssV2TransactionsPost201ResponseEmbeddedPointOfSaleInformationPartner.attributeTypeMap = [
    {
        "name": "originalTransactionId",
        "baseName": "originalTransactionId",
        "type": "string"
    }
];
class TssV2TransactionsPost201ResponseEmbeddedProcessingInformation {
    static getAttributeTypeMap() {
        return TssV2TransactionsPost201ResponseEmbeddedProcessingInformation.attributeTypeMap;
    }
}
exports.TssV2TransactionsPost201ResponseEmbeddedProcessingInformation = TssV2TransactionsPost201ResponseEmbeddedProcessingInformation;
TssV2TransactionsPost201ResponseEmbeddedProcessingInformation.discriminator = undefined;
TssV2TransactionsPost201ResponseEmbeddedProcessingInformation.attributeTypeMap = [
    {
        "name": "paymentSolution",
        "baseName": "paymentSolution",
        "type": "string"
    },
    {
        "name": "businessApplicationId",
        "baseName": "businessApplicationId",
        "type": "string"
    },
    {
        "name": "commerceIndicator",
        "baseName": "commerceIndicator",
        "type": "string"
    },
    {
        "name": "commerceIndicatorLabel",
        "baseName": "commerceIndicatorLabel",
        "type": "string"
    }
];
class TssV2TransactionsPost201ResponseEmbeddedProcessorInformation {
    static getAttributeTypeMap() {
        return TssV2TransactionsPost201ResponseEmbeddedProcessorInformation.attributeTypeMap;
    }
}
exports.TssV2TransactionsPost201ResponseEmbeddedProcessorInformation = TssV2TransactionsPost201ResponseEmbeddedProcessorInformation;
TssV2TransactionsPost201ResponseEmbeddedProcessorInformation.discriminator = undefined;
TssV2TransactionsPost201ResponseEmbeddedProcessorInformation.attributeTypeMap = [
    {
        "name": "processor",
        "baseName": "processor",
        "type": "TssV2TransactionsGet200ResponseProcessorInformationProcessor"
    },
    {
        "name": "providerTransactionId",
        "baseName": "providerTransactionId",
        "type": "string"
    },
    {
        "name": "approvalCode",
        "baseName": "approvalCode",
        "type": "string"
    },
    {
        "name": "eventStatus",
        "baseName": "eventStatus",
        "type": "string"
    },
    {
        "name": "retrievalReferenceNumber",
        "baseName": "retrievalReferenceNumber",
        "type": "string"
    }
];
class TssV2TransactionsPost201ResponseEmbeddedRiskInformation {
    static getAttributeTypeMap() {
        return TssV2TransactionsPost201ResponseEmbeddedRiskInformation.attributeTypeMap;
    }
}
exports.TssV2TransactionsPost201ResponseEmbeddedRiskInformation = TssV2TransactionsPost201ResponseEmbeddedRiskInformation;
TssV2TransactionsPost201ResponseEmbeddedRiskInformation.discriminator = undefined;
TssV2TransactionsPost201ResponseEmbeddedRiskInformation.attributeTypeMap = [
    {
        "name": "providers",
        "baseName": "providers",
        "type": "TssV2TransactionsPost201ResponseEmbeddedRiskInformationProviders"
    }
];
class TssV2TransactionsPost201ResponseEmbeddedRiskInformationProviders {
    static getAttributeTypeMap() {
        return TssV2TransactionsPost201ResponseEmbeddedRiskInformationProviders.attributeTypeMap;
    }
}
exports.TssV2TransactionsPost201ResponseEmbeddedRiskInformationProviders = TssV2TransactionsPost201ResponseEmbeddedRiskInformationProviders;
TssV2TransactionsPost201ResponseEmbeddedRiskInformationProviders.discriminator = undefined;
TssV2TransactionsPost201ResponseEmbeddedRiskInformationProviders.attributeTypeMap = [
    {
        "name": "fingerprint",
        "baseName": "fingerprint",
        "type": "TssV2TransactionsPost201ResponseEmbeddedRiskInformationProvidersFingerprint"
    }
];
class TssV2TransactionsPost201ResponseEmbeddedRiskInformationProvidersFingerprint {
    static getAttributeTypeMap() {
        return TssV2TransactionsPost201ResponseEmbeddedRiskInformationProvidersFingerprint.attributeTypeMap;
    }
}
exports.TssV2TransactionsPost201ResponseEmbeddedRiskInformationProvidersFingerprint = TssV2TransactionsPost201ResponseEmbeddedRiskInformationProvidersFingerprint;
TssV2TransactionsPost201ResponseEmbeddedRiskInformationProvidersFingerprint.discriminator = undefined;
TssV2TransactionsPost201ResponseEmbeddedRiskInformationProvidersFingerprint.attributeTypeMap = [
    {
        "name": "trueIpaddress",
        "baseName": "true_ipaddress",
        "type": "string"
    },
    {
        "name": "hash",
        "baseName": "hash",
        "type": "string"
    },
    {
        "name": "smartId",
        "baseName": "smartId",
        "type": "string"
    }
];
class TssV2TransactionsPost201ResponseEmbeddedTransactionSummaries {
    static getAttributeTypeMap() {
        return TssV2TransactionsPost201ResponseEmbeddedTransactionSummaries.attributeTypeMap;
    }
}
exports.TssV2TransactionsPost201ResponseEmbeddedTransactionSummaries = TssV2TransactionsPost201ResponseEmbeddedTransactionSummaries;
TssV2TransactionsPost201ResponseEmbeddedTransactionSummaries.discriminator = undefined;
TssV2TransactionsPost201ResponseEmbeddedTransactionSummaries.attributeTypeMap = [
    {
        "name": "id",
        "baseName": "id",
        "type": "string"
    },
    {
        "name": "submitTimeUtc",
        "baseName": "submitTimeUtc",
        "type": "string"
    },
    {
        "name": "merchantId",
        "baseName": "merchantId",
        "type": "string"
    },
    {
        "name": "status",
        "baseName": "status",
        "type": "string"
    },
    {
        "name": "applicationInformation",
        "baseName": "applicationInformation",
        "type": "TssV2TransactionsPost201ResponseEmbeddedApplicationInformation"
    },
    {
        "name": "buyerInformation",
        "baseName": "buyerInformation",
        "type": "PtsV2CreateOrderPost201ResponseBuyerInformation"
    },
    {
        "name": "clientReferenceInformation",
        "baseName": "clientReferenceInformation",
        "type": "TssV2TransactionsPost201ResponseEmbeddedClientReferenceInformation"
    },
    {
        "name": "consumerAuthenticationInformation",
        "baseName": "consumerAuthenticationInformation",
        "type": "TssV2TransactionsPost201ResponseEmbeddedConsumerAuthenticationInformation"
    },
    {
        "name": "deviceInformation",
        "baseName": "deviceInformation",
        "type": "Riskv1authenticationresultsDeviceInformation"
    },
    {
        "name": "errorInformation",
        "baseName": "errorInformation",
        "type": "TssV2TransactionsPost201ResponseEmbeddedErrorInformation"
    },
    {
        "name": "fraudMarkingInformation",
        "baseName": "fraudMarkingInformation",
        "type": "TssV2TransactionsGet200ResponseFraudMarkingInformation"
    },
    {
        "name": "merchantDefinedInformation",
        "baseName": "merchantDefinedInformation",
        "type": "Array<Ptsv2paymentsMerchantDefinedInformation>"
    },
    {
        "name": "merchantInformation",
        "baseName": "merchantInformation",
        "type": "TssV2TransactionsPost201ResponseEmbeddedMerchantInformation"
    },
    {
        "name": "orderInformation",
        "baseName": "orderInformation",
        "type": "TssV2TransactionsPost201ResponseEmbeddedOrderInformation"
    },
    {
        "name": "paymentInformation",
        "baseName": "paymentInformation",
        "type": "TssV2TransactionsPost201ResponseEmbeddedPaymentInformation"
    },
    {
        "name": "processingInformation",
        "baseName": "processingInformation",
        "type": "TssV2TransactionsPost201ResponseEmbeddedProcessingInformation"
    },
    {
        "name": "processorInformation",
        "baseName": "processorInformation",
        "type": "TssV2TransactionsPost201ResponseEmbeddedProcessorInformation"
    },
    {
        "name": "pointOfSaleInformation",
        "baseName": "pointOfSaleInformation",
        "type": "TssV2TransactionsPost201ResponseEmbeddedPointOfSaleInformation"
    },
    {
        "name": "riskInformation",
        "baseName": "riskInformation",
        "type": "TssV2TransactionsPost201ResponseEmbeddedRiskInformation"
    },
    {
        "name": "links",
        "baseName": "_links",
        "type": "TssV2TransactionsPost201ResponseEmbeddedLinks"
    }
];
class UmsV1UsersGet200Response {
    static getAttributeTypeMap() {
        return UmsV1UsersGet200Response.attributeTypeMap;
    }
}
exports.UmsV1UsersGet200Response = UmsV1UsersGet200Response;
UmsV1UsersGet200Response.discriminator = undefined;
UmsV1UsersGet200Response.attributeTypeMap = [
    {
        "name": "users",
        "baseName": "users",
        "type": "Array<UmsV1UsersGet200ResponseUsers>"
    }
];
class UmsV1UsersGet200ResponseAccountInformation {
    static getAttributeTypeMap() {
        return UmsV1UsersGet200ResponseAccountInformation.attributeTypeMap;
    }
}
exports.UmsV1UsersGet200ResponseAccountInformation = UmsV1UsersGet200ResponseAccountInformation;
UmsV1UsersGet200ResponseAccountInformation.discriminator = undefined;
UmsV1UsersGet200ResponseAccountInformation.attributeTypeMap = [
    {
        "name": "userName",
        "baseName": "userName",
        "type": "string"
    },
    {
        "name": "roleId",
        "baseName": "roleId",
        "type": "string"
    },
    {
        "name": "permissions",
        "baseName": "permissions",
        "type": "Array<string>"
    },
    {
        "name": "status",
        "baseName": "status",
        "type": "string"
    },
    {
        "name": "createdTime",
        "baseName": "createdTime",
        "type": "Date"
    },
    {
        "name": "lastAccessTime",
        "baseName": "lastAccessTime",
        "type": "Date"
    },
    {
        "name": "languagePreference",
        "baseName": "languagePreference",
        "type": "string"
    },
    {
        "name": "timezone",
        "baseName": "timezone",
        "type": "string"
    }
];
class UmsV1UsersGet200ResponseContactInformation {
    static getAttributeTypeMap() {
        return UmsV1UsersGet200ResponseContactInformation.attributeTypeMap;
    }
}
exports.UmsV1UsersGet200ResponseContactInformation = UmsV1UsersGet200ResponseContactInformation;
UmsV1UsersGet200ResponseContactInformation.discriminator = undefined;
UmsV1UsersGet200ResponseContactInformation.attributeTypeMap = [
    {
        "name": "email",
        "baseName": "email",
        "type": "string"
    },
    {
        "name": "phoneNumber",
        "baseName": "phoneNumber",
        "type": "string"
    },
    {
        "name": "firstName",
        "baseName": "firstName",
        "type": "string"
    },
    {
        "name": "lastName",
        "baseName": "lastName",
        "type": "string"
    }
];
class UmsV1UsersGet200ResponseOrganizationInformation {
    static getAttributeTypeMap() {
        return UmsV1UsersGet200ResponseOrganizationInformation.attributeTypeMap;
    }
}
exports.UmsV1UsersGet200ResponseOrganizationInformation = UmsV1UsersGet200ResponseOrganizationInformation;
UmsV1UsersGet200ResponseOrganizationInformation.discriminator = undefined;
UmsV1UsersGet200ResponseOrganizationInformation.attributeTypeMap = [
    {
        "name": "organizationId",
        "baseName": "organizationId",
        "type": "string"
    }
];
class UmsV1UsersGet200ResponseUsers {
    static getAttributeTypeMap() {
        return UmsV1UsersGet200ResponseUsers.attributeTypeMap;
    }
}
exports.UmsV1UsersGet200ResponseUsers = UmsV1UsersGet200ResponseUsers;
UmsV1UsersGet200ResponseUsers.discriminator = undefined;
UmsV1UsersGet200ResponseUsers.attributeTypeMap = [
    {
        "name": "accountInformation",
        "baseName": "accountInformation",
        "type": "UmsV1UsersGet200ResponseAccountInformation"
    },
    {
        "name": "organizationInformation",
        "baseName": "organizationInformation",
        "type": "UmsV1UsersGet200ResponseOrganizationInformation"
    },
    {
        "name": "contactInformation",
        "baseName": "contactInformation",
        "type": "UmsV1UsersGet200ResponseContactInformation"
    },
    {
        "name": "customFields",
        "baseName": "customFields",
        "type": "{ [key: string]: string; }"
    }
];
class UpdateInvoiceRequest {
    static getAttributeTypeMap() {
        return UpdateInvoiceRequest.attributeTypeMap;
    }
}
exports.UpdateInvoiceRequest = UpdateInvoiceRequest;
UpdateInvoiceRequest.discriminator = undefined;
UpdateInvoiceRequest.attributeTypeMap = [
    {
        "name": "customerInformation",
        "baseName": "customerInformation",
        "type": "Invoicingv2invoicesCustomerInformation"
    },
    {
        "name": "processingInformation",
        "baseName": "processingInformation",
        "type": "Invoicingv2invoicesProcessingInformation"
    },
    {
        "name": "invoiceInformation",
        "baseName": "invoiceInformation",
        "type": "Invoicingv2invoicesidInvoiceInformation"
    },
    {
        "name": "orderInformation",
        "baseName": "orderInformation",
        "type": "Invoicingv2invoicesOrderInformation"
    }
];
class UpdateOrderRequest {
    static getAttributeTypeMap() {
        return UpdateOrderRequest.attributeTypeMap;
    }
}
exports.UpdateOrderRequest = UpdateOrderRequest;
UpdateOrderRequest.discriminator = undefined;
UpdateOrderRequest.attributeTypeMap = [
    {
        "name": "clientReferenceInformation",
        "baseName": "clientReferenceInformation",
        "type": "Ptsv2intentsClientReferenceInformation"
    },
    {
        "name": "orderInformation",
        "baseName": "orderInformation",
        "type": "Ptsv2intentsidOrderInformation"
    },
    {
        "name": "merchantInformation",
        "baseName": "merchantInformation",
        "type": "Ptsv2intentsidMerchantInformation"
    },
    {
        "name": "paymentInformation",
        "baseName": "paymentInformation",
        "type": "Ptsv2intentsidPaymentInformation"
    },
    {
        "name": "processingInformation",
        "baseName": "processingInformation",
        "type": "Ptsv2intentsidProcessingInformation"
    }
];
class UpdatePaymentLinkRequest {
    static getAttributeTypeMap() {
        return UpdatePaymentLinkRequest.attributeTypeMap;
    }
}
exports.UpdatePaymentLinkRequest = UpdatePaymentLinkRequest;
UpdatePaymentLinkRequest.discriminator = undefined;
UpdatePaymentLinkRequest.attributeTypeMap = [
    {
        "name": "status",
        "baseName": "status",
        "type": "string"
    },
    {
        "name": "clientReferenceInformation",
        "baseName": "clientReferenceInformation",
        "type": "Invoicingv2invoicesClientReferenceInformation"
    },
    {
        "name": "processingInformation",
        "baseName": "processingInformation",
        "type": "Iplv2paymentlinksidProcessingInformation"
    },
    {
        "name": "purchaseInformation",
        "baseName": "purchaseInformation",
        "type": "Iplv2paymentlinksidPurchaseInformation"
    },
    {
        "name": "orderInformation",
        "baseName": "orderInformation",
        "type": "Iplv2paymentlinksidOrderInformation"
    }
];
class UpdatePlanRequest {
    static getAttributeTypeMap() {
        return UpdatePlanRequest.attributeTypeMap;
    }
}
exports.UpdatePlanRequest = UpdatePlanRequest;
UpdatePlanRequest.discriminator = undefined;
UpdatePlanRequest.attributeTypeMap = [
    {
        "name": "planInformation",
        "baseName": "planInformation",
        "type": "Rbsv1plansidPlanInformation"
    },
    {
        "name": "processingInformation",
        "baseName": "processingInformation",
        "type": "Rbsv1plansidProcessingInformation"
    },
    {
        "name": "orderInformation",
        "baseName": "orderInformation",
        "type": "GetAllPlansResponseOrderInformation"
    }
];
class UpdatePlanResponse {
    static getAttributeTypeMap() {
        return UpdatePlanResponse.attributeTypeMap;
    }
}
exports.UpdatePlanResponse = UpdatePlanResponse;
UpdatePlanResponse.discriminator = undefined;
UpdatePlanResponse.attributeTypeMap = [
    {
        "name": "links",
        "baseName": "_links",
        "type": "PtsV2IncrementalAuthorizationPatch201ResponseLinks"
    },
    {
        "name": "id",
        "baseName": "id",
        "type": "string"
    },
    {
        "name": "submitTimeUtc",
        "baseName": "submitTimeUtc",
        "type": "string"
    },
    {
        "name": "status",
        "baseName": "status",
        "type": "string"
    },
    {
        "name": "planInformation",
        "baseName": "planInformation",
        "type": "UpdatePlanResponsePlanInformation"
    }
];
class UpdatePlanResponsePlanInformation {
    static getAttributeTypeMap() {
        return UpdatePlanResponsePlanInformation.attributeTypeMap;
    }
}
exports.UpdatePlanResponsePlanInformation = UpdatePlanResponsePlanInformation;
UpdatePlanResponsePlanInformation.discriminator = undefined;
UpdatePlanResponsePlanInformation.attributeTypeMap = [
    {
        "name": "code",
        "baseName": "code",
        "type": "string"
    },
    {
        "name": "status",
        "baseName": "status",
        "type": "string"
    }
];
class UpdateStatus {
    static getAttributeTypeMap() {
        return UpdateStatus.attributeTypeMap;
    }
}
exports.UpdateStatus = UpdateStatus;
UpdateStatus.discriminator = undefined;
UpdateStatus.attributeTypeMap = [
    {
        "name": "status",
        "baseName": "status",
        "type": "UpdateStatus.StatusEnum"
    }
];
(function (UpdateStatus) {
    let StatusEnum;
    (function (StatusEnum) {
        StatusEnum[StatusEnum["ACTIVE"] = 'ACTIVE'] = "ACTIVE";
        StatusEnum[StatusEnum["INACTIVE"] = 'INACTIVE'] = "INACTIVE";
    })(StatusEnum = UpdateStatus.StatusEnum || (UpdateStatus.StatusEnum = {}));
})(UpdateStatus = exports.UpdateStatus || (exports.UpdateStatus = {}));
class UpdateSubscription {
    static getAttributeTypeMap() {
        return UpdateSubscription.attributeTypeMap;
    }
}
exports.UpdateSubscription = UpdateSubscription;
UpdateSubscription.discriminator = undefined;
UpdateSubscription.attributeTypeMap = [
    {
        "name": "clientReferenceInformation",
        "baseName": "clientReferenceInformation",
        "type": "Rbsv1subscriptionsClientReferenceInformation"
    },
    {
        "name": "processingInformation",
        "baseName": "processingInformation",
        "type": "Rbsv1subscriptionsProcessingInformation"
    },
    {
        "name": "planInformation",
        "baseName": "planInformation",
        "type": "Rbsv1subscriptionsidPlanInformation"
    },
    {
        "name": "subscriptionInformation",
        "baseName": "subscriptionInformation",
        "type": "Rbsv1subscriptionsidSubscriptionInformation"
    },
    {
        "name": "orderInformation",
        "baseName": "orderInformation",
        "type": "Rbsv1subscriptionsidOrderInformation"
    }
];
class UpdateSubscriptionResponse {
    static getAttributeTypeMap() {
        return UpdateSubscriptionResponse.attributeTypeMap;
    }
}
exports.UpdateSubscriptionResponse = UpdateSubscriptionResponse;
UpdateSubscriptionResponse.discriminator = undefined;
UpdateSubscriptionResponse.attributeTypeMap = [
    {
        "name": "links",
        "baseName": "_links",
        "type": "GetAllSubscriptionsResponseLinks"
    },
    {
        "name": "id",
        "baseName": "id",
        "type": "string"
    },
    {
        "name": "submitTimeUtc",
        "baseName": "submitTimeUtc",
        "type": "string"
    },
    {
        "name": "status",
        "baseName": "status",
        "type": "string"
    },
    {
        "name": "subscriptionInformation",
        "baseName": "subscriptionInformation",
        "type": "CreateSubscriptionResponseSubscriptionInformation"
    }
];
class UpdateWebhook {
    static getAttributeTypeMap() {
        return UpdateWebhook.attributeTypeMap;
    }
}
exports.UpdateWebhook = UpdateWebhook;
UpdateWebhook.discriminator = undefined;
UpdateWebhook.attributeTypeMap = [
    {
        "name": "name",
        "baseName": "name",
        "type": "string"
    },
    {
        "name": "organizationId",
        "baseName": "organizationId",
        "type": "string"
    },
    {
        "name": "description",
        "baseName": "description",
        "type": "string"
    },
    {
        "name": "products",
        "baseName": "products",
        "type": "Array<Notificationsubscriptionsv2webhooksProducts>"
    },
    {
        "name": "webhookUrl",
        "baseName": "webhookUrl",
        "type": "string"
    },
    {
        "name": "notificationScope",
        "baseName": "notificationScope",
        "type": "UpdateWebhook.NotificationScopeEnum"
    },
    {
        "name": "healthCheckUrl",
        "baseName": "healthCheckUrl",
        "type": "string"
    },
    {
        "name": "securityPolicy",
        "baseName": "securityPolicy",
        "type": "Notificationsubscriptionsv2webhooksSecurityPolicy"
    }
];
(function (UpdateWebhook) {
    let NotificationScopeEnum;
    (function (NotificationScopeEnum) {
        NotificationScopeEnum[NotificationScopeEnum["SELF"] = 'SELF'] = "SELF";
        NotificationScopeEnum[NotificationScopeEnum["DESCENDANTS"] = 'DESCENDANTS'] = "DESCENDANTS";
    })(NotificationScopeEnum = UpdateWebhook.NotificationScopeEnum || (UpdateWebhook.NotificationScopeEnum = {}));
})(UpdateWebhook = exports.UpdateWebhook || (exports.UpdateWebhook = {}));
class Upv1capturecontextsCaptureMandate {
    static getAttributeTypeMap() {
        return Upv1capturecontextsCaptureMandate.attributeTypeMap;
    }
}
exports.Upv1capturecontextsCaptureMandate = Upv1capturecontextsCaptureMandate;
Upv1capturecontextsCaptureMandate.discriminator = undefined;
Upv1capturecontextsCaptureMandate.attributeTypeMap = [
    {
        "name": "billingType",
        "baseName": "billingType",
        "type": "string"
    },
    {
        "name": "requestEmail",
        "baseName": "requestEmail",
        "type": "boolean"
    },
    {
        "name": "requestPhone",
        "baseName": "requestPhone",
        "type": "boolean"
    },
    {
        "name": "requestShipping",
        "baseName": "requestShipping",
        "type": "boolean"
    },
    {
        "name": "shipToCountries",
        "baseName": "shipToCountries",
        "type": "Array<string>"
    },
    {
        "name": "showAcceptedNetworkIcons",
        "baseName": "showAcceptedNetworkIcons",
        "type": "boolean"
    },
    {
        "name": "showConfirmationStep",
        "baseName": "showConfirmationStep",
        "type": "boolean"
    },
    {
        "name": "requestSaveCard",
        "baseName": "requestSaveCard",
        "type": "boolean"
    },
    {
        "name": "comboCard",
        "baseName": "comboCard",
        "type": "boolean"
    },
    {
        "name": "CPF",
        "baseName": "CPF",
        "type": "boolean"
    }
];
/**
* The completeMandate object is designed to provide instructions for orchestrating payment services.  Unified Checkout is capable of orchestrating a number of services on your behalf.<br><br>   By providing this field in the capture context Unified Checkout will initiate services on your behalf from the browser, simplifying your integration.
*/
class Upv1capturecontextsCompleteMandate {
    static getAttributeTypeMap() {
        return Upv1capturecontextsCompleteMandate.attributeTypeMap;
    }
}
exports.Upv1capturecontextsCompleteMandate = Upv1capturecontextsCompleteMandate;
Upv1capturecontextsCompleteMandate.discriminator = undefined;
Upv1capturecontextsCompleteMandate.attributeTypeMap = [
    {
        "name": "type",
        "baseName": "type",
        "type": "string"
    },
    {
        "name": "decisionManager",
        "baseName": "decisionManager",
        "type": "boolean"
    },
    {
        "name": "consumerAuthentication",
        "baseName": "consumerAuthentication",
        "type": "boolean"
    }
];
class Upv1capturecontextsOrderInformation {
    static getAttributeTypeMap() {
        return Upv1capturecontextsOrderInformation.attributeTypeMap;
    }
}
exports.Upv1capturecontextsOrderInformation = Upv1capturecontextsOrderInformation;
Upv1capturecontextsOrderInformation.discriminator = undefined;
Upv1capturecontextsOrderInformation.attributeTypeMap = [
    {
        "name": "amountDetails",
        "baseName": "amountDetails",
        "type": "Upv1capturecontextsOrderInformationAmountDetails"
    },
    {
        "name": "billTo",
        "baseName": "billTo",
        "type": "Upv1capturecontextsOrderInformationBillTo"
    },
    {
        "name": "shipTo",
        "baseName": "shipTo",
        "type": "Upv1capturecontextsOrderInformationShipTo"
    }
];
class Upv1capturecontextsOrderInformationAmountDetails {
    static getAttributeTypeMap() {
        return Upv1capturecontextsOrderInformationAmountDetails.attributeTypeMap;
    }
}
exports.Upv1capturecontextsOrderInformationAmountDetails = Upv1capturecontextsOrderInformationAmountDetails;
Upv1capturecontextsOrderInformationAmountDetails.discriminator = undefined;
Upv1capturecontextsOrderInformationAmountDetails.attributeTypeMap = [
    {
        "name": "totalAmount",
        "baseName": "totalAmount",
        "type": "string"
    },
    {
        "name": "currency",
        "baseName": "currency",
        "type": "string"
    }
];
class Upv1capturecontextsOrderInformationBillTo {
    static getAttributeTypeMap() {
        return Upv1capturecontextsOrderInformationBillTo.attributeTypeMap;
    }
}
exports.Upv1capturecontextsOrderInformationBillTo = Upv1capturecontextsOrderInformationBillTo;
Upv1capturecontextsOrderInformationBillTo.discriminator = undefined;
Upv1capturecontextsOrderInformationBillTo.attributeTypeMap = [
    {
        "name": "address1",
        "baseName": "address1",
        "type": "string"
    },
    {
        "name": "address2",
        "baseName": "address2",
        "type": "string"
    },
    {
        "name": "address3",
        "baseName": "address3",
        "type": "string"
    },
    {
        "name": "address4",
        "baseName": "address4",
        "type": "string"
    },
    {
        "name": "administrativeArea",
        "baseName": "administrativeArea",
        "type": "string"
    },
    {
        "name": "buildingNumber",
        "baseName": "buildingNumber",
        "type": "string"
    },
    {
        "name": "country",
        "baseName": "country",
        "type": "string"
    },
    {
        "name": "district",
        "baseName": "district",
        "type": "string"
    },
    {
        "name": "locality",
        "baseName": "locality",
        "type": "string"
    },
    {
        "name": "postalCode",
        "baseName": "postalCode",
        "type": "string"
    },
    {
        "name": "company",
        "baseName": "company",
        "type": "Upv1capturecontextsOrderInformationBillToCompany"
    },
    {
        "name": "email",
        "baseName": "email",
        "type": "string"
    },
    {
        "name": "firstName",
        "baseName": "firstName",
        "type": "string"
    },
    {
        "name": "lastName",
        "baseName": "lastName",
        "type": "string"
    },
    {
        "name": "middleName",
        "baseName": "middleName",
        "type": "string"
    },
    {
        "name": "nameSuffix",
        "baseName": "nameSuffix",
        "type": "string"
    },
    {
        "name": "title",
        "baseName": "title",
        "type": "string"
    },
    {
        "name": "phoneNumber",
        "baseName": "phoneNumber",
        "type": "string"
    },
    {
        "name": "phoneType",
        "baseName": "phoneType",
        "type": "string"
    }
];
class Upv1capturecontextsOrderInformationBillToCompany {
    static getAttributeTypeMap() {
        return Upv1capturecontextsOrderInformationBillToCompany.attributeTypeMap;
    }
}
exports.Upv1capturecontextsOrderInformationBillToCompany = Upv1capturecontextsOrderInformationBillToCompany;
Upv1capturecontextsOrderInformationBillToCompany.discriminator = undefined;
Upv1capturecontextsOrderInformationBillToCompany.attributeTypeMap = [
    {
        "name": "name",
        "baseName": "name",
        "type": "string"
    },
    {
        "name": "address1",
        "baseName": "address1",
        "type": "string"
    },
    {
        "name": "address2",
        "baseName": "address2",
        "type": "string"
    },
    {
        "name": "address3",
        "baseName": "address3",
        "type": "string"
    },
    {
        "name": "address4",
        "baseName": "address4",
        "type": "string"
    },
    {
        "name": "administrativeArea",
        "baseName": "administrativeArea",
        "type": "string"
    },
    {
        "name": "buildingNumber",
        "baseName": "buildingNumber",
        "type": "string"
    },
    {
        "name": "country",
        "baseName": "country",
        "type": "string"
    },
    {
        "name": "district",
        "baseName": "district",
        "type": "string"
    },
    {
        "name": "locality",
        "baseName": "locality",
        "type": "string"
    },
    {
        "name": "postalCode",
        "baseName": "postalCode",
        "type": "string"
    }
];
class Upv1capturecontextsOrderInformationShipTo {
    static getAttributeTypeMap() {
        return Upv1capturecontextsOrderInformationShipTo.attributeTypeMap;
    }
}
exports.Upv1capturecontextsOrderInformationShipTo = Upv1capturecontextsOrderInformationShipTo;
Upv1capturecontextsOrderInformationShipTo.discriminator = undefined;
Upv1capturecontextsOrderInformationShipTo.attributeTypeMap = [
    {
        "name": "address1",
        "baseName": "address1",
        "type": "string"
    },
    {
        "name": "address2",
        "baseName": "address2",
        "type": "string"
    },
    {
        "name": "address3",
        "baseName": "address3",
        "type": "string"
    },
    {
        "name": "address4",
        "baseName": "address4",
        "type": "string"
    },
    {
        "name": "administrativeArea",
        "baseName": "administrativeArea",
        "type": "string"
    },
    {
        "name": "buildingNumber",
        "baseName": "buildingNumber",
        "type": "string"
    },
    {
        "name": "country",
        "baseName": "country",
        "type": "string"
    },
    {
        "name": "district",
        "baseName": "district",
        "type": "string"
    },
    {
        "name": "locality",
        "baseName": "locality",
        "type": "string"
    },
    {
        "name": "postalCode",
        "baseName": "postalCode",
        "type": "string"
    },
    {
        "name": "firstName",
        "baseName": "firstName",
        "type": "string"
    },
    {
        "name": "lastName",
        "baseName": "lastName",
        "type": "string"
    }
];
class V1FileDetailsGet200Response {
    static getAttributeTypeMap() {
        return V1FileDetailsGet200Response.attributeTypeMap;
    }
}
exports.V1FileDetailsGet200Response = V1FileDetailsGet200Response;
V1FileDetailsGet200Response.discriminator = undefined;
V1FileDetailsGet200Response.attributeTypeMap = [
    {
        "name": "fileDetails",
        "baseName": "fileDetails",
        "type": "Array<V1FileDetailsGet200ResponseFileDetails>"
    },
    {
        "name": "links",
        "baseName": "_links",
        "type": "V1FileDetailsGet200ResponseLinks"
    }
];
class V1FileDetailsGet200ResponseFileDetails {
    static getAttributeTypeMap() {
        return V1FileDetailsGet200ResponseFileDetails.attributeTypeMap;
    }
}
exports.V1FileDetailsGet200ResponseFileDetails = V1FileDetailsGet200ResponseFileDetails;
V1FileDetailsGet200ResponseFileDetails.discriminator = undefined;
V1FileDetailsGet200ResponseFileDetails.attributeTypeMap = [
    {
        "name": "fileId",
        "baseName": "fileId",
        "type": "string"
    },
    {
        "name": "name",
        "baseName": "name",
        "type": "string"
    },
    {
        "name": "createdTime",
        "baseName": "createdTime",
        "type": "Date"
    },
    {
        "name": "lastModifiedTime",
        "baseName": "lastModifiedTime",
        "type": "Date"
    },
    {
        "name": "date",
        "baseName": "date",
        "type": "string"
    },
    {
        "name": "mimeType",
        "baseName": "mimeType",
        "type": "string"
    },
    {
        "name": "size",
        "baseName": "size",
        "type": "number"
    }
];
class V1FileDetailsGet200ResponseLinks {
    static getAttributeTypeMap() {
        return V1FileDetailsGet200ResponseLinks.attributeTypeMap;
    }
}
exports.V1FileDetailsGet200ResponseLinks = V1FileDetailsGet200ResponseLinks;
V1FileDetailsGet200ResponseLinks.discriminator = undefined;
V1FileDetailsGet200ResponseLinks.attributeTypeMap = [
    {
        "name": "self",
        "baseName": "self",
        "type": "V1FileDetailsGet200ResponseLinksSelf"
    },
    {
        "name": "files",
        "baseName": "files",
        "type": "Array<V1FileDetailsGet200ResponseLinksFiles>"
    }
];
class V1FileDetailsGet200ResponseLinksFiles {
    static getAttributeTypeMap() {
        return V1FileDetailsGet200ResponseLinksFiles.attributeTypeMap;
    }
}
exports.V1FileDetailsGet200ResponseLinksFiles = V1FileDetailsGet200ResponseLinksFiles;
V1FileDetailsGet200ResponseLinksFiles.discriminator = undefined;
V1FileDetailsGet200ResponseLinksFiles.attributeTypeMap = [
    {
        "name": "fileId",
        "baseName": "fileId",
        "type": "string"
    },
    {
        "name": "href",
        "baseName": "href",
        "type": "string"
    },
    {
        "name": "method",
        "baseName": "method",
        "type": "string"
    }
];
class V1FileDetailsGet200ResponseLinksSelf {
    static getAttributeTypeMap() {
        return V1FileDetailsGet200ResponseLinksSelf.attributeTypeMap;
    }
}
exports.V1FileDetailsGet200ResponseLinksSelf = V1FileDetailsGet200ResponseLinksSelf;
V1FileDetailsGet200ResponseLinksSelf.discriminator = undefined;
V1FileDetailsGet200ResponseLinksSelf.attributeTypeMap = [
    {
        "name": "href",
        "baseName": "href",
        "type": "string"
    },
    {
        "name": "method",
        "baseName": "method",
        "type": "string"
    }
];
class VTConfig {
    static getAttributeTypeMap() {
        return VTConfig.attributeTypeMap;
    }
}
exports.VTConfig = VTConfig;
VTConfig.discriminator = undefined;
VTConfig.attributeTypeMap = [
    {
        "name": "cardNotPresent",
        "baseName": "cardNotPresent",
        "type": "VTConfigCardNotPresent"
    },
    {
        "name": "cardPresent",
        "baseName": "cardPresent",
        "type": "VTConfigCardNotPresent"
    }
];
class VTConfigCardNotPresent {
    static getAttributeTypeMap() {
        return VTConfigCardNotPresent.attributeTypeMap;
    }
}
exports.VTConfigCardNotPresent = VTConfigCardNotPresent;
VTConfigCardNotPresent.discriminator = undefined;
VTConfigCardNotPresent.attributeTypeMap = [
    {
        "name": "globalPaymentInformation",
        "baseName": "globalPaymentInformation",
        "type": "VTConfigCardNotPresentGlobalPaymentInformation"
    },
    {
        "name": "receiptInformation",
        "baseName": "receiptInformation",
        "type": "VTConfigCardNotPresentReceiptInformation"
    }
];
class VTConfigCardNotPresentGlobalPaymentInformation {
    static getAttributeTypeMap() {
        return VTConfigCardNotPresentGlobalPaymentInformation.attributeTypeMap;
    }
}
exports.VTConfigCardNotPresentGlobalPaymentInformation = VTConfigCardNotPresentGlobalPaymentInformation;
VTConfigCardNotPresentGlobalPaymentInformation.discriminator = undefined;
VTConfigCardNotPresentGlobalPaymentInformation.attributeTypeMap = [
    {
        "name": "basicInformation",
        "baseName": "basicInformation",
        "type": "VTConfigCardNotPresentGlobalPaymentInformationBasicInformation"
    },
    {
        "name": "paymentInformation",
        "baseName": "paymentInformation",
        "type": "VTConfigCardNotPresentGlobalPaymentInformationPaymentInformation"
    },
    {
        "name": "merchantDefinedDataFields",
        "baseName": "merchantDefinedDataFields",
        "type": "VTConfigCardNotPresentGlobalPaymentInformationMerchantDefinedDataFields"
    }
];
class VTConfigCardNotPresentGlobalPaymentInformationBasicInformation {
    static getAttributeTypeMap() {
        return VTConfigCardNotPresentGlobalPaymentInformationBasicInformation.attributeTypeMap;
    }
}
exports.VTConfigCardNotPresentGlobalPaymentInformationBasicInformation = VTConfigCardNotPresentGlobalPaymentInformationBasicInformation;
VTConfigCardNotPresentGlobalPaymentInformationBasicInformation.discriminator = undefined;
VTConfigCardNotPresentGlobalPaymentInformationBasicInformation.attributeTypeMap = [
    {
        "name": "defaultStandardEntryClassCode",
        "baseName": "defaultStandardEntryClassCode",
        "type": "string"
    },
    {
        "name": "defaultCountryCode",
        "baseName": "defaultCountryCode",
        "type": "string"
    },
    {
        "name": "defaultCurrencyCode",
        "baseName": "defaultCurrencyCode",
        "type": "string"
    },
    {
        "name": "defaultTransactionType",
        "baseName": "defaultTransactionType",
        "type": "VTConfigCardNotPresentGlobalPaymentInformationBasicInformation.DefaultTransactionTypeEnum"
    },
    {
        "name": "defaultPaymentType",
        "baseName": "defaultPaymentType",
        "type": "VTConfigCardNotPresentGlobalPaymentInformationBasicInformation.DefaultPaymentTypeEnum"
    },
    {
        "name": "defaultTransactionSource",
        "baseName": "defaultTransactionSource",
        "type": "string"
    },
    {
        "name": "displayRetail",
        "baseName": "displayRetail",
        "type": "boolean"
    },
    {
        "name": "displayMoto",
        "baseName": "displayMoto",
        "type": "boolean"
    },
    {
        "name": "displayInternet",
        "baseName": "displayInternet",
        "type": "boolean"
    }
];
(function (VTConfigCardNotPresentGlobalPaymentInformationBasicInformation) {
    let DefaultTransactionTypeEnum;
    (function (DefaultTransactionTypeEnum) {
        DefaultTransactionTypeEnum[DefaultTransactionTypeEnum["AUTHORIZATION"] = 'AUTHORIZATION'] = "AUTHORIZATION";
        DefaultTransactionTypeEnum[DefaultTransactionTypeEnum["SALE"] = 'SALE'] = "SALE";
    })(DefaultTransactionTypeEnum = VTConfigCardNotPresentGlobalPaymentInformationBasicInformation.DefaultTransactionTypeEnum || (VTConfigCardNotPresentGlobalPaymentInformationBasicInformation.DefaultTransactionTypeEnum = {}));
    let DefaultPaymentTypeEnum;
    (function (DefaultPaymentTypeEnum) {
        DefaultPaymentTypeEnum[DefaultPaymentTypeEnum["CREDITCARD"] = 'CREDIT_CARD'] = "CREDITCARD";
        DefaultPaymentTypeEnum[DefaultPaymentTypeEnum["ECHECK"] = 'ECHECK'] = "ECHECK";
    })(DefaultPaymentTypeEnum = VTConfigCardNotPresentGlobalPaymentInformationBasicInformation.DefaultPaymentTypeEnum || (VTConfigCardNotPresentGlobalPaymentInformationBasicInformation.DefaultPaymentTypeEnum = {}));
})(VTConfigCardNotPresentGlobalPaymentInformationBasicInformation = exports.VTConfigCardNotPresentGlobalPaymentInformationBasicInformation || (exports.VTConfigCardNotPresentGlobalPaymentInformationBasicInformation = {}));
class VTConfigCardNotPresentGlobalPaymentInformationMerchantDefinedDataFields {
    static getAttributeTypeMap() {
        return VTConfigCardNotPresentGlobalPaymentInformationMerchantDefinedDataFields.attributeTypeMap;
    }
}
exports.VTConfigCardNotPresentGlobalPaymentInformationMerchantDefinedDataFields = VTConfigCardNotPresentGlobalPaymentInformationMerchantDefinedDataFields;
VTConfigCardNotPresentGlobalPaymentInformationMerchantDefinedDataFields.discriminator = undefined;
VTConfigCardNotPresentGlobalPaymentInformationMerchantDefinedDataFields.attributeTypeMap = [
    {
        "name": "displayMerchantDefinedData1",
        "baseName": "displayMerchantDefinedData1",
        "type": "boolean"
    },
    {
        "name": "displayMerchantDefinedData2",
        "baseName": "displayMerchantDefinedData2",
        "type": "boolean"
    },
    {
        "name": "displayMerchantDefinedData3",
        "baseName": "displayMerchantDefinedData3",
        "type": "boolean"
    },
    {
        "name": "displayMerchantDefinedData4",
        "baseName": "displayMerchantDefinedData4",
        "type": "boolean"
    },
    {
        "name": "displayMerchantDefinedData5",
        "baseName": "displayMerchantDefinedData5",
        "type": "boolean"
    },
    {
        "name": "merchantDefinedData1DefaultValue",
        "baseName": "merchantDefinedData1DefaultValue",
        "type": "string"
    },
    {
        "name": "merchantDefinedData1Label",
        "baseName": "merchantDefinedData1Label",
        "type": "string"
    },
    {
        "name": "requireMerchantDefinedData1",
        "baseName": "requireMerchantDefinedData1",
        "type": "boolean"
    },
    {
        "name": "merchantDefinedData2DefaultValue",
        "baseName": "merchantDefinedData2DefaultValue",
        "type": "string"
    },
    {
        "name": "merchantDefinedData2Label",
        "baseName": "merchantDefinedData2Label",
        "type": "string"
    },
    {
        "name": "requireMerchantDefinedData2",
        "baseName": "requireMerchantDefinedData2",
        "type": "boolean"
    },
    {
        "name": "merchantDefinedData3DefaultValue",
        "baseName": "merchantDefinedData3DefaultValue",
        "type": "string"
    },
    {
        "name": "merchantDefinedData3Label",
        "baseName": "merchantDefinedData3Label",
        "type": "string"
    },
    {
        "name": "requireMerchantDefinedData3",
        "baseName": "requireMerchantDefinedData3",
        "type": "boolean"
    },
    {
        "name": "merchantDefinedData4DefaultValue",
        "baseName": "merchantDefinedData4DefaultValue",
        "type": "string"
    },
    {
        "name": "merchantDefinedData4Label",
        "baseName": "merchantDefinedData4Label",
        "type": "string"
    },
    {
        "name": "requireMerchantDefinedData4",
        "baseName": "requireMerchantDefinedData4",
        "type": "boolean"
    },
    {
        "name": "merchantDefinedData5DefaultValue",
        "baseName": "merchantDefinedData5DefaultValue",
        "type": "string"
    },
    {
        "name": "merchantDefinedData5Label",
        "baseName": "merchantDefinedData5Label",
        "type": "string"
    },
    {
        "name": "requireMerchantDefinedData5",
        "baseName": "requireMerchantDefinedData5",
        "type": "boolean"
    },
    {
        "name": "merchantDefinedData1DisplayOnReceipt",
        "baseName": "merchantDefinedData1DisplayOnReceipt",
        "type": "boolean"
    },
    {
        "name": "merchantDefinedData2DisplayOnReceipt",
        "baseName": "merchantDefinedData2DisplayOnReceipt",
        "type": "boolean"
    },
    {
        "name": "merchantDefinedData3DisplayOnReceipt",
        "baseName": "merchantDefinedData3DisplayOnReceipt",
        "type": "boolean"
    },
    {
        "name": "merchantDefinedData4DisplayOnReceipt",
        "baseName": "merchantDefinedData4DisplayOnReceipt",
        "type": "boolean"
    },
    {
        "name": "merchantDefinedData5DisplayOnReceipt",
        "baseName": "merchantDefinedData5DisplayOnReceipt",
        "type": "boolean"
    }
];
class VTConfigCardNotPresentGlobalPaymentInformationPaymentInformation {
    static getAttributeTypeMap() {
        return VTConfigCardNotPresentGlobalPaymentInformationPaymentInformation.attributeTypeMap;
    }
}
exports.VTConfigCardNotPresentGlobalPaymentInformationPaymentInformation = VTConfigCardNotPresentGlobalPaymentInformationPaymentInformation;
VTConfigCardNotPresentGlobalPaymentInformationPaymentInformation.discriminator = undefined;
VTConfigCardNotPresentGlobalPaymentInformationPaymentInformation.attributeTypeMap = [
    {
        "name": "displayCardVerificationValue",
        "baseName": "displayCardVerificationValue",
        "type": "Array<VTConfigCardNotPresentGlobalPaymentInformationPaymentInformation.DisplayCardVerificationValueEnum>"
    },
    {
        "name": "requireCardVerificationValue",
        "baseName": "requireCardVerificationValue",
        "type": "Array<VTConfigCardNotPresentGlobalPaymentInformationPaymentInformation.RequireCardVerificationValueEnum>"
    },
    {
        "name": "acceptedCardTypes",
        "baseName": "acceptedCardTypes",
        "type": "Array<VTConfigCardNotPresentGlobalPaymentInformationPaymentInformation.AcceptedCardTypesEnum>"
    },
    {
        "name": "displayCreditCards",
        "baseName": "displayCreditCards",
        "type": "boolean"
    },
    {
        "name": "displayEchecks",
        "baseName": "displayEchecks",
        "type": "boolean"
    },
    {
        "name": "displayDebtIndicator",
        "baseName": "displayDebtIndicator",
        "type": "boolean"
    },
    {
        "name": "displayBillPayment",
        "baseName": "displayBillPayment",
        "type": "boolean"
    },
    {
        "name": "enableEchecks",
        "baseName": "enableEchecks",
        "type": "boolean"
    },
    {
        "name": "displayIgnoreECheckAvsCheckbox",
        "baseName": "displayIgnoreECheckAvsCheckbox",
        "type": "boolean"
    },
    {
        "name": "firstNameRequired",
        "baseName": "firstNameRequired",
        "type": "boolean"
    },
    {
        "name": "lastNameRequired",
        "baseName": "lastNameRequired",
        "type": "boolean"
    },
    {
        "name": "displayFirstName",
        "baseName": "displayFirstName",
        "type": "boolean"
    },
    {
        "name": "displayLastName",
        "baseName": "displayLastName",
        "type": "boolean"
    }
];
(function (VTConfigCardNotPresentGlobalPaymentInformationPaymentInformation) {
    let DisplayCardVerificationValueEnum;
    (function (DisplayCardVerificationValueEnum) {
        DisplayCardVerificationValueEnum[DisplayCardVerificationValueEnum["VISA"] = 'VISA'] = "VISA";
        DisplayCardVerificationValueEnum[DisplayCardVerificationValueEnum["MASTERCARD"] = 'MASTER_CARD'] = "MASTERCARD";
        DisplayCardVerificationValueEnum[DisplayCardVerificationValueEnum["AMEX"] = 'AMEX'] = "AMEX";
        DisplayCardVerificationValueEnum[DisplayCardVerificationValueEnum["DISCOVER"] = 'DISCOVER'] = "DISCOVER";
        DisplayCardVerificationValueEnum[DisplayCardVerificationValueEnum["DINERSCLUB"] = 'DINERS_CLUB'] = "DINERSCLUB";
        DisplayCardVerificationValueEnum[DisplayCardVerificationValueEnum["CARTEBLANCHE"] = 'CARTE_BLANCHE'] = "CARTEBLANCHE";
        DisplayCardVerificationValueEnum[DisplayCardVerificationValueEnum["JCB"] = 'JCB'] = "JCB";
        DisplayCardVerificationValueEnum[DisplayCardVerificationValueEnum["ENROUTE"] = 'ENROUTE'] = "ENROUTE";
        DisplayCardVerificationValueEnum[DisplayCardVerificationValueEnum["JAL"] = 'JAL'] = "JAL";
        DisplayCardVerificationValueEnum[DisplayCardVerificationValueEnum["SWITCHSOLO"] = 'SWITCH_SOLO'] = "SWITCHSOLO";
        DisplayCardVerificationValueEnum[DisplayCardVerificationValueEnum["DELTA"] = 'DELTA'] = "DELTA";
        DisplayCardVerificationValueEnum[DisplayCardVerificationValueEnum["VISAELECTRON"] = 'VISA_ELECTRON'] = "VISAELECTRON";
        DisplayCardVerificationValueEnum[DisplayCardVerificationValueEnum["DANKORT"] = 'DANKORT'] = "DANKORT";
        DisplayCardVerificationValueEnum[DisplayCardVerificationValueEnum["LASER"] = 'LASER'] = "LASER";
        DisplayCardVerificationValueEnum[DisplayCardVerificationValueEnum["CARTESBANCAIRES"] = 'CARTE_SBANCAIRES'] = "CARTESBANCAIRES";
        DisplayCardVerificationValueEnum[DisplayCardVerificationValueEnum["CARTASI"] = 'CARTASI'] = "CARTASI";
        DisplayCardVerificationValueEnum[DisplayCardVerificationValueEnum["MAESTROINTERNATIONAL"] = 'MAESTRO_INTERNATIONAL'] = "MAESTROINTERNATIONAL";
        DisplayCardVerificationValueEnum[DisplayCardVerificationValueEnum["GEMONEYUKCARD"] = 'GE_MONEY_UK_CARD'] = "GEMONEYUKCARD";
        DisplayCardVerificationValueEnum[DisplayCardVerificationValueEnum["HIPERCARD"] = 'HIPER_CARD'] = "HIPERCARD";
        DisplayCardVerificationValueEnum[DisplayCardVerificationValueEnum["ELO"] = 'ELO'] = "ELO";
    })(DisplayCardVerificationValueEnum = VTConfigCardNotPresentGlobalPaymentInformationPaymentInformation.DisplayCardVerificationValueEnum || (VTConfigCardNotPresentGlobalPaymentInformationPaymentInformation.DisplayCardVerificationValueEnum = {}));
    let RequireCardVerificationValueEnum;
    (function (RequireCardVerificationValueEnum) {
        RequireCardVerificationValueEnum[RequireCardVerificationValueEnum["VISA"] = 'VISA'] = "VISA";
        RequireCardVerificationValueEnum[RequireCardVerificationValueEnum["MASTERCARD"] = 'MASTER_CARD'] = "MASTERCARD";
        RequireCardVerificationValueEnum[RequireCardVerificationValueEnum["AMEX"] = 'AMEX'] = "AMEX";
        RequireCardVerificationValueEnum[RequireCardVerificationValueEnum["DISCOVER"] = 'DISCOVER'] = "DISCOVER";
        RequireCardVerificationValueEnum[RequireCardVerificationValueEnum["DINERSCLUB"] = 'DINERS_CLUB'] = "DINERSCLUB";
        RequireCardVerificationValueEnum[RequireCardVerificationValueEnum["CARTEBLANCHE"] = 'CARTE_BLANCHE'] = "CARTEBLANCHE";
        RequireCardVerificationValueEnum[RequireCardVerificationValueEnum["JCB"] = 'JCB'] = "JCB";
        RequireCardVerificationValueEnum[RequireCardVerificationValueEnum["ENROUTE"] = 'ENROUTE'] = "ENROUTE";
        RequireCardVerificationValueEnum[RequireCardVerificationValueEnum["JAL"] = 'JAL'] = "JAL";
        RequireCardVerificationValueEnum[RequireCardVerificationValueEnum["SWITCHSOLO"] = 'SWITCH_SOLO'] = "SWITCHSOLO";
        RequireCardVerificationValueEnum[RequireCardVerificationValueEnum["DELTA"] = 'DELTA'] = "DELTA";
        RequireCardVerificationValueEnum[RequireCardVerificationValueEnum["VISAELECTRON"] = 'VISA_ELECTRON'] = "VISAELECTRON";
        RequireCardVerificationValueEnum[RequireCardVerificationValueEnum["DANKORT"] = 'DANKORT'] = "DANKORT";
        RequireCardVerificationValueEnum[RequireCardVerificationValueEnum["LASER"] = 'LASER'] = "LASER";
        RequireCardVerificationValueEnum[RequireCardVerificationValueEnum["CARTESBANCAIRES"] = 'CARTE_SBANCAIRES'] = "CARTESBANCAIRES";
        RequireCardVerificationValueEnum[RequireCardVerificationValueEnum["CARTASI"] = 'CARTASI'] = "CARTASI";
        RequireCardVerificationValueEnum[RequireCardVerificationValueEnum["MAESTROINTERNATIONAL"] = 'MAESTRO_INTERNATIONAL'] = "MAESTROINTERNATIONAL";
        RequireCardVerificationValueEnum[RequireCardVerificationValueEnum["GEMONEYUKCARD"] = 'GE_MONEY_UK_CARD'] = "GEMONEYUKCARD";
        RequireCardVerificationValueEnum[RequireCardVerificationValueEnum["HIPERCARD"] = 'HIPER_CARD'] = "HIPERCARD";
        RequireCardVerificationValueEnum[RequireCardVerificationValueEnum["ELO"] = 'ELO'] = "ELO";
    })(RequireCardVerificationValueEnum = VTConfigCardNotPresentGlobalPaymentInformationPaymentInformation.RequireCardVerificationValueEnum || (VTConfigCardNotPresentGlobalPaymentInformationPaymentInformation.RequireCardVerificationValueEnum = {}));
    let AcceptedCardTypesEnum;
    (function (AcceptedCardTypesEnum) {
        AcceptedCardTypesEnum[AcceptedCardTypesEnum["VISA"] = 'VISA'] = "VISA";
        AcceptedCardTypesEnum[AcceptedCardTypesEnum["MASTERCARD"] = 'MASTER_CARD'] = "MASTERCARD";
        AcceptedCardTypesEnum[AcceptedCardTypesEnum["AMEX"] = 'AMEX'] = "AMEX";
        AcceptedCardTypesEnum[AcceptedCardTypesEnum["DISCOVER"] = 'DISCOVER'] = "DISCOVER";
        AcceptedCardTypesEnum[AcceptedCardTypesEnum["DINERSCLUB"] = 'DINERS_CLUB'] = "DINERSCLUB";
        AcceptedCardTypesEnum[AcceptedCardTypesEnum["CARTEBLANCHE"] = 'CARTE_BLANCHE'] = "CARTEBLANCHE";
        AcceptedCardTypesEnum[AcceptedCardTypesEnum["JCB"] = 'JCB'] = "JCB";
        AcceptedCardTypesEnum[AcceptedCardTypesEnum["ENROUTE"] = 'ENROUTE'] = "ENROUTE";
        AcceptedCardTypesEnum[AcceptedCardTypesEnum["JAL"] = 'JAL'] = "JAL";
        AcceptedCardTypesEnum[AcceptedCardTypesEnum["SWITCHSOLO"] = 'SWITCH_SOLO'] = "SWITCHSOLO";
        AcceptedCardTypesEnum[AcceptedCardTypesEnum["DELTA"] = 'DELTA'] = "DELTA";
        AcceptedCardTypesEnum[AcceptedCardTypesEnum["VISAELECTRON"] = 'VISA_ELECTRON'] = "VISAELECTRON";
        AcceptedCardTypesEnum[AcceptedCardTypesEnum["DANKORT"] = 'DANKORT'] = "DANKORT";
        AcceptedCardTypesEnum[AcceptedCardTypesEnum["LASER"] = 'LASER'] = "LASER";
        AcceptedCardTypesEnum[AcceptedCardTypesEnum["CARTESBANCAIRES"] = 'CARTE_SBANCAIRES'] = "CARTESBANCAIRES";
        AcceptedCardTypesEnum[AcceptedCardTypesEnum["CARTASI"] = 'CARTASI'] = "CARTASI";
        AcceptedCardTypesEnum[AcceptedCardTypesEnum["MAESTROINTERNATIONAL"] = 'MAESTRO_INTERNATIONAL'] = "MAESTROINTERNATIONAL";
        AcceptedCardTypesEnum[AcceptedCardTypesEnum["GEMONEYUKCARD"] = 'GE_MONEY_UK_CARD'] = "GEMONEYUKCARD";
        AcceptedCardTypesEnum[AcceptedCardTypesEnum["HIPERCARD"] = 'HIPER_CARD'] = "HIPERCARD";
        AcceptedCardTypesEnum[AcceptedCardTypesEnum["ELO"] = 'ELO'] = "ELO";
    })(AcceptedCardTypesEnum = VTConfigCardNotPresentGlobalPaymentInformationPaymentInformation.AcceptedCardTypesEnum || (VTConfigCardNotPresentGlobalPaymentInformationPaymentInformation.AcceptedCardTypesEnum = {}));
})(VTConfigCardNotPresentGlobalPaymentInformationPaymentInformation = exports.VTConfigCardNotPresentGlobalPaymentInformationPaymentInformation || (exports.VTConfigCardNotPresentGlobalPaymentInformationPaymentInformation = {}));
class VTConfigCardNotPresentReceiptInformation {
    static getAttributeTypeMap() {
        return VTConfigCardNotPresentReceiptInformation.attributeTypeMap;
    }
}
exports.VTConfigCardNotPresentReceiptInformation = VTConfigCardNotPresentReceiptInformation;
VTConfigCardNotPresentReceiptInformation.discriminator = undefined;
VTConfigCardNotPresentReceiptInformation.attributeTypeMap = [
    {
        "name": "header",
        "baseName": "header",
        "type": "VTConfigCardNotPresentReceiptInformationHeader"
    },
    {
        "name": "orderInformation",
        "baseName": "orderInformation",
        "type": "VTConfigCardNotPresentReceiptInformationOrderInformation"
    },
    {
        "name": "emailReceipt",
        "baseName": "emailReceipt",
        "type": "VTConfigCardNotPresentReceiptInformationEmailReceipt"
    }
];
class VTConfigCardNotPresentReceiptInformationEmailReceipt {
    static getAttributeTypeMap() {
        return VTConfigCardNotPresentReceiptInformationEmailReceipt.attributeTypeMap;
    }
}
exports.VTConfigCardNotPresentReceiptInformationEmailReceipt = VTConfigCardNotPresentReceiptInformationEmailReceipt;
VTConfigCardNotPresentReceiptInformationEmailReceipt.discriminator = undefined;
VTConfigCardNotPresentReceiptInformationEmailReceipt.attributeTypeMap = [
    {
        "name": "sendersEmailAddress",
        "baseName": "sendersEmailAddress",
        "type": "string"
    }
];
class VTConfigCardNotPresentReceiptInformationHeader {
    static getAttributeTypeMap() {
        return VTConfigCardNotPresentReceiptInformationHeader.attributeTypeMap;
    }
}
exports.VTConfigCardNotPresentReceiptInformationHeader = VTConfigCardNotPresentReceiptInformationHeader;
VTConfigCardNotPresentReceiptInformationHeader.discriminator = undefined;
VTConfigCardNotPresentReceiptInformationHeader.attributeTypeMap = [
    {
        "name": "virtualTerminalReceiptHeader",
        "baseName": "virtualTerminalReceiptHeader",
        "type": "string"
    }
];
class VTConfigCardNotPresentReceiptInformationOrderInformation {
    static getAttributeTypeMap() {
        return VTConfigCardNotPresentReceiptInformationOrderInformation.attributeTypeMap;
    }
}
exports.VTConfigCardNotPresentReceiptInformationOrderInformation = VTConfigCardNotPresentReceiptInformationOrderInformation;
VTConfigCardNotPresentReceiptInformationOrderInformation.discriminator = undefined;
VTConfigCardNotPresentReceiptInformationOrderInformation.attributeTypeMap = [
    {
        "name": "emailAliasName",
        "baseName": "emailAliasName",
        "type": "string"
    },
    {
        "name": "customReplyToEmailAddress",
        "baseName": "customReplyToEmailAddress",
        "type": "string"
    }
];
class ValidateExportComplianceRequest {
    static getAttributeTypeMap() {
        return ValidateExportComplianceRequest.attributeTypeMap;
    }
}
exports.ValidateExportComplianceRequest = ValidateExportComplianceRequest;
ValidateExportComplianceRequest.discriminator = undefined;
ValidateExportComplianceRequest.attributeTypeMap = [
    {
        "name": "clientReferenceInformation",
        "baseName": "clientReferenceInformation",
        "type": "Riskv1liststypeentriesClientReferenceInformation"
    },
    {
        "name": "orderInformation",
        "baseName": "orderInformation",
        "type": "Riskv1exportcomplianceinquiriesOrderInformation"
    },
    {
        "name": "buyerInformation",
        "baseName": "buyerInformation",
        "type": "Riskv1addressverificationsBuyerInformation"
    },
    {
        "name": "deviceInformation",
        "baseName": "deviceInformation",
        "type": "Riskv1exportcomplianceinquiriesDeviceInformation"
    },
    {
        "name": "exportComplianceInformation",
        "baseName": "exportComplianceInformation",
        "type": "Riskv1exportcomplianceinquiriesExportComplianceInformation"
    }
];
class ValidateRequest {
    static getAttributeTypeMap() {
        return ValidateRequest.attributeTypeMap;
    }
}
exports.ValidateRequest = ValidateRequest;
ValidateRequest.discriminator = undefined;
ValidateRequest.attributeTypeMap = [
    {
        "name": "clientReferenceInformation",
        "baseName": "clientReferenceInformation",
        "type": "Riskv1authenticationsetupsClientReferenceInformation"
    },
    {
        "name": "processingInformation",
        "baseName": "processingInformation",
        "type": "Riskv1authenticationsetupsProcessingInformation"
    },
    {
        "name": "orderInformation",
        "baseName": "orderInformation",
        "type": "Riskv1authenticationresultsOrderInformation"
    },
    {
        "name": "paymentInformation",
        "baseName": "paymentInformation",
        "type": "Riskv1authenticationresultsPaymentInformation"
    },
    {
        "name": "consumerAuthenticationInformation",
        "baseName": "consumerAuthenticationInformation",
        "type": "Riskv1authenticationresultsConsumerAuthenticationInformation"
    },
    {
        "name": "deviceInformation",
        "baseName": "deviceInformation",
        "type": "Riskv1authenticationresultsDeviceInformation"
    },
    {
        "name": "tokenInformation",
        "baseName": "tokenInformation",
        "type": "Riskv1decisionsTokenInformation"
    }
];
class ValueAddedServicesProducts {
    static getAttributeTypeMap() {
        return ValueAddedServicesProducts.attributeTypeMap;
    }
}
exports.ValueAddedServicesProducts = ValueAddedServicesProducts;
ValueAddedServicesProducts.discriminator = undefined;
ValueAddedServicesProducts.attributeTypeMap = [
    {
        "name": "reporting",
        "baseName": "reporting",
        "type": "PaymentsProductsTax"
    },
    {
        "name": "transactionSearch",
        "baseName": "transactionSearch",
        "type": "PaymentsProductsTax"
    },
    {
        "name": "bankAccountValidation",
        "baseName": "bankAccountValidation",
        "type": "PaymentsProductsTax"
    }
];
class VasV2PaymentsPost201Response {
    static getAttributeTypeMap() {
        return VasV2PaymentsPost201Response.attributeTypeMap;
    }
}
exports.VasV2PaymentsPost201Response = VasV2PaymentsPost201Response;
VasV2PaymentsPost201Response.discriminator = undefined;
VasV2PaymentsPost201Response.attributeTypeMap = [
    {
        "name": "links",
        "baseName": "_links",
        "type": "VasV2PaymentsPost201ResponseLinks"
    },
    {
        "name": "id",
        "baseName": "id",
        "type": "string"
    },
    {
        "name": "submitTimeUtc",
        "baseName": "submitTimeUtc",
        "type": "string"
    },
    {
        "name": "status",
        "baseName": "status",
        "type": "string"
    },
    {
        "name": "clientReferenceInformation",
        "baseName": "clientReferenceInformation",
        "type": "PtsV2PaymentsPost201ResponseClientReferenceInformation"
    },
    {
        "name": "taxInformation",
        "baseName": "taxInformation",
        "type": "VasV2PaymentsPost201ResponseTaxInformation"
    },
    {
        "name": "orderInformation",
        "baseName": "orderInformation",
        "type": "VasV2PaymentsPost201ResponseOrderInformation"
    }
];
class VasV2PaymentsPost201ResponseLinks {
    static getAttributeTypeMap() {
        return VasV2PaymentsPost201ResponseLinks.attributeTypeMap;
    }
}
exports.VasV2PaymentsPost201ResponseLinks = VasV2PaymentsPost201ResponseLinks;
VasV2PaymentsPost201ResponseLinks.discriminator = undefined;
VasV2PaymentsPost201ResponseLinks.attributeTypeMap = [
    {
        "name": "_void",
        "baseName": "void",
        "type": "PtsV2PaymentsPost201ResponseLinksSelf"
    }
];
class VasV2PaymentsPost201ResponseOrderInformation {
    static getAttributeTypeMap() {
        return VasV2PaymentsPost201ResponseOrderInformation.attributeTypeMap;
    }
}
exports.VasV2PaymentsPost201ResponseOrderInformation = VasV2PaymentsPost201ResponseOrderInformation;
VasV2PaymentsPost201ResponseOrderInformation.discriminator = undefined;
VasV2PaymentsPost201ResponseOrderInformation.attributeTypeMap = [
    {
        "name": "exemptAmount",
        "baseName": "exemptAmount",
        "type": "string"
    },
    {
        "name": "taxableAmount",
        "baseName": "taxableAmount",
        "type": "string"
    },
    {
        "name": "taxAmount",
        "baseName": "taxAmount",
        "type": "string"
    },
    {
        "name": "lineItems",
        "baseName": "lineItems",
        "type": "Array<VasV2PaymentsPost201ResponseOrderInformationLineItems>"
    },
    {
        "name": "taxDetails",
        "baseName": "taxDetails",
        "type": "Array<VasV2PaymentsPost201ResponseOrderInformationTaxDetails>"
    },
    {
        "name": "amountDetails",
        "baseName": "amountDetails",
        "type": "Ptsv2paymentsidreversalsReversalInformationAmountDetails"
    }
];
class VasV2PaymentsPost201ResponseOrderInformationJurisdiction {
    static getAttributeTypeMap() {
        return VasV2PaymentsPost201ResponseOrderInformationJurisdiction.attributeTypeMap;
    }
}
exports.VasV2PaymentsPost201ResponseOrderInformationJurisdiction = VasV2PaymentsPost201ResponseOrderInformationJurisdiction;
VasV2PaymentsPost201ResponseOrderInformationJurisdiction.discriminator = undefined;
VasV2PaymentsPost201ResponseOrderInformationJurisdiction.attributeTypeMap = [
    {
        "name": "type",
        "baseName": "type",
        "type": "string"
    },
    {
        "name": "taxName",
        "baseName": "taxName",
        "type": "string"
    },
    {
        "name": "taxAmount",
        "baseName": "taxAmount",
        "type": "string"
    },
    {
        "name": "taxable",
        "baseName": "taxable",
        "type": "string"
    },
    {
        "name": "name",
        "baseName": "name",
        "type": "string"
    },
    {
        "name": "code",
        "baseName": "code",
        "type": "string"
    },
    {
        "name": "rate",
        "baseName": "rate",
        "type": "string"
    },
    {
        "name": "region",
        "baseName": "region",
        "type": "string"
    },
    {
        "name": "country",
        "baseName": "country",
        "type": "string"
    }
];
class VasV2PaymentsPost201ResponseOrderInformationLineItems {
    static getAttributeTypeMap() {
        return VasV2PaymentsPost201ResponseOrderInformationLineItems.attributeTypeMap;
    }
}
exports.VasV2PaymentsPost201ResponseOrderInformationLineItems = VasV2PaymentsPost201ResponseOrderInformationLineItems;
VasV2PaymentsPost201ResponseOrderInformationLineItems.discriminator = undefined;
VasV2PaymentsPost201ResponseOrderInformationLineItems.attributeTypeMap = [
    {
        "name": "taxDetails",
        "baseName": "taxDetails",
        "type": "Array<VasV2PaymentsPost201ResponseOrderInformationTaxDetails>"
    },
    {
        "name": "jurisdiction",
        "baseName": "jurisdiction",
        "type": "Array<VasV2PaymentsPost201ResponseOrderInformationJurisdiction>"
    },
    {
        "name": "exemptAmount",
        "baseName": "exemptAmount",
        "type": "string"
    },
    {
        "name": "taxableAmount",
        "baseName": "taxableAmount",
        "type": "string"
    },
    {
        "name": "taxAmount",
        "baseName": "taxAmount",
        "type": "string"
    }
];
class VasV2PaymentsPost201ResponseOrderInformationTaxDetails {
    static getAttributeTypeMap() {
        return VasV2PaymentsPost201ResponseOrderInformationTaxDetails.attributeTypeMap;
    }
}
exports.VasV2PaymentsPost201ResponseOrderInformationTaxDetails = VasV2PaymentsPost201ResponseOrderInformationTaxDetails;
VasV2PaymentsPost201ResponseOrderInformationTaxDetails.discriminator = undefined;
VasV2PaymentsPost201ResponseOrderInformationTaxDetails.attributeTypeMap = [
    {
        "name": "type",
        "baseName": "type",
        "type": "string"
    },
    {
        "name": "amount",
        "baseName": "amount",
        "type": "string"
    }
];
class VasV2PaymentsPost201ResponseTaxInformation {
    static getAttributeTypeMap() {
        return VasV2PaymentsPost201ResponseTaxInformation.attributeTypeMap;
    }
}
exports.VasV2PaymentsPost201ResponseTaxInformation = VasV2PaymentsPost201ResponseTaxInformation;
VasV2PaymentsPost201ResponseTaxInformation.discriminator = undefined;
VasV2PaymentsPost201ResponseTaxInformation.attributeTypeMap = [
    {
        "name": "commitIndicator",
        "baseName": "commitIndicator",
        "type": "boolean"
    },
    {
        "name": "refundIndicator",
        "baseName": "refundIndicator",
        "type": "boolean"
    }
];
class VasV2PaymentsPost400Response {
    static getAttributeTypeMap() {
        return VasV2PaymentsPost400Response.attributeTypeMap;
    }
}
exports.VasV2PaymentsPost400Response = VasV2PaymentsPost400Response;
VasV2PaymentsPost400Response.discriminator = undefined;
VasV2PaymentsPost400Response.attributeTypeMap = [
    {
        "name": "submitTimeUtc",
        "baseName": "submitTimeUtc",
        "type": "string"
    },
    {
        "name": "status",
        "baseName": "status",
        "type": "string"
    },
    {
        "name": "reason",
        "baseName": "reason",
        "type": "string"
    },
    {
        "name": "message",
        "baseName": "message",
        "type": "string"
    },
    {
        "name": "details",
        "baseName": "details",
        "type": "Array<PtsV2PaymentsPost201ResponseErrorInformationDetails>"
    }
];
class VasV2TaxVoid200Response {
    static getAttributeTypeMap() {
        return VasV2TaxVoid200Response.attributeTypeMap;
    }
}
exports.VasV2TaxVoid200Response = VasV2TaxVoid200Response;
VasV2TaxVoid200Response.discriminator = undefined;
VasV2TaxVoid200Response.attributeTypeMap = [
    {
        "name": "id",
        "baseName": "id",
        "type": "string"
    },
    {
        "name": "submitTimeUtc",
        "baseName": "submitTimeUtc",
        "type": "string"
    },
    {
        "name": "status",
        "baseName": "status",
        "type": "string"
    },
    {
        "name": "clientReferenceInformation",
        "baseName": "clientReferenceInformation",
        "type": "PtsV2IncrementalAuthorizationPatch201ResponseClientReferenceInformation"
    },
    {
        "name": "voidAmountDetails",
        "baseName": "voidAmountDetails",
        "type": "VasV2TaxVoid200ResponseVoidAmountDetails"
    }
];
class VasV2TaxVoid200ResponseVoidAmountDetails {
    static getAttributeTypeMap() {
        return VasV2TaxVoid200ResponseVoidAmountDetails.attributeTypeMap;
    }
}
exports.VasV2TaxVoid200ResponseVoidAmountDetails = VasV2TaxVoid200ResponseVoidAmountDetails;
VasV2TaxVoid200ResponseVoidAmountDetails.discriminator = undefined;
VasV2TaxVoid200ResponseVoidAmountDetails.attributeTypeMap = [
    {
        "name": "voidAmount",
        "baseName": "voidAmount",
        "type": "string"
    },
    {
        "name": "currency",
        "baseName": "currency",
        "type": "string"
    }
];
class VasV2TaxVoidsPost400Response {
    static getAttributeTypeMap() {
        return VasV2TaxVoidsPost400Response.attributeTypeMap;
    }
}
exports.VasV2TaxVoidsPost400Response = VasV2TaxVoidsPost400Response;
VasV2TaxVoidsPost400Response.discriminator = undefined;
VasV2TaxVoidsPost400Response.attributeTypeMap = [
    {
        "name": "submitTimeUtc",
        "baseName": "submitTimeUtc",
        "type": "string"
    },
    {
        "name": "status",
        "baseName": "status",
        "type": "string"
    },
    {
        "name": "reason",
        "baseName": "reason",
        "type": "string"
    },
    {
        "name": "message",
        "baseName": "message",
        "type": "string"
    },
    {
        "name": "details",
        "baseName": "details",
        "type": "Array<PtsV2PaymentsPost201ResponseErrorInformationDetails>"
    }
];
class Vasv2taxBuyerInformation {
    static getAttributeTypeMap() {
        return Vasv2taxBuyerInformation.attributeTypeMap;
    }
}
exports.Vasv2taxBuyerInformation = Vasv2taxBuyerInformation;
Vasv2taxBuyerInformation.discriminator = undefined;
Vasv2taxBuyerInformation.attributeTypeMap = [
    {
        "name": "vatRegistrationNumber",
        "baseName": "vatRegistrationNumber",
        "type": "string"
    }
];
class Vasv2taxClientReferenceInformation {
    static getAttributeTypeMap() {
        return Vasv2taxClientReferenceInformation.attributeTypeMap;
    }
}
exports.Vasv2taxClientReferenceInformation = Vasv2taxClientReferenceInformation;
Vasv2taxClientReferenceInformation.discriminator = undefined;
Vasv2taxClientReferenceInformation.attributeTypeMap = [
    {
        "name": "code",
        "baseName": "code",
        "type": "string"
    },
    {
        "name": "partner",
        "baseName": "partner",
        "type": "Riskv1decisionsClientReferenceInformationPartner"
    },
    {
        "name": "comments",
        "baseName": "comments",
        "type": "string"
    }
];
class Vasv2taxMerchantInformation {
    static getAttributeTypeMap() {
        return Vasv2taxMerchantInformation.attributeTypeMap;
    }
}
exports.Vasv2taxMerchantInformation = Vasv2taxMerchantInformation;
Vasv2taxMerchantInformation.discriminator = undefined;
Vasv2taxMerchantInformation.attributeTypeMap = [
    {
        "name": "vatRegistrationNumber",
        "baseName": "vatRegistrationNumber",
        "type": "string"
    }
];
class Vasv2taxOrderInformation {
    static getAttributeTypeMap() {
        return Vasv2taxOrderInformation.attributeTypeMap;
    }
}
exports.Vasv2taxOrderInformation = Vasv2taxOrderInformation;
Vasv2taxOrderInformation.discriminator = undefined;
Vasv2taxOrderInformation.attributeTypeMap = [
    {
        "name": "amountDetails",
        "baseName": "amountDetails",
        "type": "RiskV1DecisionsPost201ResponseOrderInformationAmountDetails"
    },
    {
        "name": "billTo",
        "baseName": "billTo",
        "type": "Vasv2taxOrderInformationBillTo"
    },
    {
        "name": "shippingDetails",
        "baseName": "shippingDetails",
        "type": "Vasv2taxOrderInformationShippingDetails"
    },
    {
        "name": "shipTo",
        "baseName": "shipTo",
        "type": "Vasv2taxOrderInformationShipTo"
    },
    {
        "name": "lineItems",
        "baseName": "lineItems",
        "type": "Array<Vasv2taxOrderInformationLineItems>"
    },
    {
        "name": "invoiceDetails",
        "baseName": "invoiceDetails",
        "type": "Vasv2taxOrderInformationInvoiceDetails"
    },
    {
        "name": "orderAcceptance",
        "baseName": "orderAcceptance",
        "type": "Vasv2taxOrderInformationOrderAcceptance"
    },
    {
        "name": "orderOrigin",
        "baseName": "orderOrigin",
        "type": "Vasv2taxOrderInformationOrderOrigin"
    }
];
class Vasv2taxOrderInformationBillTo {
    static getAttributeTypeMap() {
        return Vasv2taxOrderInformationBillTo.attributeTypeMap;
    }
}
exports.Vasv2taxOrderInformationBillTo = Vasv2taxOrderInformationBillTo;
Vasv2taxOrderInformationBillTo.discriminator = undefined;
Vasv2taxOrderInformationBillTo.attributeTypeMap = [
    {
        "name": "address1",
        "baseName": "address1",
        "type": "string"
    },
    {
        "name": "address2",
        "baseName": "address2",
        "type": "string"
    },
    {
        "name": "locality",
        "baseName": "locality",
        "type": "string"
    },
    {
        "name": "administrativeArea",
        "baseName": "administrativeArea",
        "type": "string"
    },
    {
        "name": "postalCode",
        "baseName": "postalCode",
        "type": "string"
    },
    {
        "name": "country",
        "baseName": "country",
        "type": "string"
    }
];
class Vasv2taxOrderInformationInvoiceDetails {
    static getAttributeTypeMap() {
        return Vasv2taxOrderInformationInvoiceDetails.attributeTypeMap;
    }
}
exports.Vasv2taxOrderInformationInvoiceDetails = Vasv2taxOrderInformationInvoiceDetails;
Vasv2taxOrderInformationInvoiceDetails.discriminator = undefined;
Vasv2taxOrderInformationInvoiceDetails.attributeTypeMap = [
    {
        "name": "invoiceDate",
        "baseName": "invoiceDate",
        "type": "string"
    }
];
class Vasv2taxOrderInformationLineItems {
    static getAttributeTypeMap() {
        return Vasv2taxOrderInformationLineItems.attributeTypeMap;
    }
}
exports.Vasv2taxOrderInformationLineItems = Vasv2taxOrderInformationLineItems;
Vasv2taxOrderInformationLineItems.discriminator = undefined;
Vasv2taxOrderInformationLineItems.attributeTypeMap = [
    {
        "name": "productSKU",
        "baseName": "productSKU",
        "type": "string"
    },
    {
        "name": "productCode",
        "baseName": "productCode",
        "type": "string"
    },
    {
        "name": "quantity",
        "baseName": "quantity",
        "type": "number"
    },
    {
        "name": "productName",
        "baseName": "productName",
        "type": "string"
    },
    {
        "name": "unitPrice",
        "baseName": "unitPrice",
        "type": "string"
    },
    {
        "name": "taxAmount",
        "baseName": "taxAmount",
        "type": "string"
    },
    {
        "name": "orderAcceptance",
        "baseName": "orderAcceptance",
        "type": "Vasv2taxOrderInformationOrderAcceptance"
    },
    {
        "name": "orderOrigin",
        "baseName": "orderOrigin",
        "type": "Vasv2taxOrderInformationOrderOrigin"
    },
    {
        "name": "shipFromCountry",
        "baseName": "shipFromCountry",
        "type": "string"
    },
    {
        "name": "shipFromAdministrativeArea",
        "baseName": "shipFromAdministrativeArea",
        "type": "string"
    },
    {
        "name": "shipFromLocality",
        "baseName": "shipFromLocality",
        "type": "string"
    },
    {
        "name": "shipFromPostalCode",
        "baseName": "shipFromPostalCode",
        "type": "string"
    },
    {
        "name": "buyerVatRegistrationNumber",
        "baseName": "buyerVatRegistrationNumber",
        "type": "string"
    },
    {
        "name": "sellerVatRegistrationNumber",
        "baseName": "sellerVatRegistrationNumber",
        "type": "string"
    }
];
/**
* The Order Acceptance address fields may be used by the tax service to determine the taxability of the order or applicable taxing jurisdictions. You should consult your tax, legal and/or accounting advisors to determine if you should include an Order Acceptance address in your tax service request for some or all of your transactions based on your business.
*/
class Vasv2taxOrderInformationOrderAcceptance {
    static getAttributeTypeMap() {
        return Vasv2taxOrderInformationOrderAcceptance.attributeTypeMap;
    }
}
exports.Vasv2taxOrderInformationOrderAcceptance = Vasv2taxOrderInformationOrderAcceptance;
Vasv2taxOrderInformationOrderAcceptance.discriminator = undefined;
Vasv2taxOrderInformationOrderAcceptance.attributeTypeMap = [
    {
        "name": "locality",
        "baseName": "locality",
        "type": "string"
    },
    {
        "name": "administrativeArea",
        "baseName": "administrativeArea",
        "type": "string"
    },
    {
        "name": "postalCode",
        "baseName": "postalCode",
        "type": "string"
    },
    {
        "name": "country",
        "baseName": "country",
        "type": "string"
    }
];
/**
* The Order Origin address fields may be used by the tax service to determine the taxability of the order or applicable taxing jurisdictions. You should consult your tax, legal and/or accounting advisors to determine if you should include an Order Origin address in your tax service request for some or all of your transactions based on your business.
*/
class Vasv2taxOrderInformationOrderOrigin {
    static getAttributeTypeMap() {
        return Vasv2taxOrderInformationOrderOrigin.attributeTypeMap;
    }
}
exports.Vasv2taxOrderInformationOrderOrigin = Vasv2taxOrderInformationOrderOrigin;
Vasv2taxOrderInformationOrderOrigin.discriminator = undefined;
Vasv2taxOrderInformationOrderOrigin.attributeTypeMap = [
    {
        "name": "locality",
        "baseName": "locality",
        "type": "string"
    },
    {
        "name": "administrativeArea",
        "baseName": "administrativeArea",
        "type": "string"
    },
    {
        "name": "postalCode",
        "baseName": "postalCode",
        "type": "string"
    },
    {
        "name": "country",
        "baseName": "country",
        "type": "string"
    }
];
class Vasv2taxOrderInformationShipTo {
    static getAttributeTypeMap() {
        return Vasv2taxOrderInformationShipTo.attributeTypeMap;
    }
}
exports.Vasv2taxOrderInformationShipTo = Vasv2taxOrderInformationShipTo;
Vasv2taxOrderInformationShipTo.discriminator = undefined;
Vasv2taxOrderInformationShipTo.attributeTypeMap = [
    {
        "name": "country",
        "baseName": "country",
        "type": "string"
    },
    {
        "name": "administrativeArea",
        "baseName": "administrativeArea",
        "type": "string"
    },
    {
        "name": "locality",
        "baseName": "locality",
        "type": "string"
    },
    {
        "name": "postalCode",
        "baseName": "postalCode",
        "type": "string"
    },
    {
        "name": "address1",
        "baseName": "address1",
        "type": "string"
    },
    {
        "name": "address2",
        "baseName": "address2",
        "type": "string"
    },
    {
        "name": "address3",
        "baseName": "address3",
        "type": "string"
    }
];
class Vasv2taxOrderInformationShippingDetails {
    static getAttributeTypeMap() {
        return Vasv2taxOrderInformationShippingDetails.attributeTypeMap;
    }
}
exports.Vasv2taxOrderInformationShippingDetails = Vasv2taxOrderInformationShippingDetails;
Vasv2taxOrderInformationShippingDetails.discriminator = undefined;
Vasv2taxOrderInformationShippingDetails.attributeTypeMap = [
    {
        "name": "shipFromLocality",
        "baseName": "shipFromLocality",
        "type": "string"
    },
    {
        "name": "shipFromCountry",
        "baseName": "shipFromCountry",
        "type": "string"
    },
    {
        "name": "shipFromPostalCode",
        "baseName": "shipFromPostalCode",
        "type": "string"
    },
    {
        "name": "shipFromAdministrativeArea",
        "baseName": "shipFromAdministrativeArea",
        "type": "string"
    }
];
class Vasv2taxTaxInformation {
    static getAttributeTypeMap() {
        return Vasv2taxTaxInformation.attributeTypeMap;
    }
}
exports.Vasv2taxTaxInformation = Vasv2taxTaxInformation;
Vasv2taxTaxInformation.discriminator = undefined;
Vasv2taxTaxInformation.attributeTypeMap = [
    {
        "name": "reportingDate",
        "baseName": "reportingDate",
        "type": "string"
    },
    {
        "name": "dateOverrideReason",
        "baseName": "dateOverrideReason",
        "type": "string"
    },
    {
        "name": "nexus",
        "baseName": "nexus",
        "type": "Array<string>"
    },
    {
        "name": "noNexus",
        "baseName": "noNexus",
        "type": "Array<string>"
    },
    {
        "name": "showTaxPerLineItem",
        "baseName": "showTaxPerLineItem",
        "type": "string"
    },
    {
        "name": "commitIndicator",
        "baseName": "commitIndicator",
        "type": "boolean"
    },
    {
        "name": "refundIndicator",
        "baseName": "refundIndicator",
        "type": "boolean"
    }
];
class Vasv2taxidClientReferenceInformation {
    static getAttributeTypeMap() {
        return Vasv2taxidClientReferenceInformation.attributeTypeMap;
    }
}
exports.Vasv2taxidClientReferenceInformation = Vasv2taxidClientReferenceInformation;
Vasv2taxidClientReferenceInformation.discriminator = undefined;
Vasv2taxidClientReferenceInformation.attributeTypeMap = [
    {
        "name": "code",
        "baseName": "code",
        "type": "string"
    },
    {
        "name": "comments",
        "baseName": "comments",
        "type": "string"
    },
    {
        "name": "partner",
        "baseName": "partner",
        "type": "Vasv2taxidClientReferenceInformationPartner"
    }
];
class Vasv2taxidClientReferenceInformationPartner {
    static getAttributeTypeMap() {
        return Vasv2taxidClientReferenceInformationPartner.attributeTypeMap;
    }
}
exports.Vasv2taxidClientReferenceInformationPartner = Vasv2taxidClientReferenceInformationPartner;
Vasv2taxidClientReferenceInformationPartner.discriminator = undefined;
Vasv2taxidClientReferenceInformationPartner.attributeTypeMap = [
    {
        "name": "solutionId",
        "baseName": "solutionId",
        "type": "string"
    },
    {
        "name": "developerId",
        "baseName": "developerId",
        "type": "string"
    }
];
class VerifyCustomerAddressRequest {
    static getAttributeTypeMap() {
        return VerifyCustomerAddressRequest.attributeTypeMap;
    }
}
exports.VerifyCustomerAddressRequest = VerifyCustomerAddressRequest;
VerifyCustomerAddressRequest.discriminator = undefined;
VerifyCustomerAddressRequest.attributeTypeMap = [
    {
        "name": "clientReferenceInformation",
        "baseName": "clientReferenceInformation",
        "type": "Riskv1liststypeentriesClientReferenceInformation"
    },
    {
        "name": "orderInformation",
        "baseName": "orderInformation",
        "type": "Riskv1addressverificationsOrderInformation"
    },
    {
        "name": "buyerInformation",
        "baseName": "buyerInformation",
        "type": "Riskv1addressverificationsBuyerInformation"
    }
];
class VoidCaptureRequest {
    static getAttributeTypeMap() {
        return VoidCaptureRequest.attributeTypeMap;
    }
}
exports.VoidCaptureRequest = VoidCaptureRequest;
VoidCaptureRequest.discriminator = undefined;
VoidCaptureRequest.attributeTypeMap = [
    {
        "name": "clientReferenceInformation",
        "baseName": "clientReferenceInformation",
        "type": "Ptsv2paymentsidreversalsClientReferenceInformation"
    },
    {
        "name": "paymentInformation",
        "baseName": "paymentInformation",
        "type": "Ptsv2paymentsidvoidsPaymentInformation"
    },
    {
        "name": "orderInformation",
        "baseName": "orderInformation",
        "type": "Ptsv2paymentsidvoidsOrderInformation"
    },
    {
        "name": "agreementInformation",
        "baseName": "agreementInformation",
        "type": "Ptsv2paymentsidvoidsAgreementInformation"
    },
    {
        "name": "merchantInformation",
        "baseName": "merchantInformation",
        "type": "Ptsv2paymentsidvoidsMerchantInformation"
    },
    {
        "name": "processingInformation",
        "baseName": "processingInformation",
        "type": "Ptsv2paymentsidvoidsProcessingInformation"
    }
];
class VoidCreditRequest {
    static getAttributeTypeMap() {
        return VoidCreditRequest.attributeTypeMap;
    }
}
exports.VoidCreditRequest = VoidCreditRequest;
VoidCreditRequest.discriminator = undefined;
VoidCreditRequest.attributeTypeMap = [
    {
        "name": "clientReferenceInformation",
        "baseName": "clientReferenceInformation",
        "type": "Ptsv2paymentsidreversalsClientReferenceInformation"
    },
    {
        "name": "paymentInformation",
        "baseName": "paymentInformation",
        "type": "Ptsv2paymentsidvoidsPaymentInformation"
    },
    {
        "name": "orderInformation",
        "baseName": "orderInformation",
        "type": "Ptsv2paymentsidvoidsOrderInformation"
    },
    {
        "name": "agreementInformation",
        "baseName": "agreementInformation",
        "type": "Ptsv2paymentsidvoidsAgreementInformation"
    },
    {
        "name": "merchantInformation",
        "baseName": "merchantInformation",
        "type": "Ptsv2paymentsidvoidsMerchantInformation"
    },
    {
        "name": "processingInformation",
        "baseName": "processingInformation",
        "type": "Ptsv2paymentsidvoidsProcessingInformation"
    }
];
class VoidPaymentRequest {
    static getAttributeTypeMap() {
        return VoidPaymentRequest.attributeTypeMap;
    }
}
exports.VoidPaymentRequest = VoidPaymentRequest;
VoidPaymentRequest.discriminator = undefined;
VoidPaymentRequest.attributeTypeMap = [
    {
        "name": "clientReferenceInformation",
        "baseName": "clientReferenceInformation",
        "type": "Ptsv2paymentsidreversalsClientReferenceInformation"
    },
    {
        "name": "paymentInformation",
        "baseName": "paymentInformation",
        "type": "Ptsv2paymentsidvoidsPaymentInformation"
    },
    {
        "name": "orderInformation",
        "baseName": "orderInformation",
        "type": "Ptsv2paymentsidvoidsOrderInformation"
    },
    {
        "name": "agreementInformation",
        "baseName": "agreementInformation",
        "type": "Ptsv2paymentsidvoidsAgreementInformation"
    },
    {
        "name": "merchantInformation",
        "baseName": "merchantInformation",
        "type": "Ptsv2paymentsidvoidsMerchantInformation"
    },
    {
        "name": "processingInformation",
        "baseName": "processingInformation",
        "type": "Ptsv2paymentsidvoidsProcessingInformation"
    }
];
class VoidRefundRequest {
    static getAttributeTypeMap() {
        return VoidRefundRequest.attributeTypeMap;
    }
}
exports.VoidRefundRequest = VoidRefundRequest;
VoidRefundRequest.discriminator = undefined;
VoidRefundRequest.attributeTypeMap = [
    {
        "name": "clientReferenceInformation",
        "baseName": "clientReferenceInformation",
        "type": "Ptsv2paymentsidreversalsClientReferenceInformation"
    },
    {
        "name": "paymentInformation",
        "baseName": "paymentInformation",
        "type": "Ptsv2paymentsidvoidsPaymentInformation"
    },
    {
        "name": "orderInformation",
        "baseName": "orderInformation",
        "type": "Ptsv2paymentsidvoidsOrderInformation"
    },
    {
        "name": "agreementInformation",
        "baseName": "agreementInformation",
        "type": "Ptsv2paymentsidvoidsAgreementInformation"
    },
    {
        "name": "merchantInformation",
        "baseName": "merchantInformation",
        "type": "Ptsv2paymentsidvoidsMerchantInformation"
    },
    {
        "name": "processingInformation",
        "baseName": "processingInformation",
        "type": "Ptsv2paymentsidvoidsProcessingInformation"
    }
];
class VoidTaxRequest {
    static getAttributeTypeMap() {
        return VoidTaxRequest.attributeTypeMap;
    }
}
exports.VoidTaxRequest = VoidTaxRequest;
VoidTaxRequest.discriminator = undefined;
VoidTaxRequest.attributeTypeMap = [
    {
        "name": "clientReferenceInformation",
        "baseName": "clientReferenceInformation",
        "type": "Vasv2taxidClientReferenceInformation"
    }
];
let enumsMap = {
    "Boardingv1registrationsOrganizationInformation.TypeEnum": Boardingv1registrationsOrganizationInformation.TypeEnum,
    "Boardingv1registrationsOrganizationInformation.StatusEnum": Boardingv1registrationsOrganizationInformation.StatusEnum,
    "Boardingv1registrationsOrganizationInformationBusinessInformation.TimeZoneEnum": Boardingv1registrationsOrganizationInformationBusinessInformation.TimeZoneEnum,
    "Boardingv1registrationsOrganizationInformationBusinessInformation.TypeEnum": Boardingv1registrationsOrganizationInformationBusinessInformation.TypeEnum,
    "Boardingv1registrationsOrganizationInformationKYC.WhenIsCustomerChargedEnum": Boardingv1registrationsOrganizationInformationKYC.WhenIsCustomerChargedEnum,
    "Boardingv1registrationsOrganizationInformationKYC.TimeToProductDeliveryEnum": Boardingv1registrationsOrganizationInformationKYC.TimeToProductDeliveryEnum,
    "Boardingv1registrationsOrganizationInformationKYCDepositBankAccount.AccountTypeEnum": Boardingv1registrationsOrganizationInformationKYCDepositBankAccount.AccountTypeEnum,
    "Boardingv1registrationsRegistrationInformation.StatusEnum": Boardingv1registrationsRegistrationInformation.StatusEnum,
    "Boardingv1registrationsRegistrationInformation.BoardingFlowEnum": Boardingv1registrationsRegistrationInformation.BoardingFlowEnum,
    "Boardingv1registrationsRegistrationInformation.ModeEnum": Boardingv1registrationsRegistrationInformation.ModeEnum,
    "Body1.StatusEnum": Body1.StatusEnum,
    "Body1.StatusChangeReasonEnum": Body1.StatusChangeReasonEnum,
    "Body1.ReplacementReasonEnum": Body1.ReplacementReasonEnum,
    "Body1.P2peStatusEnum": Body1.P2peStatusEnum,
    "Body1.P2peConfirmationEnum": Body1.P2peConfirmationEnum,
    "CardProcessingConfigCommon.DefaultAuthTypeCodeEnum": CardProcessingConfigCommon.DefaultAuthTypeCodeEnum,
    "CardProcessingConfigCommonProcessors.IndustryCodeEnum": CardProcessingConfigCommonProcessors.IndustryCodeEnum,
    "CommerceSolutionsProductsTokenManagementConfigurationInformationConfigurationsVault.DefaultTokenTypeEnum": CommerceSolutionsProductsTokenManagementConfigurationInformationConfigurationsVault.DefaultTokenTypeEnum,
    "CommerceSolutionsProductsTokenManagementConfigurationInformationConfigurationsVault.LocationEnum": CommerceSolutionsProductsTokenManagementConfigurationInformationConfigurationsVault.LocationEnum,
    "CreateWebhook.NotificationScopeEnum": CreateWebhook.NotificationScopeEnum,
    "ECheckConfigCommonInternalOnlyProcessors.SettlementMethodEnum": ECheckConfigCommonInternalOnlyProcessors.SettlementMethodEnum,
    "ECheckConfigCommonInternalOnlyProcessors.VerificationLevelEnum": ECheckConfigCommonInternalOnlyProcessors.VerificationLevelEnum,
    "ECheckConfigCommonProcessors.AccuityCheckTypeEnum": ECheckConfigCommonProcessors.AccuityCheckTypeEnum,
    "ECheckConfigFeaturesAccountValidationServiceInternalOnlyProcessors.AvsVersionEnum": ECheckConfigFeaturesAccountValidationServiceInternalOnlyProcessors.AvsVersionEnum,
    "ECheckConfigFeaturesAccountValidationServiceProcessors.AvsCalculatedResponseBehaviorEnum": ECheckConfigFeaturesAccountValidationServiceProcessors.AvsCalculatedResponseBehaviorEnum,
    "ECheckConfigFeaturesAccountValidationServiceProcessors.AvsResultModeEnum": ECheckConfigFeaturesAccountValidationServiceProcessors.AvsResultModeEnum,
    "InlineResponse2002IntegrationInformationTenantConfigurations.StatusEnum": InlineResponse2002IntegrationInformationTenantConfigurations.StatusEnum,
    "InlineResponse2004.NotificationScopeEnum": InlineResponse2004.NotificationScopeEnum,
    "InlineResponse2005.NotificationScopeEnum": InlineResponse2005.NotificationScopeEnum,
    "InlineResponse2007.StatusEnum": InlineResponse2007.StatusEnum,
    "InlineResponse2008Devices.StatusEnum": InlineResponse2008Devices.StatusEnum,
    "InlineResponse20110.StatusEnum": InlineResponse20110.StatusEnum,
    "InlineResponse2013.StatusEnum": InlineResponse2013.StatusEnum,
    "InlineResponse2013IntegrationInformationTenantConfigurations.StatusEnum": InlineResponse2013IntegrationInformationTenantConfigurations.StatusEnum,
    "InlineResponse2013RegistrationInformation.ModeEnum": InlineResponse2013RegistrationInformation.ModeEnum,
    "InlineResponse2013SetupsPaymentsAlternativePaymentMethods.StatusEnum": InlineResponse2013SetupsPaymentsAlternativePaymentMethods.StatusEnum,
    "InlineResponse2013SetupsPaymentsAlternativePaymentMethodsConfigurationStatus.StatusEnum": InlineResponse2013SetupsPaymentsAlternativePaymentMethodsConfigurationStatus.StatusEnum,
    "InlineResponse2013SetupsPaymentsCardProcessingConfigurationStatus.StatusEnum": InlineResponse2013SetupsPaymentsCardProcessingConfigurationStatus.StatusEnum,
    "InlineResponse2013SetupsPaymentsCardProcessingConfigurationStatus.ReasonEnum": InlineResponse2013SetupsPaymentsCardProcessingConfigurationStatus.ReasonEnum,
    "InlineResponse2013SetupsPaymentsCardProcessingSubscriptionStatus.StatusEnum": InlineResponse2013SetupsPaymentsCardProcessingSubscriptionStatus.StatusEnum,
    "InlineResponse2013SetupsPaymentsCardProcessingSubscriptionStatus.ReasonEnum": InlineResponse2013SetupsPaymentsCardProcessingSubscriptionStatus.ReasonEnum,
    "InlineResponse2015.NotificationScopeEnum": InlineResponse2015.NotificationScopeEnum,
    "InlineResponse206.StatusEnum": InlineResponse206.StatusEnum,
    "InlineResponse2061.StatusEnum": InlineResponse2061.StatusEnum,
    "InlineResponse4007.StatusEnum": InlineResponse4007.StatusEnum,
    "InlineResponse4008.ReasonEnum": InlineResponse4008.ReasonEnum,
    "InlineResponse401.StatusEnum": InlineResponse401.StatusEnum,
    "InlineResponse4032.StatusEnum": InlineResponse4032.StatusEnum,
    "InlineResponse4043.StatusEnum": InlineResponse4043.StatusEnum,
    "InlineResponse5003.StatusEnum": InlineResponse5003.StatusEnum,
    "Iplv2paymentlinksProcessingInformation.LinkTypeEnum": Iplv2paymentlinksProcessingInformation.LinkTypeEnum,
    "Iplv2paymentlinksidProcessingInformation.LinkTypeEnum": Iplv2paymentlinksidProcessingInformation.LinkTypeEnum,
    "Notificationsubscriptionsv2webhooksSecurityPolicy.SecurityTypeEnum": Notificationsubscriptionsv2webhooksSecurityPolicy.SecurityTypeEnum,
    "Notificationsubscriptionsv2webhooksSecurityPolicyConfig.OAuthTokenTypeEnum": Notificationsubscriptionsv2webhooksSecurityPolicyConfig.OAuthTokenTypeEnum,
    "PaymentsProductsAlternativePaymentMethodsSubscriptionInformation.SelfServiceabilityEnum": PaymentsProductsAlternativePaymentMethodsSubscriptionInformation.SelfServiceabilityEnum,
    "PaymentsProductsCardPresentConnectSubscriptionInformation.SelfServiceabilityEnum": PaymentsProductsCardPresentConnectSubscriptionInformation.SelfServiceabilityEnum,
    "PaymentsProductsCardProcessingSubscriptionInformation.SelfServiceabilityEnum": PaymentsProductsCardProcessingSubscriptionInformation.SelfServiceabilityEnum,
    "PaymentsProductsDifferentialFeeSubscriptionInformation.SelfServiceabilityEnum": PaymentsProductsDifferentialFeeSubscriptionInformation.SelfServiceabilityEnum,
    "PaymentsProductsDigitalPaymentsSubscriptionInformation.SelfServiceabilityEnum": PaymentsProductsDigitalPaymentsSubscriptionInformation.SelfServiceabilityEnum,
    "PaymentsProductsECheckSubscriptionInformation.SelfServiceabilityEnum": PaymentsProductsECheckSubscriptionInformation.SelfServiceabilityEnum,
    "PaymentsProductsServiceFeeConfigurationInformationConfigurationsPaymentInformation.PaymentTypeEnum": PaymentsProductsServiceFeeConfigurationInformationConfigurationsPaymentInformation.PaymentTypeEnum,
    "PaymentsProductsServiceFeeConfigurationInformationConfigurationsPaymentInformation.FeeTypeEnum": PaymentsProductsServiceFeeConfigurationInformationConfigurationsPaymentInformation.FeeTypeEnum,
    "PaymentsProductsUnifiedCheckoutConfigurationInformationConfigurationsFeaturesPaze.FinancialInstitutionEnum": PaymentsProductsUnifiedCheckoutConfigurationInformationConfigurationsFeaturesPaze.FinancialInstitutionEnum,
    "PaymentsProductsUnifiedCheckoutSubscriptionInformation.EnablementStatusEnum": PaymentsProductsUnifiedCheckoutSubscriptionInformation.EnablementStatusEnum,
    "PaymentsProductsUnifiedCheckoutSubscriptionInformation.SelfServiceabilityEnum": PaymentsProductsUnifiedCheckoutSubscriptionInformation.SelfServiceabilityEnum,
    "PblPaymentLinksAllGet200ResponseProcessingInformation.LinkTypeEnum": PblPaymentLinksAllGet200ResponseProcessingInformation.LinkTypeEnum,
    "SAConfigPaymentMethods.EnabledPaymentMethodsEnum": SAConfigPaymentMethods.EnabledPaymentMethodsEnum,
    "TmsSensitivePrivileges.CardNumberMaskingFormatEnum": TmsSensitivePrivileges.CardNumberMaskingFormatEnum,
    "TmsTokenFormats.CustomerEnum": TmsTokenFormats.CustomerEnum,
    "TmsTokenFormats.PaymentInstrumentEnum": TmsTokenFormats.PaymentInstrumentEnum,
    "TmsTokenFormats.InstrumentIdentifierCardEnum": TmsTokenFormats.InstrumentIdentifierCardEnum,
    "TmsTokenFormats.InstrumentIdentifierBankAccountEnum": TmsTokenFormats.InstrumentIdentifierBankAccountEnum,
    "UpdateStatus.StatusEnum": UpdateStatus.StatusEnum,
    "UpdateWebhook.NotificationScopeEnum": UpdateWebhook.NotificationScopeEnum,
    "VTConfigCardNotPresentGlobalPaymentInformationBasicInformation.DefaultTransactionTypeEnum": VTConfigCardNotPresentGlobalPaymentInformationBasicInformation.DefaultTransactionTypeEnum,
    "VTConfigCardNotPresentGlobalPaymentInformationBasicInformation.DefaultPaymentTypeEnum": VTConfigCardNotPresentGlobalPaymentInformationBasicInformation.DefaultPaymentTypeEnum,
    "VTConfigCardNotPresentGlobalPaymentInformationPaymentInformation.DisplayCardVerificationValueEnum": VTConfigCardNotPresentGlobalPaymentInformationPaymentInformation.DisplayCardVerificationValueEnum,
    "VTConfigCardNotPresentGlobalPaymentInformationPaymentInformation.RequireCardVerificationValueEnum": VTConfigCardNotPresentGlobalPaymentInformationPaymentInformation.RequireCardVerificationValueEnum,
    "VTConfigCardNotPresentGlobalPaymentInformationPaymentInformation.AcceptedCardTypesEnum": VTConfigCardNotPresentGlobalPaymentInformationPaymentInformation.AcceptedCardTypesEnum,
};
let typeMap = {
    "Accountupdaterv1batchesIncluded": Accountupdaterv1batchesIncluded,
    "Accountupdaterv1batchesIncludedTokens": Accountupdaterv1batchesIncludedTokens,
    "ActivateDeactivatePlanResponse": ActivateDeactivatePlanResponse,
    "ActivateSubscriptionResponse": ActivateSubscriptionResponse,
    "ActivateSubscriptionResponseSubscriptionInformation": ActivateSubscriptionResponseSubscriptionInformation,
    "AddNegativeListRequest": AddNegativeListRequest,
    "AuthReversalRequest": AuthReversalRequest,
    "Binv1binlookupClientReferenceInformation": Binv1binlookupClientReferenceInformation,
    "Binv1binlookupPaymentInformation": Binv1binlookupPaymentInformation,
    "Binv1binlookupPaymentInformationCard": Binv1binlookupPaymentInformationCard,
    "Binv1binlookupProcessingInformation": Binv1binlookupProcessingInformation,
    "Binv1binlookupProcessingInformationPayoutOptions": Binv1binlookupProcessingInformationPayoutOptions,
    "Binv1binlookupTokenInformation": Binv1binlookupTokenInformation,
    "Boardingv1registrationsDocumentInformation": Boardingv1registrationsDocumentInformation,
    "Boardingv1registrationsDocumentInformationSignedDocuments": Boardingv1registrationsDocumentInformationSignedDocuments,
    "Boardingv1registrationsIntegrationInformation": Boardingv1registrationsIntegrationInformation,
    "Boardingv1registrationsIntegrationInformationOauth2": Boardingv1registrationsIntegrationInformationOauth2,
    "Boardingv1registrationsIntegrationInformationTenantConfigurations": Boardingv1registrationsIntegrationInformationTenantConfigurations,
    "Boardingv1registrationsIntegrationInformationTenantInformation": Boardingv1registrationsIntegrationInformationTenantInformation,
    "Boardingv1registrationsOrganizationInformation": Boardingv1registrationsOrganizationInformation,
    "Boardingv1registrationsOrganizationInformationBusinessInformation": Boardingv1registrationsOrganizationInformationBusinessInformation,
    "Boardingv1registrationsOrganizationInformationBusinessInformationAddress": Boardingv1registrationsOrganizationInformationBusinessInformationAddress,
    "Boardingv1registrationsOrganizationInformationBusinessInformationBusinessContact": Boardingv1registrationsOrganizationInformationBusinessInformationBusinessContact,
    "Boardingv1registrationsOrganizationInformationKYC": Boardingv1registrationsOrganizationInformationKYC,
    "Boardingv1registrationsOrganizationInformationKYCDepositBankAccount": Boardingv1registrationsOrganizationInformationKYCDepositBankAccount,
    "Boardingv1registrationsOrganizationInformationOwners": Boardingv1registrationsOrganizationInformationOwners,
    "Boardingv1registrationsProductInformation": Boardingv1registrationsProductInformation,
    "Boardingv1registrationsProductInformationSelectedProducts": Boardingv1registrationsProductInformationSelectedProducts,
    "Boardingv1registrationsRegistrationInformation": Boardingv1registrationsRegistrationInformation,
    "Body": Body,
    "Body1": Body1,
    "Body2": Body2,
    "Body3": Body3,
    "CancelSubscriptionResponse": CancelSubscriptionResponse,
    "CancelSubscriptionResponseSubscriptionInformation": CancelSubscriptionResponseSubscriptionInformation,
    "CapturePaymentRequest": CapturePaymentRequest,
    "CardProcessingConfig": CardProcessingConfig,
    "CardProcessingConfigCommon": CardProcessingConfigCommon,
    "CardProcessingConfigCommonAcquirer": CardProcessingConfigCommonAcquirer,
    "CardProcessingConfigCommonCurrencies": CardProcessingConfigCommonCurrencies,
    "CardProcessingConfigCommonCurrencies1": CardProcessingConfigCommonCurrencies1,
    "CardProcessingConfigCommonMerchantDescriptorInformation": CardProcessingConfigCommonMerchantDescriptorInformation,
    "CardProcessingConfigCommonPaymentTypes": CardProcessingConfigCommonPaymentTypes,
    "CardProcessingConfigCommonProcessors": CardProcessingConfigCommonProcessors,
    "CardProcessingConfigFeatures": CardProcessingConfigFeatures,
    "CardProcessingConfigFeaturesCardNotPresent": CardProcessingConfigFeaturesCardNotPresent,
    "CardProcessingConfigFeaturesCardNotPresentInstallment": CardProcessingConfigFeaturesCardNotPresentInstallment,
    "CardProcessingConfigFeaturesCardNotPresentPayouts": CardProcessingConfigFeaturesCardNotPresentPayouts,
    "CardProcessingConfigFeaturesCardNotPresentPayoutsCurrencies": CardProcessingConfigFeaturesCardNotPresentPayoutsCurrencies,
    "CardProcessingConfigFeaturesCardNotPresentProcessors": CardProcessingConfigFeaturesCardNotPresentProcessors,
    "CardProcessingConfigFeaturesCardPresent": CardProcessingConfigFeaturesCardPresent,
    "CardProcessingConfigFeaturesCardPresentProcessors": CardProcessingConfigFeaturesCardPresentProcessors,
    "CaseManagementActionsRequest": CaseManagementActionsRequest,
    "CaseManagementCommentsRequest": CaseManagementCommentsRequest,
    "CheckPayerAuthEnrollmentRequest": CheckPayerAuthEnrollmentRequest,
    "CommerceSolutionsProducts": CommerceSolutionsProducts,
    "CommerceSolutionsProductsAccountUpdater": CommerceSolutionsProductsAccountUpdater,
    "CommerceSolutionsProductsAccountUpdaterConfigurationInformation": CommerceSolutionsProductsAccountUpdaterConfigurationInformation,
    "CommerceSolutionsProductsAccountUpdaterConfigurationInformationConfigurations": CommerceSolutionsProductsAccountUpdaterConfigurationInformationConfigurations,
    "CommerceSolutionsProductsAccountUpdaterConfigurationInformationConfigurationsAmex": CommerceSolutionsProductsAccountUpdaterConfigurationInformationConfigurationsAmex,
    "CommerceSolutionsProductsAccountUpdaterConfigurationInformationConfigurationsMasterCard": CommerceSolutionsProductsAccountUpdaterConfigurationInformationConfigurationsMasterCard,
    "CommerceSolutionsProductsAccountUpdaterConfigurationInformationConfigurationsVisa": CommerceSolutionsProductsAccountUpdaterConfigurationInformationConfigurationsVisa,
    "CommerceSolutionsProductsBinLookup": CommerceSolutionsProductsBinLookup,
    "CommerceSolutionsProductsBinLookupConfigurationInformation": CommerceSolutionsProductsBinLookupConfigurationInformation,
    "CommerceSolutionsProductsBinLookupConfigurationInformationConfigurations": CommerceSolutionsProductsBinLookupConfigurationInformationConfigurations,
    "CommerceSolutionsProductsTokenManagement": CommerceSolutionsProductsTokenManagement,
    "CommerceSolutionsProductsTokenManagementConfigurationInformation": CommerceSolutionsProductsTokenManagementConfigurationInformation,
    "CommerceSolutionsProductsTokenManagementConfigurationInformationConfigurations": CommerceSolutionsProductsTokenManagementConfigurationInformationConfigurations,
    "CommerceSolutionsProductsTokenManagementConfigurationInformationConfigurationsVault": CommerceSolutionsProductsTokenManagementConfigurationInformationConfigurationsVault,
    "CreateAdhocReportRequest": CreateAdhocReportRequest,
    "CreateBillingAgreement": CreateBillingAgreement,
    "CreateBinLookupRequest": CreateBinLookupRequest,
    "CreateBundledDecisionManagerCaseRequest": CreateBundledDecisionManagerCaseRequest,
    "CreateCreditRequest": CreateCreditRequest,
    "CreateInvoiceRequest": CreateInvoiceRequest,
    "CreateOrderRequest": CreateOrderRequest,
    "CreatePaymentLinkRequest": CreatePaymentLinkRequest,
    "CreatePaymentRequest": CreatePaymentRequest,
    "CreatePlanRequest": CreatePlanRequest,
    "CreatePlanResponse": CreatePlanResponse,
    "CreatePlanResponsePlanInformation": CreatePlanResponsePlanInformation,
    "CreateReportSubscriptionRequest": CreateReportSubscriptionRequest,
    "CreateSearchRequest": CreateSearchRequest,
    "CreateSessionReq": CreateSessionReq,
    "CreateSessionRequest": CreateSessionRequest,
    "CreateSubscriptionRequest": CreateSubscriptionRequest,
    "CreateSubscriptionRequest1": CreateSubscriptionRequest1,
    "CreateSubscriptionResponse": CreateSubscriptionResponse,
    "CreateSubscriptionResponseLinks": CreateSubscriptionResponseLinks,
    "CreateSubscriptionResponseSubscriptionInformation": CreateSubscriptionResponseSubscriptionInformation,
    "CreateWebhook": CreateWebhook,
    "DeletePlanResponse": DeletePlanResponse,
    "DeviceDeAssociateV3Request": DeviceDeAssociateV3Request,
    "DeviceTransferRequest": DeviceTransferRequest,
    "DmConfig": DmConfig,
    "DmConfigOrganization": DmConfigOrganization,
    "DmConfigPortfolioControls": DmConfigPortfolioControls,
    "DmConfigProcessingOptions": DmConfigProcessingOptions,
    "DmConfigThirdparty": DmConfigThirdparty,
    "DmConfigThirdpartyProvider": DmConfigThirdpartyProvider,
    "DmConfigThirdpartyProviderAccurint": DmConfigThirdpartyProviderAccurint,
    "DmConfigThirdpartyProviderAccurintCredentials": DmConfigThirdpartyProviderAccurintCredentials,
    "DmConfigThirdpartyProviderCredilink": DmConfigThirdpartyProviderCredilink,
    "DmConfigThirdpartyProviderCredilinkCredentials": DmConfigThirdpartyProviderCredilinkCredentials,
    "DmConfigThirdpartyProviderEkata": DmConfigThirdpartyProviderEkata,
    "DmConfigThirdpartyProviderEkataCredentials": DmConfigThirdpartyProviderEkataCredentials,
    "DmConfigThirdpartyProviderEmailage": DmConfigThirdpartyProviderEmailage,
    "DmConfigThirdpartyProviderPerseuss": DmConfigThirdpartyProviderPerseuss,
    "DmConfigThirdpartyProviderSignifyd": DmConfigThirdpartyProviderSignifyd,
    "DmConfigThirdpartyProviderSignifydCredentials": DmConfigThirdpartyProviderSignifydCredentials,
    "DmConfigThirdpartyProviderTargus": DmConfigThirdpartyProviderTargus,
    "DmConfigThirdpartyProviderTargusCredentials": DmConfigThirdpartyProviderTargusCredentials,
    "Dmsv2devicesPaymentProcessor": Dmsv2devicesPaymentProcessor,
    "Dmsv2devicetransferDetails": Dmsv2devicetransferDetails,
    "Dmsv2devicetransferDetails1": Dmsv2devicetransferDetails1,
    "Dmsv3devicesdeassociateDevices": Dmsv3devicesdeassociateDevices,
    "ECheckConfig": ECheckConfig,
    "ECheckConfigCommon": ECheckConfigCommon,
    "ECheckConfigCommonInternalOnly": ECheckConfigCommonInternalOnly,
    "ECheckConfigCommonInternalOnlyProcessors": ECheckConfigCommonInternalOnlyProcessors,
    "ECheckConfigCommonProcessors": ECheckConfigCommonProcessors,
    "ECheckConfigFeatures": ECheckConfigFeatures,
    "ECheckConfigFeaturesAccountValidationService": ECheckConfigFeaturesAccountValidationService,
    "ECheckConfigFeaturesAccountValidationServiceInternalOnly": ECheckConfigFeaturesAccountValidationServiceInternalOnly,
    "ECheckConfigFeaturesAccountValidationServiceInternalOnlyProcessors": ECheckConfigFeaturesAccountValidationServiceInternalOnlyProcessors,
    "ECheckConfigFeaturesAccountValidationServiceProcessors": ECheckConfigFeaturesAccountValidationServiceProcessors,
    "ECheckConfigUnderwriting": ECheckConfigUnderwriting,
    "FraudMarkingActionRequest": FraudMarkingActionRequest,
    "GenerateCaptureContextRequest": GenerateCaptureContextRequest,
    "GenerateUnifiedCheckoutCaptureContextRequest": GenerateUnifiedCheckoutCaptureContextRequest,
    "GetAllPlansResponse": GetAllPlansResponse,
    "GetAllPlansResponseLinks": GetAllPlansResponseLinks,
    "GetAllPlansResponseOrderInformation": GetAllPlansResponseOrderInformation,
    "GetAllPlansResponseOrderInformationAmountDetails": GetAllPlansResponseOrderInformationAmountDetails,
    "GetAllPlansResponsePlanInformation": GetAllPlansResponsePlanInformation,
    "GetAllPlansResponsePlanInformationBillingCycles": GetAllPlansResponsePlanInformationBillingCycles,
    "GetAllPlansResponsePlanInformationBillingPeriod": GetAllPlansResponsePlanInformationBillingPeriod,
    "GetAllPlansResponsePlans": GetAllPlansResponsePlans,
    "GetAllSubscriptionsResponse": GetAllSubscriptionsResponse,
    "GetAllSubscriptionsResponseLinks": GetAllSubscriptionsResponseLinks,
    "GetAllSubscriptionsResponseOrderInformation": GetAllSubscriptionsResponseOrderInformation,
    "GetAllSubscriptionsResponseOrderInformationBillTo": GetAllSubscriptionsResponseOrderInformationBillTo,
    "GetAllSubscriptionsResponsePaymentInformation": GetAllSubscriptionsResponsePaymentInformation,
    "GetAllSubscriptionsResponsePaymentInformationCustomer": GetAllSubscriptionsResponsePaymentInformationCustomer,
    "GetAllSubscriptionsResponsePlanInformation": GetAllSubscriptionsResponsePlanInformation,
    "GetAllSubscriptionsResponsePlanInformationBillingCycles": GetAllSubscriptionsResponsePlanInformationBillingCycles,
    "GetAllSubscriptionsResponseSubscriptionInformation": GetAllSubscriptionsResponseSubscriptionInformation,
    "GetAllSubscriptionsResponseSubscriptions": GetAllSubscriptionsResponseSubscriptions,
    "GetPlanCodeResponse": GetPlanCodeResponse,
    "GetPlanResponse": GetPlanResponse,
    "GetSubscriptionCodeResponse": GetSubscriptionCodeResponse,
    "GetSubscriptionResponse": GetSubscriptionResponse,
    "GetSubscriptionResponse1": GetSubscriptionResponse1,
    "GetSubscriptionResponse1BuyerInformation": GetSubscriptionResponse1BuyerInformation,
    "GetSubscriptionResponse1Links": GetSubscriptionResponse1Links,
    "GetSubscriptionResponse1PaymentInstrument": GetSubscriptionResponse1PaymentInstrument,
    "GetSubscriptionResponse1PaymentInstrumentBankAccount": GetSubscriptionResponse1PaymentInstrumentBankAccount,
    "GetSubscriptionResponse1PaymentInstrumentBuyerInformation": GetSubscriptionResponse1PaymentInstrumentBuyerInformation,
    "GetSubscriptionResponse1PaymentInstrumentCard": GetSubscriptionResponse1PaymentInstrumentCard,
    "GetSubscriptionResponse1ShippingAddress": GetSubscriptionResponse1ShippingAddress,
    "GetSubscriptionResponseReactivationInformation": GetSubscriptionResponseReactivationInformation,
    "IncrementAuthRequest": IncrementAuthRequest,
    "InlineResponse200": InlineResponse200,
    "InlineResponse2001": InlineResponse2001,
    "InlineResponse20010": InlineResponse20010,
    "InlineResponse20010Expirations": InlineResponse20010Expirations,
    "InlineResponse20011": InlineResponse20011,
    "InlineResponse20011CustomizationMetadata": InlineResponse20011CustomizationMetadata,
    "InlineResponse20012": InlineResponse20012,
    "InlineResponse20012Embedded": InlineResponse20012Embedded,
    "InlineResponse20012EmbeddedBatches": InlineResponse20012EmbeddedBatches,
    "InlineResponse20012EmbeddedLinks": InlineResponse20012EmbeddedLinks,
    "InlineResponse20012EmbeddedLinksReports": InlineResponse20012EmbeddedLinksReports,
    "InlineResponse20012EmbeddedTotals": InlineResponse20012EmbeddedTotals,
    "InlineResponse20012Links": InlineResponse20012Links,
    "InlineResponse20013": InlineResponse20013,
    "InlineResponse20013Billing": InlineResponse20013Billing,
    "InlineResponse20013Links": InlineResponse20013Links,
    "InlineResponse20013LinksReport": InlineResponse20013LinksReport,
    "InlineResponse20014": InlineResponse20014,
    "InlineResponse20014Records": InlineResponse20014Records,
    "InlineResponse20014ResponseRecord": InlineResponse20014ResponseRecord,
    "InlineResponse20014ResponseRecordAdditionalUpdates": InlineResponse20014ResponseRecordAdditionalUpdates,
    "InlineResponse20014SourceRecord": InlineResponse20014SourceRecord,
    "InlineResponse2001Embedded": InlineResponse2001Embedded,
    "InlineResponse2001EmbeddedCapture": InlineResponse2001EmbeddedCapture,
    "InlineResponse2001EmbeddedCaptureLinks": InlineResponse2001EmbeddedCaptureLinks,
    "InlineResponse2001EmbeddedCaptureLinksSelf": InlineResponse2001EmbeddedCaptureLinksSelf,
    "InlineResponse2001EmbeddedReversal": InlineResponse2001EmbeddedReversal,
    "InlineResponse2001EmbeddedReversalLinks": InlineResponse2001EmbeddedReversalLinks,
    "InlineResponse2001EmbeddedReversalLinksSelf": InlineResponse2001EmbeddedReversalLinksSelf,
    "InlineResponse2002": InlineResponse2002,
    "InlineResponse2002IntegrationInformation": InlineResponse2002IntegrationInformation,
    "InlineResponse2002IntegrationInformationTenantConfigurations": InlineResponse2002IntegrationInformationTenantConfigurations,
    "InlineResponse2003": InlineResponse2003,
    "InlineResponse2004": InlineResponse2004,
    "InlineResponse2005": InlineResponse2005,
    "InlineResponse2006": InlineResponse2006,
    "InlineResponse2007": InlineResponse2007,
    "InlineResponse2008": InlineResponse2008,
    "InlineResponse2008Devices": InlineResponse2008Devices,
    "InlineResponse2008PaymentProcessorToTerminalMap": InlineResponse2008PaymentProcessorToTerminalMap,
    "InlineResponse2009": InlineResponse2009,
    "InlineResponse200Content": InlineResponse200Content,
    "InlineResponse201": InlineResponse201,
    "InlineResponse2011": InlineResponse2011,
    "InlineResponse20110": InlineResponse20110,
    "InlineResponse2012": InlineResponse2012,
    "InlineResponse2012PayoutInformation": InlineResponse2012PayoutInformation,
    "InlineResponse2012PayoutInformationPullFunds": InlineResponse2012PayoutInformationPullFunds,
    "InlineResponse2012PayoutInformationPushFunds": InlineResponse2012PayoutInformationPushFunds,
    "InlineResponse2013": InlineResponse2013,
    "InlineResponse2013IntegrationInformation": InlineResponse2013IntegrationInformation,
    "InlineResponse2013IntegrationInformationTenantConfigurations": InlineResponse2013IntegrationInformationTenantConfigurations,
    "InlineResponse2013OrganizationInformation": InlineResponse2013OrganizationInformation,
    "InlineResponse2013ProductInformationSetups": InlineResponse2013ProductInformationSetups,
    "InlineResponse2013RegistrationInformation": InlineResponse2013RegistrationInformation,
    "InlineResponse2013Setups": InlineResponse2013Setups,
    "InlineResponse2013SetupsCommerceSolutions": InlineResponse2013SetupsCommerceSolutions,
    "InlineResponse2013SetupsPayments": InlineResponse2013SetupsPayments,
    "InlineResponse2013SetupsPaymentsAlternativePaymentMethods": InlineResponse2013SetupsPaymentsAlternativePaymentMethods,
    "InlineResponse2013SetupsPaymentsAlternativePaymentMethodsConfigurationStatus": InlineResponse2013SetupsPaymentsAlternativePaymentMethodsConfigurationStatus,
    "InlineResponse2013SetupsPaymentsCardProcessing": InlineResponse2013SetupsPaymentsCardProcessing,
    "InlineResponse2013SetupsPaymentsCardProcessingConfigurationStatus": InlineResponse2013SetupsPaymentsCardProcessingConfigurationStatus,
    "InlineResponse2013SetupsPaymentsCardProcessingSubscriptionStatus": InlineResponse2013SetupsPaymentsCardProcessingSubscriptionStatus,
    "InlineResponse2013SetupsPaymentsDigitalPayments": InlineResponse2013SetupsPaymentsDigitalPayments,
    "InlineResponse2013SetupsRisk": InlineResponse2013SetupsRisk,
    "InlineResponse2013SetupsValueAddedServices": InlineResponse2013SetupsValueAddedServices,
    "InlineResponse2014": InlineResponse2014,
    "InlineResponse2014KeyInformation": InlineResponse2014KeyInformation,
    "InlineResponse2014KeyInformationErrorInformation": InlineResponse2014KeyInformationErrorInformation,
    "InlineResponse2014KeyInformationErrorInformationDetails": InlineResponse2014KeyInformationErrorInformationDetails,
    "InlineResponse2015": InlineResponse2015,
    "InlineResponse2016": InlineResponse2016,
    "InlineResponse2016Payloads": InlineResponse2016Payloads,
    "InlineResponse2016PayloadsTestPayload": InlineResponse2016PayloadsTestPayload,
    "InlineResponse2017": InlineResponse2017,
    "InlineResponse2018": InlineResponse2018,
    "InlineResponse2019": InlineResponse2019,
    "InlineResponse2019Tokens": InlineResponse2019Tokens,
    "InlineResponse201OrderInformation": InlineResponse201OrderInformation,
    "InlineResponse201OrderInformationShipTo": InlineResponse201OrderInformationShipTo,
    "InlineResponse201PaymentInformation": InlineResponse201PaymentInformation,
    "InlineResponse201PaymentInformationEWallet": InlineResponse201PaymentInformationEWallet,
    "InlineResponse201PaymentInformationTokenizedPaymentMethod": InlineResponse201PaymentInformationTokenizedPaymentMethod,
    "InlineResponse202": InlineResponse202,
    "InlineResponse202Links": InlineResponse202Links,
    "InlineResponse202LinksStatus": InlineResponse202LinksStatus,
    "InlineResponse206": InlineResponse206,
    "InlineResponse2061": InlineResponse2061,
    "InlineResponse400": InlineResponse400,
    "InlineResponse4001": InlineResponse4001,
    "InlineResponse4002": InlineResponse4002,
    "InlineResponse4003": InlineResponse4003,
    "InlineResponse4004": InlineResponse4004,
    "InlineResponse4005": InlineResponse4005,
    "InlineResponse4005Fields": InlineResponse4005Fields,
    "InlineResponse4006": InlineResponse4006,
    "InlineResponse4006Details": InlineResponse4006Details,
    "InlineResponse4007": InlineResponse4007,
    "InlineResponse4007Details": InlineResponse4007Details,
    "InlineResponse4008": InlineResponse4008,
    "InlineResponse4008Details": InlineResponse4008Details,
    "InlineResponse400Details": InlineResponse400Details,
    "InlineResponse400Errors": InlineResponse400Errors,
    "InlineResponse401": InlineResponse401,
    "InlineResponse4011": InlineResponse4011,
    "InlineResponse4011Fields": InlineResponse4011Fields,
    "InlineResponse4011Links": InlineResponse4011Links,
    "InlineResponse4011LinksSelf": InlineResponse4011LinksSelf,
    "InlineResponse403": InlineResponse403,
    "InlineResponse4031": InlineResponse4031,
    "InlineResponse4032": InlineResponse4032,
    "InlineResponse403Errors": InlineResponse403Errors,
    "InlineResponse404": InlineResponse404,
    "InlineResponse4041": InlineResponse4041,
    "InlineResponse4042": InlineResponse4042,
    "InlineResponse4042Details": InlineResponse4042Details,
    "InlineResponse4043": InlineResponse4043,
    "InlineResponse409": InlineResponse409,
    "InlineResponse409Errors": InlineResponse409Errors,
    "InlineResponse410": InlineResponse410,
    "InlineResponse410Errors": InlineResponse410Errors,
    "InlineResponse412": InlineResponse412,
    "InlineResponse412Errors": InlineResponse412Errors,
    "InlineResponse422": InlineResponse422,
    "InlineResponse4221": InlineResponse4221,
    "InlineResponse424": InlineResponse424,
    "InlineResponse424Errors": InlineResponse424Errors,
    "InlineResponse500": InlineResponse500,
    "InlineResponse5001": InlineResponse5001,
    "InlineResponse5002": InlineResponse5002,
    "InlineResponse5003": InlineResponse5003,
    "InlineResponse500Errors": InlineResponse500Errors,
    "InlineResponse502": InlineResponse502,
    "InlineResponse503": InlineResponse503,
    "InlineResponseDefault": InlineResponseDefault,
    "InlineResponseDefaultLinks": InlineResponseDefaultLinks,
    "InlineResponseDefaultLinksNext": InlineResponseDefaultLinksNext,
    "InlineResponseDefaultResponseStatus": InlineResponseDefaultResponseStatus,
    "InlineResponseDefaultResponseStatusDetails": InlineResponseDefaultResponseStatusDetails,
    "IntimateBillingAgreement": IntimateBillingAgreement,
    "InvoiceSettingsRequest": InvoiceSettingsRequest,
    "InvoicingV2InvoiceSettingsGet200Response": InvoicingV2InvoiceSettingsGet200Response,
    "InvoicingV2InvoiceSettingsGet200ResponseInvoiceSettingsInformation": InvoicingV2InvoiceSettingsGet200ResponseInvoiceSettingsInformation,
    "InvoicingV2InvoiceSettingsGet200ResponseInvoiceSettingsInformationHeaderStyle": InvoicingV2InvoiceSettingsGet200ResponseInvoiceSettingsInformationHeaderStyle,
    "InvoicingV2InvoicesAllGet200Response": InvoicingV2InvoicesAllGet200Response,
    "InvoicingV2InvoicesAllGet200ResponseCustomerInformation": InvoicingV2InvoicesAllGet200ResponseCustomerInformation,
    "InvoicingV2InvoicesAllGet200ResponseInvoiceInformation": InvoicingV2InvoicesAllGet200ResponseInvoiceInformation,
    "InvoicingV2InvoicesAllGet200ResponseInvoices": InvoicingV2InvoicesAllGet200ResponseInvoices,
    "InvoicingV2InvoicesAllGet200ResponseLinks": InvoicingV2InvoicesAllGet200ResponseLinks,
    "InvoicingV2InvoicesAllGet200ResponseOrderInformation": InvoicingV2InvoicesAllGet200ResponseOrderInformation,
    "InvoicingV2InvoicesAllGet200ResponseOrderInformationAmountDetails": InvoicingV2InvoicesAllGet200ResponseOrderInformationAmountDetails,
    "InvoicingV2InvoicesAllGet400Response": InvoicingV2InvoicesAllGet400Response,
    "InvoicingV2InvoicesAllGet404Response": InvoicingV2InvoicesAllGet404Response,
    "InvoicingV2InvoicesAllGet502Response": InvoicingV2InvoicesAllGet502Response,
    "InvoicingV2InvoicesCancel200Response": InvoicingV2InvoicesCancel200Response,
    "InvoicingV2InvoicesGet200Response": InvoicingV2InvoicesGet200Response,
    "InvoicingV2InvoicesGet200ResponseInvoiceHistory": InvoicingV2InvoicesGet200ResponseInvoiceHistory,
    "InvoicingV2InvoicesGet200ResponseTransactionDetails": InvoicingV2InvoicesGet200ResponseTransactionDetails,
    "InvoicingV2InvoicesPost201Response": InvoicingV2InvoicesPost201Response,
    "InvoicingV2InvoicesPost201ResponseInvoiceInformation": InvoicingV2InvoicesPost201ResponseInvoiceInformation,
    "InvoicingV2InvoicesPost201ResponseInvoiceInformationCustomLabels": InvoicingV2InvoicesPost201ResponseInvoiceInformationCustomLabels,
    "InvoicingV2InvoicesPost201ResponseOrderInformation": InvoicingV2InvoicesPost201ResponseOrderInformation,
    "InvoicingV2InvoicesPost201ResponseOrderInformationAmountDetails": InvoicingV2InvoicesPost201ResponseOrderInformationAmountDetails,
    "InvoicingV2InvoicesPost202Response": InvoicingV2InvoicesPost202Response,
    "InvoicingV2InvoicesPublish200Response": InvoicingV2InvoicesPublish200Response,
    "InvoicingV2InvoicesPut200Response": InvoicingV2InvoicesPut200Response,
    "InvoicingV2InvoicesSend200Response": InvoicingV2InvoicesSend200Response,
    "Invoicingv2invoiceSettingsInvoiceSettingsInformation": Invoicingv2invoiceSettingsInvoiceSettingsInformation,
    "Invoicingv2invoicesClientReferenceInformation": Invoicingv2invoicesClientReferenceInformation,
    "Invoicingv2invoicesClientReferenceInformationPartner": Invoicingv2invoicesClientReferenceInformationPartner,
    "Invoicingv2invoicesCustomerInformation": Invoicingv2invoicesCustomerInformation,
    "Invoicingv2invoicesCustomerInformationCompany": Invoicingv2invoicesCustomerInformationCompany,
    "Invoicingv2invoicesInvoiceInformation": Invoicingv2invoicesInvoiceInformation,
    "Invoicingv2invoicesOrderInformation": Invoicingv2invoicesOrderInformation,
    "Invoicingv2invoicesOrderInformationAmountDetails": Invoicingv2invoicesOrderInformationAmountDetails,
    "Invoicingv2invoicesOrderInformationAmountDetailsFreight": Invoicingv2invoicesOrderInformationAmountDetailsFreight,
    "Invoicingv2invoicesOrderInformationAmountDetailsTaxDetails": Invoicingv2invoicesOrderInformationAmountDetailsTaxDetails,
    "Invoicingv2invoicesOrderInformationLineItems": Invoicingv2invoicesOrderInformationLineItems,
    "Invoicingv2invoicesProcessingInformation": Invoicingv2invoicesProcessingInformation,
    "Invoicingv2invoicesidInvoiceInformation": Invoicingv2invoicesidInvoiceInformation,
    "Iplv2paymentlinksOrderInformation": Iplv2paymentlinksOrderInformation,
    "Iplv2paymentlinksOrderInformationAmountDetails": Iplv2paymentlinksOrderInformationAmountDetails,
    "Iplv2paymentlinksOrderInformationLineItems": Iplv2paymentlinksOrderInformationLineItems,
    "Iplv2paymentlinksProcessingInformation": Iplv2paymentlinksProcessingInformation,
    "Iplv2paymentlinksPurchaseInformation": Iplv2paymentlinksPurchaseInformation,
    "Iplv2paymentlinksidOrderInformation": Iplv2paymentlinksidOrderInformation,
    "Iplv2paymentlinksidProcessingInformation": Iplv2paymentlinksidProcessingInformation,
    "Iplv2paymentlinksidPurchaseInformation": Iplv2paymentlinksidPurchaseInformation,
    "Kmsegressv2keysasymClientReferenceInformation": Kmsegressv2keysasymClientReferenceInformation,
    "Kmsegressv2keysasymKeyInformation": Kmsegressv2keysasymKeyInformation,
    "Kmsegressv2keyssymClientReferenceInformation": Kmsegressv2keyssymClientReferenceInformation,
    "Kmsegressv2keyssymKeyInformation": Kmsegressv2keyssymKeyInformation,
    "MerchantInitiatedTransactionObject": MerchantInitiatedTransactionObject,
    "Microformv2sessionsTransientTokenResponseOptions": Microformv2sessionsTransientTokenResponseOptions,
    "MitReversalRequest": MitReversalRequest,
    "MitVoidRequest": MitVoidRequest,
    "ModifyBillingAgreement": ModifyBillingAgreement,
    "NetworkTokenEnrollment": NetworkTokenEnrollment,
    "NetworkTokenServicesEnablement": NetworkTokenServicesEnablement,
    "NetworkTokenServicesEnablementMastercardDigitalEnablementService": NetworkTokenServicesEnablementMastercardDigitalEnablementService,
    "NetworkTokenServicesEnablementVisaTokenService": NetworkTokenServicesEnablementVisaTokenService,
    "Notificationsubscriptionsv2productsorganizationIdEventTypes": Notificationsubscriptionsv2productsorganizationIdEventTypes,
    "Notificationsubscriptionsv2webhooksProducts": Notificationsubscriptionsv2webhooksProducts,
    "Notificationsubscriptionsv2webhooksProducts1": Notificationsubscriptionsv2webhooksProducts1,
    "Notificationsubscriptionsv2webhooksRetryPolicy": Notificationsubscriptionsv2webhooksRetryPolicy,
    "Notificationsubscriptionsv2webhooksSecurityPolicy": Notificationsubscriptionsv2webhooksSecurityPolicy,
    "Notificationsubscriptionsv2webhooksSecurityPolicyConfig": Notificationsubscriptionsv2webhooksSecurityPolicyConfig,
    "Notificationsubscriptionsv2webhooksSecurityPolicyConfigAdditionalConfig": Notificationsubscriptionsv2webhooksSecurityPolicyConfigAdditionalConfig,
    "OctCreatePaymentRequest": OctCreatePaymentRequest,
    "OrderPaymentRequest": OrderPaymentRequest,
    "PatchCustomerPaymentInstrumentRequest": PatchCustomerPaymentInstrumentRequest,
    "PatchCustomerRequest": PatchCustomerRequest,
    "PatchCustomerShippingAddressRequest": PatchCustomerShippingAddressRequest,
    "PatchInstrumentIdentifierRequest": PatchInstrumentIdentifierRequest,
    "PatchPaymentInstrumentRequest": PatchPaymentInstrumentRequest,
    "PayerAuthConfig": PayerAuthConfig,
    "PayerAuthConfigCardTypes": PayerAuthConfigCardTypes,
    "PayerAuthConfigCardTypesCB": PayerAuthConfigCardTypesCB,
    "PayerAuthConfigCardTypesJCBJSecure": PayerAuthConfigCardTypesJCBJSecure,
    "PayerAuthConfigCardTypesVerifiedByVisa": PayerAuthConfigCardTypesVerifiedByVisa,
    "PayerAuthConfigCardTypesVerifiedByVisaCurrencies": PayerAuthConfigCardTypesVerifiedByVisaCurrencies,
    "PayerAuthSetupRequest": PayerAuthSetupRequest,
    "PaymentInstrumentList": PaymentInstrumentList,
    "PaymentInstrumentList1": PaymentInstrumentList1,
    "PaymentInstrumentList1Embedded": PaymentInstrumentList1Embedded,
    "PaymentInstrumentList1EmbeddedEmbedded": PaymentInstrumentList1EmbeddedEmbedded,
    "PaymentInstrumentList1EmbeddedPaymentInstruments": PaymentInstrumentList1EmbeddedPaymentInstruments,
    "PaymentInstrumentListEmbedded": PaymentInstrumentListEmbedded,
    "PaymentInstrumentListLinks": PaymentInstrumentListLinks,
    "PaymentInstrumentListLinksFirst": PaymentInstrumentListLinksFirst,
    "PaymentInstrumentListLinksLast": PaymentInstrumentListLinksLast,
    "PaymentInstrumentListLinksNext": PaymentInstrumentListLinksNext,
    "PaymentInstrumentListLinksPrev": PaymentInstrumentListLinksPrev,
    "PaymentInstrumentListLinksSelf": PaymentInstrumentListLinksSelf,
    "PaymentsProducts": PaymentsProducts,
    "PaymentsProductsAlternativePaymentMethods": PaymentsProductsAlternativePaymentMethods,
    "PaymentsProductsAlternativePaymentMethodsConfigurationInformation": PaymentsProductsAlternativePaymentMethodsConfigurationInformation,
    "PaymentsProductsAlternativePaymentMethodsConfigurationInformationConfigurations": PaymentsProductsAlternativePaymentMethodsConfigurationInformationConfigurations,
    "PaymentsProductsAlternativePaymentMethodsConfigurationInformationConfigurationsAdditionalConfigurations": PaymentsProductsAlternativePaymentMethodsConfigurationInformationConfigurationsAdditionalConfigurations,
    "PaymentsProductsAlternativePaymentMethodsConfigurationInformationConfigurationsPaymentMethods": PaymentsProductsAlternativePaymentMethodsConfigurationInformationConfigurationsPaymentMethods,
    "PaymentsProductsAlternativePaymentMethodsConfigurationInformationConfigurationsProcessors": PaymentsProductsAlternativePaymentMethodsConfigurationInformationConfigurationsProcessors,
    "PaymentsProductsAlternativePaymentMethodsSubscriptionInformation": PaymentsProductsAlternativePaymentMethodsSubscriptionInformation,
    "PaymentsProductsCardPresentConnect": PaymentsProductsCardPresentConnect,
    "PaymentsProductsCardPresentConnectConfigurationInformation": PaymentsProductsCardPresentConnectConfigurationInformation,
    "PaymentsProductsCardPresentConnectConfigurationInformationConfigurations": PaymentsProductsCardPresentConnectConfigurationInformationConfigurations,
    "PaymentsProductsCardPresentConnectSubscriptionInformation": PaymentsProductsCardPresentConnectSubscriptionInformation,
    "PaymentsProductsCardProcessing": PaymentsProductsCardProcessing,
    "PaymentsProductsCardProcessingConfigurationInformation": PaymentsProductsCardProcessingConfigurationInformation,
    "PaymentsProductsCardProcessingSubscriptionInformation": PaymentsProductsCardProcessingSubscriptionInformation,
    "PaymentsProductsCardProcessingSubscriptionInformationFeatures": PaymentsProductsCardProcessingSubscriptionInformationFeatures,
    "PaymentsProductsCurrencyConversion": PaymentsProductsCurrencyConversion,
    "PaymentsProductsCurrencyConversionConfigurationInformation": PaymentsProductsCurrencyConversionConfigurationInformation,
    "PaymentsProductsCurrencyConversionConfigurationInformationConfigurations": PaymentsProductsCurrencyConversionConfigurationInformationConfigurations,
    "PaymentsProductsCurrencyConversionConfigurationInformationConfigurationsProcessors": PaymentsProductsCurrencyConversionConfigurationInformationConfigurationsProcessors,
    "PaymentsProductsCybsReadyTerminal": PaymentsProductsCybsReadyTerminal,
    "PaymentsProductsDifferentialFee": PaymentsProductsDifferentialFee,
    "PaymentsProductsDifferentialFeeSubscriptionInformation": PaymentsProductsDifferentialFeeSubscriptionInformation,
    "PaymentsProductsDifferentialFeeSubscriptionInformationFeatures": PaymentsProductsDifferentialFeeSubscriptionInformationFeatures,
    "PaymentsProductsDifferentialFeeSubscriptionInformationFeaturesSurcharge": PaymentsProductsDifferentialFeeSubscriptionInformationFeaturesSurcharge,
    "PaymentsProductsDigitalPayments": PaymentsProductsDigitalPayments,
    "PaymentsProductsDigitalPaymentsSubscriptionInformation": PaymentsProductsDigitalPaymentsSubscriptionInformation,
    "PaymentsProductsDigitalPaymentsSubscriptionInformationFeatures": PaymentsProductsDigitalPaymentsSubscriptionInformationFeatures,
    "PaymentsProductsECheck": PaymentsProductsECheck,
    "PaymentsProductsECheckConfigurationInformation": PaymentsProductsECheckConfigurationInformation,
    "PaymentsProductsECheckSubscriptionInformation": PaymentsProductsECheckSubscriptionInformation,
    "PaymentsProductsPayerAuthentication": PaymentsProductsPayerAuthentication,
    "PaymentsProductsPayerAuthenticationConfigurationInformation": PaymentsProductsPayerAuthenticationConfigurationInformation,
    "PaymentsProductsPayouts": PaymentsProductsPayouts,
    "PaymentsProductsPayoutsConfigurationInformation": PaymentsProductsPayoutsConfigurationInformation,
    "PaymentsProductsPayoutsConfigurationInformationConfigurations": PaymentsProductsPayoutsConfigurationInformationConfigurations,
    "PaymentsProductsPayoutsConfigurationInformationConfigurationsProcessorAccount": PaymentsProductsPayoutsConfigurationInformationConfigurationsProcessorAccount,
    "PaymentsProductsPayoutsConfigurationInformationConfigurationsPullfunds": PaymentsProductsPayoutsConfigurationInformationConfigurationsPullfunds,
    "PaymentsProductsPayoutsConfigurationInformationConfigurationsPushfunds": PaymentsProductsPayoutsConfigurationInformationConfigurationsPushfunds,
    "PaymentsProductsSecureAcceptance": PaymentsProductsSecureAcceptance,
    "PaymentsProductsSecureAcceptanceConfigurationInformation": PaymentsProductsSecureAcceptanceConfigurationInformation,
    "PaymentsProductsServiceFee": PaymentsProductsServiceFee,
    "PaymentsProductsServiceFeeConfigurationInformation": PaymentsProductsServiceFeeConfigurationInformation,
    "PaymentsProductsServiceFeeConfigurationInformationConfigurations": PaymentsProductsServiceFeeConfigurationInformationConfigurations,
    "PaymentsProductsServiceFeeConfigurationInformationConfigurationsMerchantInformation": PaymentsProductsServiceFeeConfigurationInformationConfigurationsMerchantInformation,
    "PaymentsProductsServiceFeeConfigurationInformationConfigurationsPaymentInformation": PaymentsProductsServiceFeeConfigurationInformationConfigurationsPaymentInformation,
    "PaymentsProductsServiceFeeConfigurationInformationConfigurationsProducts": PaymentsProductsServiceFeeConfigurationInformationConfigurationsProducts,
    "PaymentsProductsTax": PaymentsProductsTax,
    "PaymentsProductsUnifiedCheckout": PaymentsProductsUnifiedCheckout,
    "PaymentsProductsUnifiedCheckoutConfigurationInformation": PaymentsProductsUnifiedCheckoutConfigurationInformation,
    "PaymentsProductsUnifiedCheckoutConfigurationInformationConfigurations": PaymentsProductsUnifiedCheckoutConfigurationInformationConfigurations,
    "PaymentsProductsUnifiedCheckoutConfigurationInformationConfigurationsFeatures": PaymentsProductsUnifiedCheckoutConfigurationInformationConfigurationsFeatures,
    "PaymentsProductsUnifiedCheckoutConfigurationInformationConfigurationsFeaturesPaze": PaymentsProductsUnifiedCheckoutConfigurationInformationConfigurationsFeaturesPaze,
    "PaymentsProductsUnifiedCheckoutSubscriptionInformation": PaymentsProductsUnifiedCheckoutSubscriptionInformation,
    "PaymentsProductsUnifiedCheckoutSubscriptionInformationFeatures": PaymentsProductsUnifiedCheckoutSubscriptionInformationFeatures,
    "PaymentsProductsUnifiedCheckoutSubscriptionInformationFeaturesPazeForUnifiedCheckout": PaymentsProductsUnifiedCheckoutSubscriptionInformationFeaturesPazeForUnifiedCheckout,
    "PaymentsProductsVirtualTerminal": PaymentsProductsVirtualTerminal,
    "PaymentsProductsVirtualTerminalConfigurationInformation": PaymentsProductsVirtualTerminalConfigurationInformation,
    "PaymentsStrongAuthIssuerInformation": PaymentsStrongAuthIssuerInformation,
    "PblPaymentLinksAllGet200Response": PblPaymentLinksAllGet200Response,
    "PblPaymentLinksAllGet200ResponseLinks": PblPaymentLinksAllGet200ResponseLinks,
    "PblPaymentLinksAllGet200ResponseOrderInformation": PblPaymentLinksAllGet200ResponseOrderInformation,
    "PblPaymentLinksAllGet200ResponseOrderInformationAmountDetails": PblPaymentLinksAllGet200ResponseOrderInformationAmountDetails,
    "PblPaymentLinksAllGet200ResponseOrderInformationLineItems": PblPaymentLinksAllGet200ResponseOrderInformationLineItems,
    "PblPaymentLinksAllGet200ResponseProcessingInformation": PblPaymentLinksAllGet200ResponseProcessingInformation,
    "PblPaymentLinksAllGet200ResponsePurchaseInformation": PblPaymentLinksAllGet200ResponsePurchaseInformation,
    "PblPaymentLinksAllGet400Response": PblPaymentLinksAllGet400Response,
    "PblPaymentLinksAllGet404Response": PblPaymentLinksAllGet404Response,
    "PblPaymentLinksGet200Response": PblPaymentLinksGet200Response,
    "PblPaymentLinksPost201Response": PblPaymentLinksPost201Response,
    "PblPaymentLinksPost201ResponseLinks": PblPaymentLinksPost201ResponseLinks,
    "PblPaymentLinksPost201ResponseOrderInformation": PblPaymentLinksPost201ResponseOrderInformation,
    "PblPaymentLinksPost201ResponsePurchaseInformation": PblPaymentLinksPost201ResponsePurchaseInformation,
    "PostCustomerPaymentInstrumentRequest": PostCustomerPaymentInstrumentRequest,
    "PostCustomerRequest": PostCustomerRequest,
    "PostCustomerShippingAddressRequest": PostCustomerShippingAddressRequest,
    "PostDeviceSearchRequestV3": PostDeviceSearchRequestV3,
    "PostInstrumentIdentifierEnrollmentRequest": PostInstrumentIdentifierEnrollmentRequest,
    "PostInstrumentIdentifierRequest": PostInstrumentIdentifierRequest,
    "PostPaymentCredentialsRequest": PostPaymentCredentialsRequest,
    "PostPaymentInstrumentRequest": PostPaymentInstrumentRequest,
    "PostRegistrationBody": PostRegistrationBody,
    "PredefinedSubscriptionRequestBean": PredefinedSubscriptionRequestBean,
    "PtsV1TransactionBatchesGet200Response": PtsV1TransactionBatchesGet200Response,
    "PtsV1TransactionBatchesGet200ResponseLinks": PtsV1TransactionBatchesGet200ResponseLinks,
    "PtsV1TransactionBatchesGet200ResponseLinksSelf": PtsV1TransactionBatchesGet200ResponseLinksSelf,
    "PtsV1TransactionBatchesGet200ResponseTransactionBatches": PtsV1TransactionBatchesGet200ResponseTransactionBatches,
    "PtsV1TransactionBatchesGet400Response": PtsV1TransactionBatchesGet400Response,
    "PtsV1TransactionBatchesGet400ResponseErrorInformation": PtsV1TransactionBatchesGet400ResponseErrorInformation,
    "PtsV1TransactionBatchesGet400ResponseErrorInformationDetails": PtsV1TransactionBatchesGet400ResponseErrorInformationDetails,
    "PtsV1TransactionBatchesGet500Response": PtsV1TransactionBatchesGet500Response,
    "PtsV1TransactionBatchesGet500ResponseErrorInformation": PtsV1TransactionBatchesGet500ResponseErrorInformation,
    "PtsV1TransactionBatchesIdGet200Response": PtsV1TransactionBatchesIdGet200Response,
    "PtsV1TransactionBatchesIdGet200ResponseLinks": PtsV1TransactionBatchesIdGet200ResponseLinks,
    "PtsV1TransactionBatchesIdGet200ResponseLinksTransactions": PtsV1TransactionBatchesIdGet200ResponseLinksTransactions,
    "PtsV2CreateBillingAgreementPost201Response": PtsV2CreateBillingAgreementPost201Response,
    "PtsV2CreateBillingAgreementPost201ResponseAgreementInformation": PtsV2CreateBillingAgreementPost201ResponseAgreementInformation,
    "PtsV2CreateBillingAgreementPost201ResponseClientReferenceInformation": PtsV2CreateBillingAgreementPost201ResponseClientReferenceInformation,
    "PtsV2CreateBillingAgreementPost201ResponseInstallmentInformation": PtsV2CreateBillingAgreementPost201ResponseInstallmentInformation,
    "PtsV2CreateBillingAgreementPost201ResponseLinks": PtsV2CreateBillingAgreementPost201ResponseLinks,
    "PtsV2CreateBillingAgreementPost201ResponseProcessorInformation": PtsV2CreateBillingAgreementPost201ResponseProcessorInformation,
    "PtsV2CreateBillingAgreementPost201ResponseRiskInformation": PtsV2CreateBillingAgreementPost201ResponseRiskInformation,
    "PtsV2CreateBillingAgreementPost201ResponseRiskInformationProcessorResults": PtsV2CreateBillingAgreementPost201ResponseRiskInformationProcessorResults,
    "PtsV2CreateBillingAgreementPost400Response": PtsV2CreateBillingAgreementPost400Response,
    "PtsV2CreateBillingAgreementPost502Response": PtsV2CreateBillingAgreementPost502Response,
    "PtsV2CreateOrderPost201Response": PtsV2CreateOrderPost201Response,
    "PtsV2CreateOrderPost201ResponseBuyerInformation": PtsV2CreateOrderPost201ResponseBuyerInformation,
    "PtsV2CreateOrderPost201ResponseProcessorInformation": PtsV2CreateOrderPost201ResponseProcessorInformation,
    "PtsV2CreateOrderPost400Response": PtsV2CreateOrderPost400Response,
    "PtsV2CreditsPost201Response": PtsV2CreditsPost201Response,
    "PtsV2CreditsPost201Response1": PtsV2CreditsPost201Response1,
    "PtsV2CreditsPost201Response1ProcessorInformation": PtsV2CreditsPost201Response1ProcessorInformation,
    "PtsV2CreditsPost201ResponseCreditAmountDetails": PtsV2CreditsPost201ResponseCreditAmountDetails,
    "PtsV2CreditsPost201ResponsePaymentInformation": PtsV2CreditsPost201ResponsePaymentInformation,
    "PtsV2CreditsPost201ResponseProcessingInformation": PtsV2CreditsPost201ResponseProcessingInformation,
    "PtsV2CreditsPost201ResponseProcessingInformationBankTransferOptions": PtsV2CreditsPost201ResponseProcessingInformationBankTransferOptions,
    "PtsV2IncrementalAuthorizationPatch201Response": PtsV2IncrementalAuthorizationPatch201Response,
    "PtsV2IncrementalAuthorizationPatch201ResponseClientReferenceInformation": PtsV2IncrementalAuthorizationPatch201ResponseClientReferenceInformation,
    "PtsV2IncrementalAuthorizationPatch201ResponseErrorInformation": PtsV2IncrementalAuthorizationPatch201ResponseErrorInformation,
    "PtsV2IncrementalAuthorizationPatch201ResponseLinks": PtsV2IncrementalAuthorizationPatch201ResponseLinks,
    "PtsV2IncrementalAuthorizationPatch201ResponseOrderInformation": PtsV2IncrementalAuthorizationPatch201ResponseOrderInformation,
    "PtsV2IncrementalAuthorizationPatch201ResponseOrderInformationInvoiceDetails": PtsV2IncrementalAuthorizationPatch201ResponseOrderInformationInvoiceDetails,
    "PtsV2IncrementalAuthorizationPatch201ResponsePaymentInformation": PtsV2IncrementalAuthorizationPatch201ResponsePaymentInformation,
    "PtsV2IncrementalAuthorizationPatch201ResponsePaymentInformationAccountFeatures": PtsV2IncrementalAuthorizationPatch201ResponsePaymentInformationAccountFeatures,
    "PtsV2IncrementalAuthorizationPatch201ResponseProcessorInformation": PtsV2IncrementalAuthorizationPatch201ResponseProcessorInformation,
    "PtsV2IncrementalAuthorizationPatch400Response": PtsV2IncrementalAuthorizationPatch400Response,
    "PtsV2ModifyBillingAgreementPost201Response": PtsV2ModifyBillingAgreementPost201Response,
    "PtsV2ModifyBillingAgreementPost201ResponseAgreementInformation": PtsV2ModifyBillingAgreementPost201ResponseAgreementInformation,
    "PtsV2ModifyBillingAgreementPost201ResponseLinks": PtsV2ModifyBillingAgreementPost201ResponseLinks,
    "PtsV2ModifyBillingAgreementPost201ResponseOrderInformation": PtsV2ModifyBillingAgreementPost201ResponseOrderInformation,
    "PtsV2ModifyBillingAgreementPost201ResponseOrderInformationBillTo": PtsV2ModifyBillingAgreementPost201ResponseOrderInformationBillTo,
    "PtsV2ModifyBillingAgreementPost201ResponseOrderInformationShipTo": PtsV2ModifyBillingAgreementPost201ResponseOrderInformationShipTo,
    "PtsV2ModifyBillingAgreementPost201ResponsePaymentInformation": PtsV2ModifyBillingAgreementPost201ResponsePaymentInformation,
    "PtsV2ModifyBillingAgreementPost201ResponsePaymentInformationBank": PtsV2ModifyBillingAgreementPost201ResponsePaymentInformationBank,
    "PtsV2ModifyBillingAgreementPost201ResponsePaymentInformationEWallet": PtsV2ModifyBillingAgreementPost201ResponsePaymentInformationEWallet,
    "PtsV2PaymentsCapturesPost201Response": PtsV2PaymentsCapturesPost201Response,
    "PtsV2PaymentsCapturesPost201ResponseEmbeddedActions": PtsV2PaymentsCapturesPost201ResponseEmbeddedActions,
    "PtsV2PaymentsCapturesPost201ResponseEmbeddedActionsApCapture": PtsV2PaymentsCapturesPost201ResponseEmbeddedActionsApCapture,
    "PtsV2PaymentsCapturesPost201ResponseLinks": PtsV2PaymentsCapturesPost201ResponseLinks,
    "PtsV2PaymentsCapturesPost201ResponseOrderInformation": PtsV2PaymentsCapturesPost201ResponseOrderInformation,
    "PtsV2PaymentsCapturesPost201ResponseOrderInformationAmountDetails": PtsV2PaymentsCapturesPost201ResponseOrderInformationAmountDetails,
    "PtsV2PaymentsCapturesPost201ResponseOrderInformationInvoiceDetails": PtsV2PaymentsCapturesPost201ResponseOrderInformationInvoiceDetails,
    "PtsV2PaymentsCapturesPost201ResponsePointOfSaleInformation": PtsV2PaymentsCapturesPost201ResponsePointOfSaleInformation,
    "PtsV2PaymentsCapturesPost201ResponseProcessingInformation": PtsV2PaymentsCapturesPost201ResponseProcessingInformation,
    "PtsV2PaymentsCapturesPost201ResponseProcessorInformation": PtsV2PaymentsCapturesPost201ResponseProcessorInformation,
    "PtsV2PaymentsCapturesPost400Response": PtsV2PaymentsCapturesPost400Response,
    "PtsV2PaymentsOrderPost201Response": PtsV2PaymentsOrderPost201Response,
    "PtsV2PaymentsOrderPost201ResponseBuyerInformation": PtsV2PaymentsOrderPost201ResponseBuyerInformation,
    "PtsV2PaymentsOrderPost201ResponseBuyerInformationPersonalIdentification": PtsV2PaymentsOrderPost201ResponseBuyerInformationPersonalIdentification,
    "PtsV2PaymentsOrderPost201ResponseOrderInformation": PtsV2PaymentsOrderPost201ResponseOrderInformation,
    "PtsV2PaymentsOrderPost201ResponseOrderInformationAmountDetails": PtsV2PaymentsOrderPost201ResponseOrderInformationAmountDetails,
    "PtsV2PaymentsOrderPost201ResponseOrderInformationBillTo": PtsV2PaymentsOrderPost201ResponseOrderInformationBillTo,
    "PtsV2PaymentsOrderPost201ResponseOrderInformationShipTo": PtsV2PaymentsOrderPost201ResponseOrderInformationShipTo,
    "PtsV2PaymentsOrderPost201ResponseOrderInformationShippingDetails": PtsV2PaymentsOrderPost201ResponseOrderInformationShippingDetails,
    "PtsV2PaymentsOrderPost201ResponsePaymentInformation": PtsV2PaymentsOrderPost201ResponsePaymentInformation,
    "PtsV2PaymentsOrderPost201ResponsePaymentInformationEWallet": PtsV2PaymentsOrderPost201ResponsePaymentInformationEWallet,
    "PtsV2PaymentsOrderPost201ResponseProcessingInformation": PtsV2PaymentsOrderPost201ResponseProcessingInformation,
    "PtsV2PaymentsOrderPost201ResponseProcessorInformation": PtsV2PaymentsOrderPost201ResponseProcessorInformation,
    "PtsV2PaymentsOrderPost201ResponseProcessorInformationSellerProtection": PtsV2PaymentsOrderPost201ResponseProcessorInformationSellerProtection,
    "PtsV2PaymentsPost201Response": PtsV2PaymentsPost201Response,
    "PtsV2PaymentsPost201Response1": PtsV2PaymentsPost201Response1,
    "PtsV2PaymentsPost201Response1ErrorInformation": PtsV2PaymentsPost201Response1ErrorInformation,
    "PtsV2PaymentsPost201Response1ErrorInformationDetails": PtsV2PaymentsPost201Response1ErrorInformationDetails,
    "PtsV2PaymentsPost201Response1IssuerInformation": PtsV2PaymentsPost201Response1IssuerInformation,
    "PtsV2PaymentsPost201Response1OrderInformation": PtsV2PaymentsPost201Response1OrderInformation,
    "PtsV2PaymentsPost201Response1OrderInformationAmountDetails": PtsV2PaymentsPost201Response1OrderInformationAmountDetails,
    "PtsV2PaymentsPost201Response1OrderInformationBillTo": PtsV2PaymentsPost201Response1OrderInformationBillTo,
    "PtsV2PaymentsPost201Response1OrderInformationShipTo": PtsV2PaymentsPost201Response1OrderInformationShipTo,
    "PtsV2PaymentsPost201Response1PaymentInformation": PtsV2PaymentsPost201Response1PaymentInformation,
    "PtsV2PaymentsPost201Response1PaymentInformationBank": PtsV2PaymentsPost201Response1PaymentInformationBank,
    "PtsV2PaymentsPost201Response1PaymentInformationBankAccount": PtsV2PaymentsPost201Response1PaymentInformationBankAccount,
    "PtsV2PaymentsPost201Response1PaymentInformationEWallet": PtsV2PaymentsPost201Response1PaymentInformationEWallet,
    "PtsV2PaymentsPost201Response1PaymentInformationPaymentType": PtsV2PaymentsPost201Response1PaymentInformationPaymentType,
    "PtsV2PaymentsPost201Response1PaymentInformationPaymentTypeMethod": PtsV2PaymentsPost201Response1PaymentInformationPaymentTypeMethod,
    "PtsV2PaymentsPost201Response1ProcessorInformation": PtsV2PaymentsPost201Response1ProcessorInformation,
    "PtsV2PaymentsPost201Response1ProcessorInformationAvs": PtsV2PaymentsPost201Response1ProcessorInformationAvs,
    "PtsV2PaymentsPost201Response2": PtsV2PaymentsPost201Response2,
    "PtsV2PaymentsPost201Response2OrderInformation": PtsV2PaymentsPost201Response2OrderInformation,
    "PtsV2PaymentsPost201Response2OrderInformationAmountDetails": PtsV2PaymentsPost201Response2OrderInformationAmountDetails,
    "PtsV2PaymentsPost201Response2PaymentInformation": PtsV2PaymentsPost201Response2PaymentInformation,
    "PtsV2PaymentsPost201Response2PaymentInformationEWallet": PtsV2PaymentsPost201Response2PaymentInformationEWallet,
    "PtsV2PaymentsPost201Response2ProcessorInformation": PtsV2PaymentsPost201Response2ProcessorInformation,
    "PtsV2PaymentsPost201ResponseBuyerInformation": PtsV2PaymentsPost201ResponseBuyerInformation,
    "PtsV2PaymentsPost201ResponseClientReferenceInformation": PtsV2PaymentsPost201ResponseClientReferenceInformation,
    "PtsV2PaymentsPost201ResponseConsumerAuthenticationInformation": PtsV2PaymentsPost201ResponseConsumerAuthenticationInformation,
    "PtsV2PaymentsPost201ResponseConsumerAuthenticationInformationIvr": PtsV2PaymentsPost201ResponseConsumerAuthenticationInformationIvr,
    "PtsV2PaymentsPost201ResponseConsumerAuthenticationInformationStrongAuthentication": PtsV2PaymentsPost201ResponseConsumerAuthenticationInformationStrongAuthentication,
    "PtsV2PaymentsPost201ResponseEmbeddedActions": PtsV2PaymentsPost201ResponseEmbeddedActions,
    "PtsV2PaymentsPost201ResponseEmbeddedActionsCAPTURE": PtsV2PaymentsPost201ResponseEmbeddedActionsCAPTURE,
    "PtsV2PaymentsPost201ResponseEmbeddedActionsCONSUMERAUTHENTICATION": PtsV2PaymentsPost201ResponseEmbeddedActionsCONSUMERAUTHENTICATION,
    "PtsV2PaymentsPost201ResponseEmbeddedActionsDECISION": PtsV2PaymentsPost201ResponseEmbeddedActionsDECISION,
    "PtsV2PaymentsPost201ResponseEmbeddedActionsTOKENCREATE": PtsV2PaymentsPost201ResponseEmbeddedActionsTOKENCREATE,
    "PtsV2PaymentsPost201ResponseEmbeddedActionsTOKENUPDATE": PtsV2PaymentsPost201ResponseEmbeddedActionsTOKENUPDATE,
    "PtsV2PaymentsPost201ResponseEmbeddedActionsWATCHLISTSCREENING": PtsV2PaymentsPost201ResponseEmbeddedActionsWATCHLISTSCREENING,
    "PtsV2PaymentsPost201ResponseErrorInformation": PtsV2PaymentsPost201ResponseErrorInformation,
    "PtsV2PaymentsPost201ResponseErrorInformationDetails": PtsV2PaymentsPost201ResponseErrorInformationDetails,
    "PtsV2PaymentsPost201ResponseInstallmentInformation": PtsV2PaymentsPost201ResponseInstallmentInformation,
    "PtsV2PaymentsPost201ResponseIssuerInformation": PtsV2PaymentsPost201ResponseIssuerInformation,
    "PtsV2PaymentsPost201ResponseLinks": PtsV2PaymentsPost201ResponseLinks,
    "PtsV2PaymentsPost201ResponseLinksSelf": PtsV2PaymentsPost201ResponseLinksSelf,
    "PtsV2PaymentsPost201ResponseMerchantInformation": PtsV2PaymentsPost201ResponseMerchantInformation,
    "PtsV2PaymentsPost201ResponseMerchantInformationMerchantDescriptor": PtsV2PaymentsPost201ResponseMerchantInformationMerchantDescriptor,
    "PtsV2PaymentsPost201ResponseOrderInformation": PtsV2PaymentsPost201ResponseOrderInformation,
    "PtsV2PaymentsPost201ResponseOrderInformationAmountDetails": PtsV2PaymentsPost201ResponseOrderInformationAmountDetails,
    "PtsV2PaymentsPost201ResponseOrderInformationBillTo": PtsV2PaymentsPost201ResponseOrderInformationBillTo,
    "PtsV2PaymentsPost201ResponseOrderInformationInvoiceDetails": PtsV2PaymentsPost201ResponseOrderInformationInvoiceDetails,
    "PtsV2PaymentsPost201ResponseOrderInformationRewardPointsDetails": PtsV2PaymentsPost201ResponseOrderInformationRewardPointsDetails,
    "PtsV2PaymentsPost201ResponseOrderInformationShipTo": PtsV2PaymentsPost201ResponseOrderInformationShipTo,
    "PtsV2PaymentsPost201ResponsePaymentAccountInformation": PtsV2PaymentsPost201ResponsePaymentAccountInformation,
    "PtsV2PaymentsPost201ResponsePaymentAccountInformationCard": PtsV2PaymentsPost201ResponsePaymentAccountInformationCard,
    "PtsV2PaymentsPost201ResponsePaymentInformation": PtsV2PaymentsPost201ResponsePaymentInformation,
    "PtsV2PaymentsPost201ResponsePaymentInformationAccountFeatures": PtsV2PaymentsPost201ResponsePaymentInformationAccountFeatures,
    "PtsV2PaymentsPost201ResponsePaymentInformationAccountFeaturesBalances": PtsV2PaymentsPost201ResponsePaymentInformationAccountFeaturesBalances,
    "PtsV2PaymentsPost201ResponsePaymentInformationBank": PtsV2PaymentsPost201ResponsePaymentInformationBank,
    "PtsV2PaymentsPost201ResponsePaymentInformationBankAccount": PtsV2PaymentsPost201ResponsePaymentInformationBankAccount,
    "PtsV2PaymentsPost201ResponsePaymentInformationEWallet": PtsV2PaymentsPost201ResponsePaymentInformationEWallet,
    "PtsV2PaymentsPost201ResponsePaymentInformationInstrumentIdentifier": PtsV2PaymentsPost201ResponsePaymentInformationInstrumentIdentifier,
    "PtsV2PaymentsPost201ResponsePaymentInformationTokenizedCard": PtsV2PaymentsPost201ResponsePaymentInformationTokenizedCard,
    "PtsV2PaymentsPost201ResponsePaymentInformationTokenizedPaymentMethod": PtsV2PaymentsPost201ResponsePaymentInformationTokenizedPaymentMethod,
    "PtsV2PaymentsPost201ResponsePaymentInsightsInformation": PtsV2PaymentsPost201ResponsePaymentInsightsInformation,
    "PtsV2PaymentsPost201ResponsePaymentInsightsInformationOrchestration": PtsV2PaymentsPost201ResponsePaymentInsightsInformationOrchestration,
    "PtsV2PaymentsPost201ResponsePaymentInsightsInformationResponseInsights": PtsV2PaymentsPost201ResponsePaymentInsightsInformationResponseInsights,
    "PtsV2PaymentsPost201ResponsePointOfSaleInformation": PtsV2PaymentsPost201ResponsePointOfSaleInformation,
    "PtsV2PaymentsPost201ResponsePointOfSaleInformationEmv": PtsV2PaymentsPost201ResponsePointOfSaleInformationEmv,
    "PtsV2PaymentsPost201ResponseProcessingInformation": PtsV2PaymentsPost201ResponseProcessingInformation,
    "PtsV2PaymentsPost201ResponseProcessingInformationAuthorizationOptions": PtsV2PaymentsPost201ResponseProcessingInformationAuthorizationOptions,
    "PtsV2PaymentsPost201ResponseProcessingInformationBankTransferOptions": PtsV2PaymentsPost201ResponseProcessingInformationBankTransferOptions,
    "PtsV2PaymentsPost201ResponseProcessingInformationCaptureOptions": PtsV2PaymentsPost201ResponseProcessingInformationCaptureOptions,
    "PtsV2PaymentsPost201ResponseProcessingInformationPurchaseOptions": PtsV2PaymentsPost201ResponseProcessingInformationPurchaseOptions,
    "PtsV2PaymentsPost201ResponseProcessorInformation": PtsV2PaymentsPost201ResponseProcessorInformation,
    "PtsV2PaymentsPost201ResponseProcessorInformationAchVerification": PtsV2PaymentsPost201ResponseProcessorInformationAchVerification,
    "PtsV2PaymentsPost201ResponseProcessorInformationAvs": PtsV2PaymentsPost201ResponseProcessorInformationAvs,
    "PtsV2PaymentsPost201ResponseProcessorInformationCardVerification": PtsV2PaymentsPost201ResponseProcessorInformationCardVerification,
    "PtsV2PaymentsPost201ResponseProcessorInformationConsumerAuthenticationResponse": PtsV2PaymentsPost201ResponseProcessorInformationConsumerAuthenticationResponse,
    "PtsV2PaymentsPost201ResponseProcessorInformationCustomer": PtsV2PaymentsPost201ResponseProcessorInformationCustomer,
    "PtsV2PaymentsPost201ResponseProcessorInformationElectronicVerificationResults": PtsV2PaymentsPost201ResponseProcessorInformationElectronicVerificationResults,
    "PtsV2PaymentsPost201ResponseProcessorInformationMerchantAdvice": PtsV2PaymentsPost201ResponseProcessorInformationMerchantAdvice,
    "PtsV2PaymentsPost201ResponseProcessorInformationRouting": PtsV2PaymentsPost201ResponseProcessorInformationRouting,
    "PtsV2PaymentsPost201ResponseProcessorInformationSellerProtection": PtsV2PaymentsPost201ResponseProcessorInformationSellerProtection,
    "PtsV2PaymentsPost201ResponseRiskInformation": PtsV2PaymentsPost201ResponseRiskInformation,
    "PtsV2PaymentsPost201ResponseRiskInformationInfoCodes": PtsV2PaymentsPost201ResponseRiskInformationInfoCodes,
    "PtsV2PaymentsPost201ResponseRiskInformationIpAddress": PtsV2PaymentsPost201ResponseRiskInformationIpAddress,
    "PtsV2PaymentsPost201ResponseRiskInformationProcessorResults": PtsV2PaymentsPost201ResponseRiskInformationProcessorResults,
    "PtsV2PaymentsPost201ResponseRiskInformationProfile": PtsV2PaymentsPost201ResponseRiskInformationProfile,
    "PtsV2PaymentsPost201ResponseRiskInformationRules": PtsV2PaymentsPost201ResponseRiskInformationRules,
    "PtsV2PaymentsPost201ResponseRiskInformationScore": PtsV2PaymentsPost201ResponseRiskInformationScore,
    "PtsV2PaymentsPost201ResponseRiskInformationTravel": PtsV2PaymentsPost201ResponseRiskInformationTravel,
    "PtsV2PaymentsPost201ResponseRiskInformationTravelActualFinalDestination": PtsV2PaymentsPost201ResponseRiskInformationTravelActualFinalDestination,
    "PtsV2PaymentsPost201ResponseRiskInformationTravelFirstDeparture": PtsV2PaymentsPost201ResponseRiskInformationTravelFirstDeparture,
    "PtsV2PaymentsPost201ResponseRiskInformationTravelFirstDestination": PtsV2PaymentsPost201ResponseRiskInformationTravelFirstDestination,
    "PtsV2PaymentsPost201ResponseRiskInformationTravelLastDestination": PtsV2PaymentsPost201ResponseRiskInformationTravelLastDestination,
    "PtsV2PaymentsPost201ResponseRiskInformationVelocity": PtsV2PaymentsPost201ResponseRiskInformationVelocity,
    "PtsV2PaymentsPost201ResponseRiskInformationVelocityMorphing": PtsV2PaymentsPost201ResponseRiskInformationVelocityMorphing,
    "PtsV2PaymentsPost201ResponseTokenInformation": PtsV2PaymentsPost201ResponseTokenInformation,
    "PtsV2PaymentsPost201ResponseTokenInformationCustomer": PtsV2PaymentsPost201ResponseTokenInformationCustomer,
    "PtsV2PaymentsPost201ResponseTokenInformationInstrumentIdentifier": PtsV2PaymentsPost201ResponseTokenInformationInstrumentIdentifier,
    "PtsV2PaymentsPost201ResponseTokenInformationPaymentInstrument": PtsV2PaymentsPost201ResponseTokenInformationPaymentInstrument,
    "PtsV2PaymentsPost201ResponseTokenInformationShippingAddress": PtsV2PaymentsPost201ResponseTokenInformationShippingAddress,
    "PtsV2PaymentsPost201ResponseWatchlistScreeningInformation": PtsV2PaymentsPost201ResponseWatchlistScreeningInformation,
    "PtsV2PaymentsPost201ResponseWatchlistScreeningInformationWatchList": PtsV2PaymentsPost201ResponseWatchlistScreeningInformationWatchList,
    "PtsV2PaymentsPost201ResponseWatchlistScreeningInformationWatchListMatches": PtsV2PaymentsPost201ResponseWatchlistScreeningInformationWatchListMatches,
    "PtsV2PaymentsPost400Response": PtsV2PaymentsPost400Response,
    "PtsV2PaymentsPost502Response": PtsV2PaymentsPost502Response,
    "PtsV2PaymentsRefundPost201Response": PtsV2PaymentsRefundPost201Response,
    "PtsV2PaymentsRefundPost201ResponseClientReferenceInformation": PtsV2PaymentsRefundPost201ResponseClientReferenceInformation,
    "PtsV2PaymentsRefundPost201ResponseLinks": PtsV2PaymentsRefundPost201ResponseLinks,
    "PtsV2PaymentsRefundPost201ResponseOrderInformation": PtsV2PaymentsRefundPost201ResponseOrderInformation,
    "PtsV2PaymentsRefundPost201ResponseOrderInformationAmountDetails": PtsV2PaymentsRefundPost201ResponseOrderInformationAmountDetails,
    "PtsV2PaymentsRefundPost201ResponseProcessorInformation": PtsV2PaymentsRefundPost201ResponseProcessorInformation,
    "PtsV2PaymentsRefundPost201ResponseRefundAmountDetails": PtsV2PaymentsRefundPost201ResponseRefundAmountDetails,
    "PtsV2PaymentsRefundPost400Response": PtsV2PaymentsRefundPost400Response,
    "PtsV2PaymentsReversalsPost201Response": PtsV2PaymentsReversalsPost201Response,
    "PtsV2PaymentsReversalsPost201ResponseAuthorizationInformation": PtsV2PaymentsReversalsPost201ResponseAuthorizationInformation,
    "PtsV2PaymentsReversalsPost201ResponseIssuerInformation": PtsV2PaymentsReversalsPost201ResponseIssuerInformation,
    "PtsV2PaymentsReversalsPost201ResponseProcessorInformation": PtsV2PaymentsReversalsPost201ResponseProcessorInformation,
    "PtsV2PaymentsReversalsPost201ResponseReversalAmountDetails": PtsV2PaymentsReversalsPost201ResponseReversalAmountDetails,
    "PtsV2PaymentsReversalsPost400Response": PtsV2PaymentsReversalsPost400Response,
    "PtsV2PaymentsVoidsPost201Response": PtsV2PaymentsVoidsPost201Response,
    "PtsV2PaymentsVoidsPost201ResponseProcessorInformation": PtsV2PaymentsVoidsPost201ResponseProcessorInformation,
    "PtsV2PaymentsVoidsPost201ResponseVoidAmountDetails": PtsV2PaymentsVoidsPost201ResponseVoidAmountDetails,
    "PtsV2PaymentsVoidsPost400Response": PtsV2PaymentsVoidsPost400Response,
    "PtsV2PayoutsPost201Response": PtsV2PayoutsPost201Response,
    "PtsV2PayoutsPost201ResponseErrorInformation": PtsV2PayoutsPost201ResponseErrorInformation,
    "PtsV2PayoutsPost201ResponseIssuerInformation": PtsV2PayoutsPost201ResponseIssuerInformation,
    "PtsV2PayoutsPost201ResponseMerchantInformation": PtsV2PayoutsPost201ResponseMerchantInformation,
    "PtsV2PayoutsPost201ResponseMerchantInformationMerchantDescriptor": PtsV2PayoutsPost201ResponseMerchantInformationMerchantDescriptor,
    "PtsV2PayoutsPost201ResponseOrderInformation": PtsV2PayoutsPost201ResponseOrderInformation,
    "PtsV2PayoutsPost201ResponseOrderInformationAmountDetails": PtsV2PayoutsPost201ResponseOrderInformationAmountDetails,
    "PtsV2PayoutsPost201ResponseProcessingInformation": PtsV2PayoutsPost201ResponseProcessingInformation,
    "PtsV2PayoutsPost201ResponseProcessorInformation": PtsV2PayoutsPost201ResponseProcessorInformation,
    "PtsV2PayoutsPost201ResponseRecipientInformation": PtsV2PayoutsPost201ResponseRecipientInformation,
    "PtsV2PayoutsPost201ResponseRecipientInformationCard": PtsV2PayoutsPost201ResponseRecipientInformationCard,
    "PtsV2PayoutsPost400Response": PtsV2PayoutsPost400Response,
    "PtsV2RetrievePaymentTokenGet400Response": PtsV2RetrievePaymentTokenGet400Response,
    "PtsV2RetrievePaymentTokenGet502Response": PtsV2RetrievePaymentTokenGet502Response,
    "PtsV2UpdateOrderPatch201Response": PtsV2UpdateOrderPatch201Response,
    "Ptsv2billingagreementsAggregatorInformation": Ptsv2billingagreementsAggregatorInformation,
    "Ptsv2billingagreementsAgreementInformation": Ptsv2billingagreementsAgreementInformation,
    "Ptsv2billingagreementsBuyerInformation": Ptsv2billingagreementsBuyerInformation,
    "Ptsv2billingagreementsClientReferenceInformation": Ptsv2billingagreementsClientReferenceInformation,
    "Ptsv2billingagreementsConsumerAuthenticationInformation": Ptsv2billingagreementsConsumerAuthenticationInformation,
    "Ptsv2billingagreementsDeviceInformation": Ptsv2billingagreementsDeviceInformation,
    "Ptsv2billingagreementsInstallmentInformation": Ptsv2billingagreementsInstallmentInformation,
    "Ptsv2billingagreementsMerchantInformation": Ptsv2billingagreementsMerchantInformation,
    "Ptsv2billingagreementsMerchantInformationMerchantDescriptor": Ptsv2billingagreementsMerchantInformationMerchantDescriptor,
    "Ptsv2billingagreementsOrderInformation": Ptsv2billingagreementsOrderInformation,
    "Ptsv2billingagreementsOrderInformationBillTo": Ptsv2billingagreementsOrderInformationBillTo,
    "Ptsv2billingagreementsPaymentInformation": Ptsv2billingagreementsPaymentInformation,
    "Ptsv2billingagreementsPaymentInformationBank": Ptsv2billingagreementsPaymentInformationBank,
    "Ptsv2billingagreementsPaymentInformationBankAccount": Ptsv2billingagreementsPaymentInformationBankAccount,
    "Ptsv2billingagreementsPaymentInformationCard": Ptsv2billingagreementsPaymentInformationCard,
    "Ptsv2billingagreementsPaymentInformationPaymentType": Ptsv2billingagreementsPaymentInformationPaymentType,
    "Ptsv2billingagreementsPaymentInformationPaymentTypeMethod": Ptsv2billingagreementsPaymentInformationPaymentTypeMethod,
    "Ptsv2billingagreementsPaymentInformationTokenizedCard": Ptsv2billingagreementsPaymentInformationTokenizedCard,
    "Ptsv2billingagreementsProcessingInformation": Ptsv2billingagreementsProcessingInformation,
    "Ptsv2billingagreementsidAgreementInformation": Ptsv2billingagreementsidAgreementInformation,
    "Ptsv2billingagreementsidBuyerInformation": Ptsv2billingagreementsidBuyerInformation,
    "Ptsv2billingagreementsidProcessingInformation": Ptsv2billingagreementsidProcessingInformation,
    "Ptsv2creditsInstallmentInformation": Ptsv2creditsInstallmentInformation,
    "Ptsv2creditsProcessingInformation": Ptsv2creditsProcessingInformation,
    "Ptsv2creditsProcessingInformationBankTransferOptions": Ptsv2creditsProcessingInformationBankTransferOptions,
    "Ptsv2creditsProcessingInformationElectronicBenefitsTransfer": Ptsv2creditsProcessingInformationElectronicBenefitsTransfer,
    "Ptsv2creditsProcessingInformationJapanPaymentOptions": Ptsv2creditsProcessingInformationJapanPaymentOptions,
    "Ptsv2creditsProcessingInformationPurchaseOptions": Ptsv2creditsProcessingInformationPurchaseOptions,
    "Ptsv2creditsProcessingInformationRefundOptions": Ptsv2creditsProcessingInformationRefundOptions,
    "Ptsv2creditsRecipientInformation": Ptsv2creditsRecipientInformation,
    "Ptsv2creditsSenderInformation": Ptsv2creditsSenderInformation,
    "Ptsv2creditsSenderInformationAccount": Ptsv2creditsSenderInformationAccount,
    "Ptsv2intentsClientReferenceInformation": Ptsv2intentsClientReferenceInformation,
    "Ptsv2intentsEventInformation": Ptsv2intentsEventInformation,
    "Ptsv2intentsMerchantInformation": Ptsv2intentsMerchantInformation,
    "Ptsv2intentsMerchantInformationMerchantDescriptor": Ptsv2intentsMerchantInformationMerchantDescriptor,
    "Ptsv2intentsOrderInformation": Ptsv2intentsOrderInformation,
    "Ptsv2intentsOrderInformationAmountDetails": Ptsv2intentsOrderInformationAmountDetails,
    "Ptsv2intentsOrderInformationBillTo": Ptsv2intentsOrderInformationBillTo,
    "Ptsv2intentsOrderInformationInvoiceDetails": Ptsv2intentsOrderInformationInvoiceDetails,
    "Ptsv2intentsOrderInformationLineItems": Ptsv2intentsOrderInformationLineItems,
    "Ptsv2intentsOrderInformationShipTo": Ptsv2intentsOrderInformationShipTo,
    "Ptsv2intentsPaymentInformation": Ptsv2intentsPaymentInformation,
    "Ptsv2intentsPaymentInformationEWallet": Ptsv2intentsPaymentInformationEWallet,
    "Ptsv2intentsPaymentInformationPaymentType": Ptsv2intentsPaymentInformationPaymentType,
    "Ptsv2intentsPaymentInformationPaymentTypeMethod": Ptsv2intentsPaymentInformationPaymentTypeMethod,
    "Ptsv2intentsPaymentInformationTokenizedPaymentMethod": Ptsv2intentsPaymentInformationTokenizedPaymentMethod,
    "Ptsv2intentsProcessingInformation": Ptsv2intentsProcessingInformation,
    "Ptsv2intentsProcessingInformationAuthorizationOptions": Ptsv2intentsProcessingInformationAuthorizationOptions,
    "Ptsv2intentsRecipientInformation": Ptsv2intentsRecipientInformation,
    "Ptsv2intentsSenderInformation": Ptsv2intentsSenderInformation,
    "Ptsv2intentsSenderInformationAccount": Ptsv2intentsSenderInformationAccount,
    "Ptsv2intentsTravelInformation": Ptsv2intentsTravelInformation,
    "Ptsv2intentsTravelInformationAgency": Ptsv2intentsTravelInformationAgency,
    "Ptsv2intentsidMerchantInformation": Ptsv2intentsidMerchantInformation,
    "Ptsv2intentsidOrderInformation": Ptsv2intentsidOrderInformation,
    "Ptsv2intentsidPaymentInformation": Ptsv2intentsidPaymentInformation,
    "Ptsv2intentsidProcessingInformation": Ptsv2intentsidProcessingInformation,
    "Ptsv2paymentreferencesAgreementInformation": Ptsv2paymentreferencesAgreementInformation,
    "Ptsv2paymentreferencesBuyerInformation": Ptsv2paymentreferencesBuyerInformation,
    "Ptsv2paymentreferencesDeviceInformation": Ptsv2paymentreferencesDeviceInformation,
    "Ptsv2paymentreferencesMerchantInformation": Ptsv2paymentreferencesMerchantInformation,
    "Ptsv2paymentreferencesOrderInformation": Ptsv2paymentreferencesOrderInformation,
    "Ptsv2paymentreferencesOrderInformationAmountDetails": Ptsv2paymentreferencesOrderInformationAmountDetails,
    "Ptsv2paymentreferencesOrderInformationBillTo": Ptsv2paymentreferencesOrderInformationBillTo,
    "Ptsv2paymentreferencesOrderInformationInvoiceDetails": Ptsv2paymentreferencesOrderInformationInvoiceDetails,
    "Ptsv2paymentreferencesOrderInformationLineItems": Ptsv2paymentreferencesOrderInformationLineItems,
    "Ptsv2paymentreferencesOrderInformationShipTo": Ptsv2paymentreferencesOrderInformationShipTo,
    "Ptsv2paymentreferencesPaymentInformation": Ptsv2paymentreferencesPaymentInformation,
    "Ptsv2paymentreferencesPaymentInformationBank": Ptsv2paymentreferencesPaymentInformationBank,
    "Ptsv2paymentreferencesPaymentInformationBankAccount": Ptsv2paymentreferencesPaymentInformationBankAccount,
    "Ptsv2paymentreferencesPaymentInformationCard": Ptsv2paymentreferencesPaymentInformationCard,
    "Ptsv2paymentreferencesPaymentInformationEWallet": Ptsv2paymentreferencesPaymentInformationEWallet,
    "Ptsv2paymentreferencesPaymentInformationOptions": Ptsv2paymentreferencesPaymentInformationOptions,
    "Ptsv2paymentreferencesProcessingInformation": Ptsv2paymentreferencesProcessingInformation,
    "Ptsv2paymentreferencesTravelInformation": Ptsv2paymentreferencesTravelInformation,
    "Ptsv2paymentreferencesTravelInformationAutoRental": Ptsv2paymentreferencesTravelInformationAutoRental,
    "Ptsv2paymentreferencesUserInterface": Ptsv2paymentreferencesUserInterface,
    "Ptsv2paymentreferencesUserInterfaceColor": Ptsv2paymentreferencesUserInterfaceColor,
    "Ptsv2paymentreferencesidintentsOrderInformation": Ptsv2paymentreferencesidintentsOrderInformation,
    "Ptsv2paymentreferencesidintentsPaymentInformation": Ptsv2paymentreferencesidintentsPaymentInformation,
    "Ptsv2paymentreferencesidintentsPaymentInformationEWallet": Ptsv2paymentreferencesidintentsPaymentInformationEWallet,
    "Ptsv2paymentreferencesidintentsProcessingInformation": Ptsv2paymentreferencesidintentsProcessingInformation,
    "Ptsv2paymentsAcquirerInformation": Ptsv2paymentsAcquirerInformation,
    "Ptsv2paymentsAggregatorInformation": Ptsv2paymentsAggregatorInformation,
    "Ptsv2paymentsAggregatorInformationSubMerchant": Ptsv2paymentsAggregatorInformationSubMerchant,
    "Ptsv2paymentsAgreementInformation": Ptsv2paymentsAgreementInformation,
    "Ptsv2paymentsBuyerInformation": Ptsv2paymentsBuyerInformation,
    "Ptsv2paymentsBuyerInformationPersonalIdentification": Ptsv2paymentsBuyerInformationPersonalIdentification,
    "Ptsv2paymentsClientReferenceInformation": Ptsv2paymentsClientReferenceInformation,
    "Ptsv2paymentsClientReferenceInformationPartner": Ptsv2paymentsClientReferenceInformationPartner,
    "Ptsv2paymentsConsumerAuthenticationInformation": Ptsv2paymentsConsumerAuthenticationInformation,
    "Ptsv2paymentsConsumerAuthenticationInformationStrongAuthentication": Ptsv2paymentsConsumerAuthenticationInformationStrongAuthentication,
    "Ptsv2paymentsConsumerAuthenticationInformationStrongAuthenticationIssuerInformation": Ptsv2paymentsConsumerAuthenticationInformationStrongAuthenticationIssuerInformation,
    "Ptsv2paymentsDeviceInformation": Ptsv2paymentsDeviceInformation,
    "Ptsv2paymentsDeviceInformationRawData": Ptsv2paymentsDeviceInformationRawData,
    "Ptsv2paymentsHealthCareInformation": Ptsv2paymentsHealthCareInformation,
    "Ptsv2paymentsHealthCareInformationAmountDetails": Ptsv2paymentsHealthCareInformationAmountDetails,
    "Ptsv2paymentsHostedPaymentInformation": Ptsv2paymentsHostedPaymentInformation,
    "Ptsv2paymentsHostedPaymentInformationUserAgent": Ptsv2paymentsHostedPaymentInformationUserAgent,
    "Ptsv2paymentsInstallmentInformation": Ptsv2paymentsInstallmentInformation,
    "Ptsv2paymentsInvoiceDetails": Ptsv2paymentsInvoiceDetails,
    "Ptsv2paymentsIssuerInformation": Ptsv2paymentsIssuerInformation,
    "Ptsv2paymentsMerchantDefinedInformation": Ptsv2paymentsMerchantDefinedInformation,
    "Ptsv2paymentsMerchantDefinedSecureInformation": Ptsv2paymentsMerchantDefinedSecureInformation,
    "Ptsv2paymentsMerchantInformation": Ptsv2paymentsMerchantInformation,
    "Ptsv2paymentsMerchantInformationMerchantDescriptor": Ptsv2paymentsMerchantInformationMerchantDescriptor,
    "Ptsv2paymentsMerchantInformationServiceFeeDescriptor": Ptsv2paymentsMerchantInformationServiceFeeDescriptor,
    "Ptsv2paymentsMerchantInformationServiceLocation": Ptsv2paymentsMerchantInformationServiceLocation,
    "Ptsv2paymentsOrderInformation": Ptsv2paymentsOrderInformation,
    "Ptsv2paymentsOrderInformationAmountDetails": Ptsv2paymentsOrderInformationAmountDetails,
    "Ptsv2paymentsOrderInformationAmountDetailsAmexAdditionalAmounts": Ptsv2paymentsOrderInformationAmountDetailsAmexAdditionalAmounts,
    "Ptsv2paymentsOrderInformationAmountDetailsCurrencyConversion": Ptsv2paymentsOrderInformationAmountDetailsCurrencyConversion,
    "Ptsv2paymentsOrderInformationAmountDetailsOctsurcharge": Ptsv2paymentsOrderInformationAmountDetailsOctsurcharge,
    "Ptsv2paymentsOrderInformationAmountDetailsOrder": Ptsv2paymentsOrderInformationAmountDetailsOrder,
    "Ptsv2paymentsOrderInformationAmountDetailsSurcharge": Ptsv2paymentsOrderInformationAmountDetailsSurcharge,
    "Ptsv2paymentsOrderInformationAmountDetailsTaxDetails": Ptsv2paymentsOrderInformationAmountDetailsTaxDetails,
    "Ptsv2paymentsOrderInformationBillTo": Ptsv2paymentsOrderInformationBillTo,
    "Ptsv2paymentsOrderInformationBillToCompany": Ptsv2paymentsOrderInformationBillToCompany,
    "Ptsv2paymentsOrderInformationInvoiceDetails": Ptsv2paymentsOrderInformationInvoiceDetails,
    "Ptsv2paymentsOrderInformationInvoiceDetailsTransactionAdviceAddendum": Ptsv2paymentsOrderInformationInvoiceDetailsTransactionAdviceAddendum,
    "Ptsv2paymentsOrderInformationLineItems": Ptsv2paymentsOrderInformationLineItems,
    "Ptsv2paymentsOrderInformationPassenger": Ptsv2paymentsOrderInformationPassenger,
    "Ptsv2paymentsOrderInformationShipTo": Ptsv2paymentsOrderInformationShipTo,
    "Ptsv2paymentsOrderInformationShippingDetails": Ptsv2paymentsOrderInformationShippingDetails,
    "Ptsv2paymentsPaymentInformation": Ptsv2paymentsPaymentInformation,
    "Ptsv2paymentsPaymentInformationBank": Ptsv2paymentsPaymentInformationBank,
    "Ptsv2paymentsPaymentInformationBankAccount": Ptsv2paymentsPaymentInformationBankAccount,
    "Ptsv2paymentsPaymentInformationCard": Ptsv2paymentsPaymentInformationCard,
    "Ptsv2paymentsPaymentInformationCustomer": Ptsv2paymentsPaymentInformationCustomer,
    "Ptsv2paymentsPaymentInformationDirectDebit": Ptsv2paymentsPaymentInformationDirectDebit,
    "Ptsv2paymentsPaymentInformationDirectDebitMandate": Ptsv2paymentsPaymentInformationDirectDebitMandate,
    "Ptsv2paymentsPaymentInformationEWallet": Ptsv2paymentsPaymentInformationEWallet,
    "Ptsv2paymentsPaymentInformationFluidData": Ptsv2paymentsPaymentInformationFluidData,
    "Ptsv2paymentsPaymentInformationInstrumentIdentifier": Ptsv2paymentsPaymentInformationInstrumentIdentifier,
    "Ptsv2paymentsPaymentInformationLegacyToken": Ptsv2paymentsPaymentInformationLegacyToken,
    "Ptsv2paymentsPaymentInformationOptions": Ptsv2paymentsPaymentInformationOptions,
    "Ptsv2paymentsPaymentInformationPaymentAccountReference": Ptsv2paymentsPaymentInformationPaymentAccountReference,
    "Ptsv2paymentsPaymentInformationPaymentInstrument": Ptsv2paymentsPaymentInformationPaymentInstrument,
    "Ptsv2paymentsPaymentInformationPaymentType": Ptsv2paymentsPaymentInformationPaymentType,
    "Ptsv2paymentsPaymentInformationPaymentTypeMethod": Ptsv2paymentsPaymentInformationPaymentTypeMethod,
    "Ptsv2paymentsPaymentInformationSepa": Ptsv2paymentsPaymentInformationSepa,
    "Ptsv2paymentsPaymentInformationSepaDirectDebit": Ptsv2paymentsPaymentInformationSepaDirectDebit,
    "Ptsv2paymentsPaymentInformationShippingAddress": Ptsv2paymentsPaymentInformationShippingAddress,
    "Ptsv2paymentsPaymentInformationTokenizedCard": Ptsv2paymentsPaymentInformationTokenizedCard,
    "Ptsv2paymentsPaymentInformationTokenizedPaymentMethod": Ptsv2paymentsPaymentInformationTokenizedPaymentMethod,
    "Ptsv2paymentsPointOfSaleInformation": Ptsv2paymentsPointOfSaleInformation,
    "Ptsv2paymentsPointOfSaleInformationEmv": Ptsv2paymentsPointOfSaleInformationEmv,
    "Ptsv2paymentsProcessingInformation": Ptsv2paymentsProcessingInformation,
    "Ptsv2paymentsProcessingInformationAuthorizationOptions": Ptsv2paymentsProcessingInformationAuthorizationOptions,
    "Ptsv2paymentsProcessingInformationAuthorizationOptionsInitiator": Ptsv2paymentsProcessingInformationAuthorizationOptionsInitiator,
    "Ptsv2paymentsProcessingInformationAuthorizationOptionsInitiatorMerchantInitiatedTransaction": Ptsv2paymentsProcessingInformationAuthorizationOptionsInitiatorMerchantInitiatedTransaction,
    "Ptsv2paymentsProcessingInformationBankTransferOptions": Ptsv2paymentsProcessingInformationBankTransferOptions,
    "Ptsv2paymentsProcessingInformationCaptureOptions": Ptsv2paymentsProcessingInformationCaptureOptions,
    "Ptsv2paymentsProcessingInformationElectronicBenefitsTransfer": Ptsv2paymentsProcessingInformationElectronicBenefitsTransfer,
    "Ptsv2paymentsProcessingInformationJapanPaymentOptions": Ptsv2paymentsProcessingInformationJapanPaymentOptions,
    "Ptsv2paymentsProcessingInformationJapanPaymentOptionsBonuses": Ptsv2paymentsProcessingInformationJapanPaymentOptionsBonuses,
    "Ptsv2paymentsProcessingInformationLoanOptions": Ptsv2paymentsProcessingInformationLoanOptions,
    "Ptsv2paymentsProcessingInformationPurchaseOptions": Ptsv2paymentsProcessingInformationPurchaseOptions,
    "Ptsv2paymentsProcessingInformationRecurringOptions": Ptsv2paymentsProcessingInformationRecurringOptions,
    "Ptsv2paymentsProcessorInformation": Ptsv2paymentsProcessorInformation,
    "Ptsv2paymentsProcessorInformationAuthorizationOptions": Ptsv2paymentsProcessorInformationAuthorizationOptions,
    "Ptsv2paymentsProcessorInformationReversal": Ptsv2paymentsProcessorInformationReversal,
    "Ptsv2paymentsPromotionInformation": Ptsv2paymentsPromotionInformation,
    "Ptsv2paymentsRecipientInformation": Ptsv2paymentsRecipientInformation,
    "Ptsv2paymentsRecurringPaymentInformation": Ptsv2paymentsRecurringPaymentInformation,
    "Ptsv2paymentsRiskInformation": Ptsv2paymentsRiskInformation,
    "Ptsv2paymentsRiskInformationAuxiliaryData": Ptsv2paymentsRiskInformationAuxiliaryData,
    "Ptsv2paymentsRiskInformationBuyerHistory": Ptsv2paymentsRiskInformationBuyerHistory,
    "Ptsv2paymentsRiskInformationBuyerHistoryAccountHistory": Ptsv2paymentsRiskInformationBuyerHistoryAccountHistory,
    "Ptsv2paymentsRiskInformationBuyerHistoryCustomerAccount": Ptsv2paymentsRiskInformationBuyerHistoryCustomerAccount,
    "Ptsv2paymentsRiskInformationProfile": Ptsv2paymentsRiskInformationProfile,
    "Ptsv2paymentsSenderInformation": Ptsv2paymentsSenderInformation,
    "Ptsv2paymentsSenderInformationAccount": Ptsv2paymentsSenderInformationAccount,
    "Ptsv2paymentsTokenInformation": Ptsv2paymentsTokenInformation,
    "Ptsv2paymentsTokenInformationPaymentInstrument": Ptsv2paymentsTokenInformationPaymentInstrument,
    "Ptsv2paymentsTokenInformationShippingAddress": Ptsv2paymentsTokenInformationShippingAddress,
    "Ptsv2paymentsTokenInformationTokenProvisioningInformation": Ptsv2paymentsTokenInformationTokenProvisioningInformation,
    "Ptsv2paymentsTravelInformation": Ptsv2paymentsTravelInformation,
    "Ptsv2paymentsTravelInformationAgency": Ptsv2paymentsTravelInformationAgency,
    "Ptsv2paymentsTravelInformationAutoRental": Ptsv2paymentsTravelInformationAutoRental,
    "Ptsv2paymentsTravelInformationAutoRentalRentalAddress": Ptsv2paymentsTravelInformationAutoRentalRentalAddress,
    "Ptsv2paymentsTravelInformationAutoRentalReturnAddress": Ptsv2paymentsTravelInformationAutoRentalReturnAddress,
    "Ptsv2paymentsTravelInformationAutoRentalTaxDetails": Ptsv2paymentsTravelInformationAutoRentalTaxDetails,
    "Ptsv2paymentsTravelInformationLodging": Ptsv2paymentsTravelInformationLodging,
    "Ptsv2paymentsTravelInformationLodgingRoom": Ptsv2paymentsTravelInformationLodgingRoom,
    "Ptsv2paymentsTravelInformationTransit": Ptsv2paymentsTravelInformationTransit,
    "Ptsv2paymentsTravelInformationTransitAirline": Ptsv2paymentsTravelInformationTransitAirline,
    "Ptsv2paymentsTravelInformationTransitAirlineAncillaryInformation": Ptsv2paymentsTravelInformationTransitAirlineAncillaryInformation,
    "Ptsv2paymentsTravelInformationTransitAirlineAncillaryInformationService": Ptsv2paymentsTravelInformationTransitAirlineAncillaryInformationService,
    "Ptsv2paymentsTravelInformationTransitAirlineLegs": Ptsv2paymentsTravelInformationTransitAirlineLegs,
    "Ptsv2paymentsTravelInformationTransitAirlineTicketIssuer": Ptsv2paymentsTravelInformationTransitAirlineTicketIssuer,
    "Ptsv2paymentsTravelInformationVehicleData": Ptsv2paymentsTravelInformationVehicleData,
    "Ptsv2paymentsUnscheduledPaymentInformation": Ptsv2paymentsUnscheduledPaymentInformation,
    "Ptsv2paymentsWatchlistScreeningInformation": Ptsv2paymentsWatchlistScreeningInformation,
    "Ptsv2paymentsWatchlistScreeningInformationWeights": Ptsv2paymentsWatchlistScreeningInformationWeights,
    "Ptsv2paymentsidClientReferenceInformation": Ptsv2paymentsidClientReferenceInformation,
    "Ptsv2paymentsidClientReferenceInformationPartner": Ptsv2paymentsidClientReferenceInformationPartner,
    "Ptsv2paymentsidMerchantInformation": Ptsv2paymentsidMerchantInformation,
    "Ptsv2paymentsidOrderInformation": Ptsv2paymentsidOrderInformation,
    "Ptsv2paymentsidOrderInformationAmountDetails": Ptsv2paymentsidOrderInformationAmountDetails,
    "Ptsv2paymentsidProcessingInformation": Ptsv2paymentsidProcessingInformation,
    "Ptsv2paymentsidProcessingInformationAuthorizationOptions": Ptsv2paymentsidProcessingInformationAuthorizationOptions,
    "Ptsv2paymentsidProcessingInformationAuthorizationOptionsInitiator": Ptsv2paymentsidProcessingInformationAuthorizationOptionsInitiator,
    "Ptsv2paymentsidTravelInformation": Ptsv2paymentsidTravelInformation,
    "Ptsv2paymentsidcapturesAggregatorInformation": Ptsv2paymentsidcapturesAggregatorInformation,
    "Ptsv2paymentsidcapturesAggregatorInformationSubMerchant": Ptsv2paymentsidcapturesAggregatorInformationSubMerchant,
    "Ptsv2paymentsidcapturesBuyerInformation": Ptsv2paymentsidcapturesBuyerInformation,
    "Ptsv2paymentsidcapturesBuyerInformationPersonalIdentification": Ptsv2paymentsidcapturesBuyerInformationPersonalIdentification,
    "Ptsv2paymentsidcapturesDeviceInformation": Ptsv2paymentsidcapturesDeviceInformation,
    "Ptsv2paymentsidcapturesInstallmentInformation": Ptsv2paymentsidcapturesInstallmentInformation,
    "Ptsv2paymentsidcapturesMerchantInformation": Ptsv2paymentsidcapturesMerchantInformation,
    "Ptsv2paymentsidcapturesOrderInformation": Ptsv2paymentsidcapturesOrderInformation,
    "Ptsv2paymentsidcapturesOrderInformationAmountDetails": Ptsv2paymentsidcapturesOrderInformationAmountDetails,
    "Ptsv2paymentsidcapturesOrderInformationBillTo": Ptsv2paymentsidcapturesOrderInformationBillTo,
    "Ptsv2paymentsidcapturesOrderInformationInvoiceDetails": Ptsv2paymentsidcapturesOrderInformationInvoiceDetails,
    "Ptsv2paymentsidcapturesOrderInformationShipTo": Ptsv2paymentsidcapturesOrderInformationShipTo,
    "Ptsv2paymentsidcapturesOrderInformationShippingDetails": Ptsv2paymentsidcapturesOrderInformationShippingDetails,
    "Ptsv2paymentsidcapturesPaymentInformation": Ptsv2paymentsidcapturesPaymentInformation,
    "Ptsv2paymentsidcapturesPaymentInformationCard": Ptsv2paymentsidcapturesPaymentInformationCard,
    "Ptsv2paymentsidcapturesPaymentInformationPaymentType": Ptsv2paymentsidcapturesPaymentInformationPaymentType,
    "Ptsv2paymentsidcapturesPaymentInformationPaymentTypeMethod": Ptsv2paymentsidcapturesPaymentInformationPaymentTypeMethod,
    "Ptsv2paymentsidcapturesPointOfSaleInformation": Ptsv2paymentsidcapturesPointOfSaleInformation,
    "Ptsv2paymentsidcapturesPointOfSaleInformationEmv": Ptsv2paymentsidcapturesPointOfSaleInformationEmv,
    "Ptsv2paymentsidcapturesProcessingInformation": Ptsv2paymentsidcapturesProcessingInformation,
    "Ptsv2paymentsidcapturesProcessingInformationAuthorizationOptions": Ptsv2paymentsidcapturesProcessingInformationAuthorizationOptions,
    "Ptsv2paymentsidcapturesProcessingInformationCaptureOptions": Ptsv2paymentsidcapturesProcessingInformationCaptureOptions,
    "Ptsv2paymentsidrefundsClientReferenceInformation": Ptsv2paymentsidrefundsClientReferenceInformation,
    "Ptsv2paymentsidrefundsMerchantInformation": Ptsv2paymentsidrefundsMerchantInformation,
    "Ptsv2paymentsidrefundsOrderInformation": Ptsv2paymentsidrefundsOrderInformation,
    "Ptsv2paymentsidrefundsOrderInformationLineItems": Ptsv2paymentsidrefundsOrderInformationLineItems,
    "Ptsv2paymentsidrefundsPaymentInformation": Ptsv2paymentsidrefundsPaymentInformation,
    "Ptsv2paymentsidrefundsPaymentInformationBank": Ptsv2paymentsidrefundsPaymentInformationBank,
    "Ptsv2paymentsidrefundsPaymentInformationBankAccount": Ptsv2paymentsidrefundsPaymentInformationBankAccount,
    "Ptsv2paymentsidrefundsPaymentInformationCard": Ptsv2paymentsidrefundsPaymentInformationCard,
    "Ptsv2paymentsidrefundsPaymentInformationEWallet": Ptsv2paymentsidrefundsPaymentInformationEWallet,
    "Ptsv2paymentsidrefundsPaymentInformationPaymentType": Ptsv2paymentsidrefundsPaymentInformationPaymentType,
    "Ptsv2paymentsidrefundsPointOfSaleInformation": Ptsv2paymentsidrefundsPointOfSaleInformation,
    "Ptsv2paymentsidrefundsProcessingInformation": Ptsv2paymentsidrefundsProcessingInformation,
    "Ptsv2paymentsidrefundsProcessingInformationRecurringOptions": Ptsv2paymentsidrefundsProcessingInformationRecurringOptions,
    "Ptsv2paymentsidrefundsProcessingInformationRefundOptions": Ptsv2paymentsidrefundsProcessingInformationRefundOptions,
    "Ptsv2paymentsidreversalsClientReferenceInformation": Ptsv2paymentsidreversalsClientReferenceInformation,
    "Ptsv2paymentsidreversalsClientReferenceInformationPartner": Ptsv2paymentsidreversalsClientReferenceInformationPartner,
    "Ptsv2paymentsidreversalsOrderInformation": Ptsv2paymentsidreversalsOrderInformation,
    "Ptsv2paymentsidreversalsOrderInformationAmountDetails": Ptsv2paymentsidreversalsOrderInformationAmountDetails,
    "Ptsv2paymentsidreversalsOrderInformationLineItems": Ptsv2paymentsidreversalsOrderInformationLineItems,
    "Ptsv2paymentsidreversalsPaymentInformation": Ptsv2paymentsidreversalsPaymentInformation,
    "Ptsv2paymentsidreversalsPaymentInformationPaymentType": Ptsv2paymentsidreversalsPaymentInformationPaymentType,
    "Ptsv2paymentsidreversalsPaymentInformationPaymentTypeMethod": Ptsv2paymentsidreversalsPaymentInformationPaymentTypeMethod,
    "Ptsv2paymentsidreversalsPointOfSaleInformation": Ptsv2paymentsidreversalsPointOfSaleInformation,
    "Ptsv2paymentsidreversalsPointOfSaleInformationEmv": Ptsv2paymentsidreversalsPointOfSaleInformationEmv,
    "Ptsv2paymentsidreversalsProcessingInformation": Ptsv2paymentsidreversalsProcessingInformation,
    "Ptsv2paymentsidreversalsReversalInformation": Ptsv2paymentsidreversalsReversalInformation,
    "Ptsv2paymentsidreversalsReversalInformationAmountDetails": Ptsv2paymentsidreversalsReversalInformationAmountDetails,
    "Ptsv2paymentsidvoidsAgreementInformation": Ptsv2paymentsidvoidsAgreementInformation,
    "Ptsv2paymentsidvoidsMerchantInformation": Ptsv2paymentsidvoidsMerchantInformation,
    "Ptsv2paymentsidvoidsOrderInformation": Ptsv2paymentsidvoidsOrderInformation,
    "Ptsv2paymentsidvoidsPaymentInformation": Ptsv2paymentsidvoidsPaymentInformation,
    "Ptsv2paymentsidvoidsProcessingInformation": Ptsv2paymentsidvoidsProcessingInformation,
    "Ptsv2paymenttokensPaymentInformation": Ptsv2paymenttokensPaymentInformation,
    "Ptsv2paymenttokensProcessingInformation": Ptsv2paymenttokensProcessingInformation,
    "Ptsv2payoutsAggregatorInformation": Ptsv2payoutsAggregatorInformation,
    "Ptsv2payoutsAggregatorInformationSubMerchant": Ptsv2payoutsAggregatorInformationSubMerchant,
    "Ptsv2payoutsClientReferenceInformation": Ptsv2payoutsClientReferenceInformation,
    "Ptsv2payoutsMerchantInformation": Ptsv2payoutsMerchantInformation,
    "Ptsv2payoutsMerchantInformationMerchantDescriptor": Ptsv2payoutsMerchantInformationMerchantDescriptor,
    "Ptsv2payoutsOrderInformation": Ptsv2payoutsOrderInformation,
    "Ptsv2payoutsOrderInformationAmountDetails": Ptsv2payoutsOrderInformationAmountDetails,
    "Ptsv2payoutsOrderInformationAmountDetailsSurcharge": Ptsv2payoutsOrderInformationAmountDetailsSurcharge,
    "Ptsv2payoutsOrderInformationBillTo": Ptsv2payoutsOrderInformationBillTo,
    "Ptsv2payoutsPaymentInformation": Ptsv2payoutsPaymentInformation,
    "Ptsv2payoutsPaymentInformationCard": Ptsv2payoutsPaymentInformationCard,
    "Ptsv2payoutsProcessingInformation": Ptsv2payoutsProcessingInformation,
    "Ptsv2payoutsProcessingInformationFundingOptions": Ptsv2payoutsProcessingInformationFundingOptions,
    "Ptsv2payoutsProcessingInformationFundingOptionsInitiator": Ptsv2payoutsProcessingInformationFundingOptionsInitiator,
    "Ptsv2payoutsProcessingInformationPayoutsOptions": Ptsv2payoutsProcessingInformationPayoutsOptions,
    "Ptsv2payoutsProcessingInformationPurchaseOptions": Ptsv2payoutsProcessingInformationPurchaseOptions,
    "Ptsv2payoutsRecipientInformation": Ptsv2payoutsRecipientInformation,
    "Ptsv2payoutsSenderInformation": Ptsv2payoutsSenderInformation,
    "Ptsv2payoutsSenderInformationAccount": Ptsv2payoutsSenderInformationAccount,
    "Ptsv2refreshpaymentstatusidAgreementInformation": Ptsv2refreshpaymentstatusidAgreementInformation,
    "Ptsv2refreshpaymentstatusidClientReferenceInformation": Ptsv2refreshpaymentstatusidClientReferenceInformation,
    "Ptsv2refreshpaymentstatusidPaymentInformation": Ptsv2refreshpaymentstatusidPaymentInformation,
    "Ptsv2refreshpaymentstatusidPaymentInformationCustomer": Ptsv2refreshpaymentstatusidPaymentInformationCustomer,
    "Ptsv2refreshpaymentstatusidPaymentInformationPaymentType": Ptsv2refreshpaymentstatusidPaymentInformationPaymentType,
    "Ptsv2refreshpaymentstatusidProcessingInformation": Ptsv2refreshpaymentstatusidProcessingInformation,
    "Ptsv2voidsProcessingInformation": Ptsv2voidsProcessingInformation,
    "Rbsv1plansClientReferenceInformation": Rbsv1plansClientReferenceInformation,
    "Rbsv1plansOrderInformation": Rbsv1plansOrderInformation,
    "Rbsv1plansOrderInformationAmountDetails": Rbsv1plansOrderInformationAmountDetails,
    "Rbsv1plansPlanInformation": Rbsv1plansPlanInformation,
    "Rbsv1plansPlanInformationBillingCycles": Rbsv1plansPlanInformationBillingCycles,
    "Rbsv1plansidPlanInformation": Rbsv1plansidPlanInformation,
    "Rbsv1plansidProcessingInformation": Rbsv1plansidProcessingInformation,
    "Rbsv1plansidProcessingInformationSubscriptionBillingOptions": Rbsv1plansidProcessingInformationSubscriptionBillingOptions,
    "Rbsv1subscriptionsClientReferenceInformation": Rbsv1subscriptionsClientReferenceInformation,
    "Rbsv1subscriptionsClientReferenceInformationPartner": Rbsv1subscriptionsClientReferenceInformationPartner,
    "Rbsv1subscriptionsPaymentInformation": Rbsv1subscriptionsPaymentInformation,
    "Rbsv1subscriptionsPaymentInformationCustomer": Rbsv1subscriptionsPaymentInformationCustomer,
    "Rbsv1subscriptionsPlanInformation": Rbsv1subscriptionsPlanInformation,
    "Rbsv1subscriptionsProcessingInformation": Rbsv1subscriptionsProcessingInformation,
    "Rbsv1subscriptionsProcessingInformationAuthorizationOptions": Rbsv1subscriptionsProcessingInformationAuthorizationOptions,
    "Rbsv1subscriptionsProcessingInformationAuthorizationOptionsInitiator": Rbsv1subscriptionsProcessingInformationAuthorizationOptionsInitiator,
    "Rbsv1subscriptionsSubscriptionInformation": Rbsv1subscriptionsSubscriptionInformation,
    "Rbsv1subscriptionsidOrderInformation": Rbsv1subscriptionsidOrderInformation,
    "Rbsv1subscriptionsidOrderInformationAmountDetails": Rbsv1subscriptionsidOrderInformationAmountDetails,
    "Rbsv1subscriptionsidPlanInformation": Rbsv1subscriptionsidPlanInformation,
    "Rbsv1subscriptionsidSubscriptionInformation": Rbsv1subscriptionsidSubscriptionInformation,
    "RefreshPaymentStatusRequest": RefreshPaymentStatusRequest,
    "RefundCaptureRequest": RefundCaptureRequest,
    "RefundPaymentRequest": RefundPaymentRequest,
    "ReportingV3ChargebackDetailsGet200Response": ReportingV3ChargebackDetailsGet200Response,
    "ReportingV3ChargebackDetailsGet200ResponseChargebackDetails": ReportingV3ChargebackDetailsGet200ResponseChargebackDetails,
    "ReportingV3ChargebackSummariesGet200Response": ReportingV3ChargebackSummariesGet200Response,
    "ReportingV3ChargebackSummariesGet200ResponseChargebackSummaries": ReportingV3ChargebackSummariesGet200ResponseChargebackSummaries,
    "ReportingV3ConversionDetailsGet200Response": ReportingV3ConversionDetailsGet200Response,
    "ReportingV3ConversionDetailsGet200ResponseConversionDetails": ReportingV3ConversionDetailsGet200ResponseConversionDetails,
    "ReportingV3ConversionDetailsGet200ResponseNotes": ReportingV3ConversionDetailsGet200ResponseNotes,
    "ReportingV3InterchangeClearingLevelDetailsGet200Response": ReportingV3InterchangeClearingLevelDetailsGet200Response,
    "ReportingV3InterchangeClearingLevelDetailsGet200ResponseInterchangeClearingLevelDetails": ReportingV3InterchangeClearingLevelDetailsGet200ResponseInterchangeClearingLevelDetails,
    "ReportingV3NetFundingsGet200Response": ReportingV3NetFundingsGet200Response,
    "ReportingV3NetFundingsGet200ResponseNetFundingSummaries": ReportingV3NetFundingsGet200ResponseNetFundingSummaries,
    "ReportingV3NetFundingsGet200ResponseTotalPurchases": ReportingV3NetFundingsGet200ResponseTotalPurchases,
    "ReportingV3NotificationofChangesGet200Response": ReportingV3NotificationofChangesGet200Response,
    "ReportingV3NotificationofChangesGet200ResponseNotificationOfChanges": ReportingV3NotificationofChangesGet200ResponseNotificationOfChanges,
    "ReportingV3PaymentBatchSummariesGet200Response": ReportingV3PaymentBatchSummariesGet200Response,
    "ReportingV3PaymentBatchSummariesGet200ResponsePaymentBatchSummaries": ReportingV3PaymentBatchSummariesGet200ResponsePaymentBatchSummaries,
    "ReportingV3PurchaseRefundDetailsGet200Response": ReportingV3PurchaseRefundDetailsGet200Response,
    "ReportingV3PurchaseRefundDetailsGet200ResponseAuthorizations": ReportingV3PurchaseRefundDetailsGet200ResponseAuthorizations,
    "ReportingV3PurchaseRefundDetailsGet200ResponseFeeAndFundingDetails": ReportingV3PurchaseRefundDetailsGet200ResponseFeeAndFundingDetails,
    "ReportingV3PurchaseRefundDetailsGet200ResponseOthers": ReportingV3PurchaseRefundDetailsGet200ResponseOthers,
    "ReportingV3PurchaseRefundDetailsGet200ResponseRequestDetails": ReportingV3PurchaseRefundDetailsGet200ResponseRequestDetails,
    "ReportingV3PurchaseRefundDetailsGet200ResponseSettlementStatuses": ReportingV3PurchaseRefundDetailsGet200ResponseSettlementStatuses,
    "ReportingV3PurchaseRefundDetailsGet200ResponseSettlements": ReportingV3PurchaseRefundDetailsGet200ResponseSettlements,
    "ReportingV3ReportDefinitionsGet200Response": ReportingV3ReportDefinitionsGet200Response,
    "ReportingV3ReportDefinitionsGet200ResponseReportDefinitions": ReportingV3ReportDefinitionsGet200ResponseReportDefinitions,
    "ReportingV3ReportDefinitionsNameGet200Response": ReportingV3ReportDefinitionsNameGet200Response,
    "ReportingV3ReportDefinitionsNameGet200ResponseAttributes": ReportingV3ReportDefinitionsNameGet200ResponseAttributes,
    "ReportingV3ReportDefinitionsNameGet200ResponseDefaultSettings": ReportingV3ReportDefinitionsNameGet200ResponseDefaultSettings,
    "ReportingV3ReportSubscriptionsGet200Response": ReportingV3ReportSubscriptionsGet200Response,
    "ReportingV3ReportSubscriptionsGet200ResponseSubscriptions": ReportingV3ReportSubscriptionsGet200ResponseSubscriptions,
    "ReportingV3ReportsGet200Response": ReportingV3ReportsGet200Response,
    "ReportingV3ReportsGet200ResponseLink": ReportingV3ReportsGet200ResponseLink,
    "ReportingV3ReportsGet200ResponseLinkReportDownload": ReportingV3ReportsGet200ResponseLinkReportDownload,
    "ReportingV3ReportsGet200ResponseReportSearchResults": ReportingV3ReportsGet200ResponseReportSearchResults,
    "ReportingV3ReportsIdGet200Response": ReportingV3ReportsIdGet200Response,
    "ReportingV3RetrievalDetailsGet200Response": ReportingV3RetrievalDetailsGet200Response,
    "ReportingV3RetrievalDetailsGet200ResponseRetrievalDetails": ReportingV3RetrievalDetailsGet200ResponseRetrievalDetails,
    "ReportingV3RetrievalSummariesGet200Response": ReportingV3RetrievalSummariesGet200Response,
    "Reportingv3ReportDownloadsGet400Response": Reportingv3ReportDownloadsGet400Response,
    "Reportingv3ReportDownloadsGet400ResponseDetails": Reportingv3ReportDownloadsGet400ResponseDetails,
    "Reportingv3reportsReportFilters": Reportingv3reportsReportFilters,
    "Reportingv3reportsReportPreferences": Reportingv3reportsReportPreferences,
    "Request": Request,
    "RevokeCertificateRequest": RevokeCertificateRequest,
    "RiskProducts": RiskProducts,
    "RiskProductsDecisionManager": RiskProductsDecisionManager,
    "RiskProductsDecisionManagerConfigurationInformation": RiskProductsDecisionManagerConfigurationInformation,
    "RiskProductsFraudManagementEssentials": RiskProductsFraudManagementEssentials,
    "RiskProductsFraudManagementEssentialsConfigurationInformation": RiskProductsFraudManagementEssentialsConfigurationInformation,
    "RiskProductsPortfolioRiskControls": RiskProductsPortfolioRiskControls,
    "RiskProductsPortfolioRiskControlsConfigurationInformation": RiskProductsPortfolioRiskControlsConfigurationInformation,
    "RiskProductsPortfolioRiskControlsConfigurationInformationConfigurations": RiskProductsPortfolioRiskControlsConfigurationInformationConfigurations,
    "RiskV1AddressVerificationsPost201Response": RiskV1AddressVerificationsPost201Response,
    "RiskV1AddressVerificationsPost201ResponseAddressVerificationInformation": RiskV1AddressVerificationsPost201ResponseAddressVerificationInformation,
    "RiskV1AddressVerificationsPost201ResponseAddressVerificationInformationBarCode": RiskV1AddressVerificationsPost201ResponseAddressVerificationInformationBarCode,
    "RiskV1AddressVerificationsPost201ResponseAddressVerificationInformationStandardAddress": RiskV1AddressVerificationsPost201ResponseAddressVerificationInformationStandardAddress,
    "RiskV1AddressVerificationsPost201ResponseAddressVerificationInformationStandardAddressAddress1": RiskV1AddressVerificationsPost201ResponseAddressVerificationInformationStandardAddressAddress1,
    "RiskV1AddressVerificationsPost201ResponseErrorInformation": RiskV1AddressVerificationsPost201ResponseErrorInformation,
    "RiskV1AuthenticationResultsPost201Response": RiskV1AuthenticationResultsPost201Response,
    "RiskV1AuthenticationResultsPost201ResponseConsumerAuthenticationInformation": RiskV1AuthenticationResultsPost201ResponseConsumerAuthenticationInformation,
    "RiskV1AuthenticationSetupsPost201Response": RiskV1AuthenticationSetupsPost201Response,
    "RiskV1AuthenticationSetupsPost201ResponseConsumerAuthenticationInformation": RiskV1AuthenticationSetupsPost201ResponseConsumerAuthenticationInformation,
    "RiskV1AuthenticationSetupsPost201ResponseErrorInformation": RiskV1AuthenticationSetupsPost201ResponseErrorInformation,
    "RiskV1AuthenticationsPost201Response": RiskV1AuthenticationsPost201Response,
    "RiskV1AuthenticationsPost201ResponseErrorInformation": RiskV1AuthenticationsPost201ResponseErrorInformation,
    "RiskV1AuthenticationsPost400Response": RiskV1AuthenticationsPost400Response,
    "RiskV1AuthenticationsPost400Response1": RiskV1AuthenticationsPost400Response1,
    "RiskV1DecisionsPost201Response": RiskV1DecisionsPost201Response,
    "RiskV1DecisionsPost201ResponseClientReferenceInformation": RiskV1DecisionsPost201ResponseClientReferenceInformation,
    "RiskV1DecisionsPost201ResponseConsumerAuthenticationInformation": RiskV1DecisionsPost201ResponseConsumerAuthenticationInformation,
    "RiskV1DecisionsPost201ResponseErrorInformation": RiskV1DecisionsPost201ResponseErrorInformation,
    "RiskV1DecisionsPost201ResponseOrderInformation": RiskV1DecisionsPost201ResponseOrderInformation,
    "RiskV1DecisionsPost201ResponseOrderInformationAmountDetails": RiskV1DecisionsPost201ResponseOrderInformationAmountDetails,
    "RiskV1DecisionsPost201ResponsePaymentInformation": RiskV1DecisionsPost201ResponsePaymentInformation,
    "RiskV1DecisionsPost400Response": RiskV1DecisionsPost400Response,
    "RiskV1DecisionsPost400Response1": RiskV1DecisionsPost400Response1,
    "RiskV1ExportComplianceInquiriesPost201Response": RiskV1ExportComplianceInquiriesPost201Response,
    "RiskV1ExportComplianceInquiriesPost201ResponseErrorInformation": RiskV1ExportComplianceInquiriesPost201ResponseErrorInformation,
    "RiskV1UpdatePost201Response": RiskV1UpdatePost201Response,
    "Riskv1addressverificationsBuyerInformation": Riskv1addressverificationsBuyerInformation,
    "Riskv1addressverificationsOrderInformation": Riskv1addressverificationsOrderInformation,
    "Riskv1addressverificationsOrderInformationBillTo": Riskv1addressverificationsOrderInformationBillTo,
    "Riskv1addressverificationsOrderInformationLineItems": Riskv1addressverificationsOrderInformationLineItems,
    "Riskv1addressverificationsOrderInformationShipTo": Riskv1addressverificationsOrderInformationShipTo,
    "Riskv1authenticationresultsConsumerAuthenticationInformation": Riskv1authenticationresultsConsumerAuthenticationInformation,
    "Riskv1authenticationresultsDeviceInformation": Riskv1authenticationresultsDeviceInformation,
    "Riskv1authenticationresultsOrderInformation": Riskv1authenticationresultsOrderInformation,
    "Riskv1authenticationresultsOrderInformationAmountDetails": Riskv1authenticationresultsOrderInformationAmountDetails,
    "Riskv1authenticationresultsPaymentInformation": Riskv1authenticationresultsPaymentInformation,
    "Riskv1authenticationresultsPaymentInformationCard": Riskv1authenticationresultsPaymentInformationCard,
    "Riskv1authenticationresultsPaymentInformationFluidData": Riskv1authenticationresultsPaymentInformationFluidData,
    "Riskv1authenticationresultsPaymentInformationTokenizedCard": Riskv1authenticationresultsPaymentInformationTokenizedCard,
    "Riskv1authenticationsBuyerInformation": Riskv1authenticationsBuyerInformation,
    "Riskv1authenticationsDeviceInformation": Riskv1authenticationsDeviceInformation,
    "Riskv1authenticationsOrderInformation": Riskv1authenticationsOrderInformation,
    "Riskv1authenticationsOrderInformationAmountDetails": Riskv1authenticationsOrderInformationAmountDetails,
    "Riskv1authenticationsOrderInformationBillTo": Riskv1authenticationsOrderInformationBillTo,
    "Riskv1authenticationsOrderInformationLineItems": Riskv1authenticationsOrderInformationLineItems,
    "Riskv1authenticationsPaymentInformation": Riskv1authenticationsPaymentInformation,
    "Riskv1authenticationsPaymentInformationCustomer": Riskv1authenticationsPaymentInformationCustomer,
    "Riskv1authenticationsPaymentInformationTokenizedCard": Riskv1authenticationsPaymentInformationTokenizedCard,
    "Riskv1authenticationsRiskInformation": Riskv1authenticationsRiskInformation,
    "Riskv1authenticationsTravelInformation": Riskv1authenticationsTravelInformation,
    "Riskv1authenticationsetupsClientReferenceInformation": Riskv1authenticationsetupsClientReferenceInformation,
    "Riskv1authenticationsetupsPaymentInformation": Riskv1authenticationsetupsPaymentInformation,
    "Riskv1authenticationsetupsPaymentInformationCard": Riskv1authenticationsetupsPaymentInformationCard,
    "Riskv1authenticationsetupsPaymentInformationCustomer": Riskv1authenticationsetupsPaymentInformationCustomer,
    "Riskv1authenticationsetupsPaymentInformationFluidData": Riskv1authenticationsetupsPaymentInformationFluidData,
    "Riskv1authenticationsetupsPaymentInformationTokenizedCard": Riskv1authenticationsetupsPaymentInformationTokenizedCard,
    "Riskv1authenticationsetupsProcessingInformation": Riskv1authenticationsetupsProcessingInformation,
    "Riskv1authenticationsetupsTokenInformation": Riskv1authenticationsetupsTokenInformation,
    "Riskv1decisionsAcquirerInformation": Riskv1decisionsAcquirerInformation,
    "Riskv1decisionsBuyerInformation": Riskv1decisionsBuyerInformation,
    "Riskv1decisionsClientReferenceInformation": Riskv1decisionsClientReferenceInformation,
    "Riskv1decisionsClientReferenceInformationPartner": Riskv1decisionsClientReferenceInformationPartner,
    "Riskv1decisionsConsumerAuthenticationInformation": Riskv1decisionsConsumerAuthenticationInformation,
    "Riskv1decisionsConsumerAuthenticationInformationStrongAuthentication": Riskv1decisionsConsumerAuthenticationInformationStrongAuthentication,
    "Riskv1decisionsDeviceInformation": Riskv1decisionsDeviceInformation,
    "Riskv1decisionsMerchantDefinedInformation": Riskv1decisionsMerchantDefinedInformation,
    "Riskv1decisionsMerchantInformation": Riskv1decisionsMerchantInformation,
    "Riskv1decisionsMerchantInformationMerchantDescriptor": Riskv1decisionsMerchantInformationMerchantDescriptor,
    "Riskv1decisionsOrderInformation": Riskv1decisionsOrderInformation,
    "Riskv1decisionsOrderInformationAmountDetails": Riskv1decisionsOrderInformationAmountDetails,
    "Riskv1decisionsOrderInformationBillTo": Riskv1decisionsOrderInformationBillTo,
    "Riskv1decisionsOrderInformationLineItems": Riskv1decisionsOrderInformationLineItems,
    "Riskv1decisionsOrderInformationShipTo": Riskv1decisionsOrderInformationShipTo,
    "Riskv1decisionsOrderInformationShippingDetails": Riskv1decisionsOrderInformationShippingDetails,
    "Riskv1decisionsPaymentInformation": Riskv1decisionsPaymentInformation,
    "Riskv1decisionsPaymentInformationCard": Riskv1decisionsPaymentInformationCard,
    "Riskv1decisionsPaymentInformationTokenizedCard": Riskv1decisionsPaymentInformationTokenizedCard,
    "Riskv1decisionsProcessingInformation": Riskv1decisionsProcessingInformation,
    "Riskv1decisionsProcessorInformation": Riskv1decisionsProcessorInformation,
    "Riskv1decisionsProcessorInformationAvs": Riskv1decisionsProcessorInformationAvs,
    "Riskv1decisionsProcessorInformationCardVerification": Riskv1decisionsProcessorInformationCardVerification,
    "Riskv1decisionsRiskInformation": Riskv1decisionsRiskInformation,
    "Riskv1decisionsTokenInformation": Riskv1decisionsTokenInformation,
    "Riskv1decisionsTravelInformation": Riskv1decisionsTravelInformation,
    "Riskv1decisionsTravelInformationLegs": Riskv1decisionsTravelInformationLegs,
    "Riskv1decisionsTravelInformationPassengers": Riskv1decisionsTravelInformationPassengers,
    "Riskv1decisionsidactionsDecisionInformation": Riskv1decisionsidactionsDecisionInformation,
    "Riskv1decisionsidactionsProcessingInformation": Riskv1decisionsidactionsProcessingInformation,
    "Riskv1decisionsidmarkingRiskInformation": Riskv1decisionsidmarkingRiskInformation,
    "Riskv1decisionsidmarkingRiskInformationMarkingDetails": Riskv1decisionsidmarkingRiskInformationMarkingDetails,
    "Riskv1exportcomplianceinquiriesDeviceInformation": Riskv1exportcomplianceinquiriesDeviceInformation,
    "Riskv1exportcomplianceinquiriesExportComplianceInformation": Riskv1exportcomplianceinquiriesExportComplianceInformation,
    "Riskv1exportcomplianceinquiriesOrderInformation": Riskv1exportcomplianceinquiriesOrderInformation,
    "Riskv1exportcomplianceinquiriesOrderInformationBillTo": Riskv1exportcomplianceinquiriesOrderInformationBillTo,
    "Riskv1exportcomplianceinquiriesOrderInformationBillToCompany": Riskv1exportcomplianceinquiriesOrderInformationBillToCompany,
    "Riskv1exportcomplianceinquiriesOrderInformationLineItems": Riskv1exportcomplianceinquiriesOrderInformationLineItems,
    "Riskv1exportcomplianceinquiriesOrderInformationShipTo": Riskv1exportcomplianceinquiriesOrderInformationShipTo,
    "Riskv1liststypeentriesBuyerInformation": Riskv1liststypeentriesBuyerInformation,
    "Riskv1liststypeentriesClientReferenceInformation": Riskv1liststypeentriesClientReferenceInformation,
    "Riskv1liststypeentriesDeviceInformation": Riskv1liststypeentriesDeviceInformation,
    "Riskv1liststypeentriesOrderInformation": Riskv1liststypeentriesOrderInformation,
    "Riskv1liststypeentriesOrderInformationAddress": Riskv1liststypeentriesOrderInformationAddress,
    "Riskv1liststypeentriesOrderInformationBillTo": Riskv1liststypeentriesOrderInformationBillTo,
    "Riskv1liststypeentriesOrderInformationLineItems": Riskv1liststypeentriesOrderInformationLineItems,
    "Riskv1liststypeentriesOrderInformationShipTo": Riskv1liststypeentriesOrderInformationShipTo,
    "Riskv1liststypeentriesPaymentInformation": Riskv1liststypeentriesPaymentInformation,
    "Riskv1liststypeentriesPaymentInformationBank": Riskv1liststypeentriesPaymentInformationBank,
    "Riskv1liststypeentriesPaymentInformationCard": Riskv1liststypeentriesPaymentInformationCard,
    "Riskv1liststypeentriesRiskInformation": Riskv1liststypeentriesRiskInformation,
    "Riskv1liststypeentriesRiskInformationMarkingDetails": Riskv1liststypeentriesRiskInformationMarkingDetails,
    "SAConfig": SAConfig,
    "SAConfigCheckout": SAConfigCheckout,
    "SAConfigContactInformation": SAConfigContactInformation,
    "SAConfigNotifications": SAConfigNotifications,
    "SAConfigNotificationsCustomerNotifications": SAConfigNotificationsCustomerNotifications,
    "SAConfigNotificationsMerchantNotifications": SAConfigNotificationsMerchantNotifications,
    "SAConfigPaymentMethods": SAConfigPaymentMethods,
    "SAConfigPaymentTypes": SAConfigPaymentTypes,
    "SAConfigPaymentTypesCardTypes": SAConfigPaymentTypesCardTypes,
    "SAConfigPaymentTypesCardTypesDiscover": SAConfigPaymentTypesCardTypesDiscover,
    "SAConfigService": SAConfigService,
    "SaveAsymEgressKey": SaveAsymEgressKey,
    "SaveSymEgressKey": SaveSymEgressKey,
    "SearchRequest": SearchRequest,
    "ShippingAddressListForCustomer": ShippingAddressListForCustomer,
    "ShippingAddressListForCustomerEmbedded": ShippingAddressListForCustomerEmbedded,
    "ShippingAddressListForCustomerLinks": ShippingAddressListForCustomerLinks,
    "ShippingAddressListForCustomerLinksFirst": ShippingAddressListForCustomerLinksFirst,
    "ShippingAddressListForCustomerLinksLast": ShippingAddressListForCustomerLinksLast,
    "ShippingAddressListForCustomerLinksNext": ShippingAddressListForCustomerLinksNext,
    "ShippingAddressListForCustomerLinksPrev": ShippingAddressListForCustomerLinksPrev,
    "ShippingAddressListForCustomerLinksSelf": ShippingAddressListForCustomerLinksSelf,
    "SuspendSubscriptionResponse": SuspendSubscriptionResponse,
    "SuspendSubscriptionResponseSubscriptionInformation": SuspendSubscriptionResponseSubscriptionInformation,
    "TaxRequest": TaxRequest,
    "TmsAuthorizationOptions": TmsAuthorizationOptions,
    "TmsAuthorizationOptionsInitiator": TmsAuthorizationOptionsInitiator,
    "TmsAuthorizationOptionsInitiatorMerchantInitiatedTransaction": TmsAuthorizationOptionsInitiatorMerchantInitiatedTransaction,
    "TmsBinLookup": TmsBinLookup,
    "TmsBinLookupIssuerInformation": TmsBinLookupIssuerInformation,
    "TmsBinLookupPaymentAccountInformation": TmsBinLookupPaymentAccountInformation,
    "TmsBinLookupPaymentAccountInformationCard": TmsBinLookupPaymentAccountInformationCard,
    "TmsBinLookupPaymentAccountInformationCardBrands": TmsBinLookupPaymentAccountInformationCardBrands,
    "TmsBinLookupPaymentAccountInformationFeatures": TmsBinLookupPaymentAccountInformationFeatures,
    "TmsBinLookupPaymentAccountInformationNetwork": TmsBinLookupPaymentAccountInformationNetwork,
    "TmsBusinessInformation": TmsBusinessInformation,
    "TmsBusinessInformationAcquirer": TmsBusinessInformationAcquirer,
    "TmsBusinessInformationAddress": TmsBusinessInformationAddress,
    "TmsCardArt": TmsCardArt,
    "TmsCardArtBrandLogoAsset": TmsCardArtBrandLogoAsset,
    "TmsCardArtBrandLogoAssetLinks": TmsCardArtBrandLogoAssetLinks,
    "TmsCardArtBrandLogoAssetLinksSelf": TmsCardArtBrandLogoAssetLinksSelf,
    "TmsCardArtCombinedAsset": TmsCardArtCombinedAsset,
    "TmsCardArtCombinedAssetLinks": TmsCardArtCombinedAssetLinks,
    "TmsCardArtCombinedAssetLinksSelf": TmsCardArtCombinedAssetLinksSelf,
    "TmsCardArtIconAsset": TmsCardArtIconAsset,
    "TmsCardArtIconAssetLinks": TmsCardArtIconAssetLinks,
    "TmsCardArtIconAssetLinksSelf": TmsCardArtIconAssetLinksSelf,
    "TmsCardArtIssuerLogoAsset": TmsCardArtIssuerLogoAsset,
    "TmsCardArtIssuerLogoAssetLinks": TmsCardArtIssuerLogoAssetLinks,
    "TmsCardArtIssuerLogoAssetLinksSelf": TmsCardArtIssuerLogoAssetLinksSelf,
    "TmsEmbeddedInstrumentIdentifier": TmsEmbeddedInstrumentIdentifier,
    "TmsEmbeddedInstrumentIdentifierBankAccount": TmsEmbeddedInstrumentIdentifierBankAccount,
    "TmsEmbeddedInstrumentIdentifierBillTo": TmsEmbeddedInstrumentIdentifierBillTo,
    "TmsEmbeddedInstrumentIdentifierCard": TmsEmbeddedInstrumentIdentifierCard,
    "TmsEmbeddedInstrumentIdentifierEmbedded": TmsEmbeddedInstrumentIdentifierEmbedded,
    "TmsEmbeddedInstrumentIdentifierIssuer": TmsEmbeddedInstrumentIdentifierIssuer,
    "TmsEmbeddedInstrumentIdentifierLinks": TmsEmbeddedInstrumentIdentifierLinks,
    "TmsEmbeddedInstrumentIdentifierLinksPaymentInstruments": TmsEmbeddedInstrumentIdentifierLinksPaymentInstruments,
    "TmsEmbeddedInstrumentIdentifierLinksSelf": TmsEmbeddedInstrumentIdentifierLinksSelf,
    "TmsEmbeddedInstrumentIdentifierMetadata": TmsEmbeddedInstrumentIdentifierMetadata,
    "TmsEmbeddedInstrumentIdentifierProcessingInformation": TmsEmbeddedInstrumentIdentifierProcessingInformation,
    "TmsNetworkTokenServices": TmsNetworkTokenServices,
    "TmsNetworkTokenServicesAmericanExpressTokenService": TmsNetworkTokenServicesAmericanExpressTokenService,
    "TmsNetworkTokenServicesMastercardDigitalEnablementService": TmsNetworkTokenServicesMastercardDigitalEnablementService,
    "TmsNetworkTokenServicesNotifications": TmsNetworkTokenServicesNotifications,
    "TmsNetworkTokenServicesPaymentCredentials": TmsNetworkTokenServicesPaymentCredentials,
    "TmsNetworkTokenServicesSynchronousProvisioning": TmsNetworkTokenServicesSynchronousProvisioning,
    "TmsNetworkTokenServicesVisaTokenService": TmsNetworkTokenServicesVisaTokenService,
    "TmsNullify": TmsNullify,
    "TmsPaymentInstrumentProcessingInfo": TmsPaymentInstrumentProcessingInfo,
    "TmsPaymentInstrumentProcessingInfoBankTransferOptions": TmsPaymentInstrumentProcessingInfoBankTransferOptions,
    "TmsSensitivePrivileges": TmsSensitivePrivileges,
    "TmsTokenFormats": TmsTokenFormats,
    "Tmsv2TokenizedCard": Tmsv2TokenizedCard,
    "Tmsv2TokenizedCardCard": Tmsv2TokenizedCardCard,
    "Tmsv2TokenizedCardLinks": Tmsv2TokenizedCardLinks,
    "Tmsv2TokenizedCardLinksSelf": Tmsv2TokenizedCardLinksSelf,
    "Tmsv2TokenizedCardMetadata": Tmsv2TokenizedCardMetadata,
    "Tmsv2TokenizedCardMetadataIssuer": Tmsv2TokenizedCardMetadataIssuer,
    "Tmsv2TokenizedCardPasscode": Tmsv2TokenizedCardPasscode,
    "Tmsv2customersBuyerInformation": Tmsv2customersBuyerInformation,
    "Tmsv2customersClientReferenceInformation": Tmsv2customersClientReferenceInformation,
    "Tmsv2customersDefaultPaymentInstrument": Tmsv2customersDefaultPaymentInstrument,
    "Tmsv2customersDefaultShippingAddress": Tmsv2customersDefaultShippingAddress,
    "Tmsv2customersEmbedded": Tmsv2customersEmbedded,
    "Tmsv2customersEmbeddedDefaultPaymentInstrument": Tmsv2customersEmbeddedDefaultPaymentInstrument,
    "Tmsv2customersEmbeddedDefaultPaymentInstrumentBankAccount": Tmsv2customersEmbeddedDefaultPaymentInstrumentBankAccount,
    "Tmsv2customersEmbeddedDefaultPaymentInstrumentBillTo": Tmsv2customersEmbeddedDefaultPaymentInstrumentBillTo,
    "Tmsv2customersEmbeddedDefaultPaymentInstrumentBuyerInformation": Tmsv2customersEmbeddedDefaultPaymentInstrumentBuyerInformation,
    "Tmsv2customersEmbeddedDefaultPaymentInstrumentBuyerInformationIssuedBy": Tmsv2customersEmbeddedDefaultPaymentInstrumentBuyerInformationIssuedBy,
    "Tmsv2customersEmbeddedDefaultPaymentInstrumentBuyerInformationPersonalIdentification": Tmsv2customersEmbeddedDefaultPaymentInstrumentBuyerInformationPersonalIdentification,
    "Tmsv2customersEmbeddedDefaultPaymentInstrumentCard": Tmsv2customersEmbeddedDefaultPaymentInstrumentCard,
    "Tmsv2customersEmbeddedDefaultPaymentInstrumentCardTokenizedInformation": Tmsv2customersEmbeddedDefaultPaymentInstrumentCardTokenizedInformation,
    "Tmsv2customersEmbeddedDefaultPaymentInstrumentEmbedded": Tmsv2customersEmbeddedDefaultPaymentInstrumentEmbedded,
    "Tmsv2customersEmbeddedDefaultPaymentInstrumentInstrumentIdentifier": Tmsv2customersEmbeddedDefaultPaymentInstrumentInstrumentIdentifier,
    "Tmsv2customersEmbeddedDefaultPaymentInstrumentLinks": Tmsv2customersEmbeddedDefaultPaymentInstrumentLinks,
    "Tmsv2customersEmbeddedDefaultPaymentInstrumentLinksSelf": Tmsv2customersEmbeddedDefaultPaymentInstrumentLinksSelf,
    "Tmsv2customersEmbeddedDefaultPaymentInstrumentMerchantInformation": Tmsv2customersEmbeddedDefaultPaymentInstrumentMerchantInformation,
    "Tmsv2customersEmbeddedDefaultPaymentInstrumentMerchantInformationMerchantDescriptor": Tmsv2customersEmbeddedDefaultPaymentInstrumentMerchantInformationMerchantDescriptor,
    "Tmsv2customersEmbeddedDefaultPaymentInstrumentMetadata": Tmsv2customersEmbeddedDefaultPaymentInstrumentMetadata,
    "Tmsv2customersEmbeddedDefaultShippingAddress": Tmsv2customersEmbeddedDefaultShippingAddress,
    "Tmsv2customersEmbeddedDefaultShippingAddressLinks": Tmsv2customersEmbeddedDefaultShippingAddressLinks,
    "Tmsv2customersEmbeddedDefaultShippingAddressLinksCustomer": Tmsv2customersEmbeddedDefaultShippingAddressLinksCustomer,
    "Tmsv2customersEmbeddedDefaultShippingAddressLinksSelf": Tmsv2customersEmbeddedDefaultShippingAddressLinksSelf,
    "Tmsv2customersEmbeddedDefaultShippingAddressMetadata": Tmsv2customersEmbeddedDefaultShippingAddressMetadata,
    "Tmsv2customersEmbeddedDefaultShippingAddressShipTo": Tmsv2customersEmbeddedDefaultShippingAddressShipTo,
    "Tmsv2customersLinks": Tmsv2customersLinks,
    "Tmsv2customersLinksPaymentInstruments": Tmsv2customersLinksPaymentInstruments,
    "Tmsv2customersLinksSelf": Tmsv2customersLinksSelf,
    "Tmsv2customersLinksShippingAddress": Tmsv2customersLinksShippingAddress,
    "Tmsv2customersMerchantDefinedInformation": Tmsv2customersMerchantDefinedInformation,
    "Tmsv2customersMetadata": Tmsv2customersMetadata,
    "Tmsv2customersObjectInformation": Tmsv2customersObjectInformation,
    "TokenPermissions": TokenPermissions,
    "TokenizedcardRequest": TokenizedcardRequest,
    "TssV2TransactionsGet200Response": TssV2TransactionsGet200Response,
    "TssV2TransactionsGet200ResponseApplicationInformation": TssV2TransactionsGet200ResponseApplicationInformation,
    "TssV2TransactionsGet200ResponseApplicationInformationApplications": TssV2TransactionsGet200ResponseApplicationInformationApplications,
    "TssV2TransactionsGet200ResponseBankAccountValidation": TssV2TransactionsGet200ResponseBankAccountValidation,
    "TssV2TransactionsGet200ResponseBuyerInformation": TssV2TransactionsGet200ResponseBuyerInformation,
    "TssV2TransactionsGet200ResponseClientReferenceInformation": TssV2TransactionsGet200ResponseClientReferenceInformation,
    "TssV2TransactionsGet200ResponseClientReferenceInformationPartner": TssV2TransactionsGet200ResponseClientReferenceInformationPartner,
    "TssV2TransactionsGet200ResponseConsumerAuthenticationInformation": TssV2TransactionsGet200ResponseConsumerAuthenticationInformation,
    "TssV2TransactionsGet200ResponseConsumerAuthenticationInformationStrongAuthentication": TssV2TransactionsGet200ResponseConsumerAuthenticationInformationStrongAuthentication,
    "TssV2TransactionsGet200ResponseDeviceInformation": TssV2TransactionsGet200ResponseDeviceInformation,
    "TssV2TransactionsGet200ResponseErrorInformation": TssV2TransactionsGet200ResponseErrorInformation,
    "TssV2TransactionsGet200ResponseFraudMarkingInformation": TssV2TransactionsGet200ResponseFraudMarkingInformation,
    "TssV2TransactionsGet200ResponseInstallmentInformation": TssV2TransactionsGet200ResponseInstallmentInformation,
    "TssV2TransactionsGet200ResponseLinks": TssV2TransactionsGet200ResponseLinks,
    "TssV2TransactionsGet200ResponseMerchantInformation": TssV2TransactionsGet200ResponseMerchantInformation,
    "TssV2TransactionsGet200ResponseMerchantInformationMerchantDescriptor": TssV2TransactionsGet200ResponseMerchantInformationMerchantDescriptor,
    "TssV2TransactionsGet200ResponseOrderInformation": TssV2TransactionsGet200ResponseOrderInformation,
    "TssV2TransactionsGet200ResponseOrderInformationAmountDetails": TssV2TransactionsGet200ResponseOrderInformationAmountDetails,
    "TssV2TransactionsGet200ResponseOrderInformationBillTo": TssV2TransactionsGet200ResponseOrderInformationBillTo,
    "TssV2TransactionsGet200ResponseOrderInformationInvoiceDetails": TssV2TransactionsGet200ResponseOrderInformationInvoiceDetails,
    "TssV2TransactionsGet200ResponseOrderInformationLineItems": TssV2TransactionsGet200ResponseOrderInformationLineItems,
    "TssV2TransactionsGet200ResponseOrderInformationShipTo": TssV2TransactionsGet200ResponseOrderInformationShipTo,
    "TssV2TransactionsGet200ResponseOrderInformationShippingDetails": TssV2TransactionsGet200ResponseOrderInformationShippingDetails,
    "TssV2TransactionsGet200ResponsePaymentInformation": TssV2TransactionsGet200ResponsePaymentInformation,
    "TssV2TransactionsGet200ResponsePaymentInformationAccountFeatures": TssV2TransactionsGet200ResponsePaymentInformationAccountFeatures,
    "TssV2TransactionsGet200ResponsePaymentInformationBank": TssV2TransactionsGet200ResponsePaymentInformationBank,
    "TssV2TransactionsGet200ResponsePaymentInformationBankAccount": TssV2TransactionsGet200ResponsePaymentInformationBankAccount,
    "TssV2TransactionsGet200ResponsePaymentInformationBankMandate": TssV2TransactionsGet200ResponsePaymentInformationBankMandate,
    "TssV2TransactionsGet200ResponsePaymentInformationBrands": TssV2TransactionsGet200ResponsePaymentInformationBrands,
    "TssV2TransactionsGet200ResponsePaymentInformationCard": TssV2TransactionsGet200ResponsePaymentInformationCard,
    "TssV2TransactionsGet200ResponsePaymentInformationCustomer": TssV2TransactionsGet200ResponsePaymentInformationCustomer,
    "TssV2TransactionsGet200ResponsePaymentInformationFeatures": TssV2TransactionsGet200ResponsePaymentInformationFeatures,
    "TssV2TransactionsGet200ResponsePaymentInformationFluidData": TssV2TransactionsGet200ResponsePaymentInformationFluidData,
    "TssV2TransactionsGet200ResponsePaymentInformationInstrumentIdentifier": TssV2TransactionsGet200ResponsePaymentInformationInstrumentIdentifier,
    "TssV2TransactionsGet200ResponsePaymentInformationInvoice": TssV2TransactionsGet200ResponsePaymentInformationInvoice,
    "TssV2TransactionsGet200ResponsePaymentInformationIssuerInformation": TssV2TransactionsGet200ResponsePaymentInformationIssuerInformation,
    "TssV2TransactionsGet200ResponsePaymentInformationNetwork": TssV2TransactionsGet200ResponsePaymentInformationNetwork,
    "TssV2TransactionsGet200ResponsePaymentInformationPaymentType": TssV2TransactionsGet200ResponsePaymentInformationPaymentType,
    "TssV2TransactionsGet200ResponsePayoutOptions": TssV2TransactionsGet200ResponsePayoutOptions,
    "TssV2TransactionsGet200ResponsePointOfSaleInformation": TssV2TransactionsGet200ResponsePointOfSaleInformation,
    "TssV2TransactionsGet200ResponseProcessingInformation": TssV2TransactionsGet200ResponseProcessingInformation,
    "TssV2TransactionsGet200ResponseProcessingInformationAuthorizationOptions": TssV2TransactionsGet200ResponseProcessingInformationAuthorizationOptions,
    "TssV2TransactionsGet200ResponseProcessingInformationAuthorizationOptionsInitiator": TssV2TransactionsGet200ResponseProcessingInformationAuthorizationOptionsInitiator,
    "TssV2TransactionsGet200ResponseProcessingInformationBankTransferOptions": TssV2TransactionsGet200ResponseProcessingInformationBankTransferOptions,
    "TssV2TransactionsGet200ResponseProcessingInformationCaptureOptions": TssV2TransactionsGet200ResponseProcessingInformationCaptureOptions,
    "TssV2TransactionsGet200ResponseProcessingInformationJapanPaymentOptions": TssV2TransactionsGet200ResponseProcessingInformationJapanPaymentOptions,
    "TssV2TransactionsGet200ResponseProcessorInformation": TssV2TransactionsGet200ResponseProcessorInformation,
    "TssV2TransactionsGet200ResponseProcessorInformationElectronicVerificationResults": TssV2TransactionsGet200ResponseProcessorInformationElectronicVerificationResults,
    "TssV2TransactionsGet200ResponseProcessorInformationMultiProcessorRouting": TssV2TransactionsGet200ResponseProcessorInformationMultiProcessorRouting,
    "TssV2TransactionsGet200ResponseProcessorInformationProcessor": TssV2TransactionsGet200ResponseProcessorInformationProcessor,
    "TssV2TransactionsGet200ResponseRecurringPaymentInformation": TssV2TransactionsGet200ResponseRecurringPaymentInformation,
    "TssV2TransactionsGet200ResponseRiskInformation": TssV2TransactionsGet200ResponseRiskInformation,
    "TssV2TransactionsGet200ResponseRiskInformationProfile": TssV2TransactionsGet200ResponseRiskInformationProfile,
    "TssV2TransactionsGet200ResponseRiskInformationRules": TssV2TransactionsGet200ResponseRiskInformationRules,
    "TssV2TransactionsGet200ResponseRiskInformationScore": TssV2TransactionsGet200ResponseRiskInformationScore,
    "TssV2TransactionsGet200ResponseSenderInformation": TssV2TransactionsGet200ResponseSenderInformation,
    "TssV2TransactionsGet200ResponseTokenInformation": TssV2TransactionsGet200ResponseTokenInformation,
    "TssV2TransactionsPost201Response": TssV2TransactionsPost201Response,
    "TssV2TransactionsPost201ResponseEmbedded": TssV2TransactionsPost201ResponseEmbedded,
    "TssV2TransactionsPost201ResponseEmbeddedApplicationInformation": TssV2TransactionsPost201ResponseEmbeddedApplicationInformation,
    "TssV2TransactionsPost201ResponseEmbeddedApplicationInformationApplications": TssV2TransactionsPost201ResponseEmbeddedApplicationInformationApplications,
    "TssV2TransactionsPost201ResponseEmbeddedClientReferenceInformation": TssV2TransactionsPost201ResponseEmbeddedClientReferenceInformation,
    "TssV2TransactionsPost201ResponseEmbeddedClientReferenceInformationPartner": TssV2TransactionsPost201ResponseEmbeddedClientReferenceInformationPartner,
    "TssV2TransactionsPost201ResponseEmbeddedConsumerAuthenticationInformation": TssV2TransactionsPost201ResponseEmbeddedConsumerAuthenticationInformation,
    "TssV2TransactionsPost201ResponseEmbeddedErrorInformation": TssV2TransactionsPost201ResponseEmbeddedErrorInformation,
    "TssV2TransactionsPost201ResponseEmbeddedLinks": TssV2TransactionsPost201ResponseEmbeddedLinks,
    "TssV2TransactionsPost201ResponseEmbeddedMerchantInformation": TssV2TransactionsPost201ResponseEmbeddedMerchantInformation,
    "TssV2TransactionsPost201ResponseEmbeddedOrderInformation": TssV2TransactionsPost201ResponseEmbeddedOrderInformation,
    "TssV2TransactionsPost201ResponseEmbeddedOrderInformationBillTo": TssV2TransactionsPost201ResponseEmbeddedOrderInformationBillTo,
    "TssV2TransactionsPost201ResponseEmbeddedOrderInformationShipTo": TssV2TransactionsPost201ResponseEmbeddedOrderInformationShipTo,
    "TssV2TransactionsPost201ResponseEmbeddedPaymentInformation": TssV2TransactionsPost201ResponseEmbeddedPaymentInformation,
    "TssV2TransactionsPost201ResponseEmbeddedPaymentInformationBank": TssV2TransactionsPost201ResponseEmbeddedPaymentInformationBank,
    "TssV2TransactionsPost201ResponseEmbeddedPaymentInformationBankAccount": TssV2TransactionsPost201ResponseEmbeddedPaymentInformationBankAccount,
    "TssV2TransactionsPost201ResponseEmbeddedPaymentInformationCard": TssV2TransactionsPost201ResponseEmbeddedPaymentInformationCard,
    "TssV2TransactionsPost201ResponseEmbeddedPaymentInformationPaymentType": TssV2TransactionsPost201ResponseEmbeddedPaymentInformationPaymentType,
    "TssV2TransactionsPost201ResponseEmbeddedPointOfSaleInformation": TssV2TransactionsPost201ResponseEmbeddedPointOfSaleInformation,
    "TssV2TransactionsPost201ResponseEmbeddedPointOfSaleInformationPartner": TssV2TransactionsPost201ResponseEmbeddedPointOfSaleInformationPartner,
    "TssV2TransactionsPost201ResponseEmbeddedProcessingInformation": TssV2TransactionsPost201ResponseEmbeddedProcessingInformation,
    "TssV2TransactionsPost201ResponseEmbeddedProcessorInformation": TssV2TransactionsPost201ResponseEmbeddedProcessorInformation,
    "TssV2TransactionsPost201ResponseEmbeddedRiskInformation": TssV2TransactionsPost201ResponseEmbeddedRiskInformation,
    "TssV2TransactionsPost201ResponseEmbeddedRiskInformationProviders": TssV2TransactionsPost201ResponseEmbeddedRiskInformationProviders,
    "TssV2TransactionsPost201ResponseEmbeddedRiskInformationProvidersFingerprint": TssV2TransactionsPost201ResponseEmbeddedRiskInformationProvidersFingerprint,
    "TssV2TransactionsPost201ResponseEmbeddedTransactionSummaries": TssV2TransactionsPost201ResponseEmbeddedTransactionSummaries,
    "UmsV1UsersGet200Response": UmsV1UsersGet200Response,
    "UmsV1UsersGet200ResponseAccountInformation": UmsV1UsersGet200ResponseAccountInformation,
    "UmsV1UsersGet200ResponseContactInformation": UmsV1UsersGet200ResponseContactInformation,
    "UmsV1UsersGet200ResponseOrganizationInformation": UmsV1UsersGet200ResponseOrganizationInformation,
    "UmsV1UsersGet200ResponseUsers": UmsV1UsersGet200ResponseUsers,
    "UpdateInvoiceRequest": UpdateInvoiceRequest,
    "UpdateOrderRequest": UpdateOrderRequest,
    "UpdatePaymentLinkRequest": UpdatePaymentLinkRequest,
    "UpdatePlanRequest": UpdatePlanRequest,
    "UpdatePlanResponse": UpdatePlanResponse,
    "UpdatePlanResponsePlanInformation": UpdatePlanResponsePlanInformation,
    "UpdateStatus": UpdateStatus,
    "UpdateSubscription": UpdateSubscription,
    "UpdateSubscriptionResponse": UpdateSubscriptionResponse,
    "UpdateWebhook": UpdateWebhook,
    "Upv1capturecontextsCaptureMandate": Upv1capturecontextsCaptureMandate,
    "Upv1capturecontextsCompleteMandate": Upv1capturecontextsCompleteMandate,
    "Upv1capturecontextsOrderInformation": Upv1capturecontextsOrderInformation,
    "Upv1capturecontextsOrderInformationAmountDetails": Upv1capturecontextsOrderInformationAmountDetails,
    "Upv1capturecontextsOrderInformationBillTo": Upv1capturecontextsOrderInformationBillTo,
    "Upv1capturecontextsOrderInformationBillToCompany": Upv1capturecontextsOrderInformationBillToCompany,
    "Upv1capturecontextsOrderInformationShipTo": Upv1capturecontextsOrderInformationShipTo,
    "V1FileDetailsGet200Response": V1FileDetailsGet200Response,
    "V1FileDetailsGet200ResponseFileDetails": V1FileDetailsGet200ResponseFileDetails,
    "V1FileDetailsGet200ResponseLinks": V1FileDetailsGet200ResponseLinks,
    "V1FileDetailsGet200ResponseLinksFiles": V1FileDetailsGet200ResponseLinksFiles,
    "V1FileDetailsGet200ResponseLinksSelf": V1FileDetailsGet200ResponseLinksSelf,
    "VTConfig": VTConfig,
    "VTConfigCardNotPresent": VTConfigCardNotPresent,
    "VTConfigCardNotPresentGlobalPaymentInformation": VTConfigCardNotPresentGlobalPaymentInformation,
    "VTConfigCardNotPresentGlobalPaymentInformationBasicInformation": VTConfigCardNotPresentGlobalPaymentInformationBasicInformation,
    "VTConfigCardNotPresentGlobalPaymentInformationMerchantDefinedDataFields": VTConfigCardNotPresentGlobalPaymentInformationMerchantDefinedDataFields,
    "VTConfigCardNotPresentGlobalPaymentInformationPaymentInformation": VTConfigCardNotPresentGlobalPaymentInformationPaymentInformation,
    "VTConfigCardNotPresentReceiptInformation": VTConfigCardNotPresentReceiptInformation,
    "VTConfigCardNotPresentReceiptInformationEmailReceipt": VTConfigCardNotPresentReceiptInformationEmailReceipt,
    "VTConfigCardNotPresentReceiptInformationHeader": VTConfigCardNotPresentReceiptInformationHeader,
    "VTConfigCardNotPresentReceiptInformationOrderInformation": VTConfigCardNotPresentReceiptInformationOrderInformation,
    "ValidateExportComplianceRequest": ValidateExportComplianceRequest,
    "ValidateRequest": ValidateRequest,
    "ValueAddedServicesProducts": ValueAddedServicesProducts,
    "VasV2PaymentsPost201Response": VasV2PaymentsPost201Response,
    "VasV2PaymentsPost201ResponseLinks": VasV2PaymentsPost201ResponseLinks,
    "VasV2PaymentsPost201ResponseOrderInformation": VasV2PaymentsPost201ResponseOrderInformation,
    "VasV2PaymentsPost201ResponseOrderInformationJurisdiction": VasV2PaymentsPost201ResponseOrderInformationJurisdiction,
    "VasV2PaymentsPost201ResponseOrderInformationLineItems": VasV2PaymentsPost201ResponseOrderInformationLineItems,
    "VasV2PaymentsPost201ResponseOrderInformationTaxDetails": VasV2PaymentsPost201ResponseOrderInformationTaxDetails,
    "VasV2PaymentsPost201ResponseTaxInformation": VasV2PaymentsPost201ResponseTaxInformation,
    "VasV2PaymentsPost400Response": VasV2PaymentsPost400Response,
    "VasV2TaxVoid200Response": VasV2TaxVoid200Response,
    "VasV2TaxVoid200ResponseVoidAmountDetails": VasV2TaxVoid200ResponseVoidAmountDetails,
    "VasV2TaxVoidsPost400Response": VasV2TaxVoidsPost400Response,
    "Vasv2taxBuyerInformation": Vasv2taxBuyerInformation,
    "Vasv2taxClientReferenceInformation": Vasv2taxClientReferenceInformation,
    "Vasv2taxMerchantInformation": Vasv2taxMerchantInformation,
    "Vasv2taxOrderInformation": Vasv2taxOrderInformation,
    "Vasv2taxOrderInformationBillTo": Vasv2taxOrderInformationBillTo,
    "Vasv2taxOrderInformationInvoiceDetails": Vasv2taxOrderInformationInvoiceDetails,
    "Vasv2taxOrderInformationLineItems": Vasv2taxOrderInformationLineItems,
    "Vasv2taxOrderInformationOrderAcceptance": Vasv2taxOrderInformationOrderAcceptance,
    "Vasv2taxOrderInformationOrderOrigin": Vasv2taxOrderInformationOrderOrigin,
    "Vasv2taxOrderInformationShipTo": Vasv2taxOrderInformationShipTo,
    "Vasv2taxOrderInformationShippingDetails": Vasv2taxOrderInformationShippingDetails,
    "Vasv2taxTaxInformation": Vasv2taxTaxInformation,
    "Vasv2taxidClientReferenceInformation": Vasv2taxidClientReferenceInformation,
    "Vasv2taxidClientReferenceInformationPartner": Vasv2taxidClientReferenceInformationPartner,
    "VerifyCustomerAddressRequest": VerifyCustomerAddressRequest,
    "VoidCaptureRequest": VoidCaptureRequest,
    "VoidCreditRequest": VoidCreditRequest,
    "VoidPaymentRequest": VoidPaymentRequest,
    "VoidRefundRequest": VoidRefundRequest,
    "VoidTaxRequest": VoidTaxRequest,
};
class HttpBasicAuth {
    constructor() {
        this.username = '';
        this.password = '';
    }
    applyToRequest(requestOptions) {
        requestOptions.auth = {
            username: this.username, password: this.password
        };
    }
}
exports.HttpBasicAuth = HttpBasicAuth;
class ApiKeyAuth {
    constructor(location, paramName) {
        this.location = location;
        this.paramName = paramName;
        this.apiKey = '';
    }
    applyToRequest(requestOptions) {
        if (this.location == "query") {
            requestOptions.qs[this.paramName] = this.apiKey;
        }
        else if (this.location == "header" && requestOptions && requestOptions.headers) {
            requestOptions.headers[this.paramName] = this.apiKey;
        }
    }
}
exports.ApiKeyAuth = ApiKeyAuth;
class OAuth {
    constructor() {
        this.accessToken = '';
    }
    applyToRequest(requestOptions) {
        if (requestOptions && requestOptions.headers) {
            requestOptions.headers["Authorization"] = "Bearer " + this.accessToken;
        }
    }
}
exports.OAuth = OAuth;
class VoidAuth {
    constructor() {
        this.username = '';
        this.password = '';
    }
    applyToRequest(_) {
        // Do nothing
    }
}
exports.VoidAuth = VoidAuth;
var ActivationCodesAndCertificatesApiApiKeys;
(function (ActivationCodesAndCertificatesApiApiKeys) {
})(ActivationCodesAndCertificatesApiApiKeys = exports.ActivationCodesAndCertificatesApiApiKeys || (exports.ActivationCodesAndCertificatesApiApiKeys = {}));
class ActivationCodesAndCertificatesApi {
    constructor(basePathOrUsername, password, basePath) {
        this._basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new VoidAuth(),
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    set useQuerystring(value) {
        this._useQuerystring = value;
    }
    set basePath(basePath) {
        this._basePath = basePath;
    }
    get basePath() {
        return this._basePath;
    }
    setDefaultAuthentication(auth) {
        this.authentications.default = auth;
    }
    setApiKey(key, value) {
        this.authentications[ActivationCodesAndCertificatesApiApiKeys[key]].apiKey = value;
    }
    /**
     * Returns a list of activation codes for acceptance devices solution
     * @summary Returns a list of activation codes for acceptance devices solution
     * @param merchantId
     * @param size
     * @param {*} [options] Override http request options.
     */
    generateActivationCodes(merchantId, size, options = {}) {
        const localVarPath = this.basePath + '/dms/merchants/{merchantId}/activation-codes'
            .replace('{' + 'merchantId' + '}', encodeURIComponent(String(merchantId)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        // verify required parameter 'merchantId' is not null or undefined
        if (merchantId === null || merchantId === undefined) {
            throw new Error('Required parameter merchantId was null or undefined when calling generateActivationCodes.');
        }
        // verify required parameter 'size' is not null or undefined
        if (size === null || size === undefined) {
            throw new Error('Required parameter size was null or undefined when calling generateActivationCodes.');
        }
        if (size !== undefined) {
            localVarQueryParameters['size'] = ObjectSerializer.serialize(size, "number");
        }
        Object.assign(localVarHeaderParams, options.headers);
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "InlineResponse2019");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Returns expirations dates of certificates installed on devices activated with acceptance devices products
     * @summary Returns expirations dates of certificates installed on devices activated with acceptance devices products
     * @param merchantId
     * @param {*} [options] Override http request options.
     */
    getCertificateExpirations(merchantId, options = {}) {
        const localVarPath = this.basePath + '/dms/v2/devices/certificates/expirations';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        // verify required parameter 'merchantId' is not null or undefined
        if (merchantId === null || merchantId === undefined) {
            throw new Error('Required parameter merchantId was null or undefined when calling getCertificateExpirations.');
        }
        if (merchantId !== undefined) {
            localVarQueryParameters['merchantId'] = ObjectSerializer.serialize(merchantId, "string");
        }
        Object.assign(localVarHeaderParams, options.headers);
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "InlineResponse20010");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * This string representation of certificate can be used to establish TLS communication for the acceptance devices product
     * @summary Returns the string representation of certificate of the certificate issuing authority
     * @param {*} [options] Override http request options.
     */
    getRootCA(options = {}) {
        const localVarPath = this.basePath + '/dms/v2/devices/certificates/rootca';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        Object.assign(localVarHeaderParams, options.headers);
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "InlineResponse2009");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Revoke the certificate of the specified device of the specified merchant
     * @summary Revoke the certificate of the specified device of the specified merchant
     * @param revokeCertificateRequest Merchant and device details to revoke it&#39;s certificate
     * @param {*} [options] Override http request options.
     */
    revokeCertificates(revokeCertificateRequest, options = {}) {
        const localVarPath = this.basePath + '/dms/v2/devices/certificates/revoke';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        Object.assign(localVarHeaderParams, options.headers);
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(revokeCertificateRequest, "RevokeCertificateRequest")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
}
exports.ActivationCodesAndCertificatesApi = ActivationCodesAndCertificatesApi;
var BatchesApiApiKeys;
(function (BatchesApiApiKeys) {
})(BatchesApiApiKeys = exports.BatchesApiApiKeys || (exports.BatchesApiApiKeys = {}));
class BatchesApi {
    constructor(basePathOrUsername, password, basePath) {
        this._basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new VoidAuth(),
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    set useQuerystring(value) {
        this._useQuerystring = value;
    }
    set basePath(basePath) {
        this._basePath = basePath;
    }
    get basePath() {
        return this._basePath;
    }
    setDefaultAuthentication(auth) {
        this.authentications.default = auth;
    }
    setApiKey(key, value) {
        this.authentications[BatchesApiApiKeys[key]].apiKey = value;
    }
    /**
     * **Get Batch Report**<br>This resource accepts a batch id and returns: - The batch status. - The total number of accepted, rejected, updated records. - The total number of card association responses. - The billable quantities of:   - New Account Numbers (NAN)   - New Expiry Dates (NED)   - Account Closures (ACL)   - Contact Card Holders (CCH) - Source record information including token ids, masked card number, expiration dates & card type. - Response record information including response code, reason, token ids, masked card number, expiration dates & card type.
     * @summary Retrieve a Batch Report
     * @param batchId Unique identification number assigned to the submitted request.
     * @param {*} [options] Override http request options.
     */
    getBatchReport(batchId, options = {}) {
        const localVarPath = this.basePath + '/accountupdater/v1/batches/{batchId}/report'
            .replace('{' + 'batchId' + '}', encodeURIComponent(String(batchId)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        // verify required parameter 'batchId' is not null or undefined
        if (batchId === null || batchId === undefined) {
            throw new Error('Required parameter batchId was null or undefined when calling getBatchReport.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "InlineResponse20014");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * **Get Batch Status**<br>This resource accepts a batch id and returns: - The batch status. - The total number of accepted, rejected, updated records. - The total number of card association responses. - The billable quantities of:   - New Account Numbers (NAN)   - New Expiry Dates (NED)   - Account Closures (ACL)   - Contact Card Holders (CCH)
     * @summary Retrieve a Batch Status
     * @param batchId Unique identification number assigned to the submitted request.
     * @param {*} [options] Override http request options.
     */
    getBatchStatus(batchId, options = {}) {
        const localVarPath = this.basePath + '/accountupdater/v1/batches/{batchId}/status'
            .replace('{' + 'batchId' + '}', encodeURIComponent(String(batchId)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        // verify required parameter 'batchId' is not null or undefined
        if (batchId === null || batchId === undefined) {
            throw new Error('Required parameter batchId was null or undefined when calling getBatchStatus.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "InlineResponse20013");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * **List Batches**<br>This resource accepts a optional date range, record offset and limit, returning a paginated response of batches containing: - The batch id. - The batch status. - The batch created / modified dates. - The total number of accepted, rejected, updated records. - The total number of card association responses.
     * @summary List Batches
     * @param offset Starting record in zero-based dataset that should be returned as the first object in the array.
     * @param limit The maximum number that can be returned in the array starting from the offset record in zero-based dataset.
     * @param fromDate ISO-8601 format: yyyyMMddTHHmmssZ
     * @param toDate ISO-8601 format: yyyyMMddTHHmmssZ
     * @param {*} [options] Override http request options.
     */
    getBatchesList(offset, limit, fromDate, toDate, options = {}) {
        const localVarPath = this.basePath + '/accountupdater/v1/batches';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        if (offset !== undefined) {
            localVarQueryParameters['offset'] = ObjectSerializer.serialize(offset, "number");
        }
        if (limit !== undefined) {
            localVarQueryParameters['limit'] = ObjectSerializer.serialize(limit, "number");
        }
        if (fromDate !== undefined) {
            localVarQueryParameters['fromDate'] = ObjectSerializer.serialize(fromDate, "string");
        }
        if (toDate !== undefined) {
            localVarQueryParameters['toDate'] = ObjectSerializer.serialize(toDate, "string");
        }
        Object.assign(localVarHeaderParams, options.headers);
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "InlineResponse20012");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * **Create a Batch**<br>This resource accepts TMS tokens ids of a Customer, Payment Instrument or Instrument Identifier. <br> The card numbers for the supplied tokens ids are then sent to the relevant card associations to check for updates.<br>The following type of batches can be submitted: -  **oneOff** batch containing tokens id for Visa or MasterCard card numbers. - **amexRegistration** batch containing tokens id for Amex card numbers.  A batch id will be returned on a successful response which can be used to get the batch status and the batch report. The availability of API features for a merchant may depend on the portfolio configuration and may need to be enabled at the portfolio level before they can be added to merchant accounts.
     * @summary Create a Batch
     * @param body
     * @param {*} [options] Override http request options.
     */
    postBatch(body, options = {}) {
        const localVarPath = this.basePath + '/accountupdater/v1/batches';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling postBatch.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "Body")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "InlineResponse202");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
}
exports.BatchesApi = BatchesApi;
var BillingAgreementsApiApiKeys;
(function (BillingAgreementsApiApiKeys) {
})(BillingAgreementsApiApiKeys = exports.BillingAgreementsApiApiKeys || (exports.BillingAgreementsApiApiKeys = {}));
class BillingAgreementsApi {
    constructor(basePathOrUsername, password, basePath) {
        this._basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new VoidAuth(),
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    set useQuerystring(value) {
        this._useQuerystring = value;
    }
    set basePath(basePath) {
        this._basePath = basePath;
    }
    get basePath() {
        return this._basePath;
    }
    setDefaultAuthentication(auth) {
        this.authentications.default = auth;
    }
    setApiKey(key, value) {
        this.authentications[BillingAgreementsApiApiKeys[key]].apiKey = value;
    }
    /**
     * #### Standing Instruction: Standing Instruction with or without Token.  #### Revoke Mandate: When you revoke a mandate, any pending direct debits linked to that mandate are canceled. No notifications are sent. When you revoke a mandate with no pending direct debits, the Bacs scheme or customer’s bank notify you of any subsequent direct debit events. When you revoke a mandate, you cannot send a direct debit request using the mandate ID. Customer payments cannot be made against a revoked mandate. You can revoke a mandate when the customer:   - Requests that you revoke the mandate.   - Closes their account with you. Possible revoke mandate status values -   - Revoked—the revoke mandate request was successfully processed.   - Failed—the revoke mandate request was not accepted.  #### Update Mandate: In most cases, the account details of an existing mandate cannot be updated in the Bacs schema, except by creating a new mandate. However, some very limited customer information, like name and address, can be updated to the mandate without needing to revoke it first  #### Mandate Status: After the customer signs the mandate, request that the mandate status service verify the mandate status. Possible mandate status values:   - Active—the mandate is successfully created. A direct debit can be sent for this mandate ID.   - Pending—a pending mandate means the mandate is not yet signed.   - Failed—the customer did not authenticate.   - Expired—the deadline to create the mandate passed.   - Revoked—the mandate is cancelled.  #### Paypal Billing Agreement:  A billing agreement is set up between PayPal and your customer. When you collect the details of a customer’s billing agreement, you are able to bill that customer without requiring an authorization for each payment.  You can bill the customer at the same time you process their PayPal Express checkout order, which simplifies your business processes.
     * @summary Modify a Billing Agreement
     * @param modifyBillingAgreement
     * @param id ID for de-registration or cancellation of Billing Agreement
     * @param {*} [options] Override http request options.
     */
    billingAgreementsDeRegistration(modifyBillingAgreement, id, options = {}) {
        const localVarPath = this.basePath + '/pts/v2/billing-agreements/{id}'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        // verify required parameter 'modifyBillingAgreement' is not null or undefined
        if (modifyBillingAgreement === null || modifyBillingAgreement === undefined) {
            throw new Error('Required parameter modifyBillingAgreement was null or undefined when calling billingAgreementsDeRegistration.');
        }
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling billingAgreementsDeRegistration.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'PATCH',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(modifyBillingAgreement, "ModifyBillingAgreement")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "PtsV2ModifyBillingAgreementPost201Response");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Standing Instruction with or without Token.
     * @summary Standing Instruction intimation
     * @param intimateBillingAgreement
     * @param id ID for intimation of Billing Agreement
     * @param {*} [options] Override http request options.
     */
    billingAgreementsIntimation(intimateBillingAgreement, id, options = {}) {
        const localVarPath = this.basePath + '/pts/v2/billing-agreements/{id}/intimations'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        // verify required parameter 'intimateBillingAgreement' is not null or undefined
        if (intimateBillingAgreement === null || intimateBillingAgreement === undefined) {
            throw new Error('Required parameter intimateBillingAgreement was null or undefined when calling billingAgreementsIntimation.');
        }
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling billingAgreementsIntimation.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(intimateBillingAgreement, "IntimateBillingAgreement")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "PtsV2CreditsPost201Response1");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * #### Standing Instruction: Standing Instruction with or without Token. Transaction amount in case First payment is coming along with registration. Only 2 decimal places allowed  #### Create Mandate: You can create a mandate through the direct debit mandate flow. Possible create mandate status values:   - Pending—the create mandate request was successfully processed.   - Failed—the create mandate request was not accepted.  #### Import Mandate: In the Bacs scheme, a mandate is created with a status of active. Direct debit collections can be made against it immediately. You can import a mandate to the CyberSource database when:   - You have existing customers with signed, active mandates   - You manage mandates outside of CyberSource.  When you import an existing mandate to the CyberSource database, provide a unique value for the mandate ID or the request results in an error. If an import mandate request is not accepted, the import mandate status value is failed.
     * @summary Create a Billing Agreement
     * @param createBillingAgreement
     * @param {*} [options] Override http request options.
     */
    billingAgreementsRegistration(createBillingAgreement, options = {}) {
        const localVarPath = this.basePath + '/pts/v2/billing-agreements';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        // verify required parameter 'createBillingAgreement' is not null or undefined
        if (createBillingAgreement === null || createBillingAgreement === undefined) {
            throw new Error('Required parameter createBillingAgreement was null or undefined when calling billingAgreementsRegistration.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(createBillingAgreement, "CreateBillingAgreement")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "PtsV2CreateBillingAgreementPost201Response");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
}
exports.BillingAgreementsApi = BillingAgreementsApi;
var BinLookupApiApiKeys;
(function (BinLookupApiApiKeys) {
})(BinLookupApiApiKeys = exports.BinLookupApiApiKeys || (exports.BinLookupApiApiKeys = {}));
class BinLookupApi {
    constructor(basePathOrUsername, password, basePath) {
        this._basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new VoidAuth(),
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    set useQuerystring(value) {
        this._useQuerystring = value;
    }
    set basePath(basePath) {
        this._basePath = basePath;
    }
    get basePath() {
        return this._basePath;
    }
    setDefaultAuthentication(auth) {
        this.authentications.default = auth;
    }
    setApiKey(key, value) {
        this.authentications[BinLookupApiApiKeys[key]].apiKey = value;
    }
    /**
     * The BIN Lookup Service is a versatile business tool that provides card network agnostic solution designed to ensure frictionless transaction experience by utilizing up-to-date Bank Identification Number (BIN) attributes sourced from multiple global and regional data sources. This service helps to improve authorization rates by helping to route transactions to the best-suited card network, minimizes fraud through card detail verification and aids in regulatory compliance by identifying card properties. The service is flexible and provides businesses with a flexible choice of inputs such as primary account number (PAN), network token from major networks (such as Visa, American Express, Discover and several regional networks) which includes device PAN (DPAN), and all types of tokens generated via CyberSource Token Management Service (TMS). Currently, the range of available credentials is contingent on the networks enabled for the business entity. Therefore, the network information specified in this documentation is illustrative and subject to personalized offerings for each reseller or merchant.
     * @summary BIN Lookup API
     * @param createBinLookupRequest
     * @param {*} [options] Override http request options.
     */
    getAccountInfo(createBinLookupRequest, options = {}) {
        const localVarPath = this.basePath + '/bin/v1/binlookup';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        // verify required parameter 'createBinLookupRequest' is not null or undefined
        if (createBinLookupRequest === null || createBinLookupRequest === undefined) {
            throw new Error('Required parameter createBinLookupRequest was null or undefined when calling getAccountInfo.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(createBinLookupRequest, "CreateBinLookupRequest")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "InlineResponse2012");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
}
exports.BinLookupApi = BinLookupApi;
var CaptureApiApiKeys;
(function (CaptureApiApiKeys) {
})(CaptureApiApiKeys = exports.CaptureApiApiKeys || (exports.CaptureApiApiKeys = {}));
class CaptureApi {
    constructor(basePathOrUsername, password, basePath) {
        this._basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new VoidAuth(),
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    set useQuerystring(value) {
        this._useQuerystring = value;
    }
    set basePath(basePath) {
        this._basePath = basePath;
    }
    get basePath() {
        return this._basePath;
    }
    setDefaultAuthentication(auth) {
        this.authentications.default = auth;
    }
    setApiKey(key, value) {
        this.authentications[CaptureApiApiKeys[key]].apiKey = value;
    }
    /**
     * Include the payment ID in the POST request to capture the payment amount.
     * @summary Capture a Payment
     * @param capturePaymentRequest
     * @param id The payment ID returned from a previous payment request. This ID links the capture to the payment.
     * @param {*} [options] Override http request options.
     */
    capturePayment(capturePaymentRequest, id, options = {}) {
        const localVarPath = this.basePath + '/pts/v2/payments/{id}/captures'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        // verify required parameter 'capturePaymentRequest' is not null or undefined
        if (capturePaymentRequest === null || capturePaymentRequest === undefined) {
            throw new Error('Required parameter capturePaymentRequest was null or undefined when calling capturePayment.');
        }
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling capturePayment.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(capturePaymentRequest, "CapturePaymentRequest")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "PtsV2PaymentsCapturesPost201Response");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
}
exports.CaptureApi = CaptureApi;
var ChargebackDetailsApiApiKeys;
(function (ChargebackDetailsApiApiKeys) {
})(ChargebackDetailsApiApiKeys = exports.ChargebackDetailsApiApiKeys || (exports.ChargebackDetailsApiApiKeys = {}));
class ChargebackDetailsApi {
    constructor(basePathOrUsername, password, basePath) {
        this._basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new VoidAuth(),
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    set useQuerystring(value) {
        this._useQuerystring = value;
    }
    set basePath(basePath) {
        this._basePath = basePath;
    }
    get basePath() {
        return this._basePath;
    }
    setDefaultAuthentication(auth) {
        this.authentications.default = auth;
    }
    setApiKey(key, value) {
        this.authentications[ChargebackDetailsApiApiKeys[key]].apiKey = value;
    }
    /**
     * Chargeback Detail Report Description
     * @summary Get Chargeback Details
     * @param startTime Valid report Start Time in **ISO 8601 format** Please refer the following link to know more about ISO 8601 format.[Rfc Date Format](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#anchor14)  **Example date format:**   - yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ (e.g. 2018-01-01T00:00:00.000Z)
     * @param endTime Valid report End Time in **ISO 8601 format** Please refer the following link to know more about ISO 8601 format.[Rfc Date Format](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#anchor14)  **Example date format:**   - yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ (e.g. 2018-01-01T00:00:00.000Z)
     * @param organizationId Valid Organization Id
     * @param {*} [options] Override http request options.
     */
    getChargebackDetails(startTime, endTime, organizationId, options = {}) {
        const localVarPath = this.basePath + '/reporting/v3/chargeback-details';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        // verify required parameter 'startTime' is not null or undefined
        if (startTime === null || startTime === undefined) {
            throw new Error('Required parameter startTime was null or undefined when calling getChargebackDetails.');
        }
        // verify required parameter 'endTime' is not null or undefined
        if (endTime === null || endTime === undefined) {
            throw new Error('Required parameter endTime was null or undefined when calling getChargebackDetails.');
        }
        if (startTime !== undefined) {
            localVarQueryParameters['startTime'] = ObjectSerializer.serialize(startTime, "Date");
        }
        if (endTime !== undefined) {
            localVarQueryParameters['endTime'] = ObjectSerializer.serialize(endTime, "Date");
        }
        if (organizationId !== undefined) {
            localVarQueryParameters['organizationId'] = ObjectSerializer.serialize(organizationId, "string");
        }
        Object.assign(localVarHeaderParams, options.headers);
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "ReportingV3ChargebackDetailsGet200Response");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
}
exports.ChargebackDetailsApi = ChargebackDetailsApi;
var ChargebackSummariesApiApiKeys;
(function (ChargebackSummariesApiApiKeys) {
})(ChargebackSummariesApiApiKeys = exports.ChargebackSummariesApiApiKeys || (exports.ChargebackSummariesApiApiKeys = {}));
class ChargebackSummariesApi {
    constructor(basePathOrUsername, password, basePath) {
        this._basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new VoidAuth(),
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    set useQuerystring(value) {
        this._useQuerystring = value;
    }
    set basePath(basePath) {
        this._basePath = basePath;
    }
    get basePath() {
        return this._basePath;
    }
    setDefaultAuthentication(auth) {
        this.authentications.default = auth;
    }
    setApiKey(key, value) {
        this.authentications[ChargebackSummariesApiApiKeys[key]].apiKey = value;
    }
    /**
     * Chargeback Summary Report Description
     * @summary Get Chargeback Summaries
     * @param startTime Valid report Start Time in **ISO 8601 format** Please refer the following link to know more about ISO 8601 format.[Rfc Date Format](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#anchor14)  **Example date format:**   - yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ (e.g. 2018-01-01T00:00:00.000Z)
     * @param endTime Valid report End Time in **ISO 8601 format** Please refer the following link to know more about ISO 8601 format.[Rfc Date Format](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#anchor14)  **Example date format:**   - yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ (e.g. 2018-01-01T00:00:00.000Z)
     * @param organizationId Valid Organization Id
     * @param {*} [options] Override http request options.
     */
    getChargebackSummaries(startTime, endTime, organizationId, options = {}) {
        const localVarPath = this.basePath + '/reporting/v3/chargeback-summaries';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        // verify required parameter 'startTime' is not null or undefined
        if (startTime === null || startTime === undefined) {
            throw new Error('Required parameter startTime was null or undefined when calling getChargebackSummaries.');
        }
        // verify required parameter 'endTime' is not null or undefined
        if (endTime === null || endTime === undefined) {
            throw new Error('Required parameter endTime was null or undefined when calling getChargebackSummaries.');
        }
        if (startTime !== undefined) {
            localVarQueryParameters['startTime'] = ObjectSerializer.serialize(startTime, "Date");
        }
        if (endTime !== undefined) {
            localVarQueryParameters['endTime'] = ObjectSerializer.serialize(endTime, "Date");
        }
        if (organizationId !== undefined) {
            localVarQueryParameters['organizationId'] = ObjectSerializer.serialize(organizationId, "string");
        }
        Object.assign(localVarHeaderParams, options.headers);
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "ReportingV3ChargebackSummariesGet200Response");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
}
exports.ChargebackSummariesApi = ChargebackSummariesApi;
var ConversionDetailsApiApiKeys;
(function (ConversionDetailsApiApiKeys) {
})(ConversionDetailsApiApiKeys = exports.ConversionDetailsApiApiKeys || (exports.ConversionDetailsApiApiKeys = {}));
class ConversionDetailsApi {
    constructor(basePathOrUsername, password, basePath) {
        this._basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new VoidAuth(),
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    set useQuerystring(value) {
        this._useQuerystring = value;
    }
    set basePath(basePath) {
        this._basePath = basePath;
    }
    get basePath() {
        return this._basePath;
    }
    setDefaultAuthentication(auth) {
        this.authentications.default = auth;
    }
    setApiKey(key, value) {
        this.authentications[ConversionDetailsApiApiKeys[key]].apiKey = value;
    }
    /**
     * Get conversion detail of transactions for a merchant.
     * @summary Get Conversion Detail Transactions
     * @param startTime Valid report Start Time in **ISO 8601 format** Please refer the following link to know more about ISO 8601 format.[Rfc Date Format](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#anchor14)  **Example date format:**   - yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ (e.g. 2018-01-01T00:00:00.000Z)
     * @param endTime Valid report End Time in **ISO 8601 format** Please refer the following link to know more about ISO 8601 format.[Rfc Date Format](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#anchor14)  **Example date format:**   - yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ (e.g. 2018-01-01T00:00:00.000Z)
     * @param organizationId Valid Organization Id
     * @param {*} [options] Override http request options.
     */
    getConversionDetail(startTime, endTime, organizationId, options = {}) {
        const localVarPath = this.basePath + '/reporting/v3/conversion-details';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        // verify required parameter 'startTime' is not null or undefined
        if (startTime === null || startTime === undefined) {
            throw new Error('Required parameter startTime was null or undefined when calling getConversionDetail.');
        }
        // verify required parameter 'endTime' is not null or undefined
        if (endTime === null || endTime === undefined) {
            throw new Error('Required parameter endTime was null or undefined when calling getConversionDetail.');
        }
        if (startTime !== undefined) {
            localVarQueryParameters['startTime'] = ObjectSerializer.serialize(startTime, "Date");
        }
        if (endTime !== undefined) {
            localVarQueryParameters['endTime'] = ObjectSerializer.serialize(endTime, "Date");
        }
        if (organizationId !== undefined) {
            localVarQueryParameters['organizationId'] = ObjectSerializer.serialize(organizationId, "string");
        }
        Object.assign(localVarHeaderParams, options.headers);
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "ReportingV3ConversionDetailsGet200Response");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
}
exports.ConversionDetailsApi = ConversionDetailsApi;
var CreateAndUpdateDevicesApiApiKeys;
(function (CreateAndUpdateDevicesApiApiKeys) {
})(CreateAndUpdateDevicesApiApiKeys = exports.CreateAndUpdateDevicesApiApiKeys || (exports.CreateAndUpdateDevicesApiApiKeys = {}));
class CreateAndUpdateDevicesApi {
    constructor(basePathOrUsername, password, basePath) {
        this._basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new VoidAuth(),
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    set useQuerystring(value) {
        this._useQuerystring = value;
    }
    set basePath(basePath) {
        this._basePath = basePath;
    }
    get basePath() {
        return this._basePath;
    }
    setDefaultAuthentication(auth) {
        this.authentications.default = auth;
    }
    setApiKey(key, value) {
        this.authentications[CreateAndUpdateDevicesApiApiKeys[key]].apiKey = value;
    }
    /**
     * Create a device or terminal for a merchant.
     * @summary Create device or terminal
     * @param body A new device or terminal.
     * @param {*} [options] Override http request options.
     */
    createDevice(body, options = {}) {
        const localVarPath = this.basePath + '/dms/v2/devices';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        Object.assign(localVarHeaderParams, options.headers);
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "Body")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "InlineResponse2018");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Update a device or terminal for a merchant.
     * @summary Update a device or terminal
     * @param id Device ID
     * @param body Update a device or terminal.
     * @param {*} [options] Override http request options.
     */
    updateDevice(id, body, options = {}) {
        const localVarPath = this.basePath + '/dms/v2/devices/{id}'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling updateDevice.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'PATCH',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "Body1")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "InlineResponse2006");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
}
exports.CreateAndUpdateDevicesApi = CreateAndUpdateDevicesApi;
var CreateNewWebhooksApiApiKeys;
(function (CreateNewWebhooksApiApiKeys) {
})(CreateNewWebhooksApiApiKeys = exports.CreateNewWebhooksApiApiKeys || (exports.CreateNewWebhooksApiApiKeys = {}));
class CreateNewWebhooksApi {
    constructor(basePathOrUsername, password, basePath) {
        this._basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new VoidAuth(),
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    set useQuerystring(value) {
        this._useQuerystring = value;
    }
    set basePath(basePath) {
        this._basePath = basePath;
    }
    get basePath() {
        return this._basePath;
    }
    setDefaultAuthentication(auth) {
        this.authentications.default = auth;
    }
    setApiKey(key, value) {
        this.authentications[CreateNewWebhooksApiApiKeys[key]].apiKey = value;
    }
    /**
     * Retrieve a list of products and event types that your account is eligible for. These products and events are the ones that you may subscribe to in the next step of creating webhooks.
     * @summary Find Products You Can Subscribe To
     * @param organizationId The Organization Identifier.
     * @param {*} [options] Override http request options.
     */
    findProductsToSubscribe(organizationId, options = {}) {
        const localVarPath = this.basePath + '/notification-subscriptions/v2/products/{organizationId}'
            .replace('{' + 'organizationId' + '}', encodeURIComponent(String(organizationId)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        // verify required parameter 'organizationId' is not null or undefined
        if (organizationId === null || organizationId === undefined) {
            throw new Error('Required parameter organizationId was null or undefined when calling findProductsToSubscribe.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "Array<InlineResponse2003>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Create a new webhook subscription. Before creating a webhook, ensure that a signature key has been created.  For the example \"Create Webhook using oAuth with Client Credentials\" - for clients who have more than one oAuth Provider and have different client secrets that they would like to config for a given webhook, they may do so by overriding the keyId inside security config of webhook subscription. See the Developer Center examples section titled \"Webhook Security - Create or Store Egress Symmetric Key - Store oAuth Credentials For Symmetric Key\" to store these oAuth credentials that CYBS will need for oAuth.  For JWT authentication, attach your oAuth details to the webhook subscription. See the example \"Create Webhook using oAuth with JWT\"
     * @summary Create a New Webhook Subscription
     * @param createWebhook The webhook payload
     * @param {*} [options] Override http request options.
     */
    notificationSubscriptionsV2WebhooksPost(createWebhook, options = {}) {
        const localVarPath = this.basePath + '/notification-subscriptions/v2/webhooks';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        Object.assign(localVarHeaderParams, options.headers);
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(createWebhook, "CreateWebhook")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "InlineResponse2015");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Create security keys that CyberSource will use internally to connect to your servers and validate messages using a digital signature.  Select the CREATE example for CyberSource to generate the key on our server and maintain it for you as well. Remember to save the key in the API response, so that you can use it to validate messages later.
     * @summary Create Webhook Security Keys
     * @param vCSenderOrganizationId Sender organization id
     * @param vCPermissions Encoded user permissions returned by the CGK, for the entity user who initiated the boarding
     * @param vCCorrelationId A globally unique id associated with your request
     * @param saveSymEgressKey Provide egress Symmetric key information to save (create or store or refresh)
     * @param {*} [options] Override http request options.
     */
    saveSymEgressKey(vCSenderOrganizationId, vCPermissions, vCCorrelationId, saveSymEgressKey, options = {}) {
        const localVarPath = this.basePath + '/kms/egress/v2/keys-sym';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        // verify required parameter 'vCSenderOrganizationId' is not null or undefined
        if (vCSenderOrganizationId === null || vCSenderOrganizationId === undefined) {
            throw new Error('Required parameter vCSenderOrganizationId was null or undefined when calling saveSymEgressKey.');
        }
        // verify required parameter 'vCPermissions' is not null or undefined
        if (vCPermissions === null || vCPermissions === undefined) {
            throw new Error('Required parameter vCPermissions was null or undefined when calling saveSymEgressKey.');
        }
        localVarHeaderParams['v-c-correlation-id'] = ObjectSerializer.serialize(vCCorrelationId, "string");
        localVarHeaderParams['v-c-sender-organization-id'] = ObjectSerializer.serialize(vCSenderOrganizationId, "string");
        localVarHeaderParams['v-c-permissions'] = ObjectSerializer.serialize(vCPermissions, "string");
        Object.assign(localVarHeaderParams, options.headers);
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(saveSymEgressKey, "SaveSymEgressKey")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "InlineResponse2014");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
}
exports.CreateNewWebhooksApi = CreateNewWebhooksApi;
var CreditApiApiKeys;
(function (CreditApiApiKeys) {
})(CreditApiApiKeys = exports.CreditApiApiKeys || (exports.CreditApiApiKeys = {}));
class CreditApi {
    constructor(basePathOrUsername, password, basePath) {
        this._basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new VoidAuth(),
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    set useQuerystring(value) {
        this._useQuerystring = value;
    }
    set basePath(basePath) {
        this._basePath = basePath;
    }
    get basePath() {
        return this._basePath;
    }
    setDefaultAuthentication(auth) {
        this.authentications.default = auth;
    }
    setApiKey(key, value) {
        this.authentications[CreditApiApiKeys[key]].apiKey = value;
    }
    /**
     * POST to the credit resource to credit funds to a specified credit card.
     * @summary Process a Credit
     * @param createCreditRequest
     * @param {*} [options] Override http request options.
     */
    createCredit(createCreditRequest, options = {}) {
        const localVarPath = this.basePath + '/pts/v2/credits';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        // verify required parameter 'createCreditRequest' is not null or undefined
        if (createCreditRequest === null || createCreditRequest === undefined) {
            throw new Error('Required parameter createCreditRequest was null or undefined when calling createCredit.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(createCreditRequest, "CreateCreditRequest")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "PtsV2CreditsPost201Response");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
}
exports.CreditApi = CreditApi;
var CustomerApiApiKeys;
(function (CustomerApiApiKeys) {
})(CustomerApiApiKeys = exports.CustomerApiApiKeys || (exports.CustomerApiApiKeys = {}));
class CustomerApi {
    constructor(basePathOrUsername, password, basePath) {
        this._basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new VoidAuth(),
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    set useQuerystring(value) {
        this._useQuerystring = value;
    }
    set basePath(basePath) {
        this._basePath = basePath;
    }
    get basePath() {
        return this._basePath;
    }
    setDefaultAuthentication(auth) {
        this.authentications.default = auth;
    }
    setApiKey(key, value) {
        this.authentications[CustomerApiApiKeys[key]].apiKey = value;
    }
    /**
     * |  |  |  | | --- | --- | --- | |**Customers**<br>A Customer represents your tokenized customer information.<br>You should associate the Customer Id with the customer account on your systems.<br>A Customer can have one or more [Payment Instruments](#token-management_customer-payment-instrument_create-a-customer-payment-instrumentl) or [Shipping Addresses](#token-management_customer-shipping-address_create-a-customer-shipping-address) with one allocated as the Customers default.|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|**Deleting a Customer**<br>Your system can use this API to delete a complete Customer.<br>When a Customer is deleted all associated Payment Instruments & Shipping Addresses are deleted.<br>Any Instrument Identifiers representing the card number will also be deleted if they are not associated with any other Payment Instruments.<br>Note: Individual [Payment Instruments](#token-management_customer-payment-instrument_delete-a-customer-payment-instrument) or [Shipping Addresses](#token-management_customer-shipping-address_delete-a-customer-shipping-address) can be deleted via their own dedicated API resources.
     * @summary Delete a Customer
     * @param customerId The Id of a Customer.
     * @param profileId The Id of a profile containing user specific TMS configuration.
     * @param {*} [options] Override http request options.
     */
    deleteCustomer(customerId, profileId, options = {}) {
        const localVarPath = this.basePath + '/tms/v2/customers/{customerId}'
            .replace('{' + 'customerId' + '}', encodeURIComponent(String(customerId)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        // verify required parameter 'customerId' is not null or undefined
        if (customerId === null || customerId === undefined) {
            throw new Error('Required parameter customerId was null or undefined when calling deleteCustomer.');
        }
        localVarHeaderParams['profile-id'] = ObjectSerializer.serialize(profileId, "string");
        Object.assign(localVarHeaderParams, options.headers);
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'DELETE',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * |  |  |  | | --- | --- | --- | |**Customers**<br>A Customer represents your tokenized customer information.<br>You should associate the Customer Id with the customer account on your systems.<br>A Customer can have one or more [Payment Instruments](#token-management_customer-payment-instrument_create-a-customer-payment-instrumentl) or [Shipping Addresses](#token-management_customer-shipping-address_create-a-customer-shipping-address) with one allocated as the Customers default.<br><br>**Retrieving a Customer**<br>When your customer signs into their account, your system can use this API to retrieve the Customers default Payment Instrument and Shipping Address.<br>**Note: the actual card data will be masked.**<br>If your customer wants to see other available Payment Instruments, your system can [retrieve all Payment Instruments](#token-management_customer-payment-instrument_list-payment-instruments-for-a-customer) associated with the Customer.<br>The same applies to [Shipping Addresses](#token-management_customer-shipping-address_list-shipping-addresses-for-a-customer).|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|**Payment Network Tokens**<br>Network tokens perform better than regular card numbers and they are not necessarily invalidated when a cardholder loses their card, or it expires.<br>A Payment Network Token will be automatically created and used in future payments if you are enabled for the service.<br>A Payment Network Token can also be [provisioned for an existing Instrument Identifier](#token-management_instrument-identifier_enroll-an-instrument-identifier-for-payment-network-token).<br>For more information about Payment Network Tokens see the Developer Guide.<br><br>**Payments with Customers**<br>To perform a payment with the Customers default details specify the [Customer Id in the payments request](#payments_payments_process-a-payment_samplerequests-dropdown_authorization-using-tokens_authorization-with-customer-token-id_liveconsole-tab-request-body).<br>To perform a payment with a particular Payment Instrument or Shipping Address <br>specify the [Payment Instrument or Shipping Address Ids in the payments request](#payments_payments_process-a-payment_samplerequests-dropdown_authorization-using-tokens_authorization-with-customer-payment-instrument-and-shipping-address-token-id_liveconsole-tab-request-body).
     * @summary Retrieve a Customer
     * @param customerId The Id of a Customer.
     * @param profileId The Id of a profile containing user specific TMS configuration.
     * @param {*} [options] Override http request options.
     */
    getCustomer(customerId, profileId, options = {}) {
        const localVarPath = this.basePath + '/tms/v2/customers/{customerId}'
            .replace('{' + 'customerId' + '}', encodeURIComponent(String(customerId)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        // verify required parameter 'customerId' is not null or undefined
        if (customerId === null || customerId === undefined) {
            throw new Error('Required parameter customerId was null or undefined when calling getCustomer.');
        }
        localVarHeaderParams['profile-id'] = ObjectSerializer.serialize(profileId, "string");
        Object.assign(localVarHeaderParams, options.headers);
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "PostCustomerRequest");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * |  |  |  | | --- | --- | --- | |**Customers**<br>A Customer represents your tokenized customer information.<br>You should associate the Customer Id with the customer account on your systems.<br>A Customer can have one or more [Payment Instruments](#token-management_customer-payment-instrument_create-a-customer-payment-instrumentl) or [Shipping Addresses](#token-management_customer-shipping-address_create-a-customer-shipping-address) with one allocated as the Customers default.|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|**Updating a Customer**<br>Your system can use this API to update a Customers details including selecting a  [default Payment Instrument](#token-management_customer_update-a-customer_samplerequests-dropdown_update-customers-default-payment-instrument_liveconsole-tab-request-body) or [default Shipping Address](#token-management_customer_update-a-customer_samplerequests-dropdown_update-customers-default-shipping-address_liveconsole-tab-request-body) for use in payments.<br>Note: Updating a Customers [Payment Instrument](#token-management_customer-payment-instrument_update-a-customer-payment-instrument) or [Shipping Address](#token-management_customer-shipping-address_update-a-customer-shipping-address) details is performed using their own dedicated API resources.
     * @summary Update a Customer
     * @param customerId The Id of a Customer.
     * @param patchCustomerRequest
     * @param profileId The Id of a profile containing user specific TMS configuration.
     * @param ifMatch Contains an ETag value from a GET request to make the request conditional.
     * @param {*} [options] Override http request options.
     */
    patchCustomer(customerId, patchCustomerRequest, profileId, ifMatch, options = {}) {
        const localVarPath = this.basePath + '/tms/v2/customers/{customerId}'
            .replace('{' + 'customerId' + '}', encodeURIComponent(String(customerId)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        // verify required parameter 'customerId' is not null or undefined
        if (customerId === null || customerId === undefined) {
            throw new Error('Required parameter customerId was null or undefined when calling patchCustomer.');
        }
        // verify required parameter 'patchCustomerRequest' is not null or undefined
        if (patchCustomerRequest === null || patchCustomerRequest === undefined) {
            throw new Error('Required parameter patchCustomerRequest was null or undefined when calling patchCustomer.');
        }
        localVarHeaderParams['profile-id'] = ObjectSerializer.serialize(profileId, "string");
        localVarHeaderParams['if-match'] = ObjectSerializer.serialize(ifMatch, "string");
        Object.assign(localVarHeaderParams, options.headers);
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'PATCH',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(patchCustomerRequest, "PatchCustomerRequest")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "PatchCustomerRequest");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * |  |  |  | | --- | --- | --- | |**Customers**<br>A Customer represents your tokenized customer information.<br>You should associate the Customer Id with the customer account on your systems.<br>A Customer can have one or more [Payment Instruments](#token-management_customer-payment-instrument_create-a-customer-payment-instrumentl) or [Shipping Addresses](#token-management_customer-shipping-address_create-a-customer-shipping-address) with one allocated as the Customers default.<br><br>**Creating a Customer**<br>It is recommended you [create a Customer via a Payment Authorization](#payments_payments_process-a-payment_samplerequests-dropdown_authorization-with-token-create_authorization-with-customer-token-creation_liveconsole-tab-request-body), this can be for a zero amount.<br>The Customer will be created with a Payment Instrument and Shipping Address.<br>You can also [add additional Payment Instruments to a Customer via a Payment Authorization](#payments_payments_process-a-payment_samplerequests-dropdown_authorization-with-token-create_authorization-create-default-payment-instrument-shipping-address-for-existing-customer_liveconsole-tab-request-body).<br>In Europe: You should perform Payer Authentication alongside the Authorization.|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|**Payment Network Tokens**<br>Network tokens perform better than regular card numbers and they are not necessarily invalidated when a cardholder loses their card, or it expires.<br>A Payment Network Token will be automatically created and used in future payments if you are enabled for the service.<br>A Payment Network Token can also be [provisioned for an existing Instrument Identifier](#token-management_instrument-identifier_enroll-an-instrument-identifier-for-payment-network-token).<br>For more information about Payment Network Tokens see the Developer Guide.<br><br>**Payments with Customers**<br>To perform a payment with the Customers default details specify the [Customer Id in the payments request](#payments_payments_process-a-payment_samplerequests-dropdown_authorization-using-tokens_authorization-with-customer-token-id_liveconsole-tab-request-body).<br>To perform a payment with a particular Payment Instrument or Shipping Address <br>specify the [Payment Instrument or Shipping Address Ids in the payments request](#payments_payments_process-a-payment_samplerequests-dropdown_authorization-using-tokens_authorization-with-customer-payment-instrument-and-shipping-address-token-id_liveconsole-tab-request-body). The availability of API features for a merchant may depend on the portfolio configuration and may need to be enabled at the portfolio level before they can be added to merchant accounts.
     * @summary Create a Customer
     * @param postCustomerRequest
     * @param profileId The Id of a profile containing user specific TMS configuration.
     * @param {*} [options] Override http request options.
     */
    postCustomer(postCustomerRequest, profileId, options = {}) {
        const localVarPath = this.basePath + '/tms/v2/customers';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        // verify required parameter 'postCustomerRequest' is not null or undefined
        if (postCustomerRequest === null || postCustomerRequest === undefined) {
            throw new Error('Required parameter postCustomerRequest was null or undefined when calling postCustomer.');
        }
        localVarHeaderParams['profile-id'] = ObjectSerializer.serialize(profileId, "string");
        Object.assign(localVarHeaderParams, options.headers);
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(postCustomerRequest, "PostCustomerRequest")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "PostCustomerRequest");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
}
exports.CustomerApi = CustomerApi;
var CustomerPaymentInstrumentApiApiKeys;
(function (CustomerPaymentInstrumentApiApiKeys) {
})(CustomerPaymentInstrumentApiApiKeys = exports.CustomerPaymentInstrumentApiApiKeys || (exports.CustomerPaymentInstrumentApiApiKeys = {}));
class CustomerPaymentInstrumentApi {
    constructor(basePathOrUsername, password, basePath) {
        this._basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new VoidAuth(),
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    set useQuerystring(value) {
        this._useQuerystring = value;
    }
    set basePath(basePath) {
        this._basePath = basePath;
    }
    get basePath() {
        return this._basePath;
    }
    setDefaultAuthentication(auth) {
        this.authentications.default = auth;
    }
    setApiKey(key, value) {
        this.authentications[CustomerPaymentInstrumentApiApiKeys[key]].apiKey = value;
    }
    /**
     * |  |  |  | | --- | --- | --- | |**Customer Payment Instrument**<br>A Customer Payment Instrument represents tokenized customer payment information such as expiration date, billing address & card type.<br>A [Customer](#token-management_customer_create-a-customer) can have [one or more Payment Instruments](#token-management_customer-payment-instrument_retrieve-a-customer-payment-instrument), with one allocated as the Customers default for use in payments.<br>A Payment Instrument token does not store the card number. A Payment Instrument is associated with an [Instrument Identifier](#token-management_instrument-identifier_create-an-instrument-identifier) that represents either a payment card number, or in the case of an ACH bank account, the routing and account number.<br>|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|**Deleting a Customers Payment Instrument**<br>Your system can use this API to delete an existing Payment Instrument for a Customer.<br>Any Instrument Identifiers representing the card number will also be deleted if they are not associated with any other Payment Instruments.<br>If a customer has more than one Payment Instrument then the default Payment Instrument cannot be deleted without first selecting a [new default Payment Instrument](#token-management_customer-payment-instrument_update-a-customer-payment-instrument_samplerequests-dropdown_make-customer-payment-instrument-the-default_liveconsole-tab-request-body).
     * @summary Delete a Customer Payment Instrument
     * @param customerId The Id of a Customer.
     * @param paymentInstrumentId The Id of a payment instrument.
     * @param profileId The Id of a profile containing user specific TMS configuration.
     * @param {*} [options] Override http request options.
     */
    deleteCustomerPaymentInstrument(customerId, paymentInstrumentId, profileId, options = {}) {
        const localVarPath = this.basePath + '/tms/v2/customers/{customerId}/payment-instruments/{paymentInstrumentId}'
            .replace('{' + 'customerId' + '}', encodeURIComponent(String(customerId)))
            .replace('{' + 'paymentInstrumentId' + '}', encodeURIComponent(String(paymentInstrumentId)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        // verify required parameter 'customerId' is not null or undefined
        if (customerId === null || customerId === undefined) {
            throw new Error('Required parameter customerId was null or undefined when calling deleteCustomerPaymentInstrument.');
        }
        // verify required parameter 'paymentInstrumentId' is not null or undefined
        if (paymentInstrumentId === null || paymentInstrumentId === undefined) {
            throw new Error('Required parameter paymentInstrumentId was null or undefined when calling deleteCustomerPaymentInstrument.');
        }
        localVarHeaderParams['profile-id'] = ObjectSerializer.serialize(profileId, "string");
        Object.assign(localVarHeaderParams, options.headers);
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'DELETE',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * |  |  |  | | --- | --- | --- | |**Customer Payment Instrument**<br>A Customer Payment Instrument represents tokenized customer payment information such as expiration date, billing address & card type.<br>A [Customer](#token-management_customer_create-a-customer) can have [one or more Payment Instruments](#token-management_customer-payment-instrument_retrieve-a-customer-payment-instrument), with one allocated as the Customers default for use in payments.<br>A Payment Instrument token does not store the card number. A Payment Instrument is associated with an [Instrument Identifier](#token-management_instrument-identifier_create-an-instrument-identifier) that represents either a payment card number, or in the case of an ACH bank account, the routing and account number.<br>|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|**Retrieving a Customer Payment Instrument**<br>Your system can use this API to retrieve an existing Payment Instrument for a Customer.<br>To perform a payment with a particular Payment Instrument simply specify the [Payment Instrument Id in the payments request](#payments_payments_process-a-payment_samplerequests-dropdown_authorization-using-tokens_authorization-with-customer-payment-instrument-and-shipping-address-token-id_liveconsole-tab-request-body).
     * @summary Retrieve a Customer Payment Instrument
     * @param customerId The Id of a Customer.
     * @param paymentInstrumentId The Id of a payment instrument.
     * @param profileId The Id of a profile containing user specific TMS configuration.
     * @param {*} [options] Override http request options.
     */
    getCustomerPaymentInstrument(customerId, paymentInstrumentId, profileId, options = {}) {
        const localVarPath = this.basePath + '/tms/v2/customers/{customerId}/payment-instruments/{paymentInstrumentId}'
            .replace('{' + 'customerId' + '}', encodeURIComponent(String(customerId)))
            .replace('{' + 'paymentInstrumentId' + '}', encodeURIComponent(String(paymentInstrumentId)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        // verify required parameter 'customerId' is not null or undefined
        if (customerId === null || customerId === undefined) {
            throw new Error('Required parameter customerId was null or undefined when calling getCustomerPaymentInstrument.');
        }
        // verify required parameter 'paymentInstrumentId' is not null or undefined
        if (paymentInstrumentId === null || paymentInstrumentId === undefined) {
            throw new Error('Required parameter paymentInstrumentId was null or undefined when calling getCustomerPaymentInstrument.');
        }
        localVarHeaderParams['profile-id'] = ObjectSerializer.serialize(profileId, "string");
        Object.assign(localVarHeaderParams, options.headers);
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "PostCustomerPaymentInstrumentRequest");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * |  |  |  | | --- | --- | --- | |**Customer Payment Instrument**<br>A Customer Payment Instrument represents tokenized customer payment information such as expiration date, billing address & card type.<br>A [Customer](#token-management_customer_create-a-customer) can have [one or more Payment Instruments](#token-management_customer-payment-instrument_retrieve-a-customer-payment-instrument), with one allocated as the Customers default for use in payments.<br>A Payment Instrument token does not store the card number. A Payment Instrument is associated with an [Instrument Identifier](#token-management_instrument-identifier_create-an-instrument-identifier) that represents either a payment card number, or in the case of an ACH bank account, the routing and account number.<br>|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|**Retrieving all Customer Payment Instruments**<br>Your system can use this API to retrieve all existing Payment Instruments for a Customer.
     * @summary List Payment Instruments for a Customer
     * @param customerId The Id of a Customer.
     * @param profileId The Id of a profile containing user specific TMS configuration.
     * @param offset Starting record in zero-based dataset that should be returned as the first object in the array. Default is 0.
     * @param limit The maximum number that can be returned in the array starting from the offset record in zero-based dataset. Default is 20, maximum is 100.
     * @param {*} [options] Override http request options.
     */
    getCustomerPaymentInstrumentsList(customerId, profileId, offset, limit, options = {}) {
        const localVarPath = this.basePath + '/tms/v2/customers/{customerId}/payment-instruments'
            .replace('{' + 'customerId' + '}', encodeURIComponent(String(customerId)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        // verify required parameter 'customerId' is not null or undefined
        if (customerId === null || customerId === undefined) {
            throw new Error('Required parameter customerId was null or undefined when calling getCustomerPaymentInstrumentsList.');
        }
        if (offset !== undefined) {
            localVarQueryParameters['offset'] = ObjectSerializer.serialize(offset, "number");
        }
        if (limit !== undefined) {
            localVarQueryParameters['limit'] = ObjectSerializer.serialize(limit, "number");
        }
        localVarHeaderParams['profile-id'] = ObjectSerializer.serialize(profileId, "string");
        Object.assign(localVarHeaderParams, options.headers);
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "PaymentInstrumentList");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * |  |  |  | | --- | --- | --- | |**Customer Payment Instrument**<br>A Customer Payment Instrument represents tokenized customer payment information such as expiration date, billing address & card type.<br>A [Customer](#token-management_customer_create-a-customer) can have [one or more Payment Instruments](#token-management_customer-payment-instrument_retrieve-a-customer-payment-instrument), with one allocated as the Customers default for use in payments.<br>A Payment Instrument token does not store the card number. A Payment Instrument is associated with an [Instrument Identifier](#token-management_instrument-identifier_create-an-instrument-identifier) that represents either a payment card number, or in the case of an ACH bank account, the routing and account number.<br>|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|**Updating a Customers Payment Instrument**<br>Your system can use this API to update an existing Payment Instrument for a Customer, including selecting a [default Payment Instrument](#token-management_customer-payment-instrument_update-a-customer-payment-instrument_samplerequests-dropdown_make-customer-payment-instrument-the-default_liveconsole-tab-request-body) for use in payments.
     * @summary Update a Customer Payment Instrument
     * @param customerId The Id of a Customer.
     * @param paymentInstrumentId The Id of a payment instrument.
     * @param patchCustomerPaymentInstrumentRequest
     * @param profileId The Id of a profile containing user specific TMS configuration.
     * @param ifMatch Contains an ETag value from a GET request to make the request conditional.
     * @param {*} [options] Override http request options.
     */
    patchCustomersPaymentInstrument(customerId, paymentInstrumentId, patchCustomerPaymentInstrumentRequest, profileId, ifMatch, options = {}) {
        const localVarPath = this.basePath + '/tms/v2/customers/{customerId}/payment-instruments/{paymentInstrumentId}'
            .replace('{' + 'customerId' + '}', encodeURIComponent(String(customerId)))
            .replace('{' + 'paymentInstrumentId' + '}', encodeURIComponent(String(paymentInstrumentId)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        // verify required parameter 'customerId' is not null or undefined
        if (customerId === null || customerId === undefined) {
            throw new Error('Required parameter customerId was null or undefined when calling patchCustomersPaymentInstrument.');
        }
        // verify required parameter 'paymentInstrumentId' is not null or undefined
        if (paymentInstrumentId === null || paymentInstrumentId === undefined) {
            throw new Error('Required parameter paymentInstrumentId was null or undefined when calling patchCustomersPaymentInstrument.');
        }
        // verify required parameter 'patchCustomerPaymentInstrumentRequest' is not null or undefined
        if (patchCustomerPaymentInstrumentRequest === null || patchCustomerPaymentInstrumentRequest === undefined) {
            throw new Error('Required parameter patchCustomerPaymentInstrumentRequest was null or undefined when calling patchCustomersPaymentInstrument.');
        }
        localVarHeaderParams['profile-id'] = ObjectSerializer.serialize(profileId, "string");
        localVarHeaderParams['if-match'] = ObjectSerializer.serialize(ifMatch, "string");
        Object.assign(localVarHeaderParams, options.headers);
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'PATCH',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(patchCustomerPaymentInstrumentRequest, "PatchCustomerPaymentInstrumentRequest")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "PatchCustomerPaymentInstrumentRequest");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * |  |  |  | | --- | --- | --- | |**Customer Payment Instrument**<br>A Customer Payment Instrument represents tokenized customer payment information such as expiration date, billing address & card type.<br>A [Customer](#token-management_customer_create-a-customer) can have [one or more Payment Instruments](#token-management_customer-payment-instrument_retrieve-a-customer-payment-instrument), with one allocated as the Customers default for use in payments.<br>A Payment Instrument token does not store the card number. A Payment Instrument is associated with an [Instrument Identifier](#token-management_instrument-identifier_create-an-instrument-identifier) that represents either a payment card number, or in the case of an ACH bank account, the routing and account number.<br><br>**Creating a Customer Payment Instrument**<br>It is recommended you [create a Customer Payment Instrument via a Payment Authorization](#payments_payments_process-a-payment_samplerequests-dropdown_authorization-with-token-create_authorization-create-default-payment-instrument-shipping-address-for-existing-customer_liveconsole-tab-request-body), this can be for a zero amount.<br>In Europe: You should perform Payer Authentication alongside the Authorization.|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|**Payment Network Tokens**<br>Network tokens perform better than regular card numbers and they are not necessarily invalidated when a cardholder loses their card, or it expires.<br>A Payment Network Token will be automatically created and used in future payments if you are enabled for the service.<br>A Payment Network Token can also be [provisioned for an existing Instrument Identifier](#token-management_instrument-identifier_enroll-an-instrument-identifier-for-payment-network-token).<br>For more information about Payment Network Tokens see the Developer Guide.<br><br>**Payments with Customers Payment Instrument**<br>To perform a payment with a particular Payment Instrument or Shipping Address specify the [Payment Instrument in the payment request](#payments_payments_process-a-payment_samplerequests-dropdown_authorization-using-tokens_authorization-with-customer-payment-instrument-and-shipping-address-token-id_liveconsole-tab-request-body).
     * @summary Create a Customer Payment Instrument
     * @param customerId The Id of a Customer.
     * @param postCustomerPaymentInstrumentRequest
     * @param profileId The Id of a profile containing user specific TMS configuration.
     * @param {*} [options] Override http request options.
     */
    postCustomerPaymentInstrument(customerId, postCustomerPaymentInstrumentRequest, profileId, options = {}) {
        const localVarPath = this.basePath + '/tms/v2/customers/{customerId}/payment-instruments'
            .replace('{' + 'customerId' + '}', encodeURIComponent(String(customerId)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        // verify required parameter 'customerId' is not null or undefined
        if (customerId === null || customerId === undefined) {
            throw new Error('Required parameter customerId was null or undefined when calling postCustomerPaymentInstrument.');
        }
        // verify required parameter 'postCustomerPaymentInstrumentRequest' is not null or undefined
        if (postCustomerPaymentInstrumentRequest === null || postCustomerPaymentInstrumentRequest === undefined) {
            throw new Error('Required parameter postCustomerPaymentInstrumentRequest was null or undefined when calling postCustomerPaymentInstrument.');
        }
        localVarHeaderParams['profile-id'] = ObjectSerializer.serialize(profileId, "string");
        Object.assign(localVarHeaderParams, options.headers);
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(postCustomerPaymentInstrumentRequest, "PostCustomerPaymentInstrumentRequest")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "PostCustomerPaymentInstrumentRequest");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
}
exports.CustomerPaymentInstrumentApi = CustomerPaymentInstrumentApi;
var CustomerShippingAddressApiApiKeys;
(function (CustomerShippingAddressApiApiKeys) {
})(CustomerShippingAddressApiApiKeys = exports.CustomerShippingAddressApiApiKeys || (exports.CustomerShippingAddressApiApiKeys = {}));
class CustomerShippingAddressApi {
    constructor(basePathOrUsername, password, basePath) {
        this._basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new VoidAuth(),
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    set useQuerystring(value) {
        this._useQuerystring = value;
    }
    set basePath(basePath) {
        this._basePath = basePath;
    }
    get basePath() {
        return this._basePath;
    }
    setDefaultAuthentication(auth) {
        this.authentications.default = auth;
    }
    setApiKey(key, value) {
        this.authentications[CustomerShippingAddressApiApiKeys[key]].apiKey = value;
    }
    /**
     * |  |  |  | | --- | --- | --- | |**Customer Shipping Address**<br>A Customer Shipping Address represents tokenized customer shipping information.<br>A [Customer](#token-management_customer_create-a-customer) can have [one or more Shipping Addresses](#token-management_customer-shipping-address_list-shipping-addresses-for-a-customer), with one allocated as the Customers default for use in payments.|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|**Deleting a Customers Shipping Address**<br>Your system can use this API to delete an existing Shipping Address for a Customer.<br>If a customer has more than one Shipping Address then the default Shipping Address cannot be deleted without first selecting a [new default Shipping Address](#token-management_customer-shipping-address_update-a-customer-shipping-address_samplerequests-dropdown_make-customer-shipping-address-the-default_liveconsole-tab-request-body).
     * @summary Delete a Customer Shipping Address
     * @param customerId The Id of a Customer.
     * @param shippingAddressId The Id of a shipping address.
     * @param profileId The Id of a profile containing user specific TMS configuration.
     * @param {*} [options] Override http request options.
     */
    deleteCustomerShippingAddress(customerId, shippingAddressId, profileId, options = {}) {
        const localVarPath = this.basePath + '/tms/v2/customers/{customerId}/shipping-addresses/{shippingAddressId}'
            .replace('{' + 'customerId' + '}', encodeURIComponent(String(customerId)))
            .replace('{' + 'shippingAddressId' + '}', encodeURIComponent(String(shippingAddressId)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        // verify required parameter 'customerId' is not null or undefined
        if (customerId === null || customerId === undefined) {
            throw new Error('Required parameter customerId was null or undefined when calling deleteCustomerShippingAddress.');
        }
        // verify required parameter 'shippingAddressId' is not null or undefined
        if (shippingAddressId === null || shippingAddressId === undefined) {
            throw new Error('Required parameter shippingAddressId was null or undefined when calling deleteCustomerShippingAddress.');
        }
        localVarHeaderParams['profile-id'] = ObjectSerializer.serialize(profileId, "string");
        Object.assign(localVarHeaderParams, options.headers);
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'DELETE',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * |  |  |  | | --- | --- | --- | |**Customer Shipping Address**<br>A Customer Shipping Address represents tokenized customer shipping information.<br>A [Customer](#token-management_customer_create-a-customer) can have [one or more Shipping Addresses](#token-management_customer-shipping-address_list-shipping-addresses-for-a-customer), with one allocated as the Customers default for use in payments.|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|**Retrieving a Customer Shipping Address**<br>Your system can use this API to retrieve an existing Shipping Address for a Customer.<br>To perform a payment with a particular Shipping Address simply specify the [Shipping Address Id in the payments request](#payments_payments_process-a-payment_samplerequests-dropdown_authorization-using-tokens_authorization-with-customer-payment-instrument-and-shipping-address-token-id_liveconsole-tab-request-body).
     * @summary Retrieve a Customer Shipping Address
     * @param customerId The Id of a Customer.
     * @param shippingAddressId The Id of a shipping address.
     * @param profileId The Id of a profile containing user specific TMS configuration.
     * @param {*} [options] Override http request options.
     */
    getCustomerShippingAddress(customerId, shippingAddressId, profileId, options = {}) {
        const localVarPath = this.basePath + '/tms/v2/customers/{customerId}/shipping-addresses/{shippingAddressId}'
            .replace('{' + 'customerId' + '}', encodeURIComponent(String(customerId)))
            .replace('{' + 'shippingAddressId' + '}', encodeURIComponent(String(shippingAddressId)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        // verify required parameter 'customerId' is not null or undefined
        if (customerId === null || customerId === undefined) {
            throw new Error('Required parameter customerId was null or undefined when calling getCustomerShippingAddress.');
        }
        // verify required parameter 'shippingAddressId' is not null or undefined
        if (shippingAddressId === null || shippingAddressId === undefined) {
            throw new Error('Required parameter shippingAddressId was null or undefined when calling getCustomerShippingAddress.');
        }
        localVarHeaderParams['profile-id'] = ObjectSerializer.serialize(profileId, "string");
        Object.assign(localVarHeaderParams, options.headers);
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "PostCustomerShippingAddressRequest");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * |  |  |  | | --- | --- | --- | |**Customer Shipping Address**<br>A Customer Shipping Address represents tokenized customer shipping information.<br>A [Customer](#token-management_customer_create-a-customer) can have [one or more Shipping Addresses](#token-management_customer-shipping-address_list-shipping-addresses-for-a-customer), with one allocated as the Customers default for use in payments.|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|**Retrieving all Customer Shipping Addresses**<br>Your system can use this API to retrieve all existing Shipping Addresses for a Customer.
     * @summary List Shipping Addresses for a Customer
     * @param customerId The Id of a Customer.
     * @param profileId The Id of a profile containing user specific TMS configuration.
     * @param offset Starting record in zero-based dataset that should be returned as the first object in the array. Default is 0.
     * @param limit The maximum number that can be returned in the array starting from the offset record in zero-based dataset. Default is 20, maximum is 100.
     * @param {*} [options] Override http request options.
     */
    getCustomerShippingAddressesList(customerId, profileId, offset, limit, options = {}) {
        const localVarPath = this.basePath + '/tms/v2/customers/{customerId}/shipping-addresses'
            .replace('{' + 'customerId' + '}', encodeURIComponent(String(customerId)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        // verify required parameter 'customerId' is not null or undefined
        if (customerId === null || customerId === undefined) {
            throw new Error('Required parameter customerId was null or undefined when calling getCustomerShippingAddressesList.');
        }
        if (offset !== undefined) {
            localVarQueryParameters['offset'] = ObjectSerializer.serialize(offset, "number");
        }
        if (limit !== undefined) {
            localVarQueryParameters['limit'] = ObjectSerializer.serialize(limit, "number");
        }
        localVarHeaderParams['profile-id'] = ObjectSerializer.serialize(profileId, "string");
        Object.assign(localVarHeaderParams, options.headers);
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "ShippingAddressListForCustomer");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * |  |  |  | | --- | --- | --- | |**Customer Shipping Address**<br>A Customer Shipping Address represents tokenized customer shipping information.<br>A [Customer](#token-management_customer_create-a-customer) can have [one or more Shipping Addresses](#token-management_customer-shipping-address_list-shipping-addresses-for-a-customer), with one allocated as the Customers default for use in payments.|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|**Updating a Customers Shipping Address**<br>Your system can use this API to update an existing Shipping Addresses for a Customer, including selecting a [default Shipping Address](#token-management_customer-shipping-address_update-a-customer-shipping-address_samplerequests-dropdown_make-customer-shipping-address-the-default_liveconsole-tab-request-body) for use in payments.
     * @summary Update a Customer Shipping Address
     * @param customerId The Id of a Customer.
     * @param shippingAddressId The Id of a shipping address.
     * @param patchCustomerShippingAddressRequest
     * @param profileId The Id of a profile containing user specific TMS configuration.
     * @param ifMatch Contains an ETag value from a GET request to make the request conditional.
     * @param {*} [options] Override http request options.
     */
    patchCustomersShippingAddress(customerId, shippingAddressId, patchCustomerShippingAddressRequest, profileId, ifMatch, options = {}) {
        const localVarPath = this.basePath + '/tms/v2/customers/{customerId}/shipping-addresses/{shippingAddressId}'
            .replace('{' + 'customerId' + '}', encodeURIComponent(String(customerId)))
            .replace('{' + 'shippingAddressId' + '}', encodeURIComponent(String(shippingAddressId)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        // verify required parameter 'customerId' is not null or undefined
        if (customerId === null || customerId === undefined) {
            throw new Error('Required parameter customerId was null or undefined when calling patchCustomersShippingAddress.');
        }
        // verify required parameter 'shippingAddressId' is not null or undefined
        if (shippingAddressId === null || shippingAddressId === undefined) {
            throw new Error('Required parameter shippingAddressId was null or undefined when calling patchCustomersShippingAddress.');
        }
        // verify required parameter 'patchCustomerShippingAddressRequest' is not null or undefined
        if (patchCustomerShippingAddressRequest === null || patchCustomerShippingAddressRequest === undefined) {
            throw new Error('Required parameter patchCustomerShippingAddressRequest was null or undefined when calling patchCustomersShippingAddress.');
        }
        localVarHeaderParams['profile-id'] = ObjectSerializer.serialize(profileId, "string");
        localVarHeaderParams['if-match'] = ObjectSerializer.serialize(ifMatch, "string");
        Object.assign(localVarHeaderParams, options.headers);
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'PATCH',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(patchCustomerShippingAddressRequest, "PatchCustomerShippingAddressRequest")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "PatchCustomerShippingAddressRequest");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * |  |  |  | | --- | --- | --- | |**Customer Shipping Address**<br>A Customer Shipping Address represents tokenized customer shipping information.<br>A [Customer](#token-management_customer_create-a-customer) can have [one or more Shipping Addresses](#token-management_customer-shipping-address_list-shipping-addresses-for-a-customer), with one allocated as the Customers default for use in payments.|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|**Creating a Customer Shipping Address**<br>Your system can use this API to create an existing Customers default or non default Shipping Address.<br>You can also create additional Customer Shipping Addresses via the [Payments API](#payments_payments_process-a-payment_samplerequests-dropdown_authorization-with-token-create_authorization-create-default-payment-instrument-shipping-address-for-existing-customer_liveconsole-tab-request-body).
     * @summary Create a Customer Shipping Address
     * @param customerId The Id of a Customer.
     * @param postCustomerShippingAddressRequest
     * @param profileId The Id of a profile containing user specific TMS configuration.
     * @param {*} [options] Override http request options.
     */
    postCustomerShippingAddress(customerId, postCustomerShippingAddressRequest, profileId, options = {}) {
        const localVarPath = this.basePath + '/tms/v2/customers/{customerId}/shipping-addresses'
            .replace('{' + 'customerId' + '}', encodeURIComponent(String(customerId)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        // verify required parameter 'customerId' is not null or undefined
        if (customerId === null || customerId === undefined) {
            throw new Error('Required parameter customerId was null or undefined when calling postCustomerShippingAddress.');
        }
        // verify required parameter 'postCustomerShippingAddressRequest' is not null or undefined
        if (postCustomerShippingAddressRequest === null || postCustomerShippingAddressRequest === undefined) {
            throw new Error('Required parameter postCustomerShippingAddressRequest was null or undefined when calling postCustomerShippingAddress.');
        }
        localVarHeaderParams['profile-id'] = ObjectSerializer.serialize(profileId, "string");
        Object.assign(localVarHeaderParams, options.headers);
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(postCustomerShippingAddressRequest, "PostCustomerShippingAddressRequest")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "PostCustomerShippingAddressRequest");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
}
exports.CustomerShippingAddressApi = CustomerShippingAddressApi;
var CustomizationsApiApiKeys;
(function (CustomizationsApiApiKeys) {
})(CustomizationsApiApiKeys = exports.CustomizationsApiApiKeys || (exports.CustomizationsApiApiKeys = {}));
class CustomizationsApi {
    constructor(basePathOrUsername, password, basePath) {
        this._basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new VoidAuth(),
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    set useQuerystring(value) {
        this._useQuerystring = value;
    }
    set basePath(basePath) {
        this._basePath = basePath;
    }
    get basePath() {
        return this._basePath;
    }
    setDefaultAuthentication(auth) {
        this.authentications.default = auth;
    }
    setApiKey(key, value) {
        this.authentications[CustomizationsApiApiKeys[key]].apiKey = value;
    }
    /**
     * Create Customization for device or organization (Portfolio, Merchant, Transacting MID).
     * @summary Create Customization for device or organization
     * @param body A new Customization.
     * @param {*} [options] Override http request options.
     */
    addCustomization(body, options = {}) {
        const localVarPath = this.basePath + '/dms/v2/customization';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        Object.assign(localVarHeaderParams, options.headers);
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'PUT',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "Body2")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Get Customization for device or organization (Portfolio, Merchant, Transacting MID).
     * @summary Get Customization for device or organization
     * @param type ID of the customization
     * @param id Type of the customization there are 2 types of customization device, organization
     * @param {*} [options] Override http request options.
     */
    customization(type, id, options = {}) {
        const localVarPath = this.basePath + '/dms/v2/customization/{type}/{id}'
            .replace('{' + 'type' + '}', encodeURIComponent(String(type)))
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        // verify required parameter 'type' is not null or undefined
        if (type === null || type === undefined) {
            throw new Error('Required parameter type was null or undefined when calling customization.');
        }
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling customization.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "InlineResponse20011");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * delete entire customization for device or organization (Portfolio, Merchant, Transacting MID).
     * @summary Delete customization for device or organization
     * @param type Type of the customization there are 2 types of customization device, organization
     * @param id ID of the customization
     * @param {*} [options] Override http request options.
     */
    deleteCustomization(type, id, options = {}) {
        const localVarPath = this.basePath + '/dms/v2/customization/{type}/{id}'
            .replace('{' + 'type' + '}', encodeURIComponent(String(type)))
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        // verify required parameter 'type' is not null or undefined
        if (type === null || type === undefined) {
            throw new Error('Required parameter type was null or undefined when calling deleteCustomization.');
        }
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling deleteCustomization.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'DELETE',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * delete customization for device or organization (Portfolio, Merchant, Transacting MID).
     * @summary Delete customization for device or organization
     * @param type Type of the customization there are 2 types of customization device, organization
     * @param id ID of the customization
     * @param key Key of the customization to be deleted
     * @param {*} [options] Override http request options.
     */
    deleteCustomizationKey(type, id, key, options = {}) {
        const localVarPath = this.basePath + '/dms/v2/customization/{type}/{id}/{key}'
            .replace('{' + 'type' + '}', encodeURIComponent(String(type)))
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)))
            .replace('{' + 'key' + '}', encodeURIComponent(String(key)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        // verify required parameter 'type' is not null or undefined
        if (type === null || type === undefined) {
            throw new Error('Required parameter type was null or undefined when calling deleteCustomizationKey.');
        }
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling deleteCustomizationKey.');
        }
        // verify required parameter 'key' is not null or undefined
        if (key === null || key === undefined) {
            throw new Error('Required parameter key was null or undefined when calling deleteCustomizationKey.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'DELETE',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Update Customization for device or organization (Portfolio, Merchant, Transacting MID).
     * @summary Update Customization for device or organization
     * @param body Update Customization.
     * @param {*} [options] Override http request options.
     */
    replaceCustomizations(body, options = {}) {
        const localVarPath = this.basePath + '/dms/v2/customization';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        Object.assign(localVarHeaderParams, options.headers);
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'PATCH',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "Body3")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
}
exports.CustomizationsApi = CustomizationsApi;
var DecisionManagerApiApiKeys;
(function (DecisionManagerApiApiKeys) {
})(DecisionManagerApiApiKeys = exports.DecisionManagerApiApiKeys || (exports.DecisionManagerApiApiKeys = {}));
class DecisionManagerApi {
    constructor(basePathOrUsername, password, basePath) {
        this._basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new VoidAuth(),
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    set useQuerystring(value) {
        this._useQuerystring = value;
    }
    set basePath(basePath) {
        this._basePath = basePath;
    }
    get basePath() {
        return this._basePath;
    }
    setDefaultAuthentication(auth) {
        this.authentications.default = auth;
    }
    setApiKey(key, value) {
        this.authentications[DecisionManagerApiApiKeys[key]].apiKey = value;
    }
    /**
     * Take action on a DM post-transactional case
     * @summary Take action on a DM post-transactional case
     * @param id An unique identification number generated by Cybersource to identify the submitted request.
     * @param caseManagementActionsRequest
     * @param {*} [options] Override http request options.
     */
    actionDecisionManagerCase(id, caseManagementActionsRequest, options = {}) {
        const localVarPath = this.basePath + '/risk/v1/decisions/{id}/actions'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling actionDecisionManagerCase.');
        }
        // verify required parameter 'caseManagementActionsRequest' is not null or undefined
        if (caseManagementActionsRequest === null || caseManagementActionsRequest === undefined) {
            throw new Error('Required parameter caseManagementActionsRequest was null or undefined when calling actionDecisionManagerCase.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(caseManagementActionsRequest, "CaseManagementActionsRequest")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "InlineResponse2001");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * This call adds/deletes/converts the request information in the negative list.  Provide the list to be updated as the path parameter. This value can be 'postiive', 'negative' or 'review'.
     * @summary List Management
     * @param type The list to be updated. It can be &#39;positive&#39;, &#39;negative&#39; or &#39;review&#39;.
     * @param addNegativeListRequest
     * @param {*} [options] Override http request options.
     */
    addNegative(type, addNegativeListRequest, options = {}) {
        const localVarPath = this.basePath + '/risk/v1/lists/{type}/entries'
            .replace('{' + 'type' + '}', encodeURIComponent(String(type)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        // verify required parameter 'type' is not null or undefined
        if (type === null || type === undefined) {
            throw new Error('Required parameter type was null or undefined when calling addNegative.');
        }
        // verify required parameter 'addNegativeListRequest' is not null or undefined
        if (addNegativeListRequest === null || addNegativeListRequest === undefined) {
            throw new Error('Required parameter addNegativeListRequest was null or undefined when calling addNegative.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(addNegativeListRequest, "AddNegativeListRequest")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "RiskV1UpdatePost201Response");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Add a comment to a DM post-transactional case
     * @summary Add a comment to a DM post-transactional case
     * @param id An unique identification number generated by Cybersource to identify the submitted request.
     * @param caseManagementCommentsRequest
     * @param {*} [options] Override http request options.
     */
    commentDecisionManagerCase(id, caseManagementCommentsRequest, options = {}) {
        const localVarPath = this.basePath + '/risk/v1/decisions/{id}/comments'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling commentDecisionManagerCase.');
        }
        // verify required parameter 'caseManagementCommentsRequest' is not null or undefined
        if (caseManagementCommentsRequest === null || caseManagementCommentsRequest === undefined) {
            throw new Error('Required parameter caseManagementCommentsRequest was null or undefined when calling commentDecisionManagerCase.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(caseManagementCommentsRequest, "CaseManagementCommentsRequest")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "InlineResponse2011");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Decision Manager can help you automate and streamline your fraud operations. Decision Manager will return a decision based on the request values.
     * @summary Create Decision Manager
     * @param createBundledDecisionManagerCaseRequest
     * @param {*} [options] Override http request options.
     */
    createBundledDecisionManagerCase(createBundledDecisionManagerCaseRequest, options = {}) {
        const localVarPath = this.basePath + '/risk/v1/decisions';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        // verify required parameter 'createBundledDecisionManagerCaseRequest' is not null or undefined
        if (createBundledDecisionManagerCaseRequest === null || createBundledDecisionManagerCaseRequest === undefined) {
            throw new Error('Required parameter createBundledDecisionManagerCaseRequest was null or undefined when calling createBundledDecisionManagerCase.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(createBundledDecisionManagerCaseRequest, "CreateBundledDecisionManagerCaseRequest")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "RiskV1DecisionsPost201Response");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * This can be used to - 1. Add known fraudulent data to the fraud history 2. Remove data added to history with Transaction Marking Tool or by uploading chargeback files 3. Remove chargeback data from history that was automatically added. For detailed information, contact your Cybersource representative  Place the request ID of the transaction you want to mark as suspect (or remove from history) as the path parameter in this request.
     * @summary Fraud Marking
     * @param id Request ID of the transaction that you want to mark as suspect or remove from history.
     * @param fraudMarkingActionRequest
     * @param {*} [options] Override http request options.
     */
    fraudUpdate(id, fraudMarkingActionRequest, options = {}) {
        const localVarPath = this.basePath + '/risk/v1/decisions/{id}/marking'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling fraudUpdate.');
        }
        // verify required parameter 'fraudMarkingActionRequest' is not null or undefined
        if (fraudMarkingActionRequest === null || fraudMarkingActionRequest === undefined) {
            throw new Error('Required parameter fraudMarkingActionRequest was null or undefined when calling fraudUpdate.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(fraudMarkingActionRequest, "FraudMarkingActionRequest")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "RiskV1UpdatePost201Response");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
}
exports.DecisionManagerApi = DecisionManagerApi;
var DeviceDeAssociationApiApiKeys;
(function (DeviceDeAssociationApiApiKeys) {
})(DeviceDeAssociationApiApiKeys = exports.DeviceDeAssociationApiApiKeys || (exports.DeviceDeAssociationApiApiKeys = {}));
class DeviceDeAssociationApi {
    constructor(basePathOrUsername, password, basePath) {
        this._basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new VoidAuth(),
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    set useQuerystring(value) {
        this._useQuerystring = value;
    }
    set basePath(basePath) {
        this._basePath = basePath;
    }
    get basePath() {
        return this._basePath;
    }
    setDefaultAuthentication(auth) {
        this.authentications.default = auth;
    }
    setApiKey(key, value) {
        this.authentications[DeviceDeAssociationApiApiKeys[key]].apiKey = value;
    }
    /**
     * A device will be de-associated from its current organization and moved up in the hierarchy. The device's new position will be determined by a specified destination, either an account or a portfolio. If no destination is provided, the device will default to the currently logged-in user.
     * @summary De-associate a device from merchant to account or reseller and from account to reseller
     * @param deviceDeAssociateV3Request deviceId that has to be de-associated to the destination organizationId.
     * @param {*} [options] Override http request options.
     */
    postDeAssociateV3Terminal(deviceDeAssociateV3Request, options = {}) {
        const localVarPath = this.basePath + '/dms/v3/devices/deassociate';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        // verify required parameter 'deviceDeAssociateV3Request' is not null or undefined
        if (deviceDeAssociateV3Request === null || deviceDeAssociateV3Request === undefined) {
            throw new Error('Required parameter deviceDeAssociateV3Request was null or undefined when calling postDeAssociateV3Terminal.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(deviceDeAssociateV3Request, "Array<DeviceDeAssociateV3Request>")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "Array<InlineResponse2007>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
}
exports.DeviceDeAssociationApi = DeviceDeAssociationApi;
var DeviceOperationsApiApiKeys;
(function (DeviceOperationsApiApiKeys) {
})(DeviceOperationsApiApiKeys = exports.DeviceOperationsApiApiKeys || (exports.DeviceOperationsApiApiKeys = {}));
class DeviceOperationsApi {
    constructor(basePathOrUsername, password, basePath) {
        this._basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new VoidAuth(),
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    set useQuerystring(value) {
        this._useQuerystring = value;
    }
    set basePath(basePath) {
        this._basePath = basePath;
    }
    get basePath() {
        return this._basePath;
    }
    setDefaultAuthentication(auth) {
        this.authentications.default = auth;
    }
    setApiKey(key, value) {
        this.authentications[DeviceOperationsApiApiKeys[key]].apiKey = value;
    }
    /**
     * Allows transferring of devices within the hierarchy. Both 'Active' and 'Inactive' devices can be transferred.
     * @summary Device Transfer
     * @param deviceTransferRequest deviceId that has to be transferred along with the destination organizationId or merchantId. Any one of organizationId or merchantId is required alongside deviceId for a valid transfer request.
     * @param {*} [options] Override http request options.
     */
    postTransferTerminalAssociation(deviceTransferRequest, options = {}) {
        const localVarPath = this.basePath + '/dms/v2/device-transfer';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        // verify required parameter 'deviceTransferRequest' is not null or undefined
        if (deviceTransferRequest === null || deviceTransferRequest === undefined) {
            throw new Error('Required parameter deviceTransferRequest was null or undefined when calling postTransferTerminalAssociation.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(deviceTransferRequest, "Array<DeviceTransferRequest>")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "Array<InlineResponse20110>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
}
exports.DeviceOperationsApi = DeviceOperationsApi;
var DeviceSearchApiApiKeys;
(function (DeviceSearchApiApiKeys) {
})(DeviceSearchApiApiKeys = exports.DeviceSearchApiApiKeys || (exports.DeviceSearchApiApiKeys = {}));
class DeviceSearchApi {
    constructor(basePathOrUsername, password, basePath) {
        this._basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new VoidAuth(),
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    set useQuerystring(value) {
        this._useQuerystring = value;
    }
    set basePath(basePath) {
        this._basePath = basePath;
    }
    get basePath() {
        return this._basePath;
    }
    setDefaultAuthentication(auth) {
        this.authentications.default = auth;
    }
    setApiKey(key, value) {
        this.authentications[DeviceSearchApiApiKeys[key]].apiKey = value;
    }
    /**
     * Search for devices matching a given search query.  The search query supports serialNumber, readerId, terminalId, status, statusChangeReason or organizationId  Matching results are paginated.
     * @summary Retrieve List of Devices for a given search query
     * @param postDeviceSearchRequestV3
     * @param {*} [options] Override http request options.
     */
    postSearchQueryV3(postDeviceSearchRequestV3, options = {}) {
        const localVarPath = this.basePath + '/dms/v3/devices/search';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        // verify required parameter 'postDeviceSearchRequestV3' is not null or undefined
        if (postDeviceSearchRequestV3 === null || postDeviceSearchRequestV3 === undefined) {
            throw new Error('Required parameter postDeviceSearchRequestV3 was null or undefined when calling postSearchQueryV3.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(postDeviceSearchRequestV3, "PostDeviceSearchRequestV3")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "InlineResponse2008");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
}
exports.DeviceSearchApi = DeviceSearchApi;
var DownloadDTDApiApiKeys;
(function (DownloadDTDApiApiKeys) {
})(DownloadDTDApiApiKeys = exports.DownloadDTDApiApiKeys || (exports.DownloadDTDApiApiKeys = {}));
class DownloadDTDApi {
    constructor(basePathOrUsername, password, basePath) {
        this._basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new VoidAuth(),
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    set useQuerystring(value) {
        this._useQuerystring = value;
    }
    set basePath(basePath) {
        this._basePath = basePath;
    }
    get basePath() {
        return this._basePath;
    }
    setDefaultAuthentication(auth) {
        this.authentications.default = auth;
    }
    setApiKey(key, value) {
        this.authentications[DownloadDTDApiApiKeys[key]].apiKey = value;
    }
    /**
     * Used to download DTDs for reports on no-auth.
     * @summary Download DTD for Report
     * @param reportDefinitionNameVersion Name and version of DTD file to download. Some DTDs only have one version. In that case version name is not needed. Some example values are ctdr-1.0, tdr, pbdr-1.1
     * @param {*} [options] Override http request options.
     */
    getDTDV2(reportDefinitionNameVersion, options = {}) {
        const localVarPath = this.basePath + '/reporting/v3/dtds/{reportDefinitionNameVersion}'
            .replace('{' + 'reportDefinitionNameVersion' + '}', encodeURIComponent(String(reportDefinitionNameVersion)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        // verify required parameter 'reportDefinitionNameVersion' is not null or undefined
        if (reportDefinitionNameVersion === null || reportDefinitionNameVersion === undefined) {
            throw new Error('Required parameter reportDefinitionNameVersion was null or undefined when calling getDTDV2.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
}
exports.DownloadDTDApi = DownloadDTDApi;
var DownloadXSDApiApiKeys;
(function (DownloadXSDApiApiKeys) {
})(DownloadXSDApiApiKeys = exports.DownloadXSDApiApiKeys || (exports.DownloadXSDApiApiKeys = {}));
class DownloadXSDApi {
    constructor(basePathOrUsername, password, basePath) {
        this._basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new VoidAuth(),
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    set useQuerystring(value) {
        this._useQuerystring = value;
    }
    set basePath(basePath) {
        this._basePath = basePath;
    }
    get basePath() {
        return this._basePath;
    }
    setDefaultAuthentication(auth) {
        this.authentications.default = auth;
    }
    setApiKey(key, value) {
        this.authentications[DownloadXSDApiApiKeys[key]].apiKey = value;
    }
    /**
     * Used to download XSDs for reports on no-auth.
     * @summary Download XSD for Report
     * @param reportDefinitionNameVersion Name and version of XSD file to download. Some XSDs only have one version. In that case version name is not needed. Some example values are DecisionManagerDetailReport, DecisionManagerTypes
     * @param {*} [options] Override http request options.
     */
    getXSDV2(reportDefinitionNameVersion, options = {}) {
        const localVarPath = this.basePath + '/reporting/v3/xsds/{reportDefinitionNameVersion}'
            .replace('{' + 'reportDefinitionNameVersion' + '}', encodeURIComponent(String(reportDefinitionNameVersion)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        // verify required parameter 'reportDefinitionNameVersion' is not null or undefined
        if (reportDefinitionNameVersion === null || reportDefinitionNameVersion === undefined) {
            throw new Error('Required parameter reportDefinitionNameVersion was null or undefined when calling getXSDV2.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
}
exports.DownloadXSDApi = DownloadXSDApi;
var InstrumentIdentifierApiApiKeys;
(function (InstrumentIdentifierApiApiKeys) {
})(InstrumentIdentifierApiApiKeys = exports.InstrumentIdentifierApiApiKeys || (exports.InstrumentIdentifierApiApiKeys = {}));
class InstrumentIdentifierApi {
    constructor(basePathOrUsername, password, basePath) {
        this._basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new VoidAuth(),
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    set useQuerystring(value) {
        this._useQuerystring = value;
    }
    set basePath(basePath) {
        this._basePath = basePath;
    }
    get basePath() {
        return this._basePath;
    }
    setDefaultAuthentication(auth) {
        this.authentications.default = auth;
    }
    setApiKey(key, value) {
        this.authentications[InstrumentIdentifierApiApiKeys[key]].apiKey = value;
    }
    /**
     * |  |  |  | | --- | --- | --- | |**Instrument Identifiers**<br>An Instrument Identifier represents either a card number, or in the case of an ACH bank account, the routing <br>and account numbers.<br>The same token Id is returned for a specific card number or bank account & routing number allowing the <br>Instrument Identifier Id to be used for cross-channel payment tracking.<br>An Instrument Identifier can exist independently but also be associated with a [Customer Payment Instrument](#token-management_customer-payment-instrument_create-a-customer-payment-instrument) <br>or [Standalone Payment Instrument](#token-management_payment-instrument_create-a-payment-instrument).|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|**Deleting an Instrument Identifier**<br>Your system can use this API to delete an existing Instrument Identifier.<br>An Instrument Identifier cannot be deleted if it is linked to any Payment Instruments.<br>You can [retrieve all Payment Instruments associated with an Instrument Identifier](#token-management_instrument-identifier_list-payment-instruments-for-an-instrument-identifier).
     * @summary Delete an Instrument Identifier
     * @param instrumentIdentifierId The Id of an Instrument Identifier.
     * @param profileId The Id of a profile containing user specific TMS configuration.
     * @param {*} [options] Override http request options.
     */
    deleteInstrumentIdentifier(instrumentIdentifierId, profileId, options = {}) {
        const localVarPath = this.basePath + '/tms/v1/instrumentidentifiers/{instrumentIdentifierId}'
            .replace('{' + 'instrumentIdentifierId' + '}', encodeURIComponent(String(instrumentIdentifierId)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        // verify required parameter 'instrumentIdentifierId' is not null or undefined
        if (instrumentIdentifierId === null || instrumentIdentifierId === undefined) {
            throw new Error('Required parameter instrumentIdentifierId was null or undefined when calling deleteInstrumentIdentifier.');
        }
        localVarHeaderParams['profile-id'] = ObjectSerializer.serialize(profileId, "string");
        Object.assign(localVarHeaderParams, options.headers);
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'DELETE',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * |  |  |  | | --- | --- | --- | |**Instrument Identifiers**<br>An Instrument Identifier represents either a card number, or in the case of an ACH bank account, the routing and account number.<br>The same token Id is returned for a specific card number or bank account & routing number allowing the Instrument Identifier Id to be used for cross-channel payment tracking.<br>An Instrument Identifier can exist independently but also be associated with a [Customer Payment Instrument](#token-management_customer-payment-instrument_create-a-customer-payment-instrument) or [Standalone Payment Instrument](#token-management_payment-instrument_create-a-payment-instrument).<br><br>**Retrieving an Instrument Identifier**<br>Your system can use this API to retrieve an Instrument Identifier.<br>**Note: the actual card data will be masked.**<br>The Instrument Identifier will also be returned when retrieving a [Customer](#token-management_customer_retrieve-a-customer), [Customer Payment Instrument](#token-management_customer-payment-instrument_retrieve-a-customer-payment-instrument) or [Standalone Payment Instrument](#token-management_payment-instrument_retrieve-a-payment-instrument).|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|**Payment Network Tokens**<br>Network tokens perform better than regular card numbers and they are not necessarily invalidated when a cardholder loses their card, or it expires.<br>A Payment Network Token will be automatically created and used in future payments if you are enabled for the service.<br>A Payment Network Token can also be [provisioned for an existing Instrument Identifier](#token-management_instrument-identifier_enroll-an-instrument-identifier-for-payment-network-token).<br>For more information about Payment Network Tokens see the Developer Guide.<br><br>**Payments with Instrument Identifiers**<br>To perform a payment with an Instrument Identifier simply specify the [Instrument Identifier Id in the payments request along with the expiration date, card type, & billing address](#payments_payments_process-a-payment_samplerequests-dropdown_authorization-using-tokens_authorization-with-instrument-identifier-token-id_liveconsole-tab-request-body).<br>When an Instrument Identifier is used in a payment the **_previousTransactionId_** and **_originalAuthorizedAmount_** values are automatically recorded.<br>These values will be added for you to future Merchant Initiated Transaction payments.
     * @summary Retrieve an Instrument Identifier
     * @param instrumentIdentifierId The Id of an Instrument Identifier.
     * @param profileId The Id of a profile containing user specific TMS configuration.
     * @param retrieveBinDetails Retrieve the Bin Details of PAN or network token
     * @param {*} [options] Override http request options.
     */
    getInstrumentIdentifier(instrumentIdentifierId, profileId, retrieveBinDetails, options = {}) {
        const localVarPath = this.basePath + '/tms/v1/instrumentidentifiers/{instrumentIdentifierId}'
            .replace('{' + 'instrumentIdentifierId' + '}', encodeURIComponent(String(instrumentIdentifierId)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        // verify required parameter 'instrumentIdentifierId' is not null or undefined
        if (instrumentIdentifierId === null || instrumentIdentifierId === undefined) {
            throw new Error('Required parameter instrumentIdentifierId was null or undefined when calling getInstrumentIdentifier.');
        }
        if (retrieveBinDetails !== undefined) {
            localVarQueryParameters['retrieveBinDetails'] = ObjectSerializer.serialize(retrieveBinDetails, "boolean");
        }
        localVarHeaderParams['profile-id'] = ObjectSerializer.serialize(profileId, "string");
        Object.assign(localVarHeaderParams, options.headers);
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "PostInstrumentIdentifierRequest");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * |  |  |  | | --- | --- | --- | |**Instrument Identifiers**<br>An Instrument Identifier represents either a card number, or in the case of an ACH bank account, the routing <br>and account numbers.<br>The same token Id is returned for a specific card number or bank account & routing number allowing the <br>Instrument Identifier Id to be used for cross-channel payment tracking.<br>An Instrument Identifier can exist independently but also be associated with a [Customer Payment Instrument](#token-management_customer-payment-instrument_create-a-customer-payment-instrument) <br>or [Standalone Payment Instrument](#token-management_payment-instrument_create-a-payment-instrument).|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|**Retrieving all Payment Instruments associated with an Instrument Identifier**<br>Your system can use this API to retrieve all Payment Instruments linked to an Instrument Identifier.
     * @summary List Payment Instruments for an Instrument Identifier
     * @param instrumentIdentifierId The Id of an Instrument Identifier.
     * @param profileId The Id of a profile containing user specific TMS configuration.
     * @param retrieveBinDetails Retrieve the Bin Details of PAN or network token
     * @param offset Starting record in zero-based dataset that should be returned as the first object in the array. Default is 0.
     * @param limit The maximum number that can be returned in the array starting from the offset record in zero-based dataset. Default is 20, maximum is 100.
     * @param {*} [options] Override http request options.
     */
    getInstrumentIdentifierPaymentInstrumentsList(instrumentIdentifierId, profileId, retrieveBinDetails, offset, limit, options = {}) {
        const localVarPath = this.basePath + '/tms/v1/instrumentidentifiers/{instrumentIdentifierId}/paymentinstruments'
            .replace('{' + 'instrumentIdentifierId' + '}', encodeURIComponent(String(instrumentIdentifierId)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        // verify required parameter 'instrumentIdentifierId' is not null or undefined
        if (instrumentIdentifierId === null || instrumentIdentifierId === undefined) {
            throw new Error('Required parameter instrumentIdentifierId was null or undefined when calling getInstrumentIdentifierPaymentInstrumentsList.');
        }
        if (retrieveBinDetails !== undefined) {
            localVarQueryParameters['retrieveBinDetails'] = ObjectSerializer.serialize(retrieveBinDetails, "boolean");
        }
        if (offset !== undefined) {
            localVarQueryParameters['offset'] = ObjectSerializer.serialize(offset, "number");
        }
        if (limit !== undefined) {
            localVarQueryParameters['limit'] = ObjectSerializer.serialize(limit, "number");
        }
        localVarHeaderParams['profile-id'] = ObjectSerializer.serialize(profileId, "string");
        Object.assign(localVarHeaderParams, options.headers);
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "PaymentInstrumentList1");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * |  |  |  | | --- | --- | --- | |**Instrument Identifiers**<br>An Instrument Identifier represents either a card number, or in the case of an ACH bank account, the routing and account number.<br>The same token Id is returned for a specific card number or bank account & routing number allowing the Instrument Identifier Id to be used for cross-channel payment tracking.<br>An Instrument Identifier can exist independently but also be associated with a [Customer Payment Instrument](#token-management_customer-payment-instrument_create-a-customer-payment-instrument) or [Standalone Payment Instrument](#token-management_payment-instrument_create-a-payment-instrument).|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|**Updating an Instrument Identifier**<br>When an Instrument Identifier is used in a payment the **_previousTransactionId_** and **_originalAuthorizedAmount_** values are automatically recorded.<br>These values will be added for you to future Merchant Initiated Transaction payments.<br>Your system can use this API to update these values.
     * @summary Update an Instrument Identifier
     * @param instrumentIdentifierId The Id of an Instrument Identifier.
     * @param patchInstrumentIdentifierRequest Specify the previous transaction Id to update.
     * @param profileId The Id of a profile containing user specific TMS configuration.
     * @param retrieveBinDetails Retrieve the Bin Details of PAN or network token
     * @param ifMatch Contains an ETag value from a GET request to make the request conditional.
     * @param {*} [options] Override http request options.
     */
    patchInstrumentIdentifier(instrumentIdentifierId, patchInstrumentIdentifierRequest, profileId, retrieveBinDetails, ifMatch, options = {}) {
        const localVarPath = this.basePath + '/tms/v1/instrumentidentifiers/{instrumentIdentifierId}'
            .replace('{' + 'instrumentIdentifierId' + '}', encodeURIComponent(String(instrumentIdentifierId)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        // verify required parameter 'instrumentIdentifierId' is not null or undefined
        if (instrumentIdentifierId === null || instrumentIdentifierId === undefined) {
            throw new Error('Required parameter instrumentIdentifierId was null or undefined when calling patchInstrumentIdentifier.');
        }
        // verify required parameter 'patchInstrumentIdentifierRequest' is not null or undefined
        if (patchInstrumentIdentifierRequest === null || patchInstrumentIdentifierRequest === undefined) {
            throw new Error('Required parameter patchInstrumentIdentifierRequest was null or undefined when calling patchInstrumentIdentifier.');
        }
        if (retrieveBinDetails !== undefined) {
            localVarQueryParameters['retrieveBinDetails'] = ObjectSerializer.serialize(retrieveBinDetails, "boolean");
        }
        localVarHeaderParams['profile-id'] = ObjectSerializer.serialize(profileId, "string");
        localVarHeaderParams['if-match'] = ObjectSerializer.serialize(ifMatch, "string");
        Object.assign(localVarHeaderParams, options.headers);
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'PATCH',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(patchInstrumentIdentifierRequest, "PatchInstrumentIdentifierRequest")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "PatchInstrumentIdentifierRequest");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * |  |  |  | | --- | --- | --- | |**Instrument Identifiers**<br>An Instrument Identifier represents either a card number, or in the case of an ACH bank account, the routing and account number.<br>The same token Id is returned for a specific card number or bank account & routing number allowing the Instrument Identifier Id to be used for cross-channel payment tracking.<br>An Instrument Identifier can exist independently but also be associated with a [Customer Payment Instrument](#token-management_customer-payment-instrument_create-a-customer-payment-instrument) or [Standalone Payment Instrument](#token-management_payment-instrument_create-a-payment-instrument).<br><br>**Creating an Instrument Identifier**<br>It is recommended you [create an Instrument Identifier via a Payment Authorization](#payments_payments_process-a-payment_samplerequests-dropdown_authorization-with-token-create_authorization-with-instrument-identifier-token-creation_liveconsole-tab-request-body), this can be for a zero amount.<br>An Instrument Identifier will also be created if you [create a Customer via a Payment Authorization](#payments_payments_process-a-payment_samplerequests-dropdown_authorization-with-token-create_authorization-with-customer-token-creation_liveconsole-tab-request-body)<br>In Europe: You should perform Payer Authentication alongside the Authorization.|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|**Payment Network Tokens**<br>Network tokens perform better than regular card numbers and they are not necessarily invalidated when a cardholder loses their card, or it expires.<br>A Payment Network Token will be automatically created and used in future payments if you are enabled for the service.<br>A Payment Network Token can also be [provisioned for an existing Instrument Identifier](#token-management_instrument-identifier_enroll-an-instrument-identifier-for-payment-network-token).<br>For more information about Payment Network Tokens see the Developer Guide.<br><br>**Payments with Instrument Identifiers**<br>To perform a payment with an Instrument Identifier simply specify the [Instrument Identifier Id in the payments request along with the expiration date, card type, & billing address](#payments_payments_process-a-payment_samplerequests-dropdown_authorization-using-tokens_authorization-with-instrument-identifier-token-id_liveconsole-tab-request-body).<br>When an Instrument Identifier is used in a payment the **_previousTransactionId_** and **_originalAuthorizedAmount_** values are automatically recorded.<br>These values will be added for you to future Merchant Initiated Transaction payments.
     * @summary Create an Instrument Identifier
     * @param postInstrumentIdentifierRequest Specify either a Card, Bank Account or Enrollable Card
     * @param profileId The Id of a profile containing user specific TMS configuration.
     * @param retrieveBinDetails Retrieve the Bin Details of PAN or network token
     * @param {*} [options] Override http request options.
     */
    postInstrumentIdentifier(postInstrumentIdentifierRequest, profileId, retrieveBinDetails, options = {}) {
        const localVarPath = this.basePath + '/tms/v1/instrumentidentifiers';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        // verify required parameter 'postInstrumentIdentifierRequest' is not null or undefined
        if (postInstrumentIdentifierRequest === null || postInstrumentIdentifierRequest === undefined) {
            throw new Error('Required parameter postInstrumentIdentifierRequest was null or undefined when calling postInstrumentIdentifier.');
        }
        if (retrieveBinDetails !== undefined) {
            localVarQueryParameters['retrieveBinDetails'] = ObjectSerializer.serialize(retrieveBinDetails, "boolean");
        }
        localVarHeaderParams['profile-id'] = ObjectSerializer.serialize(profileId, "string");
        Object.assign(localVarHeaderParams, options.headers);
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(postInstrumentIdentifierRequest, "PostInstrumentIdentifierRequest")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "PostInstrumentIdentifierRequest");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * |  |  |  | | --- | --- | --- | |**Instrument Identifiers**<br>An Instrument Identifier represents either a card number, or in the case of an ACH bank account, the routing and account number.<br>The same token Id is returned for a specific card number or bank account & routing number allowing the Instrument Identifier Id to be used for cross-channel payment tracking.<br>An Instrument Identifier can exist independently but also be associated with a [Customer Payment Instrument](#token-management_customer-payment-instrument_create-a-customer-payment-instrument) or [Standalone Payment Instrument](#token-management_payment-instrument_create-a-payment-instrument).|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|**Enroll an Instrument Identifier for a Payment Network Token**<br>Your system can use this API to provision a Network token for an existing Instrument Identifier.<br>Network tokens perform better than regular card numbers and they are not necessarily invalidated when a cardholder loses their card, or it expires.<br>A Network token can be [provisioned when creating an Instrument Identifier](#token-management_instrument-identifier_create-an-instrument-identifier_samplerequests-dropdown_create-instrument-identifier-card-enroll-for-network-token_liveconsole-tab-request-body).This will occur automatically when creating a [Customer](#payments_payments_process-a-payment_samplerequests-dropdown_authorization-with-token-create_authorization-with-customer-token-creation_liveconsole-tab-request-body), [Payment Instrument](#payments_payments_process-a-payment_samplerequests-dropdown_authorization-with-token-create_authorization-create-default-payment-instrument-shipping-address-for-existing-customer_liveconsole-tab-request-body) or [Instrument Identifier](#payments_payments_process-a-payment_samplerequests-dropdown_authorization-with-token-create_authorization-with-instrument-identifier-token-creation_liveconsole-tab-request-body) via the Payments API.<br>For more information about Payment Network Tokens see the Developer Guide.
     * @summary Enroll an Instrument Identifier for Payment Network Token
     * @param instrumentIdentifierId The Id of an Instrument Identifier.
     * @param postInstrumentIdentifierEnrollmentRequest Specify Enrollable Card details
     * @param profileId The Id of a profile containing user specific TMS configuration.
     * @param {*} [options] Override http request options.
     */
    postInstrumentIdentifierEnrollment(instrumentIdentifierId, postInstrumentIdentifierEnrollmentRequest, profileId, options = {}) {
        const localVarPath = this.basePath + '/tms/v1/instrumentidentifiers/{instrumentIdentifierId}/enrollment'
            .replace('{' + 'instrumentIdentifierId' + '}', encodeURIComponent(String(instrumentIdentifierId)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        // verify required parameter 'instrumentIdentifierId' is not null or undefined
        if (instrumentIdentifierId === null || instrumentIdentifierId === undefined) {
            throw new Error('Required parameter instrumentIdentifierId was null or undefined when calling postInstrumentIdentifierEnrollment.');
        }
        // verify required parameter 'postInstrumentIdentifierEnrollmentRequest' is not null or undefined
        if (postInstrumentIdentifierEnrollmentRequest === null || postInstrumentIdentifierEnrollmentRequest === undefined) {
            throw new Error('Required parameter postInstrumentIdentifierEnrollmentRequest was null or undefined when calling postInstrumentIdentifierEnrollment.');
        }
        localVarHeaderParams['profile-id'] = ObjectSerializer.serialize(profileId, "string");
        Object.assign(localVarHeaderParams, options.headers);
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(postInstrumentIdentifierEnrollmentRequest, "PostInstrumentIdentifierEnrollmentRequest")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
}
exports.InstrumentIdentifierApi = InstrumentIdentifierApi;
var InterchangeClearingLevelDetailsApiApiKeys;
(function (InterchangeClearingLevelDetailsApiApiKeys) {
})(InterchangeClearingLevelDetailsApiApiKeys = exports.InterchangeClearingLevelDetailsApiApiKeys || (exports.InterchangeClearingLevelDetailsApiApiKeys = {}));
class InterchangeClearingLevelDetailsApi {
    constructor(basePathOrUsername, password, basePath) {
        this._basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new VoidAuth(),
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    set useQuerystring(value) {
        this._useQuerystring = value;
    }
    set basePath(basePath) {
        this._basePath = basePath;
    }
    get basePath() {
        return this._basePath;
    }
    setDefaultAuthentication(auth) {
        this.authentications.default = auth;
    }
    setApiKey(key, value) {
        this.authentications[InterchangeClearingLevelDetailsApiApiKeys[key]].apiKey = value;
    }
    /**
     * Interchange Clearing Level data for an account or a merchant
     * @summary Interchange Clearing Level data for an account or a merchant
     * @param startTime Valid report Start Time in **ISO 8601 format** Please refer the following link to know more about ISO 8601 format.[Rfc Date Format](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#anchor14)  **Example date format:**   - yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ (e.g. 2018-01-01T00:00:00.000Z)
     * @param endTime Valid report End Time in **ISO 8601 format** Please refer the following link to know more about ISO 8601 format.[Rfc Date Format](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#anchor14)  **Example date format:**   - yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ (e.g. 2018-01-01T00:00:00.000Z)
     * @param organizationId Valid Organization Id
     * @param {*} [options] Override http request options.
     */
    getInterchangeClearingLevelDetails(startTime, endTime, organizationId, options = {}) {
        const localVarPath = this.basePath + '/reporting/v3/interchange-clearing-level-details';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        // verify required parameter 'startTime' is not null or undefined
        if (startTime === null || startTime === undefined) {
            throw new Error('Required parameter startTime was null or undefined when calling getInterchangeClearingLevelDetails.');
        }
        // verify required parameter 'endTime' is not null or undefined
        if (endTime === null || endTime === undefined) {
            throw new Error('Required parameter endTime was null or undefined when calling getInterchangeClearingLevelDetails.');
        }
        if (startTime !== undefined) {
            localVarQueryParameters['startTime'] = ObjectSerializer.serialize(startTime, "Date");
        }
        if (endTime !== undefined) {
            localVarQueryParameters['endTime'] = ObjectSerializer.serialize(endTime, "Date");
        }
        if (organizationId !== undefined) {
            localVarQueryParameters['organizationId'] = ObjectSerializer.serialize(organizationId, "string");
        }
        Object.assign(localVarHeaderParams, options.headers);
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "ReportingV3InterchangeClearingLevelDetailsGet200Response");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
}
exports.InterchangeClearingLevelDetailsApi = InterchangeClearingLevelDetailsApi;
var InvoiceSettingsApiApiKeys;
(function (InvoiceSettingsApiApiKeys) {
})(InvoiceSettingsApiApiKeys = exports.InvoiceSettingsApiApiKeys || (exports.InvoiceSettingsApiApiKeys = {}));
class InvoiceSettingsApi {
    constructor(basePathOrUsername, password, basePath) {
        this._basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new VoidAuth(),
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    set useQuerystring(value) {
        this._useQuerystring = value;
    }
    set basePath(basePath) {
        this._basePath = basePath;
    }
    get basePath() {
        return this._basePath;
    }
    setDefaultAuthentication(auth) {
        this.authentications.default = auth;
    }
    setApiKey(key, value) {
        this.authentications[InvoiceSettingsApiApiKeys[key]].apiKey = value;
    }
    /**
     * Allows you to retrieve the invoice settings for the payment page.
     * @summary Get Invoice Settings
     * @param {*} [options] Override http request options.
     */
    getInvoiceSettings(options = {}) {
        const localVarPath = this.basePath + '/invoicing/v2/invoiceSettings';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        Object.assign(localVarHeaderParams, options.headers);
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "InvoicingV2InvoiceSettingsGet200Response");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Allows you to customize the payment page, the checkout experience, email communication and payer authentication. You can customize the invoice to match your brand with your business name, logo and brand colors, and a VAT Tax number. You can choose to capture the payers shipping details, phone number and email during the checkout process. You can add a custom message to all invoice emails and enable or disable payer authentication for invoice payments.
     * @summary Update Invoice Settings
     * @param invoiceSettingsRequest
     * @param {*} [options] Override http request options.
     */
    updateInvoiceSettings(invoiceSettingsRequest, options = {}) {
        const localVarPath = this.basePath + '/invoicing/v2/invoiceSettings';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        // verify required parameter 'invoiceSettingsRequest' is not null or undefined
        if (invoiceSettingsRequest === null || invoiceSettingsRequest === undefined) {
            throw new Error('Required parameter invoiceSettingsRequest was null or undefined when calling updateInvoiceSettings.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'PUT',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(invoiceSettingsRequest, "InvoiceSettingsRequest")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "InvoicingV2InvoiceSettingsGet200Response");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
}
exports.InvoiceSettingsApi = InvoiceSettingsApi;
var InvoicesApiApiKeys;
(function (InvoicesApiApiKeys) {
})(InvoicesApiApiKeys = exports.InvoicesApiApiKeys || (exports.InvoicesApiApiKeys = {}));
class InvoicesApi {
    constructor(basePathOrUsername, password, basePath) {
        this._basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new VoidAuth(),
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    set useQuerystring(value) {
        this._useQuerystring = value;
    }
    set basePath(basePath) {
        this._basePath = basePath;
    }
    get basePath() {
        return this._basePath;
    }
    setDefaultAuthentication(auth) {
        this.authentications.default = auth;
    }
    setApiKey(key, value) {
        this.authentications[InvoicesApiApiKeys[key]].apiKey = value;
    }
    /**
     * The invoicing product enables you to bill any customer with an email address and accept digital payments securely from any connected device. You can either use the system generated email or use the invoice payment link in your own communication. You can add discounts and taxes for the entire invoice or for each line item. To customize the invoice to match your brand see [Invoice Settings](https://developer.cybersource.com/api-reference-assets/index.html#invoicing_invoice-settings_update-invoice-settings). The invoice payment page uses Unified Checkout to process the payments. The availability of API features for a merchant can depend on the portfolio configuration and may need to be enabled at the portfolio level before they can be added to merchant accounts.
     * @summary Create a New Invoice
     * @param createInvoiceRequest
     * @param {*} [options] Override http request options.
     */
    createInvoice(createInvoiceRequest, options = {}) {
        const localVarPath = this.basePath + '/invoicing/v2/invoices';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        // verify required parameter 'createInvoiceRequest' is not null or undefined
        if (createInvoiceRequest === null || createInvoiceRequest === undefined) {
            throw new Error('Required parameter createInvoiceRequest was null or undefined when calling createInvoice.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(createInvoiceRequest, "CreateInvoiceRequest")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "InvoicingV2InvoicesPost201Response");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Provides a (filtered) list of invoices that have been created in your account. You can filter the list based on Invoice Status by setting the status query parameter to one of DRAFT, CREATED, SENT, PARTIAL, PAID or CANCELED.
     * @summary Get a List of Invoices
     * @param offset Page offset number.
     * @param limit Maximum number of items you would like returned.
     * @param status The status of the invoice.  Possible values:   - DRAFT   - CREATED   - SENT   - PARTIAL   - PAID   - CANCELED
     * @param {*} [options] Override http request options.
     */
    getAllInvoices(offset, limit, status, options = {}) {
        const localVarPath = this.basePath + '/invoicing/v2/invoices';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        // verify required parameter 'offset' is not null or undefined
        if (offset === null || offset === undefined) {
            throw new Error('Required parameter offset was null or undefined when calling getAllInvoices.');
        }
        // verify required parameter 'limit' is not null or undefined
        if (limit === null || limit === undefined) {
            throw new Error('Required parameter limit was null or undefined when calling getAllInvoices.');
        }
        if (offset !== undefined) {
            localVarQueryParameters['offset'] = ObjectSerializer.serialize(offset, "number");
        }
        if (limit !== undefined) {
            localVarQueryParameters['limit'] = ObjectSerializer.serialize(limit, "number");
        }
        if (status !== undefined) {
            localVarQueryParameters['status'] = ObjectSerializer.serialize(status, "string");
        }
        Object.assign(localVarHeaderParams, options.headers);
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "InvoicingV2InvoicesAllGet200Response");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * You can retrieve details of a specific invoice. This can be used to check the Invoice status and get a list of invoice payments in the invoice history section of the response. For each payment transaction you can use the Transaction Details API to get more details on the payment transaction.
     * @summary Get Invoice Details
     * @param id The invoice number.
     * @param {*} [options] Override http request options.
     */
    getInvoice(id, options = {}) {
        const localVarPath = this.basePath + '/invoicing/v2/invoices/{id}'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getInvoice.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "InvoicingV2InvoicesGet200Response");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * You can cancel an invoice if no payment is made to it. You cannot cancel partially or fully paid invoices.
     * @summary Cancel an Invoice
     * @param id The invoice number.
     * @param {*} [options] Override http request options.
     */
    performCancelAction(id, options = {}) {
        const localVarPath = this.basePath + '/invoicing/v2/invoices/{id}/cancelation'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling performCancelAction.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "InvoicingV2InvoicesCancel200Response");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * You can publish an invoice in DRAFT status. After invoking this method, the invoice status is changed to CREATED.
     * @summary Publish an Invoice
     * @param id The invoice number.
     * @param {*} [options] Override http request options.
     */
    performPublishAction(id, options = {}) {
        const localVarPath = this.basePath + '/invoicing/v2/invoices/{id}/publication'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling performPublishAction.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "InvoicingV2InvoicesPublish200Response");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * You can send an invoice in draft or created state or resend a sent or partially paid invoice. Fully paid or canceled invoices cannot be resent.
     * @summary Send an Invoice
     * @param id The invoice number.
     * @param {*} [options] Override http request options.
     */
    performSendAction(id, options = {}) {
        const localVarPath = this.basePath + '/invoicing/v2/invoices/{id}/delivery'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling performSendAction.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "InvoicingV2InvoicesSend200Response");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * You can update all information except the invoice number till any payment is received for an invoice. Invoices that are partially or fully paid or cancelled cannot be updated.
     * @summary Update an Invoice
     * @param id The invoice number.
     * @param updateInvoiceRequest Updating the invoice does not resend the invoice automatically. You must resend the invoice separately.
     * @param {*} [options] Override http request options.
     */
    updateInvoice(id, updateInvoiceRequest, options = {}) {
        const localVarPath = this.basePath + '/invoicing/v2/invoices/{id}'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling updateInvoice.');
        }
        // verify required parameter 'updateInvoiceRequest' is not null or undefined
        if (updateInvoiceRequest === null || updateInvoiceRequest === undefined) {
            throw new Error('Required parameter updateInvoiceRequest was null or undefined when calling updateInvoice.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'PUT',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(updateInvoiceRequest, "UpdateInvoiceRequest")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "InvoicingV2InvoicesPut200Response");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
}
exports.InvoicesApi = InvoicesApi;
var ManageWebhooksApiApiKeys;
(function (ManageWebhooksApiApiKeys) {
})(ManageWebhooksApiApiKeys = exports.ManageWebhooksApiApiKeys || (exports.ManageWebhooksApiApiKeys = {}));
class ManageWebhooksApi {
    constructor(basePathOrUsername, password, basePath) {
        this._basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new VoidAuth(),
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    set useQuerystring(value) {
        this._useQuerystring = value;
    }
    set basePath(basePath) {
        this._basePath = basePath;
    }
    get basePath() {
        return this._basePath;
    }
    setDefaultAuthentication(auth) {
        this.authentications.default = auth;
    }
    setApiKey(key, value) {
        this.authentications[ManageWebhooksApiApiKeys[key]].apiKey = value;
    }
    /**
     * Delete the webhook. Please note that deleting a particular webhook does not delete the history of the webhook notifications.
     * @summary Delete a Webhook Subscription
     * @param webhookId The webhook identifier.
     * @param {*} [options] Override http request options.
     */
    deleteWebhookSubscription(webhookId, options = {}) {
        const localVarPath = this.basePath + '/notification-subscriptions/v2/webhooks/{webhookId}'
            .replace('{' + 'webhookId' + '}', encodeURIComponent(String(webhookId)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        // verify required parameter 'webhookId' is not null or undefined
        if (webhookId === null || webhookId === undefined) {
            throw new Error('Required parameter webhookId was null or undefined when calling deleteWebhookSubscription.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'DELETE',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Retrieve the details of a specific webhook by supplying the webhook ID in the path.
     * @summary Get Details On a Single Webhook
     * @param webhookId The webhook Identifier
     * @param {*} [options] Override http request options.
     */
    getWebhookSubscriptionById(webhookId, options = {}) {
        const localVarPath = this.basePath + '/notification-subscriptions/v2/webhooks/{webhookId}'
            .replace('{' + 'webhookId' + '}', encodeURIComponent(String(webhookId)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        // verify required parameter 'webhookId' is not null or undefined
        if (webhookId === null || webhookId === undefined) {
            throw new Error('Required parameter webhookId was null or undefined when calling getWebhookSubscriptionById.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "InlineResponse2015");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Retrieve a list of all previously created webhooks.
     * @summary Get Details On All Created Webhooks
     * @param organizationId The Organization Identifier.
     * @param productId The Product Identifier.
     * @param eventType The Event Type.
     * @param {*} [options] Override http request options.
     */
    getWebhookSubscriptionsByOrg(organizationId, productId, eventType, options = {}) {
        const localVarPath = this.basePath + '/notification-subscriptions/v2/webhooks';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        // verify required parameter 'organizationId' is not null or undefined
        if (organizationId === null || organizationId === undefined) {
            throw new Error('Required parameter organizationId was null or undefined when calling getWebhookSubscriptionsByOrg.');
        }
        if (organizationId !== undefined) {
            localVarQueryParameters['organizationId'] = ObjectSerializer.serialize(organizationId, "string");
        }
        if (productId !== undefined) {
            localVarQueryParameters['productId'] = ObjectSerializer.serialize(productId, "string");
        }
        if (eventType !== undefined) {
            localVarQueryParameters['eventType'] = ObjectSerializer.serialize(eventType, "string");
        }
        Object.assign(localVarHeaderParams, options.headers);
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "Array<InlineResponse2004>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Test the webhook configuration by sending a sample webhook. Calling this endpoint sends a sample webhook to the endpoint identified in the user's subscription.   It will contain sample values for the product & eventType based on values present in your subscription along with a sample message in the payload.   Based on the webhook response users can make any necessary modifications or rest assured knowing their setup is configured correctly.
     * @summary Test a Webhook Configuration
     * @param webhookId The Webhook Identifier.
     * @param {*} [options] Override http request options.
     */
    notificationSubscriptionsV1WebhooksWebhookIdPost(webhookId, options = {}) {
        const localVarPath = this.basePath + '/notification-subscriptions/v1/webhooks/{webhookId}'
            .replace('{' + 'webhookId' + '}', encodeURIComponent(String(webhookId)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        // verify required parameter 'webhookId' is not null or undefined
        if (webhookId === null || webhookId === undefined) {
            throw new Error('Required parameter webhookId was null or undefined when calling notificationSubscriptionsV1WebhooksWebhookIdPost.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "InlineResponse2016");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Update a Webhook Subscription.
     * @summary Update a Webhook Subscription
     * @param webhookId The Webhook Identifier.
     * @param updateWebhook The webhook payload or changes to apply.
     * @param {*} [options] Override http request options.
     */
    notificationSubscriptionsV2WebhooksWebhookIdPatch(webhookId, updateWebhook, options = {}) {
        const localVarPath = this.basePath + '/notification-subscriptions/v2/webhooks/{webhookId}'
            .replace('{' + 'webhookId' + '}', encodeURIComponent(String(webhookId)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        // verify required parameter 'webhookId' is not null or undefined
        if (webhookId === null || webhookId === undefined) {
            throw new Error('Required parameter webhookId was null or undefined when calling notificationSubscriptionsV2WebhooksWebhookIdPatch.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'PATCH',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(updateWebhook, "UpdateWebhook")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "InlineResponse2005");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Users can update the status of a webhook subscription by calling this endpoint.   The webhookId parameter in the URL path identifies the specific webhook subscription to be updated. The request body accepts the values ACTIVE or INACTIVE. If the subscription is set to INACTIVE, webhooks will not be delivered until the subscription is activated again.
     * @summary Update a Webhook Status
     * @param webhookId The Webhook Identifier.
     * @param updateStatus The status that the subscription should be updated to.
     * @param {*} [options] Override http request options.
     */
    notificationSubscriptionsV2WebhooksWebhookIdStatusPut(webhookId, updateStatus, options = {}) {
        const localVarPath = this.basePath + '/notification-subscriptions/v2/webhooks/{webhookId}/status'
            .replace('{' + 'webhookId' + '}', encodeURIComponent(String(webhookId)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        // verify required parameter 'webhookId' is not null or undefined
        if (webhookId === null || webhookId === undefined) {
            throw new Error('Required parameter webhookId was null or undefined when calling notificationSubscriptionsV2WebhooksWebhookIdStatusPut.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'PUT',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(updateStatus, "UpdateStatus")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Store and manage certificates that will be used to preform Message Level Encryption (MLE). Each new webhook will need its own unique asymmetric certificate. You can either use a digital certificate issued/signed by a CA or self-sign your own using the documentation available on the Developer Guide.
     * @summary Message Level Encryption
     * @param vCSenderOrganizationId Sender organization id
     * @param vCPermissions Encoded user permissions returned by the CGK, for the entity user who initiated the boarding
     * @param saveAsymEgressKey Provide egress Asymmetric key information to save (create or store)
     * @param vCCorrelationId A globally unique id associated with your request
     * @param {*} [options] Override http request options.
     */
    saveAsymEgressKey(vCSenderOrganizationId, vCPermissions, saveAsymEgressKey, vCCorrelationId, options = {}) {
        const localVarPath = this.basePath + '/kms/egress/v2/keys-asym';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        // verify required parameter 'vCSenderOrganizationId' is not null or undefined
        if (vCSenderOrganizationId === null || vCSenderOrganizationId === undefined) {
            throw new Error('Required parameter vCSenderOrganizationId was null or undefined when calling saveAsymEgressKey.');
        }
        // verify required parameter 'vCPermissions' is not null or undefined
        if (vCPermissions === null || vCPermissions === undefined) {
            throw new Error('Required parameter vCPermissions was null or undefined when calling saveAsymEgressKey.');
        }
        // verify required parameter 'saveAsymEgressKey' is not null or undefined
        if (saveAsymEgressKey === null || saveAsymEgressKey === undefined) {
            throw new Error('Required parameter saveAsymEgressKey was null or undefined when calling saveAsymEgressKey.');
        }
        localVarHeaderParams['v-c-correlation-id'] = ObjectSerializer.serialize(vCCorrelationId, "string");
        localVarHeaderParams['v-c-sender-organization-id'] = ObjectSerializer.serialize(vCSenderOrganizationId, "string");
        localVarHeaderParams['v-c-permissions'] = ObjectSerializer.serialize(vCPermissions, "string");
        Object.assign(localVarHeaderParams, options.headers);
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(saveAsymEgressKey, "SaveAsymEgressKey")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "InlineResponse2017");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
}
exports.ManageWebhooksApi = ManageWebhooksApi;
var MerchantBoardingApiApiKeys;
(function (MerchantBoardingApiApiKeys) {
})(MerchantBoardingApiApiKeys = exports.MerchantBoardingApiApiKeys || (exports.MerchantBoardingApiApiKeys = {}));
class MerchantBoardingApi {
    constructor(basePathOrUsername, password, basePath) {
        this._basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new VoidAuth(),
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    set useQuerystring(value) {
        this._useQuerystring = value;
    }
    set basePath(basePath) {
        this._basePath = basePath;
    }
    get basePath() {
        return this._basePath;
    }
    setDefaultAuthentication(auth) {
        this.authentications.default = auth;
    }
    setApiKey(key, value) {
        this.authentications[MerchantBoardingApiApiKeys[key]].apiKey = value;
    }
    /**
     * This end point will get all information of a boarding registration
     * @summary Gets all the information on a boarding registration
     * @param registrationId Identifies the boarding registration to be updated
     * @param {*} [options] Override http request options.
     */
    getRegistration(registrationId, options = {}) {
        const localVarPath = this.basePath + '/boarding/v1/registrations/{registrationId}'
            .replace('{' + 'registrationId' + '}', encodeURIComponent(String(registrationId)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        // verify required parameter 'registrationId' is not null or undefined
        if (registrationId === null || registrationId === undefined) {
            throw new Error('Required parameter registrationId was null or undefined when calling getRegistration.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "InlineResponse2002");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Boarding Product is specifically for resellers who onboard merchants to resell their services to merchants and help integrate REST API into their systems.  The Boarding API is designed to simplify and streamline the onboarding process of merchants by enabling administrators and developers to: 1. Enable and Configure Products: The API helps in adding new products to an existing organization and configuring them to suit specific needs. 2. Update Merchant Information: The API allows for updating an organization’s information efficiently. 3. Manage Payment Integration: It provides templates for secure payment integration and management.
     * @summary Create a boarding registration
     * @param postRegistrationBody Boarding registration data
     * @param vCIdempotencyId defines idempotency of the request
     * @param {*} [options] Override http request options.
     */
    postRegistration(postRegistrationBody, vCIdempotencyId, options = {}) {
        const localVarPath = this.basePath + '/boarding/v1/registrations';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        // verify required parameter 'postRegistrationBody' is not null or undefined
        if (postRegistrationBody === null || postRegistrationBody === undefined) {
            throw new Error('Required parameter postRegistrationBody was null or undefined when calling postRegistration.');
        }
        localVarHeaderParams['v-c-idempotency-id'] = ObjectSerializer.serialize(vCIdempotencyId, "string");
        Object.assign(localVarHeaderParams, options.headers);
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(postRegistrationBody, "PostRegistrationBody")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "InlineResponse2013");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
}
exports.MerchantBoardingApi = MerchantBoardingApi;
var MicroformIntegrationApiApiKeys;
(function (MicroformIntegrationApiApiKeys) {
})(MicroformIntegrationApiApiKeys = exports.MicroformIntegrationApiApiKeys || (exports.MicroformIntegrationApiApiKeys = {}));
class MicroformIntegrationApi {
    constructor(basePathOrUsername, password, basePath) {
        this._basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new VoidAuth(),
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    set useQuerystring(value) {
        this._useQuerystring = value;
    }
    set basePath(basePath) {
        this._basePath = basePath;
    }
    get basePath() {
        return this._basePath;
    }
    setDefaultAuthentication(auth) {
        this.authentications.default = auth;
    }
    setApiKey(key, value) {
        this.authentications[MicroformIntegrationApiApiKeys[key]].apiKey = value;
    }
    /**
     * This API is used to generate the Capture Context data structure for the Microform Integration.  Microform is a browser-based acceptance solution that allows a seller to capture payment information is a secure manner from their website.  For more information about Flex Microform transactions, see the [Flex Developer Guides Page](https://developer.cybersource.com/api/developer-guides/dita-flex/SAFlexibleToken.html). For examples on how to integrate Flex Microform within your webpage please see our [GitHub Flex Samples](https://github.com/CyberSource?q=flex&type=&language=) This API is a server-to-server API to generate the capture context that can be used to initiate instance of microform on a acceptance page.  The capture context is a digitally signed JWT that provides authentication, one-time keys, and the target origin to the Microform Integration application.  The availability of API features for a merchant may depend on the portfolio configuration and may need to be enabled at the portfolio level before they can be added to merchant accounts.
     * @summary Generate Capture Context
     * @param generateCaptureContextRequest
     * @param {*} [options] Override http request options.
     */
    generateCaptureContext(generateCaptureContextRequest, options = {}) {
        const localVarPath = this.basePath + '/microform/v2/sessions';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        // verify required parameter 'generateCaptureContextRequest' is not null or undefined
        if (generateCaptureContextRequest === null || generateCaptureContextRequest === undefined) {
            throw new Error('Required parameter generateCaptureContextRequest was null or undefined when calling generateCaptureContext.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(generateCaptureContextRequest, "GenerateCaptureContextRequest")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "string");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
}
exports.MicroformIntegrationApi = MicroformIntegrationApi;
var NetFundingsApiApiKeys;
(function (NetFundingsApiApiKeys) {
})(NetFundingsApiApiKeys = exports.NetFundingsApiApiKeys || (exports.NetFundingsApiApiKeys = {}));
class NetFundingsApi {
    constructor(basePathOrUsername, password, basePath) {
        this._basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new VoidAuth(),
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    set useQuerystring(value) {
        this._useQuerystring = value;
    }
    set basePath(basePath) {
        this._basePath = basePath;
    }
    get basePath() {
        return this._basePath;
    }
    setDefaultAuthentication(auth) {
        this.authentications.default = auth;
    }
    setApiKey(key, value) {
        this.authentications[NetFundingsApiApiKeys[key]].apiKey = value;
    }
    /**
     * Get Netfunding information for an account or a merchant.
     * @summary Get Netfunding Information for an Account or a Merchant
     * @param startTime Valid report Start Time in **ISO 8601 format** Please refer the following link to know more about ISO 8601 format.[Rfc Date Format](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#anchor14)  **Example date format:**   - yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ (e.g. 2018-01-01T00:00:00.000Z)
     * @param endTime Valid report End Time in **ISO 8601 format** Please refer the following link to know more about ISO 8601 format.[Rfc Date Format](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#anchor14)  **Example date format:**   - yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ (e.g. 2018-01-01T00:00:00.000Z)
     * @param organizationId Valid Organization Id
     * @param groupName Valid CyberSource Group Name.
     * @param {*} [options] Override http request options.
     */
    getNetFundingDetails(startTime, endTime, organizationId, groupName, options = {}) {
        const localVarPath = this.basePath + '/reporting/v3/net-fundings';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        // verify required parameter 'startTime' is not null or undefined
        if (startTime === null || startTime === undefined) {
            throw new Error('Required parameter startTime was null or undefined when calling getNetFundingDetails.');
        }
        // verify required parameter 'endTime' is not null or undefined
        if (endTime === null || endTime === undefined) {
            throw new Error('Required parameter endTime was null or undefined when calling getNetFundingDetails.');
        }
        if (startTime !== undefined) {
            localVarQueryParameters['startTime'] = ObjectSerializer.serialize(startTime, "Date");
        }
        if (endTime !== undefined) {
            localVarQueryParameters['endTime'] = ObjectSerializer.serialize(endTime, "Date");
        }
        if (organizationId !== undefined) {
            localVarQueryParameters['organizationId'] = ObjectSerializer.serialize(organizationId, "string");
        }
        if (groupName !== undefined) {
            localVarQueryParameters['groupName'] = ObjectSerializer.serialize(groupName, "string");
        }
        Object.assign(localVarHeaderParams, options.headers);
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "ReportingV3NetFundingsGet200Response");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
}
exports.NetFundingsApi = NetFundingsApi;
var NotificationOfChangesApiApiKeys;
(function (NotificationOfChangesApiApiKeys) {
})(NotificationOfChangesApiApiKeys = exports.NotificationOfChangesApiApiKeys || (exports.NotificationOfChangesApiApiKeys = {}));
class NotificationOfChangesApi {
    constructor(basePathOrUsername, password, basePath) {
        this._basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new VoidAuth(),
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    set useQuerystring(value) {
        this._useQuerystring = value;
    }
    set basePath(basePath) {
        this._basePath = basePath;
    }
    get basePath() {
        return this._basePath;
    }
    setDefaultAuthentication(auth) {
        this.authentications.default = auth;
    }
    setApiKey(key, value) {
        this.authentications[NotificationOfChangesApiApiKeys[key]].apiKey = value;
    }
    /**
     * Download the Notification of Change report. This report shows eCheck-related fields updated as a result of a response to an eCheck settlement transaction.
     * @summary Get Notification of Changes
     * @param startTime Valid report Start Time in **ISO 8601 format** Please refer the following link to know more about ISO 8601 format.[Rfc Date Format](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#anchor14)  **Example date format:**   - yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ (e.g. 2018-01-01T00:00:00.000Z)
     * @param endTime Valid report End Time in **ISO 8601 format** Please refer the following link to know more about ISO 8601 format.[Rfc Date Format](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#anchor14)  **Example date format:**   - yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ (e.g. 2018-01-01T00:00:00.000Z)
     * @param {*} [options] Override http request options.
     */
    getNotificationOfChangeReport(startTime, endTime, options = {}) {
        const localVarPath = this.basePath + '/reporting/v3/notification-of-changes';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        // verify required parameter 'startTime' is not null or undefined
        if (startTime === null || startTime === undefined) {
            throw new Error('Required parameter startTime was null or undefined when calling getNotificationOfChangeReport.');
        }
        // verify required parameter 'endTime' is not null or undefined
        if (endTime === null || endTime === undefined) {
            throw new Error('Required parameter endTime was null or undefined when calling getNotificationOfChangeReport.');
        }
        if (startTime !== undefined) {
            localVarQueryParameters['startTime'] = ObjectSerializer.serialize(startTime, "Date");
        }
        if (endTime !== undefined) {
            localVarQueryParameters['endTime'] = ObjectSerializer.serialize(endTime, "Date");
        }
        Object.assign(localVarHeaderParams, options.headers);
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "ReportingV3NotificationofChangesGet200Response");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
}
exports.NotificationOfChangesApi = NotificationOfChangesApi;
var OrdersApiApiKeys;
(function (OrdersApiApiKeys) {
})(OrdersApiApiKeys = exports.OrdersApiApiKeys || (exports.OrdersApiApiKeys = {}));
class OrdersApi {
    constructor(basePathOrUsername, password, basePath) {
        this._basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new VoidAuth(),
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    set useQuerystring(value) {
        this._useQuerystring = value;
    }
    set basePath(basePath) {
        this._basePath = basePath;
    }
    get basePath() {
        return this._basePath;
    }
    setDefaultAuthentication(auth) {
        this.authentications.default = auth;
    }
    setApiKey(key, value) {
        this.authentications[OrdersApiApiKeys[key]].apiKey = value;
    }
    /**
     * A create order request enables you to send the itemized details along with the order. This API can be used by merchants initiating their transactions with the create order API.
     * @summary Create an Order
     * @param createOrderRequest
     * @param {*} [options] Override http request options.
     */
    createOrder(createOrderRequest, options = {}) {
        const localVarPath = this.basePath + '/pts/v2/intents';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        // verify required parameter 'createOrderRequest' is not null or undefined
        if (createOrderRequest === null || createOrderRequest === undefined) {
            throw new Error('Required parameter createOrderRequest was null or undefined when calling createOrder.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(createOrderRequest, "CreateOrderRequest")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "PtsV2CreateOrderPost201Response");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * This API can be used in two flavours - for updating the order as well as saving the order.
     * @summary Update an Order
     * @param id The ID returned from the original create order response.
     * @param updateOrderRequest
     * @param {*} [options] Override http request options.
     */
    updateOrder(id, updateOrderRequest, options = {}) {
        const localVarPath = this.basePath + '/pts/v2/intents/{id}'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling updateOrder.');
        }
        // verify required parameter 'updateOrderRequest' is not null or undefined
        if (updateOrderRequest === null || updateOrderRequest === undefined) {
            throw new Error('Required parameter updateOrderRequest was null or undefined when calling updateOrder.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'PATCH',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(updateOrderRequest, "UpdateOrderRequest")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "PtsV2UpdateOrderPatch201Response");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
}
exports.OrdersApi = OrdersApi;
var PayerAuthenticationApiApiKeys;
(function (PayerAuthenticationApiApiKeys) {
})(PayerAuthenticationApiApiKeys = exports.PayerAuthenticationApiApiKeys || (exports.PayerAuthenticationApiApiKeys = {}));
class PayerAuthenticationApi {
    constructor(basePathOrUsername, password, basePath) {
        this._basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new VoidAuth(),
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    set useQuerystring(value) {
        this._useQuerystring = value;
    }
    set basePath(basePath) {
        this._basePath = basePath;
    }
    get basePath() {
        return this._basePath;
    }
    setDefaultAuthentication(auth) {
        this.authentications.default = auth;
    }
    setApiKey(key, value) {
        this.authentications[PayerAuthenticationApiApiKeys[key]].apiKey = value;
    }
    /**
     * This call verifies that the card is enrolled in a card authentication program.
     * @summary Check Payer Auth Enrollment
     * @param checkPayerAuthEnrollmentRequest
     * @param {*} [options] Override http request options.
     */
    checkPayerAuthEnrollment(checkPayerAuthEnrollmentRequest, options = {}) {
        const localVarPath = this.basePath + '/risk/v1/authentications';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        // verify required parameter 'checkPayerAuthEnrollmentRequest' is not null or undefined
        if (checkPayerAuthEnrollmentRequest === null || checkPayerAuthEnrollmentRequest === undefined) {
            throw new Error('Required parameter checkPayerAuthEnrollmentRequest was null or undefined when calling checkPayerAuthEnrollment.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(checkPayerAuthEnrollmentRequest, "CheckPayerAuthEnrollmentRequest")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "RiskV1AuthenticationsPost201Response");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * A new service for Merchants to get reference_id for Digital Wallets to use in place of BIN number in Cardinal. Set up file while authenticating with Cardinal. This service should be called by Merchant when payment instrument chosen or changes. This service has to be called before enrollment check. The availability of API features for a merchant may depend on the portfolio configuration and may need to be enabled at the portfolio level before they can be added to merchant accounts.
     * @summary Setup Payer Auth
     * @param payerAuthSetupRequest
     * @param {*} [options] Override http request options.
     */
    payerAuthSetup(payerAuthSetupRequest, options = {}) {
        const localVarPath = this.basePath + '/risk/v1/authentication-setups';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        // verify required parameter 'payerAuthSetupRequest' is not null or undefined
        if (payerAuthSetupRequest === null || payerAuthSetupRequest === undefined) {
            throw new Error('Required parameter payerAuthSetupRequest was null or undefined when calling payerAuthSetup.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(payerAuthSetupRequest, "PayerAuthSetupRequest")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "RiskV1AuthenticationSetupsPost201Response");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * This call retrieves and validates the authentication results from issuer and allows the merchant to proceed with processing the payment.
     * @summary Validate Authentication Results
     * @param validateRequest
     * @param {*} [options] Override http request options.
     */
    validateAuthenticationResults(validateRequest, options = {}) {
        const localVarPath = this.basePath + '/risk/v1/authentication-results';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        // verify required parameter 'validateRequest' is not null or undefined
        if (validateRequest === null || validateRequest === undefined) {
            throw new Error('Required parameter validateRequest was null or undefined when calling validateAuthenticationResults.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(validateRequest, "ValidateRequest")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "RiskV1AuthenticationResultsPost201Response");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
}
exports.PayerAuthenticationApi = PayerAuthenticationApi;
var PaymentBatchSummariesApiApiKeys;
(function (PaymentBatchSummariesApiApiKeys) {
})(PaymentBatchSummariesApiApiKeys = exports.PaymentBatchSummariesApiApiKeys || (exports.PaymentBatchSummariesApiApiKeys = {}));
class PaymentBatchSummariesApi {
    constructor(basePathOrUsername, password, basePath) {
        this._basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new VoidAuth(),
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    set useQuerystring(value) {
        this._useQuerystring = value;
    }
    set basePath(basePath) {
        this._basePath = basePath;
    }
    get basePath() {
        return this._basePath;
    }
    setDefaultAuthentication(auth) {
        this.authentications.default = auth;
    }
    setApiKey(key, value) {
        this.authentications[PaymentBatchSummariesApiApiKeys[key]].apiKey = value;
    }
    /**
     * Scope can be either account/merchant or reseller.
     * @summary Get Payment Batch Summary Data
     * @param startTime Valid report Start Time in **ISO 8601 format** Please refer the following link to know more about ISO 8601 format.[Rfc Date Format](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#anchor14)  **Example date format:**   - yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ (e.g. 2018-01-01T00:00:00.000Z)
     * @param endTime Valid report End Time in **ISO 8601 format** Please refer the following link to know more about ISO 8601 format.[Rfc Date Format](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#anchor14)  **Example date format:**   - yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ (e.g. 2018-01-01T00:00:00.000Z)
     * @param organizationId Valid Organization Id
     * @param rollUp Conditional - RollUp for data for day/week/month. Required while getting breakdown data for a Merchant
     * @param breakdown Conditional - Breakdown on account_rollup/all_merchant/selected_merchant. Required while getting breakdown data for a Merchant.
     * @param startDayOfWeek Optional - Start day of week to breakdown data for weeks in a month
     * @param {*} [options] Override http request options.
     */
    getPaymentBatchSummary(startTime, endTime, organizationId, rollUp, breakdown, startDayOfWeek, options = {}) {
        const localVarPath = this.basePath + '/reporting/v3/payment-batch-summaries';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        // verify required parameter 'startTime' is not null or undefined
        if (startTime === null || startTime === undefined) {
            throw new Error('Required parameter startTime was null or undefined when calling getPaymentBatchSummary.');
        }
        // verify required parameter 'endTime' is not null or undefined
        if (endTime === null || endTime === undefined) {
            throw new Error('Required parameter endTime was null or undefined when calling getPaymentBatchSummary.');
        }
        if (startTime !== undefined) {
            localVarQueryParameters['startTime'] = ObjectSerializer.serialize(startTime, "Date");
        }
        if (endTime !== undefined) {
            localVarQueryParameters['endTime'] = ObjectSerializer.serialize(endTime, "Date");
        }
        if (organizationId !== undefined) {
            localVarQueryParameters['organizationId'] = ObjectSerializer.serialize(organizationId, "string");
        }
        if (rollUp !== undefined) {
            localVarQueryParameters['rollUp'] = ObjectSerializer.serialize(rollUp, "string");
        }
        if (breakdown !== undefined) {
            localVarQueryParameters['breakdown'] = ObjectSerializer.serialize(breakdown, "string");
        }
        if (startDayOfWeek !== undefined) {
            localVarQueryParameters['startDayOfWeek'] = ObjectSerializer.serialize(startDayOfWeek, "number");
        }
        Object.assign(localVarHeaderParams, options.headers);
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "ReportingV3PaymentBatchSummariesGet200Response");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
}
exports.PaymentBatchSummariesApi = PaymentBatchSummariesApi;
var PaymentInstrumentApiApiKeys;
(function (PaymentInstrumentApiApiKeys) {
})(PaymentInstrumentApiApiKeys = exports.PaymentInstrumentApiApiKeys || (exports.PaymentInstrumentApiApiKeys = {}));
class PaymentInstrumentApi {
    constructor(basePathOrUsername, password, basePath) {
        this._basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new VoidAuth(),
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    set useQuerystring(value) {
        this._useQuerystring = value;
    }
    set basePath(basePath) {
        this._basePath = basePath;
    }
    get basePath() {
        return this._basePath;
    }
    setDefaultAuthentication(auth) {
        this.authentications.default = auth;
    }
    setApiKey(key, value) {
        this.authentications[PaymentInstrumentApiApiKeys[key]].apiKey = value;
    }
    /**
     * |  |  |  | | --- | --- | --- | |**Standalone Payment Instruments**<br>A Payment Instrument represents tokenized payment information such as expiration date, billing address & card type.<br>A Payment Instrument token does not store the card number. A Payment Instrument is associated with an [Instrument Identifier](#token-management_instrument-identifier_create-an-instrument-identifier) that represents either a payment card number, or in the case of an ACH bank account, the routing and account number.<br>**Standalone Payment Instruments do not belong to a [Customer](#token-management_customer_create-a-customer).**|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|**Deleting a Payment Instrument**<br>Your system can use this API to delete an existing Payment Instrument.<br>Any Instrument Identifiers representing the card number will also be deleted if they are not associated with any other Payment Instruments.
     * @summary Delete a Payment Instrument
     * @param paymentInstrumentId The Id of a payment instrument.
     * @param profileId The Id of a profile containing user specific TMS configuration.
     * @param {*} [options] Override http request options.
     */
    deletePaymentInstrument(paymentInstrumentId, profileId, options = {}) {
        const localVarPath = this.basePath + '/tms/v1/paymentinstruments/{paymentInstrumentId}'
            .replace('{' + 'paymentInstrumentId' + '}', encodeURIComponent(String(paymentInstrumentId)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        // verify required parameter 'paymentInstrumentId' is not null or undefined
        if (paymentInstrumentId === null || paymentInstrumentId === undefined) {
            throw new Error('Required parameter paymentInstrumentId was null or undefined when calling deletePaymentInstrument.');
        }
        localVarHeaderParams['profile-id'] = ObjectSerializer.serialize(profileId, "string");
        Object.assign(localVarHeaderParams, options.headers);
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'DELETE',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * |  |  |  | | --- | --- | --- | |**Standalone Payment Instruments**<br>A Payment Instrument represents tokenized payment information such as expiration date, billing address & card type.<br>A Payment Instrument token does not store the card number. A Payment Instrument is associated with an [Instrument Identifier](#token-management_instrument-identifier_create-an-instrument-identifier) that represents either a payment card number, or in the case of an ACH bank account, the routing and account number.<br>**Standalone Payment Instruments do not belong to a [Customer](#token-management_customer_create-a-customer).**|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|**Retrieving a Payment Instrument**<br>Your system can use this API to retrieve an existing Payment Instrument.<br>To perform a payment with a particular Payment Instrument simply specify the [Payment Instrument Id in the payments request](#payments_payments_process-a-payment_samplerequests-dropdown_authorization-using-tokens_authorization-with-customer-payment-instrument-and-shipping-address-token-id_liveconsole-tab-request-body).
     * @summary Retrieve a Payment Instrument
     * @param paymentInstrumentId The Id of a payment instrument.
     * @param profileId The Id of a profile containing user specific TMS configuration.
     * @param retrieveBinDetails Retrieve the Bin Details of PAN or network token
     * @param {*} [options] Override http request options.
     */
    getPaymentInstrument(paymentInstrumentId, profileId, retrieveBinDetails, options = {}) {
        const localVarPath = this.basePath + '/tms/v1/paymentinstruments/{paymentInstrumentId}'
            .replace('{' + 'paymentInstrumentId' + '}', encodeURIComponent(String(paymentInstrumentId)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        // verify required parameter 'paymentInstrumentId' is not null or undefined
        if (paymentInstrumentId === null || paymentInstrumentId === undefined) {
            throw new Error('Required parameter paymentInstrumentId was null or undefined when calling getPaymentInstrument.');
        }
        if (retrieveBinDetails !== undefined) {
            localVarQueryParameters['retrieveBinDetails'] = ObjectSerializer.serialize(retrieveBinDetails, "boolean");
        }
        localVarHeaderParams['profile-id'] = ObjectSerializer.serialize(profileId, "string");
        Object.assign(localVarHeaderParams, options.headers);
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "PostPaymentInstrumentRequest");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * |  |  |  | | --- | --- | --- | |**Standalone Payment Instruments**<br>A Payment Instrument represents tokenized payment information such as expiration date, billing address & card type.<br>A Payment Instrument token does not store the card number. A Payment Instrument is associated with an [Instrument Identifier](#token-management_instrument-identifier_create-an-instrument-identifier) that represents either a payment card number, or in the case of an ACH bank account, the routing and account number.<br>**Standalone Payment Instruments do not belong to a [Customer](#token-management_customer_create-a-customer).**|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|**Updating a Payment Instrument**<br>Your system can use this API to update an existing Payment Instrument.
     * @summary Update a Payment Instrument
     * @param paymentInstrumentId The Id of a payment instrument.
     * @param patchPaymentInstrumentRequest
     * @param profileId The Id of a profile containing user specific TMS configuration.
     * @param retrieveBinDetails Retrieve the Bin Details of PAN or network token
     * @param ifMatch Contains an ETag value from a GET request to make the request conditional.
     * @param {*} [options] Override http request options.
     */
    patchPaymentInstrument(paymentInstrumentId, patchPaymentInstrumentRequest, profileId, retrieveBinDetails, ifMatch, options = {}) {
        const localVarPath = this.basePath + '/tms/v1/paymentinstruments/{paymentInstrumentId}'
            .replace('{' + 'paymentInstrumentId' + '}', encodeURIComponent(String(paymentInstrumentId)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        // verify required parameter 'paymentInstrumentId' is not null or undefined
        if (paymentInstrumentId === null || paymentInstrumentId === undefined) {
            throw new Error('Required parameter paymentInstrumentId was null or undefined when calling patchPaymentInstrument.');
        }
        // verify required parameter 'patchPaymentInstrumentRequest' is not null or undefined
        if (patchPaymentInstrumentRequest === null || patchPaymentInstrumentRequest === undefined) {
            throw new Error('Required parameter patchPaymentInstrumentRequest was null or undefined when calling patchPaymentInstrument.');
        }
        if (retrieveBinDetails !== undefined) {
            localVarQueryParameters['retrieveBinDetails'] = ObjectSerializer.serialize(retrieveBinDetails, "boolean");
        }
        localVarHeaderParams['profile-id'] = ObjectSerializer.serialize(profileId, "string");
        localVarHeaderParams['if-match'] = ObjectSerializer.serialize(ifMatch, "string");
        Object.assign(localVarHeaderParams, options.headers);
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'PATCH',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(patchPaymentInstrumentRequest, "PatchPaymentInstrumentRequest")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "PatchPaymentInstrumentRequest");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * |  |  |  | | --- | --- | --- | |**Standalone Payment Instruments**<br>A Payment Instrument represents tokenized payment information such as expiration date, billing address & card type.<br>A Payment Instrument token does not store the card number. A Payment Instrument is associated with an [Instrument Identifier](#token-management_instrument-identifier_create-an-instrument-identifier) that represents either a payment card number, or in the case of an ACH bank account, the routing and account number.<br>**Standalone Payment Instruments do not belong to a [Customer](#token-management_customer_create-a-customer).**<br><br>**Creating a Payment Instrument**<br>It is recommended you [create a Payment Instrument via a Payment Authorization](#payments_payments_process-a-payment_samplerequests-dropdown_authorization-with-token-create_authorization-with-customer-token-creation_liveconsole-tab-request-body), this can be for a zero amount.<br>In Europe: You should perform Payer Authentication alongside the Authorization.|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|**Payment Network Tokens**<br>Network tokens perform better than regular card numbers and they are not necessarily invalidated when a cardholder loses their card, or it expires.<br>A Payment Network Token will be automatically created and used in future payments if you are enabled for the service.<br>A Payment Network Token can also be [provisioned for an existing Instrument Identifier](#token-management_instrument-identifier_enroll-an-instrument-identifier-for-payment-network-token).<br>For more information about Payment Network Tokens see the Developer Guide.<br><br>**Payments with Payment Instruments**<br>To perform a payment with a particular Payment Instrument specify the [Payment Instrument in the payment request](#payments_payments_process-a-payment_samplerequests-dropdown_authorization-using-tokens_authorization-with-customer-payment-instrument-and-shipping-address-token-id_liveconsole-tab-request-body).
     * @summary Create a Payment Instrument
     * @param postPaymentInstrumentRequest
     * @param profileId The Id of a profile containing user specific TMS configuration.
     * @param retrieveBinDetails Retrieve the Bin Details of PAN or network token
     * @param {*} [options] Override http request options.
     */
    postPaymentInstrument(postPaymentInstrumentRequest, profileId, retrieveBinDetails, options = {}) {
        const localVarPath = this.basePath + '/tms/v1/paymentinstruments';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        // verify required parameter 'postPaymentInstrumentRequest' is not null or undefined
        if (postPaymentInstrumentRequest === null || postPaymentInstrumentRequest === undefined) {
            throw new Error('Required parameter postPaymentInstrumentRequest was null or undefined when calling postPaymentInstrument.');
        }
        if (retrieveBinDetails !== undefined) {
            localVarQueryParameters['retrieveBinDetails'] = ObjectSerializer.serialize(retrieveBinDetails, "boolean");
        }
        localVarHeaderParams['profile-id'] = ObjectSerializer.serialize(profileId, "string");
        Object.assign(localVarHeaderParams, options.headers);
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(postPaymentInstrumentRequest, "PostPaymentInstrumentRequest")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "PostPaymentInstrumentRequest");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
}
exports.PaymentInstrumentApi = PaymentInstrumentApi;
var PaymentLinksApiApiKeys;
(function (PaymentLinksApiApiKeys) {
})(PaymentLinksApiApiKeys = exports.PaymentLinksApiApiKeys || (exports.PaymentLinksApiApiKeys = {}));
class PaymentLinksApi {
    constructor(basePathOrUsername, password, basePath) {
        this._basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new VoidAuth(),
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    set useQuerystring(value) {
        this._useQuerystring = value;
    }
    set basePath(basePath) {
        this._basePath = basePath;
    }
    get basePath() {
        return this._basePath;
    }
    setDefaultAuthentication(auth) {
        this.authentications.default = auth;
    }
    setApiKey(key, value) {
        this.authentications[PaymentLinksApiApiKeys[key]].apiKey = value;
    }
    /**
     * Pay by Link is an easy and fast way to securely sell products or receive donations online. This solution is ideal for distributing the same payment link to multiple customers.   Links for making purchases are referred to as fixed-price links, and links for making donations are referred to as customer-set price links.
     * @summary Create a Payment Link
     * @param createPaymentLinkRequest
     * @param {*} [options] Override http request options.
     */
    createPaymentLink(createPaymentLinkRequest, options = {}) {
        const localVarPath = this.basePath + '/ipl/v2/payment-links';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        // verify required parameter 'createPaymentLinkRequest' is not null or undefined
        if (createPaymentLinkRequest === null || createPaymentLinkRequest === undefined) {
            throw new Error('Required parameter createPaymentLinkRequest was null or undefined when calling createPaymentLink.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(createPaymentLinkRequest, "CreatePaymentLinkRequest")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "PblPaymentLinksPost201Response");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Provides a (filtered) list of payment links that have been created in your account. You can filter the list based on the following status types:  - ACTIVE  - INACTIVE
     * @summary Get a List of Payment Links
     * @param offset Page offset number.
     * @param limit Maximum number of items you would like returned.   Maximum limit: 1000
     * @param status The status of the purchase or donation link.  Possible values:   - ACTIVE   - INACTIVE
     * @param {*} [options] Override http request options.
     */
    getAllPaymentLinks(offset, limit, status, options = {}) {
        const localVarPath = this.basePath + '/ipl/v2/payment-links';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        // verify required parameter 'offset' is not null or undefined
        if (offset === null || offset === undefined) {
            throw new Error('Required parameter offset was null or undefined when calling getAllPaymentLinks.');
        }
        // verify required parameter 'limit' is not null or undefined
        if (limit === null || limit === undefined) {
            throw new Error('Required parameter limit was null or undefined when calling getAllPaymentLinks.');
        }
        if (offset !== undefined) {
            localVarQueryParameters['offset'] = ObjectSerializer.serialize(offset, "number");
        }
        if (limit !== undefined) {
            localVarQueryParameters['limit'] = ObjectSerializer.serialize(limit, "number");
        }
        if (status !== undefined) {
            localVarQueryParameters['status'] = ObjectSerializer.serialize(status, "string");
        }
        Object.assign(localVarHeaderParams, options.headers);
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "PblPaymentLinksAllGet200Response");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * You can retrieve details of a specific payment link. For each payment transaction you can use the Transaction Details API to get more details on the payment transaction.
     * @summary Get Payment Link Details
     * @param id The purchase number.
     * @param {*} [options] Override http request options.
     */
    getPaymentLink(id, options = {}) {
        const localVarPath = this.basePath + '/ipl/v2/payment-links/{id}'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getPaymentLink.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "PblPaymentLinksGet200Response");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * You can update all information except the payment link number for a payment link. Changes made to amount/price will apply to new payments made using the payment link.
     * @summary Update a Payment Link
     * @param id The purchase number.
     * @param updatePaymentLinkRequest Updating the purchase or donation link does not resend the link automatically. You must resend the purchase or donation link separately.
     * @param {*} [options] Override http request options.
     */
    updatePaymentLink(id, updatePaymentLinkRequest, options = {}) {
        const localVarPath = this.basePath + '/ipl/v2/payment-links/{id}'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling updatePaymentLink.');
        }
        // verify required parameter 'updatePaymentLinkRequest' is not null or undefined
        if (updatePaymentLinkRequest === null || updatePaymentLinkRequest === undefined) {
            throw new Error('Required parameter updatePaymentLinkRequest was null or undefined when calling updatePaymentLink.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'PATCH',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(updatePaymentLinkRequest, "UpdatePaymentLinkRequest")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "PblPaymentLinksPost201Response");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
}
exports.PaymentLinksApi = PaymentLinksApi;
var PaymentTokensApiApiKeys;
(function (PaymentTokensApiApiKeys) {
})(PaymentTokensApiApiKeys = exports.PaymentTokensApiApiKeys || (exports.PaymentTokensApiApiKeys = {}));
class PaymentTokensApi {
    constructor(basePathOrUsername, password, basePath) {
        this._basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new VoidAuth(),
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    set useQuerystring(value) {
        this._useQuerystring = value;
    }
    set basePath(basePath) {
        this._basePath = basePath;
    }
    get basePath() {
        return this._basePath;
    }
    setDefaultAuthentication(auth) {
        this.authentications.default = auth;
    }
    setApiKey(key, value) {
        this.authentications[PaymentTokensApiApiKeys[key]].apiKey = value;
    }
    /**
     * This API can be used in two flavours - for retrieval or deletion of vault id.
     * @summary Retrieve or Delete Payment Token
     * @param request
     * @param {*} [options] Override http request options.
     */
    retrieveOrDeletePaymentToken(request, options = {}) {
        const localVarPath = this.basePath + '/pts/v2/payment-tokens';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        // verify required parameter 'request' is not null or undefined
        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling retrieveOrDeletePaymentToken.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(request, "Request")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "InlineResponse201");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
}
exports.PaymentTokensApi = PaymentTokensApi;
var PaymentsApiApiKeys;
(function (PaymentsApiApiKeys) {
})(PaymentsApiApiKeys = exports.PaymentsApiApiKeys || (exports.PaymentsApiApiKeys = {}));
class PaymentsApi {
    constructor(basePathOrUsername, password, basePath) {
        this._basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new VoidAuth(),
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    set useQuerystring(value) {
        this._useQuerystring = value;
    }
    set basePath(basePath) {
        this._basePath = basePath;
    }
    get basePath() {
        return this._basePath;
    }
    setDefaultAuthentication(auth) {
        this.authentications.default = auth;
    }
    setApiKey(key, value) {
        this.authentications[PaymentsApiApiKeys[key]].apiKey = value;
    }
    /**
     * Create a Payment Order Request
     * @summary Create a Payment Order Request
     * @param orderPaymentRequest
     * @param id Request identifier number for the order request.
     * @param {*} [options] Override http request options.
     */
    createOrderRequest(orderPaymentRequest, id, options = {}) {
        const localVarPath = this.basePath + '/pts/v2/payment-references/{id}/intents'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        // verify required parameter 'orderPaymentRequest' is not null or undefined
        if (orderPaymentRequest === null || orderPaymentRequest === undefined) {
            throw new Error('Required parameter orderPaymentRequest was null or undefined when calling createOrderRequest.');
        }
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling createOrderRequest.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(orderPaymentRequest, "OrderPaymentRequest")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "PtsV2PaymentsOrderPost201Response");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * A payment authorizes the amount for the transaction. There are a number of supported payment features, such as E-commerce and Card Present - Credit Card/Debit Card, Echeck, e-Wallets, Level II/III Data, etc..  A payment response includes the status of the request. It also includes processor-specific information when the request is successful and errors if unsuccessful. See the [Payments Developer Guides Page](https://developer.cybersource.com/docs/cybs/en-us/payments/developer/ctv/rest/payments/payments-intro.html).  Authorization can be requested with Capture, Decision Manager, Payer Authentication(3ds), and Token Creation.
     * @summary Process a Payment
     * @param createPaymentRequest
     * @param {*} [options] Override http request options.
     */
    createPayment(createPaymentRequest, options = {}) {
        const localVarPath = this.basePath + '/pts/v2/payments';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        // verify required parameter 'createPaymentRequest' is not null or undefined
        if (createPaymentRequest === null || createPaymentRequest === undefined) {
            throw new Error('Required parameter createPaymentRequest was null or undefined when calling createPayment.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(createPaymentRequest, "CreatePaymentRequest")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "PtsV2PaymentsPost201Response");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Create Alternative Payments Sessions Request
     * @summary Create Alternative Payments Sessions Request
     * @param createSessionReq
     * @param {*} [options] Override http request options.
     */
    createSessionRequest(createSessionReq, options = {}) {
        const localVarPath = this.basePath + '/pts/v2/payment-references';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        // verify required parameter 'createSessionReq' is not null or undefined
        if (createSessionReq === null || createSessionReq === undefined) {
            throw new Error('Required parameter createSessionReq was null or undefined when calling createSessionRequest.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(createSessionReq, "CreateSessionReq")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "PtsV2PaymentsPost201Response2");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Use this service to authorize additional charges in a lodging or autorental transaction. Include the ID returned from the original authorization in the PATCH request to add additional charges to that authorization.
     * @summary Increment an Authorization
     * @param id The ID returned from the original authorization request.
     * @param incrementAuthRequest
     * @param {*} [options] Override http request options.
     */
    incrementAuth(id, incrementAuthRequest, options = {}) {
        const localVarPath = this.basePath + '/pts/v2/payments/{id}'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling incrementAuth.');
        }
        // verify required parameter 'incrementAuthRequest' is not null or undefined
        if (incrementAuthRequest === null || incrementAuthRequest === undefined) {
            throw new Error('Required parameter incrementAuthRequest was null or undefined when calling incrementAuth.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'PATCH',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(incrementAuthRequest, "IncrementAuthRequest")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "PtsV2IncrementalAuthorizationPatch201Response");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Checks and updates the payment status
     * @summary Check a Payment Status
     * @param id The payment id whose status needs to be checked and updated.
     * @param refreshPaymentStatusRequest
     * @param {*} [options] Override http request options.
     */
    refreshPaymentStatus(id, refreshPaymentStatusRequest, options = {}) {
        const localVarPath = this.basePath + '/pts/v2/refresh-payment-status/{id}'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling refreshPaymentStatus.');
        }
        // verify required parameter 'refreshPaymentStatusRequest' is not null or undefined
        if (refreshPaymentStatusRequest === null || refreshPaymentStatusRequest === undefined) {
            throw new Error('Required parameter refreshPaymentStatusRequest was null or undefined when calling refreshPaymentStatus.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(refreshPaymentStatusRequest, "RefreshPaymentStatusRequest")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "PtsV2PaymentsPost201Response1");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Update Alternative Payments Sessions Request
     * @summary Update Alternative Payments Sessions Request
     * @param createSessionRequest
     * @param id The payment ID. This ID is returned from a previous payment request.
     * @param {*} [options] Override http request options.
     */
    updateSessionReq(createSessionRequest, id, options = {}) {
        const localVarPath = this.basePath + '/pts/v2/payment-references/{id}'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        // verify required parameter 'createSessionRequest' is not null or undefined
        if (createSessionRequest === null || createSessionRequest === undefined) {
            throw new Error('Required parameter createSessionRequest was null or undefined when calling updateSessionReq.');
        }
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling updateSessionReq.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'PATCH',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(createSessionRequest, "CreateSessionRequest")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "PtsV2PaymentsPost201Response2");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
}
exports.PaymentsApi = PaymentsApi;
var PayoutsApiApiKeys;
(function (PayoutsApiApiKeys) {
})(PayoutsApiApiKeys = exports.PayoutsApiApiKeys || (exports.PayoutsApiApiKeys = {}));
class PayoutsApi {
    constructor(basePathOrUsername, password, basePath) {
        this._basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new VoidAuth(),
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    set useQuerystring(value) {
        this._useQuerystring = value;
    }
    set basePath(basePath) {
        this._basePath = basePath;
    }
    get basePath() {
        return this._basePath;
    }
    setDefaultAuthentication(auth) {
        this.authentications.default = auth;
    }
    setApiKey(key, value) {
        this.authentications[PayoutsApiApiKeys[key]].apiKey = value;
    }
    /**
     * Send funds from a selected funding source to a designated credit/debit card account or a prepaid card using an Original Credit Transaction (OCT). The availability of API features for a merchant can depend on the portfolio configuration and may need to be enabled at the portfolio level before they can be added to merchant accounts.
     * @summary Process a Payout
     * @param octCreatePaymentRequest
     * @param {*} [options] Override http request options.
     */
    octCreatePayment(octCreatePaymentRequest, options = {}) {
        const localVarPath = this.basePath + '/pts/v2/payouts';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        // verify required parameter 'octCreatePaymentRequest' is not null or undefined
        if (octCreatePaymentRequest === null || octCreatePaymentRequest === undefined) {
            throw new Error('Required parameter octCreatePaymentRequest was null or undefined when calling octCreatePayment.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(octCreatePaymentRequest, "OctCreatePaymentRequest")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "PtsV2PayoutsPost201Response");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
}
exports.PayoutsApi = PayoutsApi;
var PlansApiApiKeys;
(function (PlansApiApiKeys) {
})(PlansApiApiKeys = exports.PlansApiApiKeys || (exports.PlansApiApiKeys = {}));
class PlansApi {
    constructor(basePathOrUsername, password, basePath) {
        this._basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new VoidAuth(),
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    set useQuerystring(value) {
        this._useQuerystring = value;
    }
    set basePath(basePath) {
        this._basePath = basePath;
    }
    get basePath() {
        return this._basePath;
    }
    setDefaultAuthentication(auth) {
        this.authentications.default = auth;
    }
    setApiKey(key, value) {
        this.authentications[PlansApiApiKeys[key]].apiKey = value;
    }
    /**
     * Activate a Plan
     * @summary Activate a Plan
     * @param id Plan Id
     * @param {*} [options] Override http request options.
     */
    activatePlan(id, options = {}) {
        const localVarPath = this.basePath + '/rbs/v1/plans/{id}/activate'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling activatePlan.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "ActivateDeactivatePlanResponse");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * The recurring billing service enables you to manage payment plans and subscriptions for recurring payment schedules. It securely stores your customer's payment information and personal data within secure Visa data centers, reducing storage risks and PCI DSS scope through the use of *Token Management* (*TMS*).  The three key elements of *Cybersource* Recurring Billing are:  -  **Token**: stores customer billing, shipping, and payment details.  -  **Plan**: stores the billing schedule.  -  **Subscription**: combines the token and plan, and defines the subscription start date, name, and description.  The APIs in this section demonstrate the management of the Plans and Subscriptions. For Tokens please refer to [Token Management](#token-management) The availability of API features for a merchant can depend on the portfolio configuration and may need to be enabled at the portfolio level before they can be added to merchant accounts.
     * @summary Create a Plan
     * @param createPlanRequest
     * @param {*} [options] Override http request options.
     */
    createPlan(createPlanRequest, options = {}) {
        const localVarPath = this.basePath + '/rbs/v1/plans';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        // verify required parameter 'createPlanRequest' is not null or undefined
        if (createPlanRequest === null || createPlanRequest === undefined) {
            throw new Error('Required parameter createPlanRequest was null or undefined when calling createPlan.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(createPlanRequest, "CreatePlanRequest")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "CreatePlanResponse");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Deactivate a Plan
     * @summary Deactivate a Plan
     * @param id Plan Id
     * @param {*} [options] Override http request options.
     */
    deactivatePlan(id, options = {}) {
        const localVarPath = this.basePath + '/rbs/v1/plans/{id}/deactivate'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling deactivatePlan.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "ActivateDeactivatePlanResponse");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Delete a Plan is only allowed: - plan status is in `DRAFT` - plan status is in `ACTIVE`, and `INACTIVE` only allowed when no subscriptions attached to a plan in the lifetime of a plan
     * @summary Delete a Plan
     * @param id Plan Id
     * @param {*} [options] Override http request options.
     */
    deletePlan(id, options = {}) {
        const localVarPath = this.basePath + '/rbs/v1/plans/{id}'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling deletePlan.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'DELETE',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "DeletePlanResponse");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Retrieve a Plan details by Plan Id.
     * @summary Get a Plan
     * @param id Plan Id
     * @param {*} [options] Override http request options.
     */
    getPlan(id, options = {}) {
        const localVarPath = this.basePath + '/rbs/v1/plans/{id}'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getPlan.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "GetPlanResponse");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Get a Unique Plan Code
     * @summary Get a Plan Code
     * @param {*} [options] Override http request options.
     */
    getPlanCode(options = {}) {
        const localVarPath = this.basePath + '/rbs/v1/plans/code';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        Object.assign(localVarHeaderParams, options.headers);
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "GetPlanCodeResponse");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Retrieve Plans by Plan Code & Plan Status.
     * @summary Get a List of Plans
     * @param offset Page offset number.
     * @param limit Number of items to be returned. Default - &#x60;20&#x60;, Max - &#x60;100&#x60;
     * @param code Filter by Plan Code
     * @param status Filter by Plan Status
     * @param name Filter by Plan Name. (First sub string or full string) **[Not Recommended]**
     * @param {*} [options] Override http request options.
     */
    getPlans(offset, limit, code, status, name, options = {}) {
        const localVarPath = this.basePath + '/rbs/v1/plans';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        if (offset !== undefined) {
            localVarQueryParameters['offset'] = ObjectSerializer.serialize(offset, "number");
        }
        if (limit !== undefined) {
            localVarQueryParameters['limit'] = ObjectSerializer.serialize(limit, "number");
        }
        if (code !== undefined) {
            localVarQueryParameters['code'] = ObjectSerializer.serialize(code, "string");
        }
        if (status !== undefined) {
            localVarQueryParameters['status'] = ObjectSerializer.serialize(status, "string");
        }
        if (name !== undefined) {
            localVarQueryParameters['name'] = ObjectSerializer.serialize(name, "string");
        }
        Object.assign(localVarHeaderParams, options.headers);
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "GetAllPlansResponse");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Update a Plan  Plan in `DRAFT` status - All updates are allowed on Plan with `DRAFT` status  Plan in `ACTIVE` status [Following fields are **Not Updatable**] - `planInformation.billingPeriod` - `planInformation.billingCycles` [Update is only allowed to **increase** billingCycles] - `orderInformation.amountDetails.currency`
     * @summary Update a Plan
     * @param id Plan Id
     * @param updatePlanRequest
     * @param {*} [options] Override http request options.
     */
    updatePlan(id, updatePlanRequest, options = {}) {
        const localVarPath = this.basePath + '/rbs/v1/plans/{id}'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling updatePlan.');
        }
        // verify required parameter 'updatePlanRequest' is not null or undefined
        if (updatePlanRequest === null || updatePlanRequest === undefined) {
            throw new Error('Required parameter updatePlanRequest was null or undefined when calling updatePlan.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'PATCH',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(updatePlanRequest, "UpdatePlanRequest")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "UpdatePlanResponse");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
}
exports.PlansApi = PlansApi;
var PurchaseAndRefundDetailsApiApiKeys;
(function (PurchaseAndRefundDetailsApiApiKeys) {
})(PurchaseAndRefundDetailsApiApiKeys = exports.PurchaseAndRefundDetailsApiApiKeys || (exports.PurchaseAndRefundDetailsApiApiKeys = {}));
class PurchaseAndRefundDetailsApi {
    constructor(basePathOrUsername, password, basePath) {
        this._basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new VoidAuth(),
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    set useQuerystring(value) {
        this._useQuerystring = value;
    }
    set basePath(basePath) {
        this._basePath = basePath;
    }
    get basePath() {
        return this._basePath;
    }
    setDefaultAuthentication(auth) {
        this.authentications.default = auth;
    }
    setApiKey(key, value) {
        this.authentications[PurchaseAndRefundDetailsApiApiKeys[key]].apiKey = value;
    }
    /**
     * Download the Purchase and Refund Details report. This report report includes all purchases and refund transactions, as well as all activities related to transactions resulting in an adjustment to the net proceeds.
     * @summary Get Purchase and Refund Details
     * @param startTime Valid report Start Time in **ISO 8601 format** Please refer the following link to know more about ISO 8601 format.[Rfc Date Format](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#anchor14)  **Example date format:**   - yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ (e.g. 2018-01-01T00:00:00.000Z)
     * @param endTime Valid report End Time in **ISO 8601 format** Please refer the following link to know more about ISO 8601 format.[Rfc Date Format](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#anchor14)  **Example date format:**   - yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ (e.g. 2018-01-01T00:00:00.000Z)
     * @param organizationId Valid Organization Id
     * @param paymentSubtype Payment Subtypes.   - **ALL**:  All Payment Subtypes   - **VI** :  Visa   - **MC** :  Master Card   - **AX** :  American Express   - **DI** :  Discover   - **DP** :  Pinless Debit
     * @param viewBy View results by Request Date or Submission Date.   - **requestDate** : Request Date   - **submissionDate**: Submission Date
     * @param groupName Valid CyberSource Group Name.User can define groups using CBAPI and Group Management Module in EBC2. Groups are collection of organizationIds
     * @param offset Offset of the Purchase and Refund Results.
     * @param limit Results count per page. Range(1-2000)
     * @param {*} [options] Override http request options.
     */
    getPurchaseAndRefundDetails(startTime, endTime, organizationId, paymentSubtype, viewBy, groupName, offset, limit, options = {}) {
        const localVarPath = this.basePath + '/reporting/v3/purchase-refund-details';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        // verify required parameter 'startTime' is not null or undefined
        if (startTime === null || startTime === undefined) {
            throw new Error('Required parameter startTime was null or undefined when calling getPurchaseAndRefundDetails.');
        }
        // verify required parameter 'endTime' is not null or undefined
        if (endTime === null || endTime === undefined) {
            throw new Error('Required parameter endTime was null or undefined when calling getPurchaseAndRefundDetails.');
        }
        if (startTime !== undefined) {
            localVarQueryParameters['startTime'] = ObjectSerializer.serialize(startTime, "Date");
        }
        if (endTime !== undefined) {
            localVarQueryParameters['endTime'] = ObjectSerializer.serialize(endTime, "Date");
        }
        if (organizationId !== undefined) {
            localVarQueryParameters['organizationId'] = ObjectSerializer.serialize(organizationId, "string");
        }
        if (paymentSubtype !== undefined) {
            localVarQueryParameters['paymentSubtype'] = ObjectSerializer.serialize(paymentSubtype, "string");
        }
        if (viewBy !== undefined) {
            localVarQueryParameters['viewBy'] = ObjectSerializer.serialize(viewBy, "string");
        }
        if (groupName !== undefined) {
            localVarQueryParameters['groupName'] = ObjectSerializer.serialize(groupName, "string");
        }
        if (offset !== undefined) {
            localVarQueryParameters['offset'] = ObjectSerializer.serialize(offset, "number");
        }
        if (limit !== undefined) {
            localVarQueryParameters['limit'] = ObjectSerializer.serialize(limit, "number");
        }
        Object.assign(localVarHeaderParams, options.headers);
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "ReportingV3PurchaseRefundDetailsGet200Response");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
}
exports.PurchaseAndRefundDetailsApi = PurchaseAndRefundDetailsApi;
var RefundApiApiKeys;
(function (RefundApiApiKeys) {
})(RefundApiApiKeys = exports.RefundApiApiKeys || (exports.RefundApiApiKeys = {}));
class RefundApi {
    constructor(basePathOrUsername, password, basePath) {
        this._basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new VoidAuth(),
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    set useQuerystring(value) {
        this._useQuerystring = value;
    }
    set basePath(basePath) {
        this._basePath = basePath;
    }
    get basePath() {
        return this._basePath;
    }
    setDefaultAuthentication(auth) {
        this.authentications.default = auth;
    }
    setApiKey(key, value) {
        this.authentications[RefundApiApiKeys[key]].apiKey = value;
    }
    /**
     * Refund a capture API is only used, if you have requested Capture independenlty using [/pts/v2/payments/{id}/captures](https://developer.cybersource.com/api-reference-assets/index.html#payments_capture) API call. Include the capture ID in the POST request to refund the captured amount.
     * @summary Refund a Capture
     * @param refundCaptureRequest
     * @param id The capture ID. This ID is returned from a previous capture request.
     * @param {*} [options] Override http request options.
     */
    refundCapture(refundCaptureRequest, id, options = {}) {
        const localVarPath = this.basePath + '/pts/v2/captures/{id}/refunds'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        // verify required parameter 'refundCaptureRequest' is not null or undefined
        if (refundCaptureRequest === null || refundCaptureRequest === undefined) {
            throw new Error('Required parameter refundCaptureRequest was null or undefined when calling refundCapture.');
        }
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling refundCapture.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(refundCaptureRequest, "RefundCaptureRequest")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "PtsV2PaymentsRefundPost201Response");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Refund a Payment API is only used, if you have requested Authorization and Capture together in [/pts/v2/payments](https://developer.cybersource.com/api-reference-assets/index.html#payments_payments) API call. Include the payment ID in the POST request to refund the payment amount.
     * @summary Refund a Payment
     * @param refundPaymentRequest
     * @param id The payment ID. This ID is returned from a previous payment request.
     * @param {*} [options] Override http request options.
     */
    refundPayment(refundPaymentRequest, id, options = {}) {
        const localVarPath = this.basePath + '/pts/v2/payments/{id}/refunds'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        // verify required parameter 'refundPaymentRequest' is not null or undefined
        if (refundPaymentRequest === null || refundPaymentRequest === undefined) {
            throw new Error('Required parameter refundPaymentRequest was null or undefined when calling refundPayment.');
        }
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling refundPayment.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(refundPaymentRequest, "RefundPaymentRequest")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "PtsV2PaymentsRefundPost201Response");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
}
exports.RefundApi = RefundApi;
var ReportDefinitionsApiApiKeys;
(function (ReportDefinitionsApiApiKeys) {
})(ReportDefinitionsApiApiKeys = exports.ReportDefinitionsApiApiKeys || (exports.ReportDefinitionsApiApiKeys = {}));
class ReportDefinitionsApi {
    constructor(basePathOrUsername, password, basePath) {
        this._basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new VoidAuth(),
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    set useQuerystring(value) {
        this._useQuerystring = value;
    }
    set basePath(basePath) {
        this._basePath = basePath;
    }
    get basePath() {
        return this._basePath;
    }
    setDefaultAuthentication(auth) {
        this.authentications.default = auth;
    }
    setApiKey(key, value) {
        this.authentications[ReportDefinitionsApiApiKeys[key]].apiKey = value;
    }
    /**
     * View the attributes of an individual report type. For a list of values for reportDefinitionName, see the [Reporting Developer Guide](https://www.cybersource.com/developers/documentation/reporting_and_reconciliation/)
     * @summary Get Report Definition
     * @param reportDefinitionName Name of the Report definition to retrieve
     * @param subscriptionType The subscription type for which report definition is required. By default the type will be CUSTOM. Valid Values: - CLASSIC - CUSTOM - STANDARD
     * @param reportMimeType The format for which the report definition is required. By default the value will be CSV. Valid Values: - application/xml - text/csv
     * @param organizationId Valid Organization Id
     * @param {*} [options] Override http request options.
     */
    getResourceInfoByReportDefinition(reportDefinitionName, subscriptionType, reportMimeType, organizationId, options = {}) {
        const localVarPath = this.basePath + '/reporting/v3/report-definitions/{reportDefinitionName}'
            .replace('{' + 'reportDefinitionName' + '}', encodeURIComponent(String(reportDefinitionName)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        // verify required parameter 'reportDefinitionName' is not null or undefined
        if (reportDefinitionName === null || reportDefinitionName === undefined) {
            throw new Error('Required parameter reportDefinitionName was null or undefined when calling getResourceInfoByReportDefinition.');
        }
        if (subscriptionType !== undefined) {
            localVarQueryParameters['subscriptionType'] = ObjectSerializer.serialize(subscriptionType, "string");
        }
        if (reportMimeType !== undefined) {
            localVarQueryParameters['reportMimeType'] = ObjectSerializer.serialize(reportMimeType, "string");
        }
        if (organizationId !== undefined) {
            localVarQueryParameters['organizationId'] = ObjectSerializer.serialize(organizationId, "string");
        }
        Object.assign(localVarHeaderParams, options.headers);
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "ReportingV3ReportDefinitionsNameGet200Response");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * View a list of supported reports and their attributes before subscribing to them.
     * @summary Get Reporting Resource Information
     * @param subscriptionType Valid Values: - CLASSIC - CUSTOM - STANDARD
     * @param organizationId Valid Organization Id
     * @param {*} [options] Override http request options.
     */
    getResourceV2Info(subscriptionType, organizationId, options = {}) {
        const localVarPath = this.basePath + '/reporting/v3/report-definitions';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        if (subscriptionType !== undefined) {
            localVarQueryParameters['subscriptionType'] = ObjectSerializer.serialize(subscriptionType, "string");
        }
        if (organizationId !== undefined) {
            localVarQueryParameters['organizationId'] = ObjectSerializer.serialize(organizationId, "string");
        }
        Object.assign(localVarHeaderParams, options.headers);
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "ReportingV3ReportDefinitionsGet200Response");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
}
exports.ReportDefinitionsApi = ReportDefinitionsApi;
var ReportDownloadsApiApiKeys;
(function (ReportDownloadsApiApiKeys) {
})(ReportDownloadsApiApiKeys = exports.ReportDownloadsApiApiKeys || (exports.ReportDownloadsApiApiKeys = {}));
class ReportDownloadsApi {
    constructor(basePathOrUsername, password, basePath) {
        this._basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new VoidAuth(),
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    set useQuerystring(value) {
        this._useQuerystring = value;
    }
    set basePath(basePath) {
        this._basePath = basePath;
    }
    get basePath() {
        return this._basePath;
    }
    setDefaultAuthentication(auth) {
        this.authentications.default = auth;
    }
    setApiKey(key, value) {
        this.authentications[ReportDownloadsApiApiKeys[key]].apiKey = value;
    }
    /**
     * Download a report using the unique report name and date.
     * @summary Download a Report
     * @param reportDate Valid date on which to download the report in **ISO 8601 format** Please refer the following link to know more about ISO 8601 format.[Rfc Date Format](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#anchor14)  **Example date format:**  yyyy-mm-dd For reports that span multiple days, this value would be the end date of the report in the time zone of the report subscription. Example 1: If your report start date is 2020-03-06 and the end date is 2020-03-09, the reportDate passed in the query is 2020-03-09. Example 2: If your report runs from midnight to midnight on 2020-03-09, the reportDate passed in the query is 2020-03-10
     * @param reportName Name of the report to download
     * @param organizationId Valid Organization Id
     * @param {*} [options] Override http request options.
     */
    downloadReport(reportDate, reportName, organizationId, options = {}) {
        const localVarPath = this.basePath + '/reporting/v3/report-downloads';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        // verify required parameter 'reportDate' is not null or undefined
        if (reportDate === null || reportDate === undefined) {
            throw new Error('Required parameter reportDate was null or undefined when calling downloadReport.');
        }
        // verify required parameter 'reportName' is not null or undefined
        if (reportName === null || reportName === undefined) {
            throw new Error('Required parameter reportName was null or undefined when calling downloadReport.');
        }
        if (organizationId !== undefined) {
            localVarQueryParameters['organizationId'] = ObjectSerializer.serialize(organizationId, "string");
        }
        if (reportDate !== undefined) {
            localVarQueryParameters['reportDate'] = ObjectSerializer.serialize(reportDate, "string");
        }
        if (reportName !== undefined) {
            localVarQueryParameters['reportName'] = ObjectSerializer.serialize(reportName, "string");
        }
        Object.assign(localVarHeaderParams, options.headers);
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
}
exports.ReportDownloadsApi = ReportDownloadsApi;
var ReportSubscriptionsApiApiKeys;
(function (ReportSubscriptionsApiApiKeys) {
})(ReportSubscriptionsApiApiKeys = exports.ReportSubscriptionsApiApiKeys || (exports.ReportSubscriptionsApiApiKeys = {}));
class ReportSubscriptionsApi {
    constructor(basePathOrUsername, password, basePath) {
        this._basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new VoidAuth(),
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    set useQuerystring(value) {
        this._useQuerystring = value;
    }
    set basePath(basePath) {
        this._basePath = basePath;
    }
    get basePath() {
        return this._basePath;
    }
    setDefaultAuthentication(auth) {
        this.authentications.default = auth;
    }
    setApiKey(key, value) {
        this.authentications[ReportSubscriptionsApiApiKeys[key]].apiKey = value;
    }
    /**
     * Create or update an already existing classic or standard subscription.
     * @summary Create a Standard or Classic Subscription
     * @param predefinedSubscriptionRequestBean Report subscription request payload
     * @param organizationId Valid Organization Id
     * @param {*} [options] Override http request options.
     */
    createStandardOrClassicSubscription(predefinedSubscriptionRequestBean, organizationId, options = {}) {
        const localVarPath = this.basePath + '/reporting/v3/predefined-report-subscriptions';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        // verify required parameter 'predefinedSubscriptionRequestBean' is not null or undefined
        if (predefinedSubscriptionRequestBean === null || predefinedSubscriptionRequestBean === undefined) {
            throw new Error('Required parameter predefinedSubscriptionRequestBean was null or undefined when calling createStandardOrClassicSubscription.');
        }
        if (organizationId !== undefined) {
            localVarQueryParameters['organizationId'] = ObjectSerializer.serialize(organizationId, "string");
        }
        Object.assign(localVarHeaderParams, options.headers);
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'PUT',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(predefinedSubscriptionRequestBean, "PredefinedSubscriptionRequestBean")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Create a report subscription for your organization. The report name must be unique.
     * @summary Create Report Subscription for a Report Name by Organization
     * @param createReportSubscriptionRequest Report subscription request payload
     * @param organizationId Valid Organization Id
     * @param {*} [options] Override http request options.
     */
    createSubscription(createReportSubscriptionRequest, organizationId, options = {}) {
        const localVarPath = this.basePath + '/reporting/v3/report-subscriptions';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        // verify required parameter 'createReportSubscriptionRequest' is not null or undefined
        if (createReportSubscriptionRequest === null || createReportSubscriptionRequest === undefined) {
            throw new Error('Required parameter createReportSubscriptionRequest was null or undefined when calling createSubscription.');
        }
        if (organizationId !== undefined) {
            localVarQueryParameters['organizationId'] = ObjectSerializer.serialize(organizationId, "string");
        }
        Object.assign(localVarHeaderParams, options.headers);
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'PUT',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(createReportSubscriptionRequest, "CreateReportSubscriptionRequest")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Delete a report subscription for your organization. You must know the unique name of the report you want to delete.
     * @summary Delete Subscription of a Report Name by Organization
     * @param reportName Name of the Report to Delete
     * @param organizationId Valid Organization Id
     * @param {*} [options] Override http request options.
     */
    deleteSubscription(reportName, organizationId, options = {}) {
        const localVarPath = this.basePath + '/reporting/v3/report-subscriptions/{reportName}'
            .replace('{' + 'reportName' + '}', encodeURIComponent(String(reportName)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        // verify required parameter 'reportName' is not null or undefined
        if (reportName === null || reportName === undefined) {
            throw new Error('Required parameter reportName was null or undefined when calling deleteSubscription.');
        }
        if (organizationId !== undefined) {
            localVarQueryParameters['organizationId'] = ObjectSerializer.serialize(organizationId, "string");
        }
        Object.assign(localVarHeaderParams, options.headers);
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'DELETE',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * View a summary of all report subscriptions.
     * @summary Get All Subscriptions
     * @param organizationId Valid Organization Id
     * @param {*} [options] Override http request options.
     */
    getAllSubscriptions(organizationId, options = {}) {
        const localVarPath = this.basePath + '/reporting/v3/report-subscriptions';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        if (organizationId !== undefined) {
            localVarQueryParameters['organizationId'] = ObjectSerializer.serialize(organizationId, "string");
        }
        Object.assign(localVarHeaderParams, options.headers);
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "ReportingV3ReportSubscriptionsGet200Response");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * View the details of a report subscription, such as the report format or report frequency, using the report’s unique name.
     * @summary Get Subscription for Report Name
     * @param reportName Name of the Report to Retrieve
     * @param organizationId Valid Organization Id
     * @param {*} [options] Override http request options.
     */
    getSubscription(reportName, organizationId, options = {}) {
        const localVarPath = this.basePath + '/reporting/v3/report-subscriptions/{reportName}'
            .replace('{' + 'reportName' + '}', encodeURIComponent(String(reportName)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        // verify required parameter 'reportName' is not null or undefined
        if (reportName === null || reportName === undefined) {
            throw new Error('Required parameter reportName was null or undefined when calling getSubscription.');
        }
        if (organizationId !== undefined) {
            localVarQueryParameters['organizationId'] = ObjectSerializer.serialize(organizationId, "string");
        }
        Object.assign(localVarHeaderParams, options.headers);
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "ReportingV3ReportSubscriptionsGet200ResponseSubscriptions");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
}
exports.ReportSubscriptionsApi = ReportSubscriptionsApi;
var ReportsApiApiKeys;
(function (ReportsApiApiKeys) {
})(ReportsApiApiKeys = exports.ReportsApiApiKeys || (exports.ReportsApiApiKeys = {}));
class ReportsApi {
    constructor(basePathOrUsername, password, basePath) {
        this._basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new VoidAuth(),
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    set useQuerystring(value) {
        this._useQuerystring = value;
    }
    set basePath(basePath) {
        this._basePath = basePath;
    }
    get basePath() {
        return this._basePath;
    }
    setDefaultAuthentication(auth) {
        this.authentications.default = auth;
    }
    setApiKey(key, value) {
        this.authentications[ReportsApiApiKeys[key]].apiKey = value;
    }
    /**
     * Create a one-time report. You must specify the type of report in reportDefinitionName. For a list of values for reportDefinitionName, see the [Reporting Developer Guide](https://www.cybersource.com/developers/documentation/reporting_and_reconciliation)
     * @summary Create Adhoc Report
     * @param createAdhocReportRequest Report subscription request payload
     * @param organizationId Valid Organization Id
     * @param {*} [options] Override http request options.
     */
    createReport(createAdhocReportRequest, organizationId, options = {}) {
        const localVarPath = this.basePath + '/reporting/v3/reports';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        // verify required parameter 'createAdhocReportRequest' is not null or undefined
        if (createAdhocReportRequest === null || createAdhocReportRequest === undefined) {
            throw new Error('Required parameter createAdhocReportRequest was null or undefined when calling createReport.');
        }
        if (organizationId !== undefined) {
            localVarQueryParameters['organizationId'] = ObjectSerializer.serialize(organizationId, "string");
        }
        Object.assign(localVarHeaderParams, options.headers);
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(createAdhocReportRequest, "CreateAdhocReportRequest")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Download a report using the reportId value. If you don’t already know this value, you can obtain it using the Retrieve available reports call.
     * @summary Get Report Based on Report Id
     * @param reportId Valid Report Id
     * @param organizationId Valid Organization Id
     * @param {*} [options] Override http request options.
     */
    getReportByReportId(reportId, organizationId, options = {}) {
        const localVarPath = this.basePath + '/reporting/v3/reports/{reportId}'
            .replace('{' + 'reportId' + '}', encodeURIComponent(String(reportId)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        // verify required parameter 'reportId' is not null or undefined
        if (reportId === null || reportId === undefined) {
            throw new Error('Required parameter reportId was null or undefined when calling getReportByReportId.');
        }
        if (organizationId !== undefined) {
            localVarQueryParameters['organizationId'] = ObjectSerializer.serialize(organizationId, "string");
        }
        Object.assign(localVarHeaderParams, options.headers);
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "ReportingV3ReportsIdGet200Response");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Retrieve a list of the available reports to which you are subscribed. This will also give you the reportId value, which you can also use to download a report.
     * @summary Retrieve Available Reports
     * @param startTime Valid report Start Time in **ISO 8601 format** Please refer the following link to know more about ISO 8601 format.[Rfc Date Format](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#anchor14)  **Example date format:**   - yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ (e.g. 2018-01-01T00:00:00.000Z)
     * @param endTime Valid report End Time in **ISO 8601 format** Please refer the following link to know more about ISO 8601 format.[Rfc Date Format](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#anchor14)  **Example date format:**   - yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ (e.g. 2018-01-01T00:00:00.000Z)
     * @param timeQueryType Specify time you would like to search  Valid values: - reportTimeFrame - executedTime
     * @param organizationId Valid Organization Id
     * @param reportMimeType Valid Report Format  Valid values: - application/xml - text/csv
     * @param reportFrequency Valid Report Frequency  Valid values: - DAILY - WEEKLY - MONTHLY - USER_DEFINED - ADHOC
     * @param reportName Valid Report Name
     * @param reportDefinitionId Valid Report Definition Id
     * @param reportStatus Valid Report Status  Valid values: - COMPLETED - PENDING - QUEUED - RUNNING - ERROR - NO_DATA
     * @param {*} [options] Override http request options.
     */
    searchReports(startTime, endTime, timeQueryType, organizationId, reportMimeType, reportFrequency, reportName, reportDefinitionId, reportStatus, options = {}) {
        const localVarPath = this.basePath + '/reporting/v3/reports';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        // verify required parameter 'startTime' is not null or undefined
        if (startTime === null || startTime === undefined) {
            throw new Error('Required parameter startTime was null or undefined when calling searchReports.');
        }
        // verify required parameter 'endTime' is not null or undefined
        if (endTime === null || endTime === undefined) {
            throw new Error('Required parameter endTime was null or undefined when calling searchReports.');
        }
        // verify required parameter 'timeQueryType' is not null or undefined
        if (timeQueryType === null || timeQueryType === undefined) {
            throw new Error('Required parameter timeQueryType was null or undefined when calling searchReports.');
        }
        if (organizationId !== undefined) {
            localVarQueryParameters['organizationId'] = ObjectSerializer.serialize(organizationId, "string");
        }
        if (startTime !== undefined) {
            localVarQueryParameters['startTime'] = ObjectSerializer.serialize(startTime, "Date");
        }
        if (endTime !== undefined) {
            localVarQueryParameters['endTime'] = ObjectSerializer.serialize(endTime, "Date");
        }
        if (timeQueryType !== undefined) {
            localVarQueryParameters['timeQueryType'] = ObjectSerializer.serialize(timeQueryType, "string");
        }
        if (reportMimeType !== undefined) {
            localVarQueryParameters['reportMimeType'] = ObjectSerializer.serialize(reportMimeType, "string");
        }
        if (reportFrequency !== undefined) {
            localVarQueryParameters['reportFrequency'] = ObjectSerializer.serialize(reportFrequency, "string");
        }
        if (reportName !== undefined) {
            localVarQueryParameters['reportName'] = ObjectSerializer.serialize(reportName, "string");
        }
        if (reportDefinitionId !== undefined) {
            localVarQueryParameters['reportDefinitionId'] = ObjectSerializer.serialize(reportDefinitionId, "number");
        }
        if (reportStatus !== undefined) {
            localVarQueryParameters['reportStatus'] = ObjectSerializer.serialize(reportStatus, "string");
        }
        Object.assign(localVarHeaderParams, options.headers);
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "ReportingV3ReportsGet200Response");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
}
exports.ReportsApi = ReportsApi;
var RetrievalDetailsApiApiKeys;
(function (RetrievalDetailsApiApiKeys) {
})(RetrievalDetailsApiApiKeys = exports.RetrievalDetailsApiApiKeys || (exports.RetrievalDetailsApiApiKeys = {}));
class RetrievalDetailsApi {
    constructor(basePathOrUsername, password, basePath) {
        this._basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new VoidAuth(),
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    set useQuerystring(value) {
        this._useQuerystring = value;
    }
    set basePath(basePath) {
        this._basePath = basePath;
    }
    get basePath() {
        return this._basePath;
    }
    setDefaultAuthentication(auth) {
        this.authentications.default = auth;
    }
    setApiKey(key, value) {
        this.authentications[RetrievalDetailsApiApiKeys[key]].apiKey = value;
    }
    /**
     * Retrieval Detail Report Description
     * @summary Get Retrieval Details
     * @param startTime Valid report Start Time in **ISO 8601 format** Please refer the following link to know more about ISO 8601 format.[Rfc Date Format](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#anchor14)  **Example date format:**   - yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ (e.g. 2018-01-01T00:00:00.000Z)
     * @param endTime Valid report End Time in **ISO 8601 format** Please refer the following link to know more about ISO 8601 format.[Rfc Date Format](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#anchor14)  **Example date format:**   - yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ (e.g. 2018-01-01T00:00:00.000Z)
     * @param organizationId Valid Organization Id
     * @param {*} [options] Override http request options.
     */
    getRetrievalDetails(startTime, endTime, organizationId, options = {}) {
        const localVarPath = this.basePath + '/reporting/v3/retrieval-details';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        // verify required parameter 'startTime' is not null or undefined
        if (startTime === null || startTime === undefined) {
            throw new Error('Required parameter startTime was null or undefined when calling getRetrievalDetails.');
        }
        // verify required parameter 'endTime' is not null or undefined
        if (endTime === null || endTime === undefined) {
            throw new Error('Required parameter endTime was null or undefined when calling getRetrievalDetails.');
        }
        if (startTime !== undefined) {
            localVarQueryParameters['startTime'] = ObjectSerializer.serialize(startTime, "Date");
        }
        if (endTime !== undefined) {
            localVarQueryParameters['endTime'] = ObjectSerializer.serialize(endTime, "Date");
        }
        if (organizationId !== undefined) {
            localVarQueryParameters['organizationId'] = ObjectSerializer.serialize(organizationId, "string");
        }
        Object.assign(localVarHeaderParams, options.headers);
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "ReportingV3RetrievalDetailsGet200Response");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
}
exports.RetrievalDetailsApi = RetrievalDetailsApi;
var RetrievalSummariesApiApiKeys;
(function (RetrievalSummariesApiApiKeys) {
})(RetrievalSummariesApiApiKeys = exports.RetrievalSummariesApiApiKeys || (exports.RetrievalSummariesApiApiKeys = {}));
class RetrievalSummariesApi {
    constructor(basePathOrUsername, password, basePath) {
        this._basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new VoidAuth(),
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    set useQuerystring(value) {
        this._useQuerystring = value;
    }
    set basePath(basePath) {
        this._basePath = basePath;
    }
    get basePath() {
        return this._basePath;
    }
    setDefaultAuthentication(auth) {
        this.authentications.default = auth;
    }
    setApiKey(key, value) {
        this.authentications[RetrievalSummariesApiApiKeys[key]].apiKey = value;
    }
    /**
     * Retrieval Summary Report Description
     * @summary Get Retrieval Summaries
     * @param startTime Valid report Start Time in **ISO 8601 format** Please refer the following link to know more about ISO 8601 format.[Rfc Date Format](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#anchor14)  **Example date format:**   - yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ (e.g. 2018-01-01T00:00:00.000Z)
     * @param endTime Valid report End Time in **ISO 8601 format** Please refer the following link to know more about ISO 8601 format.[Rfc Date Format](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#anchor14)  **Example date format:**   - yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ (e.g. 2018-01-01T00:00:00.000Z)
     * @param organizationId Valid Organization Id
     * @param {*} [options] Override http request options.
     */
    getRetrievalSummary(startTime, endTime, organizationId, options = {}) {
        const localVarPath = this.basePath + '/reporting/v3/retrieval-summaries';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        // verify required parameter 'startTime' is not null or undefined
        if (startTime === null || startTime === undefined) {
            throw new Error('Required parameter startTime was null or undefined when calling getRetrievalSummary.');
        }
        // verify required parameter 'endTime' is not null or undefined
        if (endTime === null || endTime === undefined) {
            throw new Error('Required parameter endTime was null or undefined when calling getRetrievalSummary.');
        }
        if (startTime !== undefined) {
            localVarQueryParameters['startTime'] = ObjectSerializer.serialize(startTime, "Date");
        }
        if (endTime !== undefined) {
            localVarQueryParameters['endTime'] = ObjectSerializer.serialize(endTime, "Date");
        }
        if (organizationId !== undefined) {
            localVarQueryParameters['organizationId'] = ObjectSerializer.serialize(organizationId, "string");
        }
        Object.assign(localVarHeaderParams, options.headers);
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "ReportingV3RetrievalSummariesGet200Response");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
}
exports.RetrievalSummariesApi = RetrievalSummariesApi;
var ReversalApiApiKeys;
(function (ReversalApiApiKeys) {
})(ReversalApiApiKeys = exports.ReversalApiApiKeys || (exports.ReversalApiApiKeys = {}));
class ReversalApi {
    constructor(basePathOrUsername, password, basePath) {
        this._basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new VoidAuth(),
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    set useQuerystring(value) {
        this._useQuerystring = value;
    }
    set basePath(basePath) {
        this._basePath = basePath;
    }
    get basePath() {
        return this._basePath;
    }
    setDefaultAuthentication(auth) {
        this.authentications.default = auth;
    }
    setApiKey(key, value) {
        this.authentications[ReversalApiApiKeys[key]].apiKey = value;
    }
    /**
     * Include the payment ID in the POST request to reverse the payment amount.
     * @summary Process an Authorization Reversal
     * @param id The payment ID returned from a previous payment request.
     * @param authReversalRequest
     * @param {*} [options] Override http request options.
     */
    authReversal(id, authReversalRequest, options = {}) {
        const localVarPath = this.basePath + '/pts/v2/payments/{id}/reversals'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling authReversal.');
        }
        // verify required parameter 'authReversalRequest' is not null or undefined
        if (authReversalRequest === null || authReversalRequest === undefined) {
            throw new Error('Required parameter authReversalRequest was null or undefined when calling authReversal.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(authReversalRequest, "AuthReversalRequest")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "PtsV2PaymentsReversalsPost201Response");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * This is to reverse a previous payment that merchant does not receive a reply(Mostly due to Timeout). To use this feature/API, make sure to pass unique value to field - clientReferenceInformation -> transactionId in [/pts/v2/payments](https://developer.cybersource.com/api-reference-assets/index.html#payments_payments) API call and use same transactionId in this API request payload to reverse the payment.
     * @summary Timeout Reversal
     * @param mitReversalRequest
     * @param {*} [options] Override http request options.
     */
    mitReversal(mitReversalRequest, options = {}) {
        const localVarPath = this.basePath + '/pts/v2/reversals';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        // verify required parameter 'mitReversalRequest' is not null or undefined
        if (mitReversalRequest === null || mitReversalRequest === undefined) {
            throw new Error('Required parameter mitReversalRequest was null or undefined when calling mitReversal.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(mitReversalRequest, "MitReversalRequest")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "PtsV2PaymentsReversalsPost201Response");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
}
exports.ReversalApi = ReversalApi;
var SearchTransactionsApiApiKeys;
(function (SearchTransactionsApiApiKeys) {
})(SearchTransactionsApiApiKeys = exports.SearchTransactionsApiApiKeys || (exports.SearchTransactionsApiApiKeys = {}));
class SearchTransactionsApi {
    constructor(basePathOrUsername, password, basePath) {
        this._basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new VoidAuth(),
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    set useQuerystring(value) {
        this._useQuerystring = value;
    }
    set basePath(basePath) {
        this._basePath = basePath;
    }
    get basePath() {
        return this._basePath;
    }
    setDefaultAuthentication(auth) {
        this.authentications.default = auth;
    }
    setApiKey(key, value) {
        this.authentications[SearchTransactionsApiApiKeys[key]].apiKey = value;
    }
    /**
     * Create a search request.
     * @summary Create a Search Request
     * @param createSearchRequest
     * @param {*} [options] Override http request options.
     */
    createSearch(createSearchRequest, options = {}) {
        const localVarPath = this.basePath + '/tss/v2/searches';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        // verify required parameter 'createSearchRequest' is not null or undefined
        if (createSearchRequest === null || createSearchRequest === undefined) {
            throw new Error('Required parameter createSearchRequest was null or undefined when calling createSearch.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(createSearchRequest, "CreateSearchRequest")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "TssV2TransactionsPost201Response");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Include the Search ID in the GET request to retrieve the search results.
     * @summary Get Search Results
     * @param searchId Search ID.
     * @param {*} [options] Override http request options.
     */
    getSearch(searchId, options = {}) {
        const localVarPath = this.basePath + '/tss/v2/searches/{searchId}'
            .replace('{' + 'searchId' + '}', encodeURIComponent(String(searchId)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        // verify required parameter 'searchId' is not null or undefined
        if (searchId === null || searchId === undefined) {
            throw new Error('Required parameter searchId was null or undefined when calling getSearch.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "TssV2TransactionsPost201Response");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
}
exports.SearchTransactionsApi = SearchTransactionsApi;
var SecureFileShareApiApiKeys;
(function (SecureFileShareApiApiKeys) {
})(SecureFileShareApiApiKeys = exports.SecureFileShareApiApiKeys || (exports.SecureFileShareApiApiKeys = {}));
class SecureFileShareApi {
    constructor(basePathOrUsername, password, basePath) {
        this._basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new VoidAuth(),
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    set useQuerystring(value) {
        this._useQuerystring = value;
    }
    set basePath(basePath) {
        this._basePath = basePath;
    }
    get basePath() {
        return this._basePath;
    }
    setDefaultAuthentication(auth) {
        this.authentications.default = auth;
    }
    setApiKey(key, value) {
        this.authentications[SecureFileShareApiApiKeys[key]].apiKey = value;
    }
    /**
     * Download a file for the given file identifier
     * @summary Download a File with File Identifier
     * @param fileId Unique identifier for each file
     * @param organizationId Valid Cybersource Organization Id
     * @param {*} [options] Override http request options.
     */
    getFile(fileId, organizationId, options = {}) {
        const localVarPath = this.basePath + '/sfs/v1/files/{fileId}'
            .replace('{' + 'fileId' + '}', encodeURIComponent(String(fileId)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        // verify required parameter 'fileId' is not null or undefined
        if (fileId === null || fileId === undefined) {
            throw new Error('Required parameter fileId was null or undefined when calling getFile.');
        }
        if (organizationId !== undefined) {
            localVarQueryParameters['organizationId'] = ObjectSerializer.serialize(organizationId, "string");
        }
        Object.assign(localVarHeaderParams, options.headers);
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Get list of files and it's information of them available inside the report directory
     * @summary Get List of Files
     * @param startDate Valid start date in **ISO 8601 format** Please refer the following link to know more about ISO 8601 format.[Rfc Date Format](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#anchor14)   **Example date format:**   - yyyy-MM-dd
     * @param endDate Valid end date in **ISO 8601 format** Please refer the following link to know more about ISO 8601 format.[Rfc Date Format](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#anchor14)   **Example date format:**   - yyyy-MM-dd
     * @param organizationId Valid Cybersource Organization Id
     * @param name **Tailored to searches for specific files with in given Date range** example : MyTransactionDetailreport.xml
     * @param {*} [options] Override http request options.
     */
    getFileDetail(startDate, endDate, organizationId, name, options = {}) {
        const localVarPath = this.basePath + '/sfs/v1/file-details';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        // verify required parameter 'startDate' is not null or undefined
        if (startDate === null || startDate === undefined) {
            throw new Error('Required parameter startDate was null or undefined when calling getFileDetail.');
        }
        // verify required parameter 'endDate' is not null or undefined
        if (endDate === null || endDate === undefined) {
            throw new Error('Required parameter endDate was null or undefined when calling getFileDetail.');
        }
        if (startDate !== undefined) {
            localVarQueryParameters['startDate'] = ObjectSerializer.serialize(startDate, "string");
        }
        if (endDate !== undefined) {
            localVarQueryParameters['endDate'] = ObjectSerializer.serialize(endDate, "string");
        }
        if (organizationId !== undefined) {
            localVarQueryParameters['organizationId'] = ObjectSerializer.serialize(organizationId, "string");
        }
        if (name !== undefined) {
            localVarQueryParameters['name'] = ObjectSerializer.serialize(name, "string");
        }
        Object.assign(localVarHeaderParams, options.headers);
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "V1FileDetailsGet200Response");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
}
exports.SecureFileShareApi = SecureFileShareApi;
var SubscriptionsApiApiKeys;
(function (SubscriptionsApiApiKeys) {
})(SubscriptionsApiApiKeys = exports.SubscriptionsApiApiKeys || (exports.SubscriptionsApiApiKeys = {}));
class SubscriptionsApi {
    constructor(basePathOrUsername, password, basePath) {
        this._basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new VoidAuth(),
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    set useQuerystring(value) {
        this._useQuerystring = value;
    }
    set basePath(basePath) {
        this._basePath = basePath;
    }
    get basePath() {
        return this._basePath;
    }
    setDefaultAuthentication(auth) {
        this.authentications.default = auth;
    }
    setApiKey(key, value) {
        this.authentications[SubscriptionsApiApiKeys[key]].apiKey = value;
    }
    /**
     * Activate a `SUSPENDED` Subscription
     * @summary Activate a Subscription
     * @param id Subscription Id
     * @param processSkippedPayments Indicates if skipped payments should be processed from the period when the subscription was suspended. By default, this is set to true.
     * @param {*} [options] Override http request options.
     */
    activateSubscription(id, processSkippedPayments, options = {}) {
        const localVarPath = this.basePath + '/rbs/v1/subscriptions/{id}/activate'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling activateSubscription.');
        }
        if (processSkippedPayments !== undefined) {
            localVarQueryParameters['processSkippedPayments'] = ObjectSerializer.serialize(processSkippedPayments, "boolean");
        }
        Object.assign(localVarHeaderParams, options.headers);
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "ActivateSubscriptionResponse");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Cancel a Subscription
     * @summary Cancel a Subscription
     * @param id Subscription Id
     * @param {*} [options] Override http request options.
     */
    cancelSubscription(id, options = {}) {
        const localVarPath = this.basePath + '/rbs/v1/subscriptions/{id}/cancel'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling cancelSubscription.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "CancelSubscriptionResponse");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Create a Recurring Billing Subscription
     * @summary Create a Subscription
     * @param createSubscriptionRequest
     * @param {*} [options] Override http request options.
     */
    createSubscription(createSubscriptionRequest, options = {}) {
        const localVarPath = this.basePath + '/rbs/v1/subscriptions';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        // verify required parameter 'createSubscriptionRequest' is not null or undefined
        if (createSubscriptionRequest === null || createSubscriptionRequest === undefined) {
            throw new Error('Required parameter createSubscriptionRequest was null or undefined when calling createSubscription.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(createSubscriptionRequest, "CreateSubscriptionRequest")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "CreateSubscriptionResponse");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Retrieve Subscriptions by Subscription Code & Subscription Status.
     * @summary Get a List of Subscriptions
     * @param offset Page offset number.
     * @param limit Number of items to be returned. Default - &#x60;20&#x60;, Max - &#x60;100&#x60;
     * @param code Filter by Subscription Code
     * @param status Filter by Subscription Status
     * @param {*} [options] Override http request options.
     */
    getAllSubscriptions(offset, limit, code, status, options = {}) {
        const localVarPath = this.basePath + '/rbs/v1/subscriptions';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        if (offset !== undefined) {
            localVarQueryParameters['offset'] = ObjectSerializer.serialize(offset, "number");
        }
        if (limit !== undefined) {
            localVarQueryParameters['limit'] = ObjectSerializer.serialize(limit, "number");
        }
        if (code !== undefined) {
            localVarQueryParameters['code'] = ObjectSerializer.serialize(code, "string");
        }
        if (status !== undefined) {
            localVarQueryParameters['status'] = ObjectSerializer.serialize(status, "string");
        }
        Object.assign(localVarHeaderParams, options.headers);
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "GetAllSubscriptionsResponse");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Get a Subscription by Subscription Id
     * @summary Get a Subscription
     * @param id Subscription Id
     * @param {*} [options] Override http request options.
     */
    getSubscription(id, options = {}) {
        const localVarPath = this.basePath + '/rbs/v1/subscriptions/{id}'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getSubscription.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "GetSubscriptionResponse");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Get a Unique Subscription Code
     * @summary Get a Subscription Code
     * @param {*} [options] Override http request options.
     */
    getSubscriptionCode(options = {}) {
        const localVarPath = this.basePath + '/rbs/v1/subscriptions/code';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        Object.assign(localVarHeaderParams, options.headers);
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "GetSubscriptionCodeResponse");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Suspend a Subscription
     * @summary Suspend a Subscription
     * @param id Subscription Id
     * @param {*} [options] Override http request options.
     */
    suspendSubscription(id, options = {}) {
        const localVarPath = this.basePath + '/rbs/v1/subscriptions/{id}/suspend'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling suspendSubscription.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "SuspendSubscriptionResponse");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Update a Subscription by Subscription Id
     * @summary Update a Subscription
     * @param id Subscription Id
     * @param updateSubscription Update Subscription
     * @param {*} [options] Override http request options.
     */
    updateSubscription(id, updateSubscription, options = {}) {
        const localVarPath = this.basePath + '/rbs/v1/subscriptions/{id}'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling updateSubscription.');
        }
        // verify required parameter 'updateSubscription' is not null or undefined
        if (updateSubscription === null || updateSubscription === undefined) {
            throw new Error('Required parameter updateSubscription was null or undefined when calling updateSubscription.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'PATCH',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(updateSubscription, "UpdateSubscription")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "UpdateSubscriptionResponse");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
}
exports.SubscriptionsApi = SubscriptionsApi;
var SubscriptionsFollowOnsApiApiKeys;
(function (SubscriptionsFollowOnsApiApiKeys) {
})(SubscriptionsFollowOnsApiApiKeys = exports.SubscriptionsFollowOnsApiApiKeys || (exports.SubscriptionsFollowOnsApiApiKeys = {}));
class SubscriptionsFollowOnsApi {
    constructor(basePathOrUsername, password, basePath) {
        this._basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new VoidAuth(),
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    set useQuerystring(value) {
        this._useQuerystring = value;
    }
    set basePath(basePath) {
        this._basePath = basePath;
    }
    get basePath() {
        return this._basePath;
    }
    setDefaultAuthentication(auth) {
        this.authentications.default = auth;
    }
    setApiKey(key, value) {
        this.authentications[SubscriptionsFollowOnsApiApiKeys[key]].apiKey = value;
    }
    /**
     * Create a new Subscription based on the Request Id of an existing successful Transaction.
     * @summary Create a Follow-On Subscription
     * @param requestId Request Id of an existing successful Transaction
     * @param createSubscriptionRequest
     * @param {*} [options] Override http request options.
     */
    createFollowOnSubscription(requestId, createSubscriptionRequest, options = {}) {
        const localVarPath = this.basePath + '/rbs/v1/subscriptions/follow-ons/{requestId}'
            .replace('{' + 'requestId' + '}', encodeURIComponent(String(requestId)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        // verify required parameter 'requestId' is not null or undefined
        if (requestId === null || requestId === undefined) {
            throw new Error('Required parameter requestId was null or undefined when calling createFollowOnSubscription.');
        }
        // verify required parameter 'createSubscriptionRequest' is not null or undefined
        if (createSubscriptionRequest === null || createSubscriptionRequest === undefined) {
            throw new Error('Required parameter createSubscriptionRequest was null or undefined when calling createFollowOnSubscription.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(createSubscriptionRequest, "CreateSubscriptionRequest1")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "CreateSubscriptionResponse");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Get details of the Subscription being created based on the Request Id of an existing successful Transaction.
     * @summary Get a Follow-On Subscription
     * @param requestId Request Id of an existing successful Transaction
     * @param {*} [options] Override http request options.
     */
    getFollowOnSubscription(requestId, options = {}) {
        const localVarPath = this.basePath + '/rbs/v1/subscriptions/follow-ons/{requestId}'
            .replace('{' + 'requestId' + '}', encodeURIComponent(String(requestId)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        // verify required parameter 'requestId' is not null or undefined
        if (requestId === null || requestId === undefined) {
            throw new Error('Required parameter requestId was null or undefined when calling getFollowOnSubscription.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "GetSubscriptionResponse1");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
}
exports.SubscriptionsFollowOnsApi = SubscriptionsFollowOnsApi;
var TaxesApiApiKeys;
(function (TaxesApiApiKeys) {
})(TaxesApiApiKeys = exports.TaxesApiApiKeys || (exports.TaxesApiApiKeys = {}));
class TaxesApi {
    constructor(basePathOrUsername, password, basePath) {
        this._basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new VoidAuth(),
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    set useQuerystring(value) {
        this._useQuerystring = value;
    }
    set basePath(basePath) {
        this._basePath = basePath;
    }
    get basePath() {
        return this._basePath;
    }
    setDefaultAuthentication(auth) {
        this.authentications.default = auth;
    }
    setApiKey(key, value) {
        this.authentications[TaxesApiApiKeys[key]].apiKey = value;
    }
    /**
     * The tax calculation service provides real-time sales tax and VAT calculations for orders placed with your business worldwide.  It enhances your ability to conduct business globally and enables you to avoid the risk and complexity of managing online tax calculation.  The service supports product-based tax rules and exemptions for goods and services.  The tax rates are updated twice a month and calculations include sub-level detail (rates per taxing jurisdiction, names and types of jurisdictions). Implementation guidance, list of supported countries, and information on tax reporting are in the [Tax User Guide](https://developer.cybersource.com/docs/cybs/en-us/tax-calculation/developer/all/rest/tax-calculation/tax-overview.html). The availability of API features for a merchant can depend on the portfolio configuration and may need to be enabled at the portfolio level before they can be added to merchant accounts.
     * @summary Calculate Taxes
     * @param taxRequest
     * @param {*} [options] Override http request options.
     */
    calculateTax(taxRequest, options = {}) {
        const localVarPath = this.basePath + '/vas/v2/tax';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        // verify required parameter 'taxRequest' is not null or undefined
        if (taxRequest === null || taxRequest === undefined) {
            throw new Error('Required parameter taxRequest was null or undefined when calling calculateTax.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(taxRequest, "TaxRequest")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "VasV2PaymentsPost201Response");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Pass the Tax Request ID in the PATCH request to void the committed tax calculation.
     * @summary Void Taxes
     * @param voidTaxRequest
     * @param id The tax ID returned from a previous request.
     * @param {*} [options] Override http request options.
     */
    voidTax(voidTaxRequest, id, options = {}) {
        const localVarPath = this.basePath + '/vas/v2/tax/{id}'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        // verify required parameter 'voidTaxRequest' is not null or undefined
        if (voidTaxRequest === null || voidTaxRequest === undefined) {
            throw new Error('Required parameter voidTaxRequest was null or undefined when calling voidTax.');
        }
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling voidTax.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'PATCH',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(voidTaxRequest, "VoidTaxRequest")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "VasV2TaxVoid200Response");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
}
exports.TaxesApi = TaxesApi;
var TokenApiApiKeys;
(function (TokenApiApiKeys) {
})(TokenApiApiKeys = exports.TokenApiApiKeys || (exports.TokenApiApiKeys = {}));
class TokenApi {
    constructor(basePathOrUsername, password, basePath) {
        this._basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new VoidAuth(),
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    set useQuerystring(value) {
        this._useQuerystring = value;
    }
    set basePath(basePath) {
        this._basePath = basePath;
    }
    get basePath() {
        return this._basePath;
    }
    setDefaultAuthentication(auth) {
        this.authentications.default = auth;
    }
    setApiKey(key, value) {
        this.authentications[TokenApiApiKeys[key]].apiKey = value;
    }
    /**
     * Retrieves Card Art for a specific Instrument Identifier. The Card Art is a visual representation of the cardholder's payment card. Card Art is only available if a Network Token is successfully provisioned.
     * @summary Retrieve Card Art
     * @param instrumentIdentifierId The Id of an Instrument Identifier.
     * @param tokenProvider The token provider.
     * @param assetType The type of asset.
     * @param {*} [options] Override http request options.
     */
    getCardArtAsset(instrumentIdentifierId, tokenProvider, assetType, options = {}) {
        const localVarPath = this.basePath + '/tms/v2/tokens/{instrumentIdentifierId}/{tokenProvider}/assets/{assetType}'
            .replace('{' + 'instrumentIdentifierId' + '}', encodeURIComponent(String(instrumentIdentifierId)))
            .replace('{' + 'tokenProvider' + '}', encodeURIComponent(String(tokenProvider)))
            .replace('{' + 'assetType' + '}', encodeURIComponent(String(assetType)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        // verify required parameter 'instrumentIdentifierId' is not null or undefined
        if (instrumentIdentifierId === null || instrumentIdentifierId === undefined) {
            throw new Error('Required parameter instrumentIdentifierId was null or undefined when calling getCardArtAsset.');
        }
        // verify required parameter 'tokenProvider' is not null or undefined
        if (tokenProvider === null || tokenProvider === undefined) {
            throw new Error('Required parameter tokenProvider was null or undefined when calling getCardArtAsset.');
        }
        // verify required parameter 'assetType' is not null or undefined
        if (assetType === null || assetType === undefined) {
            throw new Error('Required parameter assetType was null or undefined when calling getCardArtAsset.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "InlineResponse200");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * |  |  |  |     | --- | --- | --- |     |**Token**<br>A Token can represent your tokenized Customer, Payment Instrument or Instrument Identifier information.|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|**Payment Credentials**<br>Contains payment information such as the network token, generated cryptogram for Visa & MasterCard or dynamic CVV for Amex in a JSON Web Encryption (JWE) response.<br>Your system can use this API to retrieve the Payment Credentials for an existing Customer, Payment Instrument or Instrument Identifier.
     * @summary Generate Payment Credentials for a TMS Token
     * @param tokenId The Id of a token representing a Customer, Payment Instrument or Instrument Identifier.
     * @param postPaymentCredentialsRequest
     * @param profileId The Id of a profile containing user specific TMS configuration.
     * @param {*} [options] Override http request options.
     */
    postTokenPaymentCredentials(tokenId, postPaymentCredentialsRequest, profileId, options = {}) {
        const localVarPath = this.basePath + '/tms/v2/tokens/{tokenId}/payment-credentials'
            .replace('{' + 'tokenId' + '}', encodeURIComponent(String(tokenId)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        // verify required parameter 'tokenId' is not null or undefined
        if (tokenId === null || tokenId === undefined) {
            throw new Error('Required parameter tokenId was null or undefined when calling postTokenPaymentCredentials.');
        }
        // verify required parameter 'postPaymentCredentialsRequest' is not null or undefined
        if (postPaymentCredentialsRequest === null || postPaymentCredentialsRequest === undefined) {
            throw new Error('Required parameter postPaymentCredentialsRequest was null or undefined when calling postTokenPaymentCredentials.');
        }
        localVarHeaderParams['profile-id'] = ObjectSerializer.serialize(profileId, "string");
        Object.assign(localVarHeaderParams, options.headers);
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(postPaymentCredentialsRequest, "PostPaymentCredentialsRequest")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "string");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
}
exports.TokenApi = TokenApi;
var TokenizedCardApiApiKeys;
(function (TokenizedCardApiApiKeys) {
})(TokenizedCardApiApiKeys = exports.TokenizedCardApiApiKeys || (exports.TokenizedCardApiApiKeys = {}));
class TokenizedCardApi {
    constructor(basePathOrUsername, password, basePath) {
        this._basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new VoidAuth(),
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    set useQuerystring(value) {
        this._useQuerystring = value;
    }
    set basePath(basePath) {
        this._basePath = basePath;
    }
    get basePath() {
        return this._basePath;
    }
    setDefaultAuthentication(auth) {
        this.authentications.default = auth;
    }
    setApiKey(key, value) {
        this.authentications[TokenizedCardApiApiKeys[key]].apiKey = value;
    }
    /**
     * |  |  |  | | --- | --- | --- | | The Network Token will attempt to be deleted from the card association and if successful the corresponding TMS Network Token will be deleted.
     * @summary Delete a Tokenized Card
     * @param tokenizedCardId The Id of a tokenized card.
     * @param profileId The Id of a profile containing user specific TMS configuration.
     * @param {*} [options] Override http request options.
     */
    deleteTokenizedCard(tokenizedCardId, profileId, options = {}) {
        const localVarPath = this.basePath + '/tms/v2/tokenized-cards/{tokenizedCardId}'
            .replace('{' + 'tokenizedCardId' + '}', encodeURIComponent(String(tokenizedCardId)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        // verify required parameter 'tokenizedCardId' is not null or undefined
        if (tokenizedCardId === null || tokenizedCardId === undefined) {
            throw new Error('Required parameter tokenizedCardId was null or undefined when calling deleteTokenizedCard.');
        }
        localVarHeaderParams['profile-id'] = ObjectSerializer.serialize(profileId, "string");
        Object.assign(localVarHeaderParams, options.headers);
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'DELETE',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * |  |  |  | | --- | --- | --- | |**Tokenized Cards**<br>A Tokenized Card represents a network token. Network tokens perform better than regular card numbers and they are not necessarily invalidated when a cardholder loses their card, or it expires.
     * @summary Retrieve a Tokenized Card
     * @param tokenizedCardId The Id of a tokenized card.
     * @param profileId The Id of a profile containing user specific TMS configuration.
     * @param {*} [options] Override http request options.
     */
    getTokenizedCard(tokenizedCardId, profileId, options = {}) {
        const localVarPath = this.basePath + '/tms/v2/tokenized-cards/{tokenizedCardId}'
            .replace('{' + 'tokenizedCardId' + '}', encodeURIComponent(String(tokenizedCardId)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        // verify required parameter 'tokenizedCardId' is not null or undefined
        if (tokenizedCardId === null || tokenizedCardId === undefined) {
            throw new Error('Required parameter tokenizedCardId was null or undefined when calling getTokenizedCard.');
        }
        localVarHeaderParams['profile-id'] = ObjectSerializer.serialize(profileId, "string");
        Object.assign(localVarHeaderParams, options.headers);
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "TokenizedcardRequest");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * |  |  |  | | --- | --- | --- | |**Tokenized cards**<br>A Tokenized card represents a network token. Network tokens perform better than regular card numbers and they are not necessarily invalidated when a cardholder loses their card, or it expires.
     * @summary Create a Tokenized Card
     * @param tokenizedcardRequest
     * @param profileId The Id of a profile containing user specific TMS configuration.
     * @param {*} [options] Override http request options.
     */
    postTokenizedCard(tokenizedcardRequest, profileId, options = {}) {
        const localVarPath = this.basePath + '/tms/v2/tokenized-cards';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        // verify required parameter 'tokenizedcardRequest' is not null or undefined
        if (tokenizedcardRequest === null || tokenizedcardRequest === undefined) {
            throw new Error('Required parameter tokenizedcardRequest was null or undefined when calling postTokenizedCard.');
        }
        localVarHeaderParams['profile-id'] = ObjectSerializer.serialize(profileId, "string");
        Object.assign(localVarHeaderParams, options.headers);
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(tokenizedcardRequest, "TokenizedcardRequest")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "TokenizedcardRequest");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
}
exports.TokenizedCardApi = TokenizedCardApi;
var TransactionBatchesApiApiKeys;
(function (TransactionBatchesApiApiKeys) {
})(TransactionBatchesApiApiKeys = exports.TransactionBatchesApiApiKeys || (exports.TransactionBatchesApiApiKeys = {}));
class TransactionBatchesApi {
    constructor(basePathOrUsername, password, basePath) {
        this._basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new VoidAuth(),
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    set useQuerystring(value) {
        this._useQuerystring = value;
    }
    set basePath(basePath) {
        this._basePath = basePath;
    }
    get basePath() {
        return this._basePath;
    }
    setDefaultAuthentication(auth) {
        this.authentications.default = auth;
    }
    setApiKey(key, value) {
        this.authentications[TransactionBatchesApiApiKeys[key]].apiKey = value;
    }
    /**
     * Provides real-time detailed status information about the transactions that you previously uploaded in the Business Center or processed with the Offline Transaction File Submission service.
     * @summary Get Transaction Details for a given Batch Id
     * @param id The batch id assigned for the template.
     * @param uploadDate Date in which the original batch file was uploaded. Date must be in ISO-8601 format. Please refer the following link to know more about ISO 8601 format.[Rfc Date Format](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#anchor14) **Example date format:**  - yyyy-MM-dd
     * @param status Allows you to filter by rejected response.  Valid values: - Rejected
     * @param {*} [options] Override http request options.
     */
    getTransactionBatchDetails(id, uploadDate, status, options = {}) {
        const localVarPath = this.basePath + '/pts/v1/transaction-batch-details/{id}'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getTransactionBatchDetails.');
        }
        if (uploadDate !== undefined) {
            localVarQueryParameters['uploadDate'] = ObjectSerializer.serialize(uploadDate, "string");
        }
        if (status !== undefined) {
            localVarQueryParameters['status'] = ObjectSerializer.serialize(status, "string");
        }
        Object.assign(localVarHeaderParams, options.headers);
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * This API provides details like upload date, completion date, transaction count and accepted and rejected transaction count of the individual batch file using the batch id
     * @summary Get Individual Batch File
     * @param id The batch id assigned for the template.
     * @param {*} [options] Override http request options.
     */
    getTransactionBatchId(id, options = {}) {
        const localVarPath = this.basePath + '/pts/v1/transaction-batches/{id}'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getTransactionBatchId.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "PtsV1TransactionBatchesIdGet200Response");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Provide the date and time search range to get a list of Batch Files ready for settlement
     * @summary Get a List of Batch Files
     * @param startTime Valid report Start Time in **ISO 8601 format** Please refer the following link to know more about ISO 8601 format.[Rfc Date Format](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#anchor14)   **Example date format:**   - yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZZ
     * @param endTime Valid report End Time in **ISO 8601 format** Please refer the following link to know more about ISO 8601 format.[Rfc Date Format](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#anchor14)   **Example date format:**   - yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZZ
     * @param {*} [options] Override http request options.
     */
    getTransactionBatches(startTime, endTime, options = {}) {
        const localVarPath = this.basePath + '/pts/v1/transaction-batches';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        // verify required parameter 'startTime' is not null or undefined
        if (startTime === null || startTime === undefined) {
            throw new Error('Required parameter startTime was null or undefined when calling getTransactionBatches.');
        }
        // verify required parameter 'endTime' is not null or undefined
        if (endTime === null || endTime === undefined) {
            throw new Error('Required parameter endTime was null or undefined when calling getTransactionBatches.');
        }
        if (startTime !== undefined) {
            localVarQueryParameters['startTime'] = ObjectSerializer.serialize(startTime, "Date");
        }
        if (endTime !== undefined) {
            localVarQueryParameters['endTime'] = ObjectSerializer.serialize(endTime, "Date");
        }
        Object.assign(localVarHeaderParams, options.headers);
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "PtsV1TransactionBatchesGet200Response");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
}
exports.TransactionBatchesApi = TransactionBatchesApi;
var TransactionDetailsApiApiKeys;
(function (TransactionDetailsApiApiKeys) {
})(TransactionDetailsApiApiKeys = exports.TransactionDetailsApiApiKeys || (exports.TransactionDetailsApiApiKeys = {}));
class TransactionDetailsApi {
    constructor(basePathOrUsername, password, basePath) {
        this._basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new VoidAuth(),
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    set useQuerystring(value) {
        this._useQuerystring = value;
    }
    set basePath(basePath) {
        this._basePath = basePath;
    }
    get basePath() {
        return this._basePath;
    }
    setDefaultAuthentication(auth) {
        this.authentications.default = auth;
    }
    setApiKey(key, value) {
        this.authentications[TransactionDetailsApiApiKeys[key]].apiKey = value;
    }
    /**
     * Include the Request ID in the GET request to retrieve the transaction details.
     * @summary Retrieve a Transaction
     * @param id Request ID.
     * @param {*} [options] Override http request options.
     */
    getTransaction(id, options = {}) {
        const localVarPath = this.basePath + '/tss/v2/transactions/{id}'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getTransaction.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "TssV2TransactionsGet200Response");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
}
exports.TransactionDetailsApi = TransactionDetailsApi;
var TransientTokenDataApiApiKeys;
(function (TransientTokenDataApiApiKeys) {
})(TransientTokenDataApiApiKeys = exports.TransientTokenDataApiApiKeys || (exports.TransientTokenDataApiApiKeys = {}));
class TransientTokenDataApi {
    constructor(basePathOrUsername, password, basePath) {
        this._basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new VoidAuth(),
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    set useQuerystring(value) {
        this._useQuerystring = value;
    }
    set basePath(basePath) {
        this._basePath = basePath;
    }
    get basePath() {
        return this._basePath;
    }
    setDefaultAuthentication(auth) {
        this.authentications.default = auth;
    }
    setApiKey(key, value) {
        this.authentications[TransientTokenDataApiApiKeys[key]].apiKey = value;
    }
    /**
     * Retrieve the Payment data captured by Unified Checkout. This API is used to retrieve the detailed data represented by the Transient Token. This API will return PCI payment data captured by the Unified Checkout platform.
     * @summary Get Payment Credentials
     * @param paymentCredentialsReference The paymentCredentialsReference field contained within the Transient token returned from a successful Unified Checkout transaction
     * @param {*} [options] Override http request options.
     */
    getPaymentCredentialsForTransientToken(paymentCredentialsReference, options = {}) {
        const localVarPath = this.basePath + '/flex/v2/payment-credentials/{paymentCredentialsReference}'
            .replace('{' + 'paymentCredentialsReference' + '}', encodeURIComponent(String(paymentCredentialsReference)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        // verify required parameter 'paymentCredentialsReference' is not null or undefined
        if (paymentCredentialsReference === null || paymentCredentialsReference === undefined) {
            throw new Error('Required parameter paymentCredentialsReference was null or undefined when calling getPaymentCredentialsForTransientToken.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "string");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Retrieve the data captured by Unified Checkout. This API is used to retrieve the detailed data represented by the Transient Token. This API will not return PCI payment data (PAN). Include the Request ID in the GET request to retrieve the transaction details.
     * @summary Get Transient Token Data
     * @param transientToken Transient Token returned by the Unified Checkout application.
     * @param {*} [options] Override http request options.
     */
    getTransactionForTransientToken(transientToken, options = {}) {
        const localVarPath = this.basePath + '/up/v1/payment-details/{transientToken}'
            .replace('{' + 'transientToken' + '}', encodeURIComponent(String(transientToken)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        // verify required parameter 'transientToken' is not null or undefined
        if (transientToken === null || transientToken === undefined) {
            throw new Error('Required parameter transientToken was null or undefined when calling getTransactionForTransientToken.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
}
exports.TransientTokenDataApi = TransientTokenDataApi;
var UnifiedCheckoutCaptureContextApiApiKeys;
(function (UnifiedCheckoutCaptureContextApiApiKeys) {
})(UnifiedCheckoutCaptureContextApiApiKeys = exports.UnifiedCheckoutCaptureContextApiApiKeys || (exports.UnifiedCheckoutCaptureContextApiApiKeys = {}));
class UnifiedCheckoutCaptureContextApi {
    constructor(basePathOrUsername, password, basePath) {
        this._basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new VoidAuth(),
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    set useQuerystring(value) {
        this._useQuerystring = value;
    }
    set basePath(basePath) {
        this._basePath = basePath;
    }
    get basePath() {
        return this._basePath;
    }
    setDefaultAuthentication(auth) {
        this.authentications.default = auth;
    }
    setApiKey(key, value) {
        this.authentications[UnifiedCheckoutCaptureContextApiApiKeys[key]].apiKey = value;
    }
    /**
     * Unified Checkout is a powerful product within the Digital Acceptance Suite. Unified Checkout is designed to assist merchants with the adoption and inclusion of digital payments within their payment acceptance page. With Unified Checkout Integration you can add digital payment methods to create familiar, convenient and seamless payment experiences that are designed to reduce checkout friction and increase conversions. Click to Pay Drop-in UI is built on the Unified Checkout platform. For more information about Unified Checkout, see the [Unified Checkout Developer Guides Page](https://developer.cybersource.com/docs/cybs/en-us/unified-checkout/developer/all/rest/unified-checkout/uc-intro.html). For examples on how to integrate Unified Checkout within your webpage please see our [GitHub Unified Checkout Samples](https://github.com/CyberSource/cybersource-unified-checkout-sample-java). Generate Unified Checkout Capture Context Generate a one-time use capture context used for the invocation of Unified Checkout. The Request wil contain all of the parameters for how Unified Checkout will operate within a client webpage. The resulting payload will be a JWT signed object that can be used to initiate Unified Checkout or Click to Pay Drop-in UI within a web page
     * @summary Generate Unified Checkout Capture Context
     * @param generateUnifiedCheckoutCaptureContextRequest
     * @param {*} [options] Override http request options.
     */
    generateUnifiedCheckoutCaptureContext(generateUnifiedCheckoutCaptureContextRequest, options = {}) {
        const localVarPath = this.basePath + '/up/v1/capture-contexts';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        // verify required parameter 'generateUnifiedCheckoutCaptureContextRequest' is not null or undefined
        if (generateUnifiedCheckoutCaptureContextRequest === null || generateUnifiedCheckoutCaptureContextRequest === undefined) {
            throw new Error('Required parameter generateUnifiedCheckoutCaptureContextRequest was null or undefined when calling generateUnifiedCheckoutCaptureContext.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(generateUnifiedCheckoutCaptureContextRequest, "GenerateUnifiedCheckoutCaptureContextRequest")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "string");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
}
exports.UnifiedCheckoutCaptureContextApi = UnifiedCheckoutCaptureContextApi;
var UserManagementApiApiKeys;
(function (UserManagementApiApiKeys) {
})(UserManagementApiApiKeys = exports.UserManagementApiApiKeys || (exports.UserManagementApiApiKeys = {}));
class UserManagementApi {
    constructor(basePathOrUsername, password, basePath) {
        this._basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new VoidAuth(),
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    set useQuerystring(value) {
        this._useQuerystring = value;
    }
    set basePath(basePath) {
        this._basePath = basePath;
    }
    get basePath() {
        return this._basePath;
    }
    setDefaultAuthentication(auth) {
        this.authentications.default = auth;
    }
    setApiKey(key, value) {
        this.authentications[UserManagementApiApiKeys[key]].apiKey = value;
    }
    /**
     * This endpoint is deprecated. Please use the search end point.
     * @summary Get User Information - Deprecated
     * @param organizationId This is the orgId of the organization which the user belongs to.
     * @param userName User ID of the user you want to get details on.
     * @param permissionId permission that you are trying to search user on.
     * @param roleId role of the user you are trying to search on.
     * @param {*} [options] Override http request options.
     */
    getUsers(organizationId, userName, permissionId, roleId, options = {}) {
        const localVarPath = this.basePath + '/ums/v1/users';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        if (organizationId !== undefined) {
            localVarQueryParameters['organizationId'] = ObjectSerializer.serialize(organizationId, "string");
        }
        if (userName !== undefined) {
            localVarQueryParameters['userName'] = ObjectSerializer.serialize(userName, "string");
        }
        if (permissionId !== undefined) {
            localVarQueryParameters['permissionId'] = ObjectSerializer.serialize(permissionId, "string");
        }
        if (roleId !== undefined) {
            localVarQueryParameters['roleId'] = ObjectSerializer.serialize(roleId, "string");
        }
        Object.assign(localVarHeaderParams, options.headers);
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "UmsV1UsersGet200Response");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
}
exports.UserManagementApi = UserManagementApi;
var UserManagementSearchApiApiKeys;
(function (UserManagementSearchApiApiKeys) {
})(UserManagementSearchApiApiKeys = exports.UserManagementSearchApiApiKeys || (exports.UserManagementSearchApiApiKeys = {}));
class UserManagementSearchApi {
    constructor(basePathOrUsername, password, basePath) {
        this._basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new VoidAuth(),
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    set useQuerystring(value) {
        this._useQuerystring = value;
    }
    set basePath(basePath) {
        this._basePath = basePath;
    }
    get basePath() {
        return this._basePath;
    }
    setDefaultAuthentication(auth) {
        this.authentications.default = auth;
    }
    setApiKey(key, value) {
        this.authentications[UserManagementSearchApiApiKeys[key]].apiKey = value;
    }
    /**
     * This endpoint is to get all the user information depending on the filter criteria passed in request body.
     * @summary Search User Information
     * @param searchRequest
     * @param {*} [options] Override http request options.
     */
    searchUsers(searchRequest, options = {}) {
        const localVarPath = this.basePath + '/ums/v1/users/search';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        // verify required parameter 'searchRequest' is not null or undefined
        if (searchRequest === null || searchRequest === undefined) {
            throw new Error('Required parameter searchRequest was null or undefined when calling searchUsers.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(searchRequest, "SearchRequest")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "UmsV1UsersGet200Response");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
}
exports.UserManagementSearchApi = UserManagementSearchApi;
var VerificationApiApiKeys;
(function (VerificationApiApiKeys) {
})(VerificationApiApiKeys = exports.VerificationApiApiKeys || (exports.VerificationApiApiKeys = {}));
class VerificationApi {
    constructor(basePathOrUsername, password, basePath) {
        this._basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new VoidAuth(),
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    set useQuerystring(value) {
        this._useQuerystring = value;
    }
    set basePath(basePath) {
        this._basePath = basePath;
    }
    get basePath() {
        return this._basePath;
    }
    setDefaultAuthentication(auth) {
        this.authentications.default = auth;
    }
    setApiKey(key, value) {
        this.authentications[VerificationApiApiKeys[key]].apiKey = value;
    }
    /**
     * This call checks customer data against specified watch lists to ensure export compliance.
     * @summary Validate export compliance
     * @param validateExportComplianceRequest
     * @param {*} [options] Override http request options.
     */
    validateExportCompliance(validateExportComplianceRequest, options = {}) {
        const localVarPath = this.basePath + '/risk/v1/export-compliance-inquiries';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        // verify required parameter 'validateExportComplianceRequest' is not null or undefined
        if (validateExportComplianceRequest === null || validateExportComplianceRequest === undefined) {
            throw new Error('Required parameter validateExportComplianceRequest was null or undefined when calling validateExportCompliance.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(validateExportComplianceRequest, "ValidateExportComplianceRequest")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "RiskV1ExportComplianceInquiriesPost201Response");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * This call verifies that the customer address submitted is valid.
     * @summary Verify customer address
     * @param verifyCustomerAddressRequest
     * @param {*} [options] Override http request options.
     */
    verifyCustomerAddress(verifyCustomerAddressRequest, options = {}) {
        const localVarPath = this.basePath + '/risk/v1/address-verifications';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        // verify required parameter 'verifyCustomerAddressRequest' is not null or undefined
        if (verifyCustomerAddressRequest === null || verifyCustomerAddressRequest === undefined) {
            throw new Error('Required parameter verifyCustomerAddressRequest was null or undefined when calling verifyCustomerAddress.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(verifyCustomerAddressRequest, "VerifyCustomerAddressRequest")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "RiskV1AddressVerificationsPost201Response");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
}
exports.VerificationApi = VerificationApi;
var VoidApiApiKeys;
(function (VoidApiApiKeys) {
})(VoidApiApiKeys = exports.VoidApiApiKeys || (exports.VoidApiApiKeys = {}));
class VoidApi {
    constructor(basePathOrUsername, password, basePath) {
        this._basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new VoidAuth(),
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    set useQuerystring(value) {
        this._useQuerystring = value;
    }
    set basePath(basePath) {
        this._basePath = basePath;
    }
    get basePath() {
        return this._basePath;
    }
    setDefaultAuthentication(auth) {
        this.authentications.default = auth;
    }
    setApiKey(key, value) {
        this.authentications[VoidApiApiKeys[key]].apiKey = value;
    }
    /**
     * This is to void a previous payment, capture, refund, or credit that merchant does not receive a reply(Mostly due to timeout). To use this feature/API, make sure to pass unique value to field - clientReferenceInformation -> transactionId in your payment, capture, refund, or credit API call and use same transactionId in this API request payload to reverse the payment.
     * @summary Timeout Void
     * @param mitVoidRequest
     * @param {*} [options] Override http request options.
     */
    mitVoid(mitVoidRequest, options = {}) {
        const localVarPath = this.basePath + '/pts/v2/voids';
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        // verify required parameter 'mitVoidRequest' is not null or undefined
        if (mitVoidRequest === null || mitVoidRequest === undefined) {
            throw new Error('Required parameter mitVoidRequest was null or undefined when calling mitVoid.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(mitVoidRequest, "MitVoidRequest")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "PtsV2PaymentsVoidsPost201Response");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Refund a capture API is only used, if you have requested Capture independenlty using [/pts/v2/payments/{id}/captures](https://developer.cybersource.com/api-reference-assets/index.html#payments_capture) API call. Include the capture ID in the POST request to cancel the capture.
     * @summary Void a Capture
     * @param voidCaptureRequest
     * @param id The capture ID returned from a previous capture request.
     * @param {*} [options] Override http request options.
     */
    voidCapture(voidCaptureRequest, id, options = {}) {
        const localVarPath = this.basePath + '/pts/v2/captures/{id}/voids'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        // verify required parameter 'voidCaptureRequest' is not null or undefined
        if (voidCaptureRequest === null || voidCaptureRequest === undefined) {
            throw new Error('Required parameter voidCaptureRequest was null or undefined when calling voidCapture.');
        }
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling voidCapture.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(voidCaptureRequest, "VoidCaptureRequest")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "PtsV2PaymentsVoidsPost201Response");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Include the credit ID in the POST request to cancel the credit.
     * @summary Void a Credit
     * @param voidCreditRequest
     * @param id The credit ID returned from a previous credit request.
     * @param {*} [options] Override http request options.
     */
    voidCredit(voidCreditRequest, id, options = {}) {
        const localVarPath = this.basePath + '/pts/v2/credits/{id}/voids'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        // verify required parameter 'voidCreditRequest' is not null or undefined
        if (voidCreditRequest === null || voidCreditRequest === undefined) {
            throw new Error('Required parameter voidCreditRequest was null or undefined when calling voidCredit.');
        }
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling voidCredit.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(voidCreditRequest, "VoidCreditRequest")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "PtsV2PaymentsVoidsPost201Response");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Void a Payment API is only used, if you have requested Authorization and Capture together in [/pts/v2/payments](https://developer.cybersource.com/api-reference-assets/index.html#payments_payments) API call. Include the payment ID in the POST request to cancel the payment.
     * @summary Void a Payment
     * @param voidPaymentRequest
     * @param id The payment ID returned from a previous payment request.
     * @param {*} [options] Override http request options.
     */
    voidPayment(voidPaymentRequest, id, options = {}) {
        const localVarPath = this.basePath + '/pts/v2/payments/{id}/voids'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        // verify required parameter 'voidPaymentRequest' is not null or undefined
        if (voidPaymentRequest === null || voidPaymentRequest === undefined) {
            throw new Error('Required parameter voidPaymentRequest was null or undefined when calling voidPayment.');
        }
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling voidPayment.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(voidPaymentRequest, "VoidPaymentRequest")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "PtsV2PaymentsVoidsPost201Response");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Include the refund ID in the POST request to cancel the refund.
     * @summary Void a Refund
     * @param voidRefundRequest
     * @param id The refund ID returned from a previous refund request.
     * @param {*} [options] Override http request options.
     */
    voidRefund(voidRefundRequest, id, options = {}) {
        const localVarPath = this.basePath + '/pts/v2/refunds/{id}/voids'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        // verify required parameter 'voidRefundRequest' is not null or undefined
        if (voidRefundRequest === null || voidRefundRequest === undefined) {
            throw new Error('Required parameter voidRefundRequest was null or undefined when calling voidRefund.');
        }
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling voidRefund.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(voidRefundRequest, "VoidRefundRequest")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "PtsV2PaymentsVoidsPost201Response");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
}
exports.VoidApi = VoidApi;
